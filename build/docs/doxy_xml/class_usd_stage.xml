<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_stage" kind="class" language="C++" prot="public">
    <compoundname>UsdStage</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="stage_8h" local="no">stage.h</includes>
    <innerclass refid="struct_usd_stage_1_1___extra_resolve_info" prot="private">UsdStage::_ExtraResolveInfo</innerclass>
    <innerclass refid="struct_usd_stage_1_1___has_type_specific_resolution" prot="public">UsdStage::_HasTypeSpecificResolution</innerclass>
    <innerclass refid="struct_usd_stage_1_1___is_edit_target_mappable" prot="private">UsdStage::_IsEditTargetMappable</innerclass>
    <innerclass refid="struct_usd_stage_1_1___resolve_info_resolver" prot="private">UsdStage::_ResolveInfoResolver</innerclass>
    <innerclass refid="struct_usd_stage_1_1___tbb_hash_eq" prot="private">UsdStage::_TbbHashEq</innerclass>
      <sectiondef kind="user-defined">
      <header>Lifetime Management</header>
      <description><para><anchor id="class_usd_stage_1Usd_lifetimeManagement"/></para>
</description>
      <memberdef kind="enum" id="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" prot="public" static="no" strong="no">
        <type></type>
        <name>InitialLoadSet</name>
        <enumvalue id="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" prot="public">
          <name>LoadAll</name>
          <briefdescription>
<para>Load all loadable prims. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ae9175fcb3934ccf24235741a50556ab3" prot="public">
          <name>LoadNone</name>
          <briefdescription>
<para>Load no loadable prims. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies the initial set of prims to load when opening a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="165" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a50c3f0a412aee9decb010787e5ca2e3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateNew</definition>
        <argsstring>(const std::string &amp;identifier, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Create a new stage with root layer <computeroutput>identifier</computeroutput>, destroying potentially existing files with that identifier; it is considered an error if an existing, open layer is present with this identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_1aad57cd44403a4f95a2bb6c730fa1b0f5" kindref="member">SdfLayer::CreateNew()</ref></para>
</simplesect>
Invoking an overload that does not take a <computeroutput>sessionLayer</computeroutput> argument will create a stage with an anonymous in-memory session layer. To create a stage without a session layer, pass TfNullPtr (or None in python) as the <computeroutput>sessionLayer</computeroutput> argument. The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when creating the root layer at <computeroutput>identifier</computeroutput> and whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will create the root layer with no context bound, then create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" kindref="member">ArResolver::CreateDefaultContextForAsset</ref> with the root layer&apos;s repository path if the layer has one, otherwise its resolved path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1eb7cf4c070e56d173246c5bdc1ff8e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateNew</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayerHandle &amp;sessionLayer, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7f4f7c64e079d5954115616207b82331" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateNew</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa31488d38bf86c3e211a33de56a01902" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateNew</definition>
        <argsstring>(const std::string &amp;identifier, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7fabfeea7271b1e6e5f308865f146391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateInMemory</definition>
        <argsstring>(InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateInMemory</name>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Creates a new stage only in memory, analogous to creating an anonymous <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when creating the root layer at <computeroutput>identifier</computeroutput> and whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will create the root layer with no context bound, then create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a1524962aa020859a589e786b1ad3c28f" kindref="member">ArResolver::CreateDefaultContext</ref>.</para>
<para>The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
Invoking an overload that does not take a <computeroutput>sessionLayer</computeroutput> argument will create a stage with an anonymous in-memory session layer. To create a stage without a session layer, pass TfNullPtr (or None in python) as the <computeroutput>sessionLayer</computeroutput> argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3c646259d7ddb2092e9cd62fc44bd57e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateInMemory</definition>
        <argsstring>(const std::string &amp;identifier, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateInMemory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa7ec81bad99609b7ca1795630dbbdf61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateInMemory</definition>
        <argsstring>(const std::string &amp;identifier, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateInMemory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5ec917a246b9918a97c0eb6a590a2442" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateInMemory</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayerHandle &amp;sessionLayer, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateInMemory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a975784d8b8d9a44fbfdde692554d6b25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr CreateInMemory</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>CreateInMemory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const std::string &amp;filePath, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Attempt to find a matching existing stage in a cache if <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> objects exist on the stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Failing that, create a new stage and recursively compose prims defined within and referenced by the layer at <computeroutput>filePath</computeroutput>, which must already exist.</para>
<para>The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when opening the root layer at <computeroutput>filePath</computeroutput> and whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will open the root layer with no context bound, then create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" kindref="member">ArResolver::CreateDefaultContextForAsset</ref> with the layer&apos;s repository path if the layer has one, otherwise its resolved path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad91922a33aa5d206c8f5209fac757162" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const std::string &amp;filePath, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ade1d90d759a085022ba76ff910815320" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const std::string &amp;filePath, UsdStagePopulationMask const &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Create a new stage and recursively compose prims defined within and referenced by the layer at <computeroutput>filePath</computeroutput> which must already exist, subject to <computeroutput>mask</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>These <ref refid="class_usd_stage_1ade1d90d759a085022ba76ff910815320" kindref="member">OpenMasked()</ref> methods do not automatically consult or populate <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> s.</para>
<para>The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when opening the root layer at <computeroutput>filePath</computeroutput> and whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will open the root layer with no context bound, then create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" kindref="member">ArResolver::CreateDefaultContextForAsset</ref> with the layer&apos;s repository path if the layer has one, otherwise its resolved path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad891becaa0378fe97a07bbcfd07f7aef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const std::string &amp;filePath, const ArResolverContext &amp;pathResolverContext, UsdStagePopulationMask const &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad3e185c150ee38ae13fb76115863d108" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Open a stage rooted at <computeroutput>rootLayer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to find a stage that matches the passed arguments in a <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> if <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> objects exist on the calling stack. If a matching stage is found, return that stage. Otherwise, create a new stage rooted at <computeroutput>rootLayer</computeroutput>.</para>
<para>Invoking an overload that does not take a <computeroutput>sessionLayer</computeroutput> argument will create a stage with an anonymous in-memory session layer. To create a stage without a session layer, pass TfNullPtr (or None in python) as the <computeroutput>sessionLayer</computeroutput> argument.</para>
<para>The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" kindref="member">ArResolver::CreateDefaultContextForAsset</ref> with the layer&apos;s repository path if the layer has one, otherwise its resolved path.</para>
<para>When searching for a matching stage in bound <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> s, only the provided arguments matter for cache lookup. For example, if only a root layer (or a root layer file path) is provided, the first stage found in any cache that has that root layer is returned. So, for example if you require that the stage have no session layer, you must explicitly specify TfNullPtr (or None in python) for the sessionLayer argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a14a0be35427859ec030deedc150b5467" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ab7df274caa1c118d2b7dadce1b600fe1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af5f83e49d0ca636b1a655192a42e9379" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr Open</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, InitialLoadSet load=LoadAll)</argsstring>
        <name>Open</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1ab01611f8cf724ea56a2a162ac1cb07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const UsdStagePopulationMask &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
<para>Open a stage rooted at <computeroutput>rootLayer</computeroutput> and with limited population subject to <computeroutput>mask</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>These <ref refid="class_usd_stage_1ade1d90d759a085022ba76ff910815320" kindref="member">OpenMasked()</ref> methods do not automatically consult or populate <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> s.</para>
<para>Invoking an overload that does not take a <computeroutput>sessionLayer</computeroutput> argument will create a stage with an anonymous in-memory session layer. To create a stage without a session layer, pass TfNullPtr (or None in python) as the <computeroutput>sessionLayer</computeroutput> argument.</para>
<para>The initial set of prims to load on the stage can be specified using the <computeroutput>load</computeroutput> parameter. <simplesect kind="see"><para><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">UsdStage::InitialLoadSet</ref>.</para>
</simplesect>
If <computeroutput>pathResolverContext</computeroutput> is provided it will be bound when whenever asset path resolution is done for this stage, regardless of what other context may be bound at that time. Otherwise Usd will create a context for all future asset path resolution for the stage by calling <ref refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" kindref="member">ArResolver::CreateDefaultContextForAsset</ref> with the layer&apos;s repository path if the layer has one, otherwise its resolved path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae79d5c92dda3279271005de91d9e7950" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const UsdStagePopulationMask &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9833139e1c034c82bd06740ea1658847" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const ArResolverContext &amp;pathResolverContext, const UsdStagePopulationMask &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a86262226faba041d3c5a9cf6b99768bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>static USD_API UsdStageRefPtr OpenMasked</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, const UsdStagePopulationMask &amp;mask, InitialLoadSet load=LoadAll)</argsstring>
        <name>OpenMasked</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
          <defval><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" kindref="member">LoadAll</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa7ae008cf02c54df2beee58c1228c5be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool IsSupportedFile</definition>
        <argsstring>(const std::string &amp;filePath)</argsstring>
        <name>IsSupportedFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <briefdescription>
<para>Indicates whether the specified file is supported by <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a cheap way to determine whether a file might be open-able with <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open</ref>. It is purely based on the given <computeroutput>filePath</computeroutput> and does not open the file or perform analysis on the contents. As such, <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open</ref> may still fail even if this function returns true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af08d70412c489100b8243cf5d0e61f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USD_API</type>
        <definition>virtual USD_API ~UsdStage</definition>
        <argsstring>()</argsstring>
        <name>~UsdStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Reload</definition>
        <argsstring>()</argsstring>
        <name>Reload</name>
        <briefdescription>
<para>Calls <ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">SdfLayer::Reload</ref> on all layers contributing to this stage, except session layers and sublayers of session layers. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes non-session sublayers, references and payloads. Note that reloading anonymous layers clears their content, so invoking <ref refid="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" kindref="member">Reload()</ref> on a stage constructed via <ref refid="class_usd_stage_1a7fabfeea7271b1e6e5f308865f146391" kindref="member">CreateInMemory()</ref> will clear its root layer.</para>
<para><simplesect kind="note"><para>This method is considered a mutation, which has potentially global effect! Unlike the various <ref refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" kindref="member">Load()</ref> methods whose actions affect only <bold>this stage</bold>, <ref refid="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" kindref="member">Reload()</ref> may cause layers to change their contents, and because layers are global resources shared by potentially many Stages, calling <ref refid="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" kindref="member">Reload()</ref> on one stage may result in a mutation to any number of stages. In general, unless you are highly confident your stage is the only consumer of its layers, you should only call <ref refid="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" kindref="member">Reload()</ref> when you are assured no other threads may be reading from any Stages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="437" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Layer Serialization</header>
      <description><para><anchor id="class_usd_stage_1Usd_layerSerialization"/></para>
<para>Functions for saving changes to layers that contribute opinions to this stage. Layers may also be saved by calling <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">SdfLayer::Save</ref> or exported to a new file by calling <ref refid="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" kindref="member">SdfLayer::Export</ref>. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1adefa2f7ebfc4d8c09f0cd54419aa36c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Save</definition>
        <argsstring>()</argsstring>
        <name>Save</name>
        <briefdescription>
<para>Calls <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">SdfLayer::Save</ref> on all dirty layers contributing to this stage except session layers and sublayers of session layers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will emit a warning and skip each dirty anonymous layer it encounters, since anonymous layers cannot be saved with <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">SdfLayer::Save</ref>. These layers must be manually exported by calling <ref refid="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" kindref="member">SdfLayer::Export</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a94b48dc29e9c66e3efed8cb42ff18618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SaveSessionLayers</definition>
        <argsstring>()</argsstring>
        <name>SaveSessionLayers</name>
        <briefdescription>
<para>Calls <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">SdfLayer::Save</ref> on all dirty session layers and sublayers of session layers contributing to this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will emit a warning and skip each dirty anonymous layer it encounters, since anonymous layers cannot be saved with <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">SdfLayer::Save</ref>. These layers must be manually exported by calling <ref refid="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" kindref="member">SdfLayer::Export</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="481" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variant Management</header>
      <description><para><anchor id="class_usd_stage_1Usd_variantManagement"/></para>
<para>These methods provide control over the policy to use when composing prims that specify a variant set but do not specify a selection.</para>
<para>The first is to declare a list of preferences in plugInfo.json metadata on a plugin using this structure:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">&quot;UsdVariantFallbacks&quot;:<sp/>{<sp/><sp/><sp/><sp/>#<sp/>top<sp/>level<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;shadingComplexity&quot;:<sp/>[<sp/><sp/>#<sp/>example<sp/>variant<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;full&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>example<sp/>fallback<sp/>#1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;light&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>example<sp/>fallback<sp/>#2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">},</highlight></codeline>
</programlisting></para>
<para>This example ensures that we will get the &quot;full&quot; shadingComplexity for any prim with a shadingComplexity VariantSet that doesn&apos;t otherwise specify a selection, <emphasis>and</emphasis> has a &quot;full&quot; variant; if its shadingComplexity does not have a &quot;full&quot; variant, but <emphasis>does</emphasis> have a &quot;light&quot; variant, then the selection will be &quot;light&quot;. In other words, the entries in the &quot;shadingComplexity&quot; list in the plugInfo.json represent a priority-ordered list of fallback selections.</para>
<para>The plugin metadata is discovered and applied before the first <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> is constructed in a given process. It can be defined in any plugin. However, if multiple plugins express contrary lists for the same named variant set, the result is undefined.</para>
<para>The plugin metadata approach is useful for ensuring that sensible default behavior applies across a pipeline without requiring every script and binary to explicitly configure every VariantSet that subscribes to fallback in the pipeline. There may be times when you want to override this behavior in a particular script <ndash/> for example, a pipeline script that knows it wants to entirely ignore shading in order to minimize processing time <ndash/> which motivates the second approach.</para>
<para><ref refid="class_usd_stage_1addaffc14d334e5cb1e3a90c02fadcaf6" kindref="member">SetGlobalVariantFallbacks()</ref> provides a way to override, for the entire process, which fallbacks to use in subsequently constructed <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> instances. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1a34d1d78fe8e31f0ba439d2265d694af5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="usd_2pcp_2types_8h_1a72ae489ff9c2601b5f289baf87cece28" kindref="member">PcpVariantFallbackMap</ref></type>
        <definition>static USD_API PcpVariantFallbackMap GetGlobalVariantFallbacks</definition>
        <argsstring>()</argsstring>
        <name>GetGlobalVariantFallbacks</name>
        <briefdescription>
<para>Get the global variant fallback preferences used in new UsdStages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1addaffc14d334e5cb1e3a90c02fadcaf6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>static USD_API void SetGlobalVariantFallbacks</definition>
        <argsstring>(const PcpVariantFallbackMap &amp;fallbacks)</argsstring>
        <name>SetGlobalVariantFallbacks</name>
        <param>
          <type>const <ref refid="usd_2pcp_2types_8h_1a72ae489ff9c2601b5f289baf87cece28" kindref="member">PcpVariantFallbackMap</ref> &amp;</type>
          <declname>fallbacks</declname>
        </param>
        <briefdescription>
<para>Set the global variant fallback preferences used in new UsdStages. </para>
        </briefdescription>
        <detaileddescription>
<para>This overrides any fallbacks configured in plugin metadata, and only affects stages created after this call.</para>
<para><simplesect kind="note"><para>This does not affect existing UsdStages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="543" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Working Set Management</header>
      <description><para><anchor id="class_usd_stage_1Usd_workingSetManagement"/></para>
<para>The following rules apply to all Load/Unload methods: <verbatim>- Loading an already loaded prim is legal, though may result in
  some recomposition cost. Similarly, unloading an unloaded prim
  is legal.
- Specifying a path that does not target a prim is legal as long it
  has an ancestor present in the scene graph (other than the
  absolute root). If the given path has no such ancestor, it is an
  error.
- Specifying a path to an inactive prim is an error.
- Specifying a path to a prototype prim or a prim within a
  prototype is an error.
</verbatim></para>
<para>If an instance prim (or a path identifying a prim descendant to an instance) is encountered during a Load/Unload operation, these functions may cause instancing to change on the stage in order to ensure that no other instances are affected. The load/unload rules that affect a given prim hierarchy are considered when determining which prims can be instanced together. Instance sharing occurs when different instances have equivalent load rules.</para>
<para>The <ref refid="class_usd_stage_1a8a32bd6860d97da6d01d6dfaa7eb8e2c" kindref="member">GetLoadRules()</ref> and <ref refid="class_usd_stage_1acf86347f816ee4ac98dbf16e3b09ff2a" kindref="member">SetLoadRules()</ref> provide direct low-level access to the <ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref> that govern payload inclusion on a stage. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim Load</definition>
        <argsstring>(const SdfPath &amp;path=SdfPath::AbsoluteRootPath(), UsdLoadPolicy policy=UsdLoadWithDescendants)</argsstring>
        <name>Load</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
          <defval><ref refid="class_sdf_path_1a9e77b565c10268c2b55f92559f621606" kindref="member">SdfPath::AbsoluteRootPath</ref>()</defval>
        </param>
        <param>
          <type><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5a" kindref="member">UsdLoadPolicy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5aa42997d996674df3a923bbe2683fea7fb" kindref="member">UsdLoadWithDescendants</ref></defval>
        </param>
        <briefdescription>
<para>Modify this stage&apos;s load rules to load the prim at <computeroutput>path</computeroutput>, its ancestors, and all of its descendants if <computeroutput>policy</computeroutput> is UsdLoadWithDescendants. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>policy</computeroutput> is UsdLoadWithoutDescendants, then payloads on descendant prims are not loaded.</para>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aedb4cb8d8943a759152b70f08e340a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Unload</definition>
        <argsstring>(const SdfPath &amp;path=SdfPath::AbsoluteRootPath())</argsstring>
        <name>Unload</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
          <defval><ref refid="class_sdf_path_1a9e77b565c10268c2b55f92559f621606" kindref="member">SdfPath::AbsoluteRootPath</ref>()</defval>
        </param>
        <briefdescription>
<para>Modify this stage&apos;s load rules to unload the prim and its descendants specified by <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1305b94bed8097515432ee78061ff009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void LoadAndUnload</definition>
        <argsstring>(const SdfPathSet &amp;loadSet, const SdfPathSet &amp;unloadSet, UsdLoadPolicy policy=UsdLoadWithDescendants)</argsstring>
        <name>LoadAndUnload</name>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>loadSet</declname>
        </param>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>unloadSet</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5a" kindref="member">UsdLoadPolicy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5aa42997d996674df3a923bbe2683fea7fb" kindref="member">UsdLoadWithDescendants</ref></defval>
        </param>
        <briefdescription>
<para>Unload and load the given path sets. </para>
        </briefdescription>
        <detaileddescription>
<para>The effect is as if the unload set were processed first followed by the load set.</para>
<para>This is equivalent to calling <ref refid="class_usd_stage_1aedb4cb8d8943a759152b70f08e340a2c" kindref="member">UsdStage::Unload</ref> for each item in the unloadSet followed by <ref refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" kindref="member">UsdStage::Load</ref> for each item in the loadSet, however this method is more efficient as all operations are committed in a single batch. The <computeroutput>policy</computeroutput> argument is described in the documentation for <ref refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" kindref="member">Load()</ref>.</para>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3051c81e353b2d151d360b24b8f9fb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathSet</type>
        <definition>USD_API SdfPathSet GetLoadSet</definition>
        <argsstring>()</argsstring>
        <name>GetLoadSet</name>
        <briefdescription>
<para>Returns a set of all loaded paths. </para>
        </briefdescription>
        <detaileddescription>
<para>The paths returned are both those that have been explicitly loaded and those that were loaded as a result of dependencies, ancestors or descendants of explicitly loaded paths.</para>
<para>This method does not return paths to inactive prims.</para>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1adf1b7f717f7418333440a0a318793b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathSet</type>
        <definition>USD_API SdfPathSet FindLoadable</definition>
        <argsstring>(const SdfPath &amp;rootPath=SdfPath::AbsoluteRootPath())</argsstring>
        <name>FindLoadable</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>rootPath</declname>
          <defval><ref refid="class_sdf_path_1a9e77b565c10268c2b55f92559f621606" kindref="member">SdfPath::AbsoluteRootPath</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns an SdfPathSet of all paths that can be loaded. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this method does not return paths to inactive prims as they cannot be loaded.</para>
<para>The set returned includes loaded and unloaded paths. To determine the set of unloaded paths, one can diff this set with the current load set, for example: <programlisting><codeline><highlight class="normal">SdfPathSet<sp/>loaded<sp/>=<sp/>stage-&gt;GetLoadSet(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>=<sp/>stage-&gt;FindLoadable(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result;</highlight></codeline>
<codeline><highlight class="normal">std::set_difference(loaded.begin(),<sp/>loaded.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all.begin(),<sp/>all.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::inserter(result,<sp/>result.end()));</highlight></codeline>
</programlisting></para>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a8a32bd6860d97da6d01d6dfaa7eb8e2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref> const  &amp;</type>
        <definition>UsdStageLoadRules const&amp; GetLoadRules</definition>
        <argsstring>() const</argsstring>
        <name>GetLoadRules</name>
        <briefdescription>
<para>Return the stage&apos;s current <ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref> governing payload inclusion. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="653" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acf86347f816ee4ac98dbf16e3b09ff2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetLoadRules</definition>
        <argsstring>(UsdStageLoadRules const &amp;rules)</argsstring>
        <name>SetLoadRules</name>
        <param>
          <type><ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref> const &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref> to govern payload inclusion on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This rebuilds the stage&apos;s entire prim hierarchy to follow <computeroutput>rules</computeroutput>.</para>
<para>Note that subsequent calls to <ref refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" kindref="member">Load()</ref>, <ref refid="class_usd_stage_1aedb4cb8d8943a759152b70f08e340a2c" kindref="member">Unload()</ref>, <ref refid="class_usd_stage_1a1305b94bed8097515432ee78061ff009" kindref="member">LoadAndUnload()</ref> will modify this stages load rules as described in the documentation for those member functions.</para>
<para>See <ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Working Set Management</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3eb4c2665d6ccecf2998b76041a9a3df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>UsdStagePopulationMask GetPopulationMask</definition>
        <argsstring>() const</argsstring>
        <name>GetPopulationMask</name>
        <briefdescription>
<para>Return this stage&apos;s population mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="670" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="670" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a2a431cb32a2d50de05ac206c474606cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetPopulationMask</definition>
        <argsstring>(UsdStagePopulationMask const &amp;mask)</argsstring>
        <name>SetPopulationMask</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Set this stage&apos;s population mask and recompose the stage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5d76e23eede294e2988de22b45edc3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void ExpandPopulationMask</definition>
        <argsstring>(Usd_PrimFlagsPredicate const &amp;traversalPredicate, std::function&lt; bool(UsdRelationship const &amp;)&gt; const &amp;relPred=nullptr, std::function&lt; bool(UsdAttribute const &amp;)&gt; const &amp;attrPred=nullptr)</argsstring>
        <name>ExpandPopulationMask</name>
        <param>
          <type>Usd_PrimFlagsPredicate const &amp;</type>
          <declname>traversalPredicate</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> const &amp;)&gt; const &amp;</type>
          <declname>relPred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;)&gt; const &amp;</type>
          <declname>attrPred</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Expand this stage&apos;s population mask to include the targets of all relationships that pass <computeroutput>relPred</computeroutput> and connections to all attributes that pass <computeroutput>attrPred</computeroutput> recursively. </para>
        </briefdescription>
        <detaileddescription>
<para>The attributes and relationships are those on all the prims found by traversing the stage according to <computeroutput>traversalPredicate</computeroutput>. If <computeroutput>relPred</computeroutput> is null, include all relationship targets; if <computeroutput>attrPred</computeroutput> is null, include all connections.</para>
<para>This function can be used, for example, to expand a population mask for a given prim to include bound materials, if those bound materials are expressed as relationships or attribute connections.</para>
<para>See also <ref refid="class_usd_prim_1ac665feb1bef08159e2bc178181e2017a" kindref="member">UsdPrim::FindAllRelationshipTargetPaths()</ref> and <ref refid="class_usd_prim_1a70a83830cef17b3c56ea4027d6a39599" kindref="member">UsdPrim::FindAllAttributeConnectionPaths()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a35f4bcec4c4fbd7366d4be6de13efc6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void ExpandPopulationMask</definition>
        <argsstring>(std::function&lt; bool(UsdRelationship const &amp;)&gt; const &amp;relPred=nullptr, std::function&lt; bool(UsdAttribute const &amp;)&gt; const &amp;attrPred=nullptr)</argsstring>
        <name>ExpandPopulationMask</name>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> const &amp;)&gt; const &amp;</type>
          <declname>relPred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;)&gt; const &amp;</type>
          <declname>attrPred</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This convenience overload invokes <ref refid="class_usd_stage_1a5d76e23eede294e2988de22b45edc3e2" kindref="member">ExpandPopulationMask()</ref> with the UsdPrimDefaultPredicate traversal predicate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="701" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Prim Access, Creation and Mutation</header>
      <description><para><anchor id="class_usd_stage_1Usd_primManagement"/> All of the methods in this group that accept a prim path as argument require paths in the namespace of the stage&apos;s root layer, <emphasis>regardless</emphasis> of what the currently active <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> is set to. In other words, a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> always presents a composed view of its scene, and all prim operations are specified in the composed namespace. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1a5567a555616cd3bf5fd2fc787f31accc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetPseudoRoot</definition>
        <argsstring>() const</argsstring>
        <name>GetPseudoRoot</name>
        <briefdescription>
<para>Return the stage&apos;s &quot;pseudo-root&quot; prim, whose name is defined by Usd. </para>
        </briefdescription>
        <detaileddescription>
<para>The stage&apos;s named root prims are namespace children of this prim, which exists to make the namespace hierarchy a tree instead of a forest. This simplifies algorithms that want to traverse all prims.</para>
<para>A <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> always has a pseudo-root prim, unless there was an error opening or creating the stage, in which case this method returns an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a64ee78980b91d82dddfae78300276bca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetDefaultPrim</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultPrim</name>
        <briefdescription>
<para>Return the root <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> on this stage whose name is the root layer&apos;s defaultPrim metadata&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>Return an invalid prim if there is no such prim or if the root layer&apos;s defaultPrim metadata is unset or is not a valid prim name. Note that this function only examines this stage&apos;s rootLayer. It does not consider sublayers of the rootLayer. See also <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">SdfLayer::GetDefaultPrim()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a82b260faf91fbf721b0503075f2861e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetDefaultPrim</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>SetDefaultPrim</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Set the default prim layer metadata in this stage&apos;s root layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is shorthand for: <programlisting><codeline><highlight class="normal">stage-&gt;GetRootLayer()-&gt;SetDefaultPrim(prim.GetName());</highlight></codeline>
</programlisting> Note that this function always authors to the stage&apos;s root layer. To author to a different layer, use the <ref refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" kindref="member">SdfLayer::SetDefaultPrim()</ref> API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a76429ce323495ced5ec3fe5d8b240d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void ClearDefaultPrim</definition>
        <argsstring>()</argsstring>
        <name>ClearDefaultPrim</name>
        <briefdescription>
<para>Clear the default prim layer metadata in this stage&apos;s root layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is shorthand for: <programlisting><codeline><highlight class="normal">stage-&gt;GetRootLayer()-&gt;ClearDefaultPrim();</highlight></codeline>
</programlisting> Note that this function always authors to the stage&apos;s root layer. To author to a different layer, use the <ref refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" kindref="member">SdfLayer::SetDefaultPrim()</ref> API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="757" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a66e5592905d6be9b2be90a7dcc450873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasDefaultPrim</definition>
        <argsstring>() const</argsstring>
        <name>HasDefaultPrim</name>
        <briefdescription>
<para>Return true if this stage&apos;s root layer has an authored opinion for the default prim layer metadata. </para>
        </briefdescription>
        <detaileddescription>
<para>This is shorthand for: <programlisting><codeline><highlight class="normal">stage-&gt;GetRootLayer()-&gt;HasDefaultPrim();</highlight></codeline>
</programlisting> Note that this function only consults the stage&apos;s root layer. To consult a different layer, use the <ref refid="class_sdf_layer_1a5c5be6e4d708fe1aeec63877cd1e56ff" kindref="member">SdfLayer::HasDefaultPrim()</ref> API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6ceb556070804b712c01a7968f925735" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetPrimAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetPrimAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> at <computeroutput>path</computeroutput>, or an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> if none exists. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>path</computeroutput> indicates a prim beneath an instance, returns an instance proxy prim if a prim exists at the corresponding path in that instance&apos;s prototype.</para>
<para>Unlike <ref refid="class_usd_stage_1a29523207b89d9a7e47146e4a57c9b1b0" kindref="member">OverridePrim()</ref> and <ref refid="class_usd_stage_1a6151ae804f7145e451d9aafdde347730" kindref="member">DefinePrim()</ref>, this method will never author scene description, and therefore is safe to use as a &quot;reader&quot; in the Usd multi-threading model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="779" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_object" kindref="compound">UsdObject</ref></type>
        <definition>USD_API UsdObject GetObjectAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetObjectAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="class_usd_object" kindref="compound">UsdObject</ref> at <computeroutput>path</computeroutput>, or an invalid <ref refid="class_usd_object" kindref="compound">UsdObject</ref> if none exists. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>path</computeroutput> indicates a prim beneath an instance, returns an instance proxy prim if a prim exists at the corresponding path in that instance&apos;s prototype. If <computeroutput>path</computeroutput> indicates a property beneath a child of an instance, returns a property whose parent prim is an instance proxy prim.</para>
<para>Example:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(UsdObject<sp/>obj<sp/>=<sp/>stage-&gt;GetObjectAtPath(path))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(UsdPrim<sp/>prim<sp/>=<sp/>obj.As&lt;UsdPrim&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>things<sp/>with<sp/>prim</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(UsdProperty<sp/>prop<sp/>=<sp/>obj.As&lt;UsdProperty&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>things<sp/>with<sp/>property.<sp/>We<sp/>can<sp/>also<sp/>cast<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>UsdRelationship<sp/>or<sp/>UsdAttribute<sp/>using<sp/>this<sp/>same<sp/>pattern.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>No<sp/>object<sp/>at<sp/>specified<sp/>path</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5e639a0e2f163cb857149604f6042bd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_property" kindref="compound">UsdProperty</ref></type>
        <definition>USD_API UsdProperty GetPropertyAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetPropertyAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> at <computeroutput>path</computeroutput>, or an invalid <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> if none exists. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <programlisting filename=".cpp"><codeline><highlight class="normal">stage.GetObjectAtPath(path).As&lt;<ref refid="class_usd_property" kindref="compound">UsdProperty</ref>&gt;();</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" kindref="member">GetObjectAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a61e1347e76e9f3e269f8be1df3e99a42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetAttributeAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetAttributeAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> at <computeroutput>path</computeroutput>, or an invalid <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> if none exists. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <programlisting filename=".cpp"><codeline><highlight class="normal">stage.GetObjectAtPath(path).As&lt;<ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>&gt;();</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" kindref="member">GetObjectAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aea0c4da4c5bc2470f0c5a271215c2b01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship GetRelationshipAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetRelationshipAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> at <computeroutput>path</computeroutput>, or an invalid <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> if none exists. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <programlisting filename=".cpp"><codeline><highlight class="normal">stage.GetObjectAtPath(path).As&lt;<ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref>&gt;();</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" kindref="member">GetObjectAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>USD_API UsdPrimRange Traverse</definition>
        <argsstring>()</argsstring>
        <name>Traverse</name>
        <briefdescription>
<para>Traverse the active, loaded, defined, non-abstract prims on this stage depth-first. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" kindref="member">Traverse()</ref> returns a <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> , which allows low-latency traversal, with the ability to prune subtrees from traversal. It is python iterable, so in its simplest form, one can do:</para>
<para><programlisting filename=".py"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>prim<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stage.Traverse():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>prim.GetPath()</highlight></codeline>
</programlisting></para>
<para>If either a pre-and-post-order traversal or a traversal rooted at a particular prim is desired, construct a <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> directly.</para>
<para>This is equivalent to <ref refid="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" kindref="member">UsdPrimRange::Stage()</ref> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a69332eeeb1970d4908a72d0c8fd0c3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>USD_API UsdPrimRange Traverse</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;predicate)</argsstring>
        <name>Traverse</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Traverse the prims on this stage subject to <computeroutput>predicate</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" kindref="member">UsdPrimRange::Stage()</ref> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a71559921b1e48949207817b2fd8bd01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>USD_API UsdPrimRange TraverseAll</definition>
        <argsstring>()</argsstring>
        <name>TraverseAll</name>
        <briefdescription>
<para>Traverse all the prims on this stage depth-first. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" kindref="member">Traverse()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" kindref="member">UsdPrimRange::Stage()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="888" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a29523207b89d9a7e47146e4a57c9b1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim OverridePrim</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>OverridePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> at <computeroutput>path</computeroutput> exists on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim already exists at <computeroutput>path</computeroutput>, return it. Otherwise author <emphasis>SdfPrimSpecs</emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierOver</emphasis> and empty <emphasis>typeName</emphasis> at the current EditTarget to create this prim and any nonexistent ancestors, then return it.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>If an ancestor of <computeroutput>path</computeroutput> identifies an <emphasis>inactive</emphasis> prim, author scene description as described above but return an invalid prim, since the resulting prim is descendant to an inactive prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6151ae804f7145e451d9aafdde347730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim DefinePrim</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;typeName=TfToken())</argsstring>
        <name>DefinePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>typeName</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim at <computeroutput>path</computeroutput> is already defined on this stage and <computeroutput>typeName</computeroutput> is empty or equal to the existing prim&apos;s typeName, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and <computeroutput>typeName</computeroutput> for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace or one of the ancestors of <computeroutput>path</computeroutput> is inactive on the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>), issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not match the supplied <computeroutput>typeName</computeroutput>, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="935" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9437bc67851eb38bade51612f3aaa41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim CreateClassPrim</definition>
        <argsstring>(const SdfPath &amp;rootPrimPath)</argsstring>
        <name>CreateClassPrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>rootPrimPath</declname>
        </param>
        <briefdescription>
<para>Author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierClass</emphasis> for the class at root prim path <computeroutput>path</computeroutput> at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The current EditTarget must have UsdEditTarget::IsLocalLayer() == true.</para>
<para>The given <emphasis>path</emphasis> must be an absolute, root prim path that does not contain any variant selections.</para>
<para>If a defined (<ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) non-class prim already exists at <computeroutput>path</computeroutput>, issue an error and return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>.</para>
<para>If it is impossible to author the necessary PrimSpec, issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac605faad8fc2673263775b1eecad2955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemovePrim</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>RemovePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Remove all scene description for the given <computeroutput>path</computeroutput> and its subtree <emphasis>in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method does not do what you might initially think! Calling this function will not necessarily cause the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> at <computeroutput>path</computeroutput> on this stage to disappear. Completely eradicating a prim from a composition can be an involved process, involving edits to many contributing layers, some of which (in many circumstances) will not be editable by a client. This method is a surgical instrument that <emphasis>can</emphasis> be used iteratively to effect complete removal of a prim and its subtree from namespace, assuming the proper permissions are acquired, but more commonly it is used to perform layer-level operations; e.g.: ensuring that a given layer (as expressed by a <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>) provides no opinions for a prim and its subtree.</para>
<para>Generally, if your eye is attracted to this method, you probably want to instead use UsdPrim::SetActive(false) , which will provide the <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">composed effect</ref> of removing the prim and its subtree from the composition, without actually removing any scene description, which as a bonus, means that the effect is reversible at a later time! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a20a0fffe4e3a5ac7f053b1da6d17c866" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataConstPtr</type>
        <definition>Usd_PrimDataConstPtr _GetPrimDataAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_GetPrimDataAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="842" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6796bcfdadd7813d795a99783f60cb0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataPtr</type>
        <definition>Usd_PrimDataPtr _GetPrimDataAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>_GetPrimDataAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acc10ded5ad2c52cf2055ffee531a4080" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataConstPtr</type>
        <definition>Usd_PrimDataConstPtr _GetPrimDataAtPathOrInPrototype</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_GetPrimDataAtPathOrInPrototype</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="849" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af90bbe470d4c9a51bd3191f37f16100f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt;</type>
        <definition>std::vector&lt;UsdPrim&gt; _GetInstancesForPrototype</definition>
        <argsstring>(const UsdPrim &amp;prototype) const</argsstring>
        <name>_GetInstancesForPrototype</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prototype</declname>
        </param>
        <briefdescription>
<para>See documentation on <ref refid="class_usd_prim_1a2efe317839e2ca127ab26887d4cb0a99" kindref="member">UsdPrim::GetInstances()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="853" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Layers and EditTargets</header>
      <description><para><anchor id="class_usd_stage_1Usd_layerManagement"/></para>
</description>
      <memberdef kind="function" id="class_usd_stage_1afcfb38efd355873d96fd2488da4dcddd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandle</type>
        <definition>USD_API SdfLayerHandle GetSessionLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetSessionLayer</name>
        <briefdescription>
<para>Return this stage&apos;s root session layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae694960a036c724e285d044aea210d15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandle</type>
        <definition>USD_API SdfLayerHandle GetRootLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetRootLayer</name>
        <briefdescription>
<para>Return this stage&apos;s root layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1adabe8c6ff9089b848260f4cf43958cc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref></type>
        <definition>USD_API ArResolverContext GetPathResolverContext</definition>
        <argsstring>() const</argsstring>
        <name>GetPathResolverContext</name>
        <briefdescription>
<para>Return the path resolver context for all path resolution during composition of this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for external clients that want to resolve paths with the same context as this stage, or create new stages with the same context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5d23f48d36d27f3f8e5099a8c655fa4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::string</type>
        <definition>USD_API std::string ResolveIdentifierToEditTarget</definition>
        <argsstring>(std::string const &amp;identifier) const</argsstring>
        <name>ResolveIdentifierToEditTarget</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Resolve the given identifier using this stage&apos;s <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> and the layer of its <ref refid="class_usd_stage_1a16cb44251a2c5964583fd9076de3f753" kindref="member">GetEditTarget()</ref> as an anchor for relative references (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>@./siblingFile.usd@).</para>
<para><simplesect kind="return"><para>a non-empty string containing either the same identifier that was passed in (if the identifier refers to an already-opened layer or an &quot;anonymous&quot;, in-memory layer), or a resolved layer filepath. If the identifier was not resolvable, return the empty string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9dfcae900fd07e3344e087ea1bd478cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandleVector</type>
        <definition>USD_API SdfLayerHandleVector GetLayerStack</definition>
        <argsstring>(bool includeSessionLayers=true) const</argsstring>
        <name>GetLayerStack</name>
        <param>
          <type>bool</type>
          <declname>includeSessionLayers</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return this stage&apos;s local layers in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>includeSessionLayers</emphasis> is true, return the linearized strong-to-weak sublayers rooted at the stage&apos;s session layer followed by the linearized strong-to-weak sublayers rooted at this stage&apos;s root layer. If <emphasis>includeSessionLayers</emphasis> is false, omit the sublayers rooted at this stage&apos;s session layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1020" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3b7937dd0b3f1d546e93ad4219916de9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandleVector</type>
        <definition>USD_API SdfLayerHandleVector GetUsedLayers</definition>
        <argsstring>(bool includeClipLayers=true) const</argsstring>
        <name>GetUsedLayers</name>
        <param>
          <type>bool</type>
          <declname>includeClipLayers</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of all of the layers <emphasis>currently</emphasis> consumed by this stage, as determined by the composition arcs that were traversed to compose and populate the stage. </para>
        </briefdescription>
        <detaileddescription>
<para>The list of consumed layers will change with the stage&apos;s load-set and variant selections, so the return value should be considered only a snapshot. The return value will include the stage&apos;s session layer, if it has one. If <emphasis>includeClipLayers</emphasis> is true, we will also include all of the layers that this stage has had to open so far to perform value resolution of attributes affected by <ref refid="_usd__page__value_clips" kindref="compound">Value Clips</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1034" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aaff8c7b5cd9cdee23c5209c0ec7281b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasLocalLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;layer) const</argsstring>
        <name>HasLocalLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Return true if <emphasis>layer</emphasis> is one of the layers in this stage&apos;s local, root layerStack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a16cb44251a2c5964583fd9076de3f753" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> &amp;</type>
        <definition>USD_API const UsdEditTarget&amp; GetEditTarget</definition>
        <argsstring>() const</argsstring>
        <name>GetEditTarget</name>
        <briefdescription>
<para>Return the stage&apos;s EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1043" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a39a51571cd00e6f38572f7f55a101cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></type>
        <definition>USD_API UsdEditTarget GetEditTargetForLocalLayer</definition>
        <argsstring>(size_t i)</argsstring>
        <name>GetEditTargetForLocalLayer</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> for editing the layer at index <emphasis>i</emphasis> in the layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This edit target will incorporate any layer time offset that applies to the sublayer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acceed6daf2f94a536ff3bc8d4bfcaf45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></type>
        <definition>USD_API UsdEditTarget GetEditTargetForLocalLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;layer)</argsstring>
        <name>GetEditTargetForLocalLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> for editing the given local <emphasis>layer</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given layer appears more than once in the layer stack, the time offset to the first occurrence will be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1055" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac90008efb0f2b624fcff43de00188792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetEditTarget</definition>
        <argsstring>(const UsdEditTarget &amp;editTarget)</argsstring>
        <name>SetEditTarget</name>
        <param>
          <type>const <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> &amp;</type>
          <declname>editTarget</declname>
        </param>
        <briefdescription>
<para>Set the stage&apos;s EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>editTarget.IsLocalLayer()</emphasis>, check to see if it&apos;s a layer in this stage&apos;s local LayerStack. If not, issue an error and do nothing. If <emphasis>editTarget</emphasis> is invalid, issue an error and do nothing. If <emphasis>editTarget</emphasis> differs from the stage&apos;s current EditTarget, set the EditTarget and send UsdNotice::StageChangedEditTarget. Otherwise do nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1064" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a8af4162fe11cc6a5f21a39e770d397c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void MuteLayer</definition>
        <argsstring>(const std::string &amp;layerIdentifier)</argsstring>
        <name>MuteLayer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerIdentifier</declname>
        </param>
        <briefdescription>
<para>Mute the layer identified by <computeroutput>layerIdentifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Muted layers are ignored by the stage; they do not participate in value resolution or composition and do not appear in any LayerStack. If the root layer of a reference or payload LayerStack is muted, the behavior is as if the muted layer did not exist, which means a composition error will be generated.</para>
<para>A canonical identifier for each layer in <computeroutput>layersToMute</computeroutput> will be computed using <ref refid="class_ar_resolver_1a68e5ae6385d1733b79f734c59682ff61" kindref="member">ArResolver::CreateIdentifier</ref> using the stage&apos;s root layer as the anchoring asset. Any layer encountered during composition with the same identifier will be considered muted and ignored.</para>
<para>Note that muting a layer will cause this stage to release all references to that layer. If no other client is holding on to references to that layer, it will be unloaded. In this case, if there are unsaved edits to the muted layer, those edits are lost.</para>
<para>Since anonymous layers are not serialized, muting an anonymous layer will cause that layer and its contents to be lost in this case.</para>
<para>Muting a layer that has not been used by this stage is not an error. If that layer is encountered later, muting will take effect and that layer will be ignored.</para>
<para>The root layer of this stage may not be muted; attempting to do so will generate a coding error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a2f8158f35f1f76b227f51f875db4c5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void UnmuteLayer</definition>
        <argsstring>(const std::string &amp;layerIdentifier)</argsstring>
        <name>UnmuteLayer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerIdentifier</declname>
        </param>
        <briefdescription>
<para>Unmute the layer identified by <computeroutput>layerIdentifier</computeroutput> if it had previously been muted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1098" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa84244f8ed7ba7f037b8c9d9256cfeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void MuteAndUnmuteLayers</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;muteLayers, const std::vector&lt; std::string &gt; &amp;unmuteLayers)</argsstring>
        <name>MuteAndUnmuteLayers</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>muteLayers</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>unmuteLayers</declname>
        </param>
        <briefdescription>
<para>Mute and unmute the layers identified in <computeroutput>muteLayers</computeroutput> and <computeroutput>unmuteLayers</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to calling <ref refid="class_usd_stage_1a2f8158f35f1f76b227f51f875db4c5d1" kindref="member">UsdStage::UnmuteLayer</ref> for each layer in <computeroutput>unmuteLayers</computeroutput> followed by <ref refid="class_usd_stage_1a8af4162fe11cc6a5f21a39e770d397c2" kindref="member">UsdStage::MuteLayer</ref> for each layer in <computeroutput>muteLayers</computeroutput>, however this method is more efficient as all operations are committed in a single batch. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a41ce205d182683fe0c45b97642d8051c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const std::vector&lt; std::string &gt; &amp;</type>
        <definition>USD_API const std::vector&lt;std::string&gt;&amp; GetMutedLayers</definition>
        <argsstring>() const</argsstring>
        <name>GetMutedLayers</name>
        <briefdescription>
<para>Returns a vector of all layers that have been muted on this stage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a740db7501c0303b6c1e6e9ce87b10092" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsLayerMuted</definition>
        <argsstring>(const std::string &amp;layerIdentifier) const</argsstring>
        <name>IsLayerMuted</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerIdentifier</declname>
        </param>
        <briefdescription>
<para>Returns true if the layer specified by <computeroutput>layerIdentifier</computeroutput> is muted in this cache, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>See documentation on MuteLayer for details on how <computeroutput>layerIdentifier</computeroutput> is compared to the layers that have been muted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1120" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flatten &amp; Export Utilities</header>
      <description><para><anchor id="class_usd_stage_1Usd_stageSerialization"/></para>
</description>
      <memberdef kind="function" id="class_usd_stage_1a3f3fa959eb4a0a6ac2ec5ca8f248cb95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Export</definition>
        <argsstring>(const std::string &amp;filename, bool addSourceFileComment=true, const SdfLayer::FileFormatArguments &amp;args=SdfLayer::FileFormatArguments()) const</argsstring>
        <name>Export</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addSourceFileComment</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">SdfLayer::FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">SdfLayer::FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Writes out the composite scene as a single flattened layer into <emphasis>filename</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If addSourceFileComment is true, a comment in the output layer will mention the input layer it was generated from.</para>
<para>See <ref refid="class_usd_stage_1ae3271778fa2ceeb82fbd51296610820a" kindref="member">UsdStage::Flatten</ref> for details of the flattening transformation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a164713764becadb3b88f1c8d7694631b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ExportToString</definition>
        <argsstring>(std::string *result, bool addSourceFileComment=true) const</argsstring>
        <name>ExportToString</name>
        <param>
          <type>std::string *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addSourceFileComment</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Writes the composite scene as a flattened Usd text representation into the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If addSourceFileComment is true, a comment in the output layer will mention the input layer it was generated from.</para>
<para>See <ref refid="class_usd_stage_1ae3271778fa2ceeb82fbd51296610820a" kindref="member">UsdStage::Flatten</ref> for details of the flattening transformation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae3271778fa2ceeb82fbd51296610820a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>USD_API SdfLayerRefPtr Flatten</definition>
        <argsstring>(bool addSourceFileComment=true) const</argsstring>
        <name>Flatten</name>
        <param>
          <type>bool</type>
          <declname>addSourceFileComment</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns a single, anonymous, merged layer for this composite scene. </para>
        </briefdescription>
        <detaileddescription>
<para>Specifically, this function removes <bold>most</bold> composition metadata and authors the resolved values for each object directly into the flattened layer.</para>
<para>All VariantSets are removed and only the currently selected variants will be present in the resulting layer.</para>
<para>Class prims will still exist, however all inherits arcs will have been removed and the inherited data will be copied onto each child object. Composition arcs authored on the class itself will be flattened into the class.</para>
<para>Flatten preserves <ref refid="_usd__page__scenegraph_instancing" kindref="compound">scenegraph instancing</ref> by creating independent roots for each prototype currently composed on this stage, and adding a single internal reference arc on each instance prim to its corresponding prototype.</para>
<para>Time samples across sublayer offsets will will have the time offset and scale applied to each time index.</para>
<para>Finally, any deactivated prims will be pruned from the result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1186" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Stage Metadata</header>
      <description><para><anchor id="class_usd_stage_1Usd_stageMetadata"/> Stage metadata applies to the entire contents of the stage, and is recorded only in the stage&apos;s root or primary session-layer. Most of the other, specific metadata methods on <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> are defined in terms of these generic methods. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1ad2d76f736733f3ad51aa1ea1df6f4d44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool GetMetadata</definition>
        <argsstring>(const TfToken &amp;key, T *value) const</argsstring>
        <name>GetMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return in <computeroutput>value</computeroutput> an authored or fallback value (if one was defined for the given metadatum) for Stage metadatum <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Order of resolution is session layer, followed by root layer, else fallback to the <ref refid="class_sdf_schema" kindref="compound">SdfSchema</ref>.</para>
<para><simplesect kind="return"><para>true if we successfully retrieved a value of the requested type; false if <computeroutput>key</computeroutput> is not allowed as layer metadata or no value was found. Generates a coding error if we retrieved a stored value of a type other than the requested type</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_Metadata" kindref="member">General Metadata in USD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1212" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2389" bodyend="2407"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af114545bd56cd7619e7d4f2f884e4128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetMetadata</definition>
        <argsstring>(const TfToken &amp;key, VtValue *value) const</argsstring>
        <name>GetMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae2d99fd05dbc39c2d9746fe639c24825" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasMetadata</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>HasMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns true if the <emphasis>key</emphasis> has a meaningful value, that is, if <ref refid="class_usd_stage_1ad2d76f736733f3ad51aa1ea1df6f4d44" kindref="member">GetMetadata()</ref> will provide a value, either because it was authored or because the Stage metadata was defined with a meaningful fallback value. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false if <computeroutput>key</computeroutput> is not allowed as layer metadata. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a37211404a939811e841d90c65cd19999" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredMetadata</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>HasAuthoredMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the <emphasis>key</emphasis> has an authored value, <computeroutput>false</computeroutput> if no value was authored or the only value available is the <ref refid="class_sdf_schema" kindref="compound">SdfSchema</ref>&apos;s metadata fallback. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a value for a metadatum <emphasis>not</emphasis> legal to author on layers is present in the root or session layer (which could happen through hand-editing or use of certain low-level API&apos;s), this method will still return <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1a5325c3bfad050926f03f867a803c03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SetMetadata</definition>
        <argsstring>(const TfToken &amp;key, const T &amp;value) const</argsstring>
        <name>SetMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of Stage metadatum <computeroutput>key</computeroutput> to <computeroutput>value</computeroutput>, if the stage&apos;s current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> is the root or session layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current EditTarget is any other layer, raise a coding error. <simplesect kind="return"><para>true if authoring was successful, false otherwise. Generates a coding error if <computeroutput>key</computeroutput> is not allowed as layer metadata.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_Metadata" kindref="member">General Metadata in USD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1246" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2411" bodyend="2415"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1abccca1c487755a7f08e6e4b042d39ede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetMetadata</definition>
        <argsstring>(const TfToken &amp;key, const VtValue &amp;value) const</argsstring>
        <name>SetMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af75ddb7982a5b5c77f9840e67df94435" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearMetadata</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>ClearMetadata</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Clear the value of stage metadatum <computeroutput>key</computeroutput>, if the stage&apos;s current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> is the root or session layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current EditTarget is any other layer, raise a coding error. <simplesect kind="return"><para>true if authoring was successful, false otherwise. Generates a coding error if <computeroutput>key</computeroutput> is not allowed as layer metadata.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_Metadata" kindref="member">General Metadata in USD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aba47c41ec8cc536290c04e219f12589c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool GetMetadataByDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath, T *value) const</argsstring>
        <name>GetMetadataByDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resolve the requested dictionary sub-element <computeroutput>keyPath</computeroutput> of dictionary-valued metadatum named <computeroutput>key</computeroutput>, returning the resolved value. </para>
        </briefdescription>
        <detaileddescription>
<para>If you know you need just a small number of elements from a dictionary, accessing them element-wise using this method can be much less expensive than fetching the entire dictionary with GetMetadata(key).</para>
<para><simplesect kind="return"><para>true if we successfully retrieved a value of the requested type; false if <computeroutput>key</computeroutput> is not allowed as layer metadata or no value was found. Generates a coding error if we retrieved a stored value of a type other than the requested type</para>
</simplesect>
The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in subdictionaries. If <computeroutput>keyPath</computeroutput> is empty, returns an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1278" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2419" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3bdf70a1d4a8754a0cb51cddab11b299" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetMetadataByDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath, VtValue *value) const</argsstring>
        <name>GetMetadataByDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>overload </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a911c19d77fe0552877918517818e7399" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasMetadataDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath) const</argsstring>
        <name>HasMetadataDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Return true if there exists any authored or fallback opinion for <computeroutput>key</computeroutput> and <computeroutput>keyPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path identifying a value in subdictionaries stored in the metadata field at <computeroutput>key</computeroutput>. If <computeroutput>keyPath</computeroutput> is empty, returns <computeroutput>false</computeroutput>.</para>
<para>Returns false if <computeroutput>key</computeroutput> is not allowed as layer metadata.</para>
<para><simplesect kind="see"><para><ref refid="_usd__page__datatypes_1Usd_Dictionary_Type" kindref="member">Dictionary-valued Metadata</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a20a01b0dd0dd51f9439b6a3a231c76ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredMetadataDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath) const</argsstring>
        <name>HasAuthoredMetadataDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Return true if there exists any authored opinion (excluding fallbacks) for <computeroutput>key</computeroutput> and <computeroutput>keyPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path identifying a value in subdictionaries stored in the metadata field at <computeroutput>key</computeroutput>. If <computeroutput>keyPath</computeroutput> is empty, returns <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="_usd__page__datatypes_1Usd_Dictionary_Type" kindref="member">Dictionary-valued Metadata</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7f3b367075ca8d6bba9fbf3636183ff3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SetMetadataByDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath, const T &amp;value) const</argsstring>
        <name>SetMetadataByDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Author <computeroutput>value</computeroutput> to the field identified by <computeroutput>key</computeroutput> and <computeroutput>keyPath</computeroutput> at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path identifying a value in subdictionaries stored in the metadata field at <computeroutput>key</computeroutput>. If <computeroutput>keyPath</computeroutput> is empty, no action is taken.</para>
<para><simplesect kind="return"><para>true if the value is authored successfully, false otherwise. Generates a coding error if <computeroutput>key</computeroutput> is not allowed as layer metadata.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__datatypes_1Usd_Dictionary_Type" kindref="member">Dictionary-valued Metadata</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1323" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2443" bodyend="2448"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0c04b54500b5b6d5ef0e8aca66282770" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetMetadataByDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath, const VtValue &amp;value) const</argsstring>
        <name>SetMetadataByDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1afd756d242f6026a3d7c5606badbf8411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearMetadataByDictKey</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath) const</argsstring>
        <name>ClearMetadataByDictKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Clear any authored value identified by <computeroutput>key</computeroutput> and <computeroutput>keyPath</computeroutput> at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path identifying a path in subdictionaries stored in the metadata field at <computeroutput>key</computeroutput>. If <computeroutput>keyPath</computeroutput> is empty, no action is taken.</para>
<para><simplesect kind="return"><para>true if the value is cleared successfully, false otherwise. Generates a coding error if <computeroutput>key</computeroutput> is not allowed as layer metadata.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__datatypes_1Usd_Dictionary_Type" kindref="member">Dictionary-valued Metadata</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a14897ca124a0fb4a62e6ed2ccbbdbf4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void WriteFallbackPrimTypes</definition>
        <argsstring>()</argsstring>
        <name>WriteFallbackPrimTypes</name>
        <briefdescription>
<para>Writes the fallback prim types defined in the schema registry to the stage as dictionary valued fallback prim type metadata. </para>
        </briefdescription>
        <detaileddescription>
<para>If the stage already has fallback prim type metadata, the fallback types from the schema registry will be added to the existing metadata, only for types that are already present in the dictionary, i.e. this won&apos;t overwrite existing fallback entries.</para>
<para>The current edit target determines whether the metadata is written to the root layer or the session layer. If the edit target specifies another layer besides these, this will produce an error.</para>
<para>This function can be used at any point before calling Save or Export on a stage to record the fallback types for the current schemas. This allows another version of Usd to open this stage and treat prim types it doesn&apos;t recognize as a type it does recognize defined for it in this metadata.</para>
<para><simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_FallbackPrimTypes" kindref="member">Fallback Prim Types</ref> <ref refid="class_usd_schema_registry_1a93921d1510b463b9eea85de97ea45271" kindref="member">UsdSchemaRegistry::GetFallbackPrimTypes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1364" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>TimeCode API</header>
      <description><para><anchor id="class_usd_stage_1Usd_timeCodeAPI"/> Methods for managing the Stage&apos;s active timeSample range, time units, and intended rate of playback. See <ref refid="_usd__page__object_model_1Usd_OM_UsdTimeCode" kindref="member">Time and Timing in USD</ref> for more on time and TimeCodes in USD. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1a8999976ae5f8f57bc3ab845ea0453155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API double</type>
        <definition>USD_API double GetStartTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>GetStartTimeCode</name>
        <briefdescription>
<para>Returns the stage&apos;s start timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>If the stage has an associated session layer with a start timeCode opinion, this value is returned. Otherwise, the start timeCode opinion from the root layer is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aef35e121cd9662129b6e338e85ceab44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetStartTimeCode</definition>
        <argsstring>(double)</argsstring>
        <name>SetStartTimeCode</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Sets the stage&apos;s start timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>The start timeCode is set in the current EditTarget, if it is the root layer of the stage or the session layer associated with the stage. If the current EditTarget is neither, a warning is issued and the start timeCode is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3c248e832dd9c974f9c24f6f4ef6f312" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API double</type>
        <definition>USD_API double GetEndTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>GetEndTimeCode</name>
        <briefdescription>
<para>Returns the stage&apos;s end timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>If the stage has an associated session layer with an end timeCode opinion, this value is returned. Otherwise, the end timeCode opinion from the root layer is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a05e5e8a51041bc7f9b7f1165ccec9fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetEndTimeCode</definition>
        <argsstring>(double)</argsstring>
        <name>SetEndTimeCode</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Sets the stage&apos;s end timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>The end timeCode is set in the current EditTarget, if it is the root layer of the stage or the session layer associated with the stage. If the current EditTarget is neither, a warning is issued and the end timeCode is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac66540a6d818fce71dce6f9db4b7385b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredTimeCodeRange</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredTimeCodeRange</name>
        <briefdescription>
<para>Returns true if the stage has both start and end timeCodes authored in the session layer or the root layer of the stage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a85092d7455ae894d50224e761dc6e840" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API double</type>
        <definition>USD_API double GetTimeCodesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeCodesPerSecond</name>
        <briefdescription>
<para>Returns the stage&apos;s timeCodesPerSecond value. </para>
        </briefdescription>
        <detaileddescription>
<para>The timeCodesPerSecond value scales the time ordinate for the samples contained in the stage to seconds. If timeCodesPerSecond is 24, then a sample at time ordinate 24 should be viewed exactly one second after the sample at time ordinate 0.</para>
<para>Like <ref refid="class_sdf_layer_1a8c7a1ac2e85efa2aa4831123de576b7c" kindref="member">SdfLayer::GetTimeCodesPerSecond</ref>, this accessor uses a dynamic fallback to framesPerSecond. The order of precedence is:</para>
<para><itemizedlist>
<listitem><para>timeCodesPerSecond from session layer </para>
</listitem>
<listitem><para>timeCodesPerSecond from root layer </para>
</listitem>
<listitem><para>framesPerSecond from session layer </para>
</listitem>
<listitem><para>framesPerSecond from root layer </para>
</listitem>
<listitem><para>fallback value of 24 </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a61c421fcf601c28f2efc5597b8058e22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetTimeCodesPerSecond</definition>
        <argsstring>(double timeCodesPerSecond) const</argsstring>
        <name>SetTimeCodesPerSecond</name>
        <param>
          <type>double</type>
          <declname>timeCodesPerSecond</declname>
        </param>
        <briefdescription>
<para>Sets the stage&apos;s timeCodesPerSecond value. </para>
        </briefdescription>
        <detaileddescription>
<para>The timeCodesPerSecond value is set in the current EditTarget, if it is the root layer of the stage or the session layer associated with the stage. If the current EditTarget is neither, a warning is issued and no value is set.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1a85092d7455ae894d50224e761dc6e840" kindref="member">GetTimeCodesPerSecond()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5cf22202fde6282744edc795fa81a02f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API double</type>
        <definition>USD_API double GetFramesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>GetFramesPerSecond</name>
        <briefdescription>
<para>Returns the stage&apos;s framesPerSecond value. </para>
        </briefdescription>
        <detaileddescription>
<para>This makes an advisory statement about how the contained data can be most usefully consumed and presented. It&apos;s primarily an indication of the expected playback rate for the data, but a timeline editing tool might also want to use this to decide how to scale and label its timeline.</para>
<para>The default value of framesPerSecond is 24. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ab3cbe7df64c92e9fa082a0ef092c21e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetFramesPerSecond</definition>
        <argsstring>(double framesPerSecond) const</argsstring>
        <name>SetFramesPerSecond</name>
        <param>
          <type>double</type>
          <declname>framesPerSecond</declname>
        </param>
        <briefdescription>
<para>Sets the stage&apos;s framesPerSecond value. </para>
        </briefdescription>
        <detaileddescription>
<para>The framesPerSecond value is set in the current EditTarget, if it is the root layer of the stage or the session layer associated with the stage. If the current EditTarget is neither, a warning is issued and no value is set.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1a5cf22202fde6282744edc795fa81a02f" kindref="member">GetFramesPerSecond()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1461" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Color Configuration API</header>
      <description><para><anchor id="class_usd_stage_1Usd_ColorConfigurationAPI"/></para>
<para>Methods for authoring and querying the color configuration to be used to interpret the per-attribute color-spaces. An external system (like OpenColorIO) is typically used for interpreting the configuration.</para>
<para>Site-wide fallback values for the colorConfiguration and colorManagementSystem metadata can be set in the plugInfo.json file of a plugin using this structure:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">&quot;UsdColorConfigFallbacks&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;colorConfiguration&quot;<sp/>=<sp/>&quot;https://github.com/imageworks/OpenColorIO-Configs/blob/master/aces_1.0.1/config.ocio&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;colorManagementSystem&quot;<sp/>:<sp/>&quot;OpenColorIO&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The color space in which a given color or texture attribute is authored is set as token-valued metadata &apos;colorSpace&apos; on the attribute. For color or texture attributes that don&apos;t have an authored &apos;colorSpace&apos; value, the fallback color-space is gleaned from the color configuration oracle. This is usually the config&apos;s <bold>scene_linear</bold> role color-space.</para>
<para>Here&apos;s the pseudo-code for determining an attribute&apos;s color-space.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">UsdStageRefPtr<sp/>stage<sp/>=<sp/><ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open</ref>(filePath);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref><sp/>prim<sp/>=<sp/>stage-&gt;<ref refid="class_usd_prim_1a6ceb556070804b712c01a7968f925735" kindref="member">GetPrimAtPath</ref>(</highlight><highlight class="stringliteral">&quot;/path/to/prim&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref><sp/>attr<sp/>=<sp/>prim.<ref refid="class_usd_prim_1a31225ac7165f58726f000ab1d67e9e61" kindref="member">GetAttribute</ref>(</highlight><highlight class="stringliteral">&quot;someColorAttr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_tf_token" kindref="compound">TfToken</ref><sp/>colorSpace<sp/>=<sp/>attr.<ref refid="class_usd_attribute_1a635e3fc6927db14e49302525a354bbf2" kindref="member">GetColorSpace</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colorSpace.<ref refid="class_tf_token_1a8e12342fc420701fbffd97025421575a" kindref="member">IsEmpty</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>colorSpace<sp/>is<sp/>empty,<sp/>get<sp/>the<sp/>default<sp/>from<sp/>the<sp/>stage&apos;s<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colorConfiguration,<sp/>using<sp/>external<sp/>API<sp/>(not<sp/>provided<sp/>by<sp/>USD).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>colorSpace<sp/>=<sp/>ExternalAPI::GetDefaultColorSpace(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage-&gt;GetColorConfiguration());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1Usd_AttributeColorSpaceAPI" kindref="member">UsdAttribute ColorSpace API</ref> </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="class_usd_stage_1a6c0776d95442b399cf8dcbd185a4109f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>static USD_API void GetColorConfigFallbacks</definition>
        <argsstring>(SdfAssetPath *colorConfiguration, TfToken *colorManagementSystem)</argsstring>
        <name>GetColorConfigFallbacks</name>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> *</type>
          <declname>colorConfiguration</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>colorManagementSystem</declname>
        </param>
        <briefdescription>
<para>Returns the global fallback values of &apos;colorConfiguration&apos; and &apos;colorManagementSystem&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>These are set in the plugInfo.json file of a plugin, but can be overridden by calling the static method <ref refid="class_usd_stage_1a149deb93f08b3e0da85e3dd12a20c821" kindref="member">SetColorConfigFallbacks()</ref>.</para>
<para>The python wrapping of this method returns a tuple containing (colorConfiguration, colorManagementSystem).</para>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1a149deb93f08b3e0da85e3dd12a20c821" kindref="member">SetColorConfigFallbacks</ref>, <ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a149deb93f08b3e0da85e3dd12a20c821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>static USD_API void SetColorConfigFallbacks</definition>
        <argsstring>(const SdfAssetPath &amp;colorConfiguration, const TfToken &amp;colorManagementSystem)</argsstring>
        <name>SetColorConfigFallbacks</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>colorConfiguration</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>colorManagementSystem</declname>
        </param>
        <briefdescription>
<para>Sets the global fallback values of color configuration metadata which includes the &apos;colorConfiguration&apos; asset path and the name of the color management system. </para>
        </briefdescription>
        <detaileddescription>
<para>This overrides any fallback values authored in plugInfo files.</para>
<para>If the specified value of <computeroutput>colorConfiguration</computeroutput> or <computeroutput>colorManagementSystem</computeroutput> is empty, then the corresponding fallback value isn&apos;t set. In other words, for this call to have an effect, at least one value must be non-empty. Additionally, these can&apos;t be reset to empty values.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1a6c0776d95442b399cf8dcbd185a4109f" kindref="member">GetColorConfigFallbacks()</ref> <ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aaff338cb37de09b0fa70ea0e693c9cd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetColorConfiguration</definition>
        <argsstring>(const SdfAssetPath &amp;colorConfig) const</argsstring>
        <name>SetColorConfiguration</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>colorConfig</declname>
        </param>
        <briefdescription>
<para>Sets the default color configuration to be used to interpret the per-attribute color-spaces in the composed USD stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This is specified as asset path which can be resolved to the color spec file.</para>
<para><ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1abca98172991cd4bd223da2ac9742d495" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref></type>
        <definition>USD_API SdfAssetPath GetColorConfiguration</definition>
        <argsstring>() const</argsstring>
        <name>GetColorConfiguration</name>
        <briefdescription>
<para>Returns the default color configuration used to interpret the per- attribute color-spaces in the composed USD stage. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7571fb2cdc0e342775854284d53a78ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetColorManagementSystem</definition>
        <argsstring>(const TfToken &amp;cms) const</argsstring>
        <name>SetColorManagementSystem</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>cms</declname>
        </param>
        <briefdescription>
<para>Sets the name of the color management system used to interpret the color configuration file pointed at by the colorConfiguration metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1adb3f32f62031ea113321d4c66978692f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USD_API TfToken GetColorManagementSystem</definition>
        <argsstring>() const</argsstring>
        <name>GetColorManagementSystem</name>
        <briefdescription>
<para>Sets the name of the color management system to be used for loading and interpreting the color configuration file. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">Color Configuration API</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1540" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Attribute Value Interpolation</header>
      <description><para><anchor id="class_usd_stage_1Usd_interpolation"/> Controls the interpolation behavior when retrieving attribute values. The default behavior is linear interpolation. See <ref refid="class_usd_attribute_1Usd_AttributeInterpolation" kindref="member">Attribute Value Interpolation</ref> for more details. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1ad29a9aaba12c36407936a21abf514ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetInterpolationType</definition>
        <argsstring>(UsdInterpolationType interpolationType)</argsstring>
        <name>SetInterpolationType</name>
        <param>
          <type><ref refid="interpolation_8h_1a3b226373fc2194d5021c1c31b408f4c8" kindref="member">UsdInterpolationType</ref></type>
          <declname>interpolationType</declname>
        </param>
        <briefdescription>
<para>Sets the interpolation type used during value resolution for all attributes on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>Changing this will cause a <ref refid="class_usd_notice_1_1_stage_contents_changed" kindref="compound">UsdNotice::StageContentsChanged</ref> notice to be sent, as values at times where no samples are authored may have changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6e804b49f3bc5ed54976bf1d2a458182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="interpolation_8h_1a3b226373fc2194d5021c1c31b408f4c8" kindref="member">UsdInterpolationType</ref></type>
        <definition>USD_API UsdInterpolationType GetInterpolationType</definition>
        <argsstring>() const</argsstring>
        <name>GetInterpolationType</name>
        <briefdescription>
<para>Returns the interpolation type used during value resolution for all attributes on this stage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1596" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instancing</header>
      <description><para><anchor id="class_usd_stage_1Usd_instancing"/> See <ref refid="_usd__page__scenegraph_instancing" kindref="compound">Scenegraph Instancing</ref> for more details. </para>
</description>
      <memberdef kind="function" id="class_usd_stage_1aedabd9cb88feca10c5fa96c7454df493" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdPrim&gt; GetPrototypes</definition>
        <argsstring>() const</argsstring>
        <name>GetPrototypes</name>
        <briefdescription>
<para>Returns all native instancing prototype prims. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1609" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_usd_stage_1ac9dae57efc0efe2e82b273f0e54c1455" prot="private" static="no">
        <type>tbb::concurrent_hash_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, Usd_PrimDataIPtr, _TbbHashEq &gt;</type>
        <definition>using PathToNodeMap =  tbb::concurrent_hash_map&lt; SdfPath, Usd_PrimDataIPtr, _TbbHashEq&gt;</definition>
        <argsstring></argsstring>
        <name>PathToNodeMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2316" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_stage_1a7bfc005244e72867638c669318b08aea" prot="private" static="no">
        <type>std::vector&lt; std::pair&lt; SdfLayerHandle, <ref refid="class_tf_notice_1_1_key" kindref="compound">TfNotice::Key</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt; std::pair&lt;SdfLayerHandle, TfNotice::Key&gt; &gt; _LayerAndNoticeKeyVec</definition>
        <argsstring></argsstring>
        <name>_LayerAndNoticeKeyVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2324" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2324" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_stage_1a5ee9ea94bb9918b1b9199a1efd13c26b" prot="private" static="no" mutable="no">
        <type>Usd_PrimDataPtr</type>
        <definition>Usd_PrimDataPtr _pseudoRoot</definition>
        <argsstring></argsstring>
        <name>_pseudoRoot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2286" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1ac9f159c5186bdd86da6ccf7e71524002" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>SdfLayerRefPtr _rootLayer</definition>
        <argsstring></argsstring>
        <name>_rootLayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2289" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1ab155eccd509d1205b7e9bbab27abef42" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>SdfLayerRefPtr _sessionLayer</definition>
        <argsstring></argsstring>
        <name>_sessionLayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2293" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1af20cb6b0fa790f08dfd214725b4c9279" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></type>
        <definition>UsdEditTarget _editTarget</definition>
        <argsstring></argsstring>
        <name>_editTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2296" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a948f054acd2aa3faaf7fc5f4f4055ea5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _editTargetIsLocalLayer</definition>
        <argsstring></argsstring>
        <name>_editTargetIsLocalLayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2297" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1afd719080298c2bcb2fa2fa369c093aec" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> &gt;</type>
        <definition>std::unique_ptr&lt;PcpCache&gt; _cache</definition>
        <argsstring></argsstring>
        <name>_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2299" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a925be936e7e2c64df1dd5b88f1601f9e" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Usd_ClipCache &gt;</type>
        <definition>std::unique_ptr&lt;Usd_ClipCache&gt; _clipCache</definition>
        <argsstring></argsstring>
        <name>_clipCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2300" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1aec4c6c4afd92e886836aefc6a7198826" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Usd_InstanceCache &gt;</type>
        <definition>std::unique_ptr&lt;Usd_InstanceCache&gt; _instanceCache</definition>
        <argsstring></argsstring>
        <name>_instanceCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2301" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1abece05b9cfd4b8161f5808774981ae25" prot="private" static="no" mutable="no">
        <type>TfHashMap&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_tf_hash" kindref="compound">TfHash</ref> &gt;</type>
        <definition>TfHashMap&lt;TfToken, TfToken, TfHash&gt; _invalidPrimTypeToFallbackMap</definition>
        <argsstring></argsstring>
        <name>_invalidPrimTypeToFallbackMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2303" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a4f2a30fffe1d8aebbdbaffa5e19eb8bb" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _usedLayersRevision</definition>
        <argsstring></argsstring>
        <name>_usedLayersRevision</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2305" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a7319e15b61fa8a0241cbcf237ae4bca3" prot="private" static="no" mutable="no">
        <type>PathToNodeMap</type>
        <definition>PathToNodeMap _primMap</definition>
        <argsstring></argsstring>
        <name>_primMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2318" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a9719d06f9cb138a900e4a9615471b496" prot="private" static="no" mutable="no">
        <type><ref refid="interpolation_8h_1a3b226373fc2194d5021c1c31b408f4c8" kindref="member">UsdInterpolationType</ref></type>
        <definition>UsdInterpolationType _interpolationType</definition>
        <argsstring></argsstring>
        <name>_interpolationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2321" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a55b8861dfa892558645ceb390fdc1c18" prot="private" static="no" mutable="no">
        <type>_LayerAndNoticeKeyVec</type>
        <definition>_LayerAndNoticeKeyVec _layersAndNoticeKeys</definition>
        <argsstring></argsstring>
        <name>_layersAndNoticeKeys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2325" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a6d4456d0586eef08dd4bd3a3e61cee1d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _lastChangeSerialNumber</definition>
        <argsstring></argsstring>
        <name>_lastChangeSerialNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2326" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1adc6304cf7064af2e3c6e4702a0340d44" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_notice_1_1_key" kindref="compound">TfNotice::Key</ref></type>
        <definition>TfNotice::Key _resolverChangeKey</definition>
        <argsstring></argsstring>
        <name>_resolverChangeKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2328" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a8a350be63b77c9c7ad92bc9b2980fae1" prot="private" static="no" mutable="no">
        <type>_PendingChanges *</type>
        <definition>_PendingChanges* _pendingChanges</definition>
        <argsstring></argsstring>
        <name>_pendingChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2332" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a4fac3e185443ff0189b3314b5b096664" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="class_work_dispatcher" kindref="compound">WorkDispatcher</ref> &gt;</type>
        <definition>std::optional&lt;WorkDispatcher&gt; _dispatcher</definition>
        <argsstring></argsstring>
        <name>_dispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2334" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a878e6dbc1bda50a04baa2cb7eaf9ca07" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::string &gt;</type>
        <definition>std::unique_ptr&lt;std::string&gt; _mallocTagID</definition>
        <argsstring></argsstring>
        <name>_mallocTagID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2338" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a6e1a6d67a3cb6378502c109dd39a4e62" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
        <definition>const InitialLoadSet _initialLoadSet</definition>
        <argsstring></argsstring>
        <name>_initialLoadSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2341" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1aa03126a01e9c596943bef272ccc84c6f" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>UsdStagePopulationMask _populationMask</definition>
        <argsstring></argsstring>
        <name>_populationMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2344" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a22cd0680c1131b7b215adef9a18bd4e5" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_stage_load_rules" kindref="compound">UsdStageLoadRules</ref></type>
        <definition>UsdStageLoadRules _loadRules</definition>
        <argsstring></argsstring>
        <name>_loadRules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2347" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1a8953999bcd968998cb563415256bab50" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isClosingStage</definition>
        <argsstring></argsstring>
        <name>_isClosingStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2349" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_1aba5c0f91bf8a94d8f1ea9b2e0b789946" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isWritingFallbackPrimTypes</definition>
        <argsstring></argsstring>
        <name>_isWritingFallbackPrimTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2350" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_stage_1aec2b7ca1194f894ff2b952906abfd86c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdAPISchemaBase</definition>
        <argsstring></argsstring>
        <name>UsdAPISchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2352" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1aa332483a46ed09b95ae5344dcf051b92" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdAttribute</definition>
        <argsstring></argsstring>
        <name>UsdAttribute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2353" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1aacf3a34e9976aa79c506135cb10ea20d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdAttributeQuery</definition>
        <argsstring></argsstring>
        <name>UsdAttributeQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2354" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a22d563be232e30ddb41a8f627e982e4e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdEditTarget</definition>
        <argsstring></argsstring>
        <name>UsdEditTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2355" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a597363dae3d685d482398a680c639ede" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdInherits</definition>
        <argsstring></argsstring>
        <name>UsdInherits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2356" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdObject</definition>
        <argsstring></argsstring>
        <name>UsdObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2357" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrim</definition>
        <argsstring></argsstring>
        <name>UsdPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2358" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a7843eb26c70fa29eb383201c78ef69c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdProperty</definition>
        <argsstring></argsstring>
        <name>UsdProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2359" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a42568ffb2bb6a89af14beca5d6603ad9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdRelationship</definition>
        <argsstring></argsstring>
        <name>UsdRelationship</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2360" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a243a743ae795cc506ad49a7b026d05d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSpecializes</definition>
        <argsstring></argsstring>
        <name>UsdSpecializes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2361" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a1b3761aadba2edf545f214f9e7757d8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdVariantSet</definition>
        <argsstring></argsstring>
        <name>UsdVariantSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2362" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_stage_1a4b76e42b0c2af879e36c8f304d7b0838" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdVariantSets</definition>
        <argsstring></argsstring>
        <name>UsdVariantSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2363" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2363" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_stage_1a2c6875876c420b08ca5b2baed2ac51bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>USD_API bool</type>
        <definition>USD_API bool _GetTypeSpecificResolvedMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, SdfTimeSampleMap *result) const</argsstring>
        <name>_GetTypeSpecificResolvedMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1afba891bb38b089b531e73e00fe5cc7ae" kindref="member">SdfTimeSampleMap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2381" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_stage_1a9556d35d759a6be7c07382f485b2cfe0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdStage</definition>
        <argsstring>(const SdfLayerRefPtr &amp;rootLayer, const SdfLayerRefPtr &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, const UsdStagePopulationMask &amp;mask, InitialLoadSet load)</argsstring>
        <name>UsdStage</name>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1afec59681870c30b4678600508b9e1303" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Close</definition>
        <argsstring>()</argsstring>
        <name>_Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a4360cac5859184125c3ff4076ae2847b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPropertySpecHandleVector</type>
        <definition>SdfPropertySpecHandleVector _GetPropertyStack</definition>
        <argsstring>(const UsdProperty &amp;prop, UsdTimeCode time) const</argsstring>
        <name>_GetPropertyStack</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1755221d1ef5266e2b6fe54419c525da" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; SdfPropertySpecHandle, <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;SdfPropertySpecHandle, SdfLayerOffset&gt; &gt; _GetPropertyStackWithLayerOffsets</definition>
        <argsstring>(const UsdProperty &amp;prop, UsdTimeCode time) const</argsstring>
        <name>_GetPropertyStackWithLayerOffsets</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1abaa6c1732b082e425dead06eb107fb53" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_prim_definition_1_1_property" kindref="compound">UsdPrimDefinition::Property</ref></type>
        <definition>UsdPrimDefinition::Property _GetSchemaProperty</definition>
        <argsstring>(const UsdProperty &amp;prop) const</argsstring>
        <name>_GetSchemaProperty</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9d815bce92497df0b9593329653cfb12" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_prim_definition_1_1_attribute" kindref="compound">UsdPrimDefinition::Attribute</ref></type>
        <definition>UsdPrimDefinition::Attribute _GetSchemaAttribute</definition>
        <argsstring>(const UsdAttribute &amp;attr) const</argsstring>
        <name>_GetSchemaAttribute</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a657acfa9c165a510cc7e4408abd33420" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_prim_definition_1_1_relationship" kindref="compound">UsdPrimDefinition::Relationship</ref></type>
        <definition>UsdPrimDefinition::Relationship _GetSchemaRelationship</definition>
        <argsstring>(const UsdRelationship &amp;rel) const</argsstring>
        <name>_GetSchemaRelationship</name>
        <param>
          <type>const <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &amp;</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ab6ba910dd26c0e1ddb3c6bb121816058" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAttributeSpecHandle</type>
        <definition>SdfAttributeSpecHandle _CreateNewSpecFromSchemaAttribute</definition>
        <argsstring>(const UsdPrim &amp;prim, const UsdPrimDefinition::Attribute &amp;attrDef)</argsstring>
        <name>_CreateNewSpecFromSchemaAttribute</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim_definition_1_1_attribute" kindref="compound">UsdPrimDefinition::Attribute</ref> &amp;</type>
          <declname>attrDef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1d6b79f4ce73ebec02236874fadeb163" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfRelationshipSpecHandle</type>
        <definition>SdfRelationshipSpecHandle _CreateNewSpecFromSchemaRelationship</definition>
        <argsstring>(const UsdPrim &amp;prim, const UsdPrimDefinition::Relationship &amp;relDef)</argsstring>
        <name>_CreateNewSpecFromSchemaRelationship</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim_definition_1_1_relationship" kindref="compound">UsdPrimDefinition::Relationship</ref> &amp;</type>
          <declname>relDef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a83e4d2cfaf854f8ff73af689501e331c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PropType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; PropType &gt;</type>
        <definition>SdfHandle&lt;PropType&gt; _CreateNewPropertySpecFromSchema</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>_CreateNewPropertySpecFromSchema</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a2a8710fdc9806fe8d605587214c308ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPrimSpecHandle</type>
        <definition>SdfPrimSpecHandle _CreatePrimSpecForEditing</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>_CreatePrimSpecForEditing</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a697d286b0ec0e9efb8357f2b24397bef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PropType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; PropType &gt;</type>
        <definition>SdfHandle&lt;PropType&gt; _CreatePropertySpecForEditing</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>_CreatePropertySpecForEditing</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1d9f7af2e77151bd77ffb7c69d12fbf9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPropertySpecHandle</type>
        <definition>SdfPropertySpecHandle _CreatePropertySpecForEditing</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>_CreatePropertySpecForEditing</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0c18603834b4449560d5d4e990fee5da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAttributeSpecHandle</type>
        <definition>SdfAttributeSpecHandle _CreateAttributeSpecForEditing</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>_CreateAttributeSpecForEditing</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af40aa52e9f1726d1e8e327dc100d006d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfRelationshipSpecHandle</type>
        <definition>SdfRelationshipSpecHandle _CreateRelationshipSpecForEditing</definition>
        <argsstring>(const UsdRelationship &amp;rel)</argsstring>
        <name>_CreateRelationshipSpecForEditing</name>
        <param>
          <type>const <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &amp;</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac989a320bde04f7ca483922405441f0e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; bool, <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt;</type>
        <definition>std::pair&lt;bool, UsdPrim&gt; _IsValidPathForCreatingPrim</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_IsValidPathForCreatingPrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae1b399449057f3d2f5b6247499fa03d8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ValidateEditPrim</definition>
        <argsstring>(const UsdPrim &amp;prim, const char *operation) const</argsstring>
        <name>_ValidateEditPrim</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a06996d980fb63246c91ba0ce3bbd81f9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ValidateEditPrimAtPath</definition>
        <argsstring>(const SdfPath &amp;primPath, const char *operation) const</argsstring>
        <name>_ValidateEditPrimAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa86faa3f43e6f1170bb75218fefb1a5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim _DefinePrim</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;typeName)</argsstring>
        <name>_DefinePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a4b1d0d33bd3fd1d4933729c6a15d2d30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _RemoveProperty</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>_RemoveProperty</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a06efb7319a4f334cfd5f71867b20cc51" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_property" kindref="compound">UsdProperty</ref></type>
        <definition>UsdProperty _FlattenProperty</definition>
        <argsstring>(const UsdProperty &amp;srcProp, const UsdPrim &amp;dstParent, const TfToken &amp;dstName)</argsstring>
        <name>_FlattenProperty</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>srcProp</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>dstParent</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>dstName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a29a8e0b1fd31c78c84f56eca0c2aabee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!_IsEditTargetMappable&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt;!_IsEditTargetMappable&lt;T&gt;::value, bool&gt;::type _SetValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, const T &amp;newValue)</argsstring>
        <name>_SetValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a25c7f576c946c3ea1bf2b84faaad878c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; _IsEditTargetMappable&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt;_IsEditTargetMappable&lt;T&gt;::value, bool&gt;::type _SetValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, const T &amp;newValue)</argsstring>
        <name>_SetValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1e843bdab3ac2e2977f143554dda9d58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _SetValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, const VtValue &amp;newValue)</argsstring>
        <name>_SetValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1754" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a185b99c0d7a9bd1d47d45913a8eb8feb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _SetEditTargetMappedValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, const T &amp;newValue)</argsstring>
        <name>_SetEditTargetMappedValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a61fe7dab03cdf61970876178eed92da8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _SetValueImpl</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, const T &amp;value)</argsstring>
        <name>_SetValueImpl</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7804c28b75399e511b4c9cab5cdf40f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ClearValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr)</argsstring>
        <name>_ClearValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac6ed7ff4361bb9e74ddb559bd5177ffc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!_IsEditTargetMappable&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt; UsdStage::_IsEditTargetMappable&lt; T &gt;::value, bool &gt;::type _SetMetadata</definition>
        <argsstring>(const UsdObject &amp;object, const TfToken &amp;key, const TfToken &amp;keyPath, const T &amp;value)</argsstring>
        <name>_SetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1770" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2487" bodyend="2495"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0f4e6d3f841e67e1ad68f7566295aa81" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; _IsEditTargetMappable&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt;_IsEditTargetMappable&lt;T&gt;::value, bool&gt;::type _SetMetadata</definition>
        <argsstring>(const UsdObject &amp;object, const TfToken &amp;key, const TfToken &amp;keyPath, const T &amp;value)</argsstring>
        <name>_SetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acf578c9e06bc195a58512388fee77c52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _SetMetadata</definition>
        <argsstring>(const UsdObject &amp;object, const TfToken &amp;key, const TfToken &amp;keyPath, const VtValue &amp;value)</argsstring>
        <name>_SetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a634ea83906b7ac4d6c12529065a2201f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _SetEditTargetMappedMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const T &amp;newValue)</argsstring>
        <name>_SetEditTargetMappedMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aeff3c7711b9dffc73e3c356f92c7fabc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _SetMetadataImpl</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const T &amp;value)</argsstring>
        <name>_SetMetadataImpl</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1793" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6bd1eeceedd42df69edd5317cb42ab22" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ClearMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath=TfToken())</argsstring>
        <name>_ClearMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a723e4d43099df98f256c23107d1cd03d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> const  *</type>
        <definition>PcpCache const* _GetPcpCache</definition>
        <argsstring>() const</argsstring>
        <name>_GetPcpCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1805" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="1805" bodyend="1805"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aeffe1d58fe16e5464049a62661a468a3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
        <definition>PcpCache* _GetPcpCache</definition>
        <argsstring>()</argsstring>
        <name>_GetPcpCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1806" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="1806" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a18fc2afc7cd0e7586600ebe1eba3548d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> *</type>
        <definition>const PcpPrimIndex* _GetPcpPrimIndex</definition>
        <argsstring>(const SdfPath &amp;primPath) const</argsstring>
        <name>_GetPcpPrimIndex</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aab38e30570e34597ab54b61a1a578e2d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ReportPcpErrors</definition>
        <argsstring>(const PcpErrorVector &amp;errors, const std::string &amp;context) const</argsstring>
        <name>_ReportPcpErrors</name>
        <param>
          <type>const PcpErrorVector &amp;</type>
          <declname>errors</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1addab5d5a97ec70b1d20034562709c978" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ReportErrors</definition>
        <argsstring>(const PcpErrorVector &amp;errors, const std::vector&lt; std::string &gt; &amp;otherErrors, const std::string &amp;context) const</argsstring>
        <name>_ReportErrors</name>
        <param>
          <type>const PcpErrorVector &amp;</type>
          <declname>errors</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>otherErrors</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad3ee1a652e6a596e6f7c5c4ad41e7f52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposePrimIndexesInParallel</definition>
        <argsstring>(const std::vector&lt; SdfPath &gt; &amp;primIndexPaths, const std::string &amp;context, Usd_InstanceChanges *instanceChanges=nullptr)</argsstring>
        <name>_ComposePrimIndexesInParallel</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt; &amp;</type>
          <declname>primIndexPaths</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>Usd_InstanceChanges *</type>
          <declname>instanceChanges</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a074616b8aaee029d4edca854908fb610" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposeSubtree</definition>
        <argsstring>(Usd_PrimDataPtr prim, Usd_PrimDataConstPtr parent, UsdStagePopulationMask const *mask, const SdfPath &amp;primIndexPath=SdfPath())</argsstring>
        <name>_ComposeSubtree</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primIndexPath</declname>
          <defval><ref refid="class_sdf_path" kindref="compound">SdfPath</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1835" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9a5a8eb5f1260353d5c7773bfbcc70e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposeSubtreeImpl</definition>
        <argsstring>(Usd_PrimDataPtr prim, Usd_PrimDataConstPtr parent, UsdStagePopulationMask const *mask, const SdfPath &amp;primIndexPath=SdfPath())</argsstring>
        <name>_ComposeSubtreeImpl</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primIndexPath</declname>
          <defval><ref refid="class_sdf_path" kindref="compound">SdfPath</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6472e9e06377a12ce0eff76953c59615" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposeSubtreesInParallel</definition>
        <argsstring>(const std::vector&lt; Usd_PrimDataPtr &gt; &amp;prims, const std::vector&lt; SdfPath &gt; *primIndexPaths=nullptr)</argsstring>
        <name>_ComposeSubtreesInParallel</name>
        <param>
          <type>const std::vector&lt; Usd_PrimDataPtr &gt; &amp;</type>
          <declname>prims</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt; *</type>
          <declname>primIndexPaths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa486ced3c478785e09ae6b35c5b35838" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposePrimTypeInfoImpl</definition>
        <argsstring>(Usd_PrimDataPtr prim)</argsstring>
        <name>_ComposePrimTypeInfoImpl</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1849" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7c5921edd344026b63f8610081f3358d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposeChildSubtree</definition>
        <argsstring>(Usd_PrimDataPtr prim, Usd_PrimDataConstPtr parent, UsdStagePopulationMask const *mask)</argsstring>
        <name>_ComposeChildSubtree</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa99c6424e93a5f13ba6f52dae8d14349" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComposeChildren</definition>
        <argsstring>(Usd_PrimDataPtr prim, UsdStagePopulationMask const *mask, bool recurse)</argsstring>
        <name>_ComposeChildren</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recurse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1868" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a982abeba06fddb43cae8c1283c12a8b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataPtr</type>
        <definition>Usd_PrimDataPtr _InstantiatePrim</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>_InstantiatePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a9080151de550f4fca7044486b3028f3a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataPtr</type>
        <definition>Usd_PrimDataPtr _InstantiatePrototypePrim</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>_InstantiatePrototypePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1877" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0f37211bd32060035bab26de4c444cd2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DestroyPrim</definition>
        <argsstring>(Usd_PrimDataPtr prim)</argsstring>
        <name>_DestroyPrim</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0ca00f2dfa0eee98dbc5d195024366df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DestroyPrimsInParallel</definition>
        <argsstring>(const std::vector&lt; SdfPath &gt; &amp;paths)</argsstring>
        <name>_DestroyPrimsInParallel</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a203f127f5a8ff35051acc2ae42cb43ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DestroyDescendents</definition>
        <argsstring>(Usd_PrimDataPtr prim)</argsstring>
        <name>_DestroyDescendents</name>
        <param>
          <type>Usd_PrimDataPtr</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1888" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1290b76e37840b0a36b4dfb0ab44225e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsObjectDescendantOfInstance</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_IsObjectDescendantOfInstance</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a77e97e197800d68f7fb32d54107b081d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_PrimDataConstPtr</type>
        <definition>Usd_PrimDataConstPtr _GetPrototypeForInstance</definition>
        <argsstring>(Usd_PrimDataConstPtr p) const</argsstring>
        <name>_GetPrototypeForInstance</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa9f1fb96f6b22a8fdc54e37c97d38016" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _GetPrimPathUsingPrimIndexAtPath</definition>
        <argsstring>(const SdfPath &amp;primIndexPath) const</argsstring>
        <name>_GetPrimPathUsingPrimIndexAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primIndexPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a0b72584fa40a662e634cc5b562f41a69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _HandleLayersDidChange</definition>
        <argsstring>(const SdfNotice::LayersDidChangeSentPerLayer &amp;)</argsstring>
        <name>_HandleLayersDidChange</name>
        <param>
          <type>const <ref refid="class_sdf_notice_1_1_layers_did_change_sent_per_layer" kindref="compound">SdfNotice::LayersDidChangeSentPerLayer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a1e278a7da951a5e1159b25afb8f64750" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _HandleResolverDidChange</definition>
        <argsstring>(const ArNotice::ResolverChanged &amp;)</argsstring>
        <name>_HandleResolverDidChange</name>
        <param>
          <type>const <ref refid="class_ar_notice_1_1_resolver_changed" kindref="compound">ArNotice::ResolverChanged</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad4f6c5e8771cd8801c840dd78c75e0ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ProcessPendingChanges</definition>
        <argsstring>()</argsstring>
        <name>_ProcessPendingChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1910" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a00b2e059ab4f0467839d3ad36661f3c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _RemovePrim</definition>
        <argsstring>(const SdfPath &amp;fullPath)</argsstring>
        <name>_RemovePrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>fullPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa83f1d969c28812d6ed0aa9919b04f81" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPrimSpecHandle</type>
        <definition>SdfPrimSpecHandle _GetPrimSpec</definition>
        <argsstring>(const SdfPath &amp;fullPath)</argsstring>
        <name>_GetPrimSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>fullPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa9a951671191d10d6588c1db26e14e4d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
        <definition>SdfSpecType _GetDefiningSpecType</definition>
        <argsstring>(Usd_PrimDataConstPtr primData, const TfToken &amp;propName) const</argsstring>
        <name>_GetDefiningSpecType</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>primData</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1923" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a460834ea6d18c70203432e544094b4a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Recompose</definition>
        <argsstring>(const PcpChanges &amp;changes)</argsstring>
        <name>_Recompose</name>
        <param>
          <type>const <ref refid="class_pcp_changes" kindref="compound">PcpChanges</ref> &amp;</type>
          <declname>changes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a58214fe755f5710e3dbfa3215c1a6f1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _Recompose</definition>
        <argsstring>(const PcpChanges &amp;changes, T *pathsToRecompose)</argsstring>
        <name>_Recompose</name>
        <param>
          <type>const <ref refid="class_pcp_changes" kindref="compound">PcpChanges</ref> &amp;</type>
          <declname>changes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>pathsToRecompose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1930" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a432158b74834abe0af1f8c0d8b5ee5e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _RecomposePrims</definition>
        <argsstring>(T *pathsToRecompose)</argsstring>
        <name>_RecomposePrims</name>
        <param>
          <type>T *</type>
          <declname>pathsToRecompose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5283f028a70717a5a289445791eded1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _ComputeSubtreesToRecompose</definition>
        <argsstring>(Iter start, Iter finish, std::vector&lt; Usd_PrimDataPtr &gt; *recompose)</argsstring>
        <name>_ComputeSubtreesToRecompose</name>
        <param>
          <type>Iter</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>finish</declname>
        </param>
        <param>
          <type>std::vector&lt; Usd_PrimDataPtr &gt; *</type>
          <declname>recompose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a95bcb6db8ac6dc84c0504447a5267331" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsValidForLoad</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_IsValidForLoad</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a50a936ec82adbbf6aedd916fd12aae7f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsValidForUnload</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_IsValidForUnload</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1946" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac46eb4db246229e94d4dd21e1ecfad67" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DiscoverPayloads</definition>
        <argsstring>(const SdfPath &amp;rootPath, UsdLoadPolicy policy, SdfPathSet *primIndexPaths, bool unloadedOnly=false, SdfPathSet *usdPrimPaths=nullptr) const</argsstring>
        <name>_DiscoverPayloads</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>rootPath</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5a" kindref="member">UsdLoadPolicy</ref></type>
          <declname>policy</declname>
        </param>
        <param>
          <type>SdfPathSet *</type>
          <declname>primIndexPaths</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unloadedOnly</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>SdfPathSet *</type>
          <declname>usdPrimPaths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1956" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af794714597dc217a029395587c36a6d7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsCustom</definition>
        <argsstring>(const UsdProperty &amp;prop) const</argsstring>
        <name>_IsCustom</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1976" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a884e56dbf1bf61a21f8cb0907605f54c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
        <definition>SdfVariability _GetVariability</definition>
        <argsstring>(const UsdProperty &amp;prop) const</argsstring>
        <name>_GetVariability</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aace5708ce167a76885e499705ebda65e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MakeResolvedAssetPaths</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, SdfAssetPath *assetPaths, size_t numAssetPaths, bool anchorAssetPathsOnly=false) const</argsstring>
        <name>_MakeResolvedAssetPaths</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> *</type>
          <declname>assetPaths</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numAssetPaths</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>anchorAssetPathsOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1982" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a787b830f208741b37896f9c7f4ae30e2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MakeResolvedAssetPathsValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, VtValue *value, bool anchorAssetPathsOnly=false) const</argsstring>
        <name>_MakeResolvedAssetPathsValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>anchorAssetPathsOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad9aad15091ffc18bc6dcfde747fb2a3d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MakeResolvedTimeCodes</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, SdfTimeCode *timeCodes, size_t numTimeCodes) const</argsstring>
        <name>_MakeResolvedTimeCodes</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> *</type>
          <declname>timeCodes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numTimeCodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5e03129e1356469286f4c1eca17b89fa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MakeResolvedPathExpressions</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, SdfPathExpression *pathExprs, size_t numPathExprs) const</argsstring>
        <name>_MakeResolvedPathExpressions</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> *</type>
          <declname>pathExprs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numPathExprs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1995" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1affed976d4c41c0d9a4510952fe80fafa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MakeResolvedAttributeValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, VtValue *value) const</argsstring>
        <name>_MakeResolvedAttributeValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2000" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aa6a4d135ccd7a5a8b234a9c02284d34c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!_HasTypeSpecificResolution&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt; UsdStage::_HasTypeSpecificResolution&lt; T &gt;::value, bool &gt;::type _GetMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, T *result) const</argsstring>
        <name>_GetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2029" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="2454" bodyend="2465"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7a707737e8c703e5033c53d44083f8a3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; _HasTypeSpecificResolution&lt; T &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt;_HasTypeSpecificResolution&lt;T&gt;::value, bool&gt;::type _GetMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, T *result) const</argsstring>
        <name>_GetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acd4b56f95e6363c2137b72ba946f2024" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, VtValue *result) const</argsstring>
        <name>_GetMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2046" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a37587f31f52bc9b6fd9216a3650ac548" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _GetStrongestResolvedMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, SdfAbstractDataValue *result) const</argsstring>
        <name>_GetStrongestResolvedMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2056" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a71764c38b723e3e847de449822dcec94" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>USD_API bool</type>
        <definition>USD_API bool _GetTypeSpecificResolvedMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, T *result) const</argsstring>
        <name>_GetTypeSpecificResolvedMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2067" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac5198a729ef69cbbbcdcc2a5bef27a10" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetAttrTypeImpl</definition>
        <argsstring>(const UsdAttribute &amp;attr, const TfToken &amp;fieldName, bool useFallbacks, Composer *composer) const</argsstring>
        <name>_GetAttrTypeImpl</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2074" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a938eacd0a83446366c0e65c1b1350c9b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetAttrVariabilityImpl</definition>
        <argsstring>(const UsdAttribute &amp;attr, bool useFallbacks, Composer *composer) const</argsstring>
        <name>_GetAttrVariabilityImpl</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2080" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5360c6f1d0aa8632986eb12d757c5894" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetPropCustomImpl</definition>
        <argsstring>(const UsdProperty &amp;prop, bool useFallbacks, Composer *composer) const</argsstring>
        <name>_GetPropCustomImpl</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1afce5ec3df37d4cba654ff0788792d3b3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetSpecialPropMetadataImpl</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks, Composer *composer) const</argsstring>
        <name>_GetSpecialPropMetadataImpl</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6b4a48eac1283ab1012540a9b7dd9a0a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetMetadataImpl</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool includeFallbacks, Composer *composer) const</argsstring>
        <name>_GetMetadataImpl</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3d375b5e18de326728189200459a81e3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Composer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetGeneralMetadataImpl</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool includeFallbacks, Composer *composer) const</argsstring>
        <name>_GetGeneralMetadataImpl</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeFallbacks</declname>
        </param>
        <param>
          <type>Composer *</type>
          <declname>composer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a198b81901f2bff47e63b118c50acb00c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _HasMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, const TfToken &amp;fieldName, const TfToken &amp;keyPath, bool useFallbacks) const</argsstring>
        <name>_HasMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acf8684bc545ba13d5d92c7240d4bf36d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _ListMetadataFields</definition>
        <argsstring>(const UsdObject &amp;obj, bool useFallbacks) const</argsstring>
        <name>_ListMetadataFields</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7b82187d66fd68b183349e4c16d17c5d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _GetAllMetadata</definition>
        <argsstring>(const UsdObject &amp;obj, bool useFallbacks, UsdMetadataValueMap *result, bool anchorAssetPathsOnly=false) const</argsstring>
        <name>_GetAllMetadata</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useFallbacks</declname>
        </param>
        <param>
          <type>UsdMetadataValueMap *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>anchorAssetPathsOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a330e697ae8eb3d9c0d89a590304b2864" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _GetResolveInfo</definition>
        <argsstring>(const UsdAttribute &amp;attr, UsdResolveInfo *resolveInfo, const UsdTimeCode *time=nullptr) const</argsstring>
        <name>_GetResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> *</type>
          <declname>resolveInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> *</type>
          <declname>time</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac453e9594addcc5ea66369558eda20b5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _GetResolveInfoWithResolveTarget</definition>
        <argsstring>(const UsdAttribute &amp;attr, const UsdResolveTarget &amp;resolveTarget, UsdResolveInfo *resolveInfo, const UsdTimeCode *time=nullptr) const</argsstring>
        <name>_GetResolveInfoWithResolveTarget</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> &amp;</type>
          <declname>resolveTarget</declname>
        </param>
        <param>
          <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> *</type>
          <declname>resolveInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> *</type>
          <declname>time</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6e75e422f6ecb4be363e3419e2ee0cde" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetResolveInfo</definition>
        <argsstring>(const UsdAttribute &amp;attr, UsdResolveInfo *resolveInfo, const UsdTimeCode *time=nullptr, _ExtraResolveInfo&lt; T &gt; *extraInfo=nullptr) const</argsstring>
        <name>_GetResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> *</type>
          <declname>resolveInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> *</type>
          <declname>time</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>_ExtraResolveInfo&lt; T &gt; *</type>
          <declname>extraInfo</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a7189f62084813f9cdb27f842db27b921" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetResolveInfoWithResolveTarget</definition>
        <argsstring>(const UsdAttribute &amp;attr, const UsdResolveTarget &amp;resolveTarget, UsdResolveInfo *resolveInfo, const UsdTimeCode *time=nullptr, _ExtraResolveInfo&lt; T &gt; *extraInfo=nullptr) const</argsstring>
        <name>_GetResolveInfoWithResolveTarget</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> &amp;</type>
          <declname>resolveTarget</declname>
        </param>
        <param>
          <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> *</type>
          <declname>resolveInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> *</type>
          <declname>time</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>_ExtraResolveInfo&lt; T &gt; *</type>
          <declname>extraInfo</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a62936ea6561b4bb64fa63371dfbceea3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class MakeUsdResolverFn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetResolveInfoImpl</definition>
        <argsstring>(const UsdAttribute &amp;attr, UsdResolveInfo *resolveInfo, const UsdTimeCode *time, _ExtraResolveInfo&lt; T &gt; *extraInfo, const MakeUsdResolverFn &amp;makeUsdResolveFn) const</argsstring>
        <name>_GetResolveInfoImpl</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> *</type>
          <declname>resolveInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>_ExtraResolveInfo&lt; T &gt; *</type>
          <declname>extraInfo</declname>
        </param>
        <param>
          <type>const MakeUsdResolverFn &amp;</type>
          <declname>makeUsdResolveFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad906494edf9191d3464bb6f0b77885a5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Resolver</type>
          </param>
          <param>
            <type>class MakeUsdResolverFn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetResolvedValueAtDefaultImpl</definition>
        <argsstring>(const UsdProperty &amp;prop, Resolver *resolver, const MakeUsdResolverFn &amp;makeUsdResolverFn) const</argsstring>
        <name>_GetResolvedValueAtDefaultImpl</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>Resolver *</type>
          <declname>resolver</declname>
        </param>
        <param>
          <type>const MakeUsdResolverFn &amp;</type>
          <declname>makeUsdResolverFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a8c2473b1a26724a799a1fb130ce922fb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Resolver</type>
          </param>
          <param>
            <type>class MakeUsdResolverFn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _GetResolvedValueAtTimeImpl</definition>
        <argsstring>(const UsdProperty &amp;prop, Resolver *resolver, const double *time, const MakeUsdResolverFn &amp;makeUsdResolverFn) const</argsstring>
        <name>_GetResolvedValueAtTimeImpl</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>Resolver *</type>
          <declname>resolver</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const MakeUsdResolverFn &amp;</type>
          <declname>makeUsdResolverFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af35b991f0c826dd487e1bf9272502928" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, VtValue *result) const</argsstring>
        <name>_GetValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a3eb635c26f2882769390f543d7f9ca14" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetValue</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, T *result) const</argsstring>
        <name>_GetValue</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a292edbea65b05a50158707005053346b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetValueImpl</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr, Usd_InterpolatorBase *interpolator, T *value) const</argsstring>
        <name>_GetValueImpl</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>Usd_InterpolatorBase *</type>
          <declname>interpolator</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a86033e493e53af3907bda50a8476e9a5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _GetValueFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, UsdTimeCode time, const UsdAttribute &amp;attr, VtValue *result) const</argsstring>
        <name>_GetValueFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ac5fd970c4ed1470b83fdc64dc87d6d35" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>USD_API bool</type>
        <definition>USD_API bool _GetValueFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, UsdTimeCode time, const UsdAttribute &amp;attr, T *result) const</argsstring>
        <name>_GetValueFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a60a967da0f62640e9138a84de02ffa11" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetValueFromResolveInfoImpl</definition>
        <argsstring>(const UsdResolveInfo &amp;info, UsdTimeCode time, const UsdAttribute &amp;attr, Usd_InterpolatorBase *interpolator, T *value) const</argsstring>
        <name>_GetValueFromResolveInfoImpl</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>Usd_InterpolatorBase *</type>
          <declname>interpolator</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1adbbbb27c86717422df0181d20f50b0c4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetDefaultValueFromResolveInfoImpl</definition>
        <argsstring>(const UsdResolveInfo &amp;info, const UsdAttribute &amp;attr, T *value) const</argsstring>
        <name>_GetDefaultValueFromResolveInfoImpl</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1aba94f47f7d3c1cf0aafd43a1321659f8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Usd_AssetPathContext</type>
        <definition>Usd_AssetPathContext _GetAssetPathContext</definition>
        <argsstring>(UsdTimeCode time, const UsdAttribute &amp;attr) const</argsstring>
        <name>_GetAssetPathContext</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1acc5a1ab5d25f72e3ba56c094b5ab1ef4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetTimeSamplesInInterval</definition>
        <argsstring>(const UsdAttribute &amp;attr, const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>_GetTimeSamplesInInterval</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Gets the set of time samples authored for a given attribute within the <computeroutput>interval</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The interval may have any combination of open/infinite and closed/finite endpoints; it may not have open/finite endpoints, however, this restriction may be lifted in the future. Returns false on an error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad50e0244d8dc623a9f4d8007e82b0d13" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetTimeSamplesInIntervalFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, const UsdAttribute &amp;attr, const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>_GetTimeSamplesInIntervalFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5e8b64f755ecb229d7c8383737014e29" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetNumTimeSamples</definition>
        <argsstring>(const UsdAttribute &amp;attr) const</argsstring>
        <name>_GetNumTimeSamples</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a5b5a911c5f3ce6bdd68842b26bc6cd0a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetNumTimeSamplesFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, const UsdAttribute &amp;attr) const</argsstring>
        <name>_GetNumTimeSamplesFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a075bf9b0c2c086c97531cf557aa7cf98" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetBracketingTimeSamples</definition>
        <argsstring>(const UsdAttribute &amp;attr, double desiredTime, bool authoredOnly, double *lower, double *upper, bool *hasSamples) const</argsstring>
        <name>_GetBracketingTimeSamples</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>desiredTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>authoredOnly</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>hasSamples</declname>
        </param>
        <briefdescription>
<para>Gets the bracketing times around a desiredTime. </para>
        </briefdescription>
        <detaileddescription>
<para>Only false on error or if no value exists (default or timeSamples). See <ref refid="class_usd_attribute_1a1f73bf9822e7300dcf4f009e07ae453f" kindref="member">UsdAttribute::GetBracketingTimeSamples</ref> for details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a4aaac46b1ba7f3b75159579c668cb0aa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetBracketingTimeSamplesFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, const UsdAttribute &amp;attr, double desiredTime, bool authoredOnly, double *lower, double *upper, bool *hasSamples) const</argsstring>
        <name>_GetBracketingTimeSamplesFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>desiredTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>authoredOnly</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>hasSamples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ab5eb8afefe3e9449a8954618161c5636" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ValueMightBeTimeVarying</definition>
        <argsstring>(const UsdAttribute &amp;attr) const</argsstring>
        <name>_ValueMightBeTimeVarying</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a059214a485be5057b3ca3e906c0cfd65" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ValueMightBeTimeVaryingFromResolveInfo</definition>
        <argsstring>(const UsdResolveInfo &amp;info, const UsdAttribute &amp;attr) const</argsstring>
        <name>_ValueMightBeTimeVaryingFromResolveInfo</name>
        <param>
          <type>const <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ad20aba48f5cc9b2c50630f0e364e491a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterPerLayerNotices</definition>
        <argsstring>()</argsstring>
        <name>_RegisterPerLayerNotices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a09f37c540db2f5053bbc806cd2b4cbe9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterResolverChangeNotice</definition>
        <argsstring>()</argsstring>
        <name>_RegisterResolverChangeNotice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a68e50ae702e2e9eace1f8bb8809d93e7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* _GetMallocTagId</definition>
        <argsstring>() const</argsstring>
        <name>_GetMallocTagId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="2281" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_stage_1a14244eccf1bb24b75b74a8493b928e1e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>UsdStageRefPtr</type>
        <definition>static UsdStageRefPtr _OpenImpl</definition>
        <argsstring>(InitialLoadSet load, Args const &amp;... args)</argsstring>
        <name>_OpenImpl</name>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a6f3d896a0ea7afd7bed0205be5b56d2a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UsdStageRefPtr</type>
        <definition>static UsdStageRefPtr _InstantiateStage</definition>
        <argsstring>(const SdfLayerRefPtr &amp;rootLayer, const SdfLayerRefPtr &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext, const UsdStagePopulationMask &amp;mask, InitialLoadSet load)</argsstring>
        <name>_InstantiateStage</name>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" kindref="member">InitialLoadSet</ref></type>
          <declname>load</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1a4e869e83f9807f7c634c11dd6663e474" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPrimSpecHandleVector</type>
        <definition>static SdfPrimSpecHandleVector _GetPrimStack</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>_GetPrimStack</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1af683281543e5bbee0b9eb3b762be98f0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; SdfPrimSpecHandle, <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &gt; &gt;</type>
        <definition>static std::vector&lt;std::pair&lt;SdfPrimSpecHandle, SdfLayerOffset&gt; &gt; _GetPrimStackWithLayerOffsets</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>_GetPrimStackWithLayerOffsets</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae0126ca7530eee49e4cffdd7705a6181" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="usd_2sdf_2types_8h_1a18e79a065a46596da11ad51b2c85cad7" kindref="member">SdfSpecifier</ref></type>
        <definition>static SdfSpecifier _GetSpecifier</definition>
        <argsstring>(Usd_PrimDataConstPtr primData)</argsstring>
        <name>_GetSpecifier</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>primData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1add5e2cd67ff3309acc6eb1d67c2b58f5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static TfToken _GetKind</definition>
        <argsstring>(Usd_PrimDataConstPtr primData)</argsstring>
        <name>_GetKind</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>primData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1972" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_1ae80d3fc60b2d19093489fb94289f3f96" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsActive</definition>
        <argsstring>(Usd_PrimDataConstPtr primData)</argsstring>
        <name>_IsActive</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>primData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stage.h" line="1973" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The outermost container for scene description, which owns and presents composed prims as a scenegraph, following the composition recipe recursively described in its associated &quot;root layer&quot;. </para>
    </briefdescription>
    <detaileddescription>
<para>USD derives its persistent-storage scalability by combining and reusing simple compositions into richer aggregates using referencing and layering with sparse overrides. Ultimately, every composition (i.e. &quot;scene&quot;) is identifiable by its root layer, i.e. the <computeroutput>.usd</computeroutput> file, and a scene is instantiated in an application on a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> that presents a composed view of the scene&apos;s root layer. Each simple composition referenced into a larger composition could be presented on its own <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>, at the same (or not) time that it is participating in the larger composition on its own <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>; all of the underlying layers will be shared by the two stages, while each maintains its own scenegraph of composed prims.</para>
<para>A <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> has sole ownership over the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &apos;s with which it is populated, and retains <emphasis>shared</emphasis> ownership (with other stages and direct clients of <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref>&apos;s, via the Sdf_LayerRegistry that underlies all <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> creation methods) of layers. It provides roughly five categories of API that address different aspects of scene management:</para>
<para><itemizedlist>
<listitem><para><ref refid="class_usd_stage_1Usd_lifetimeManagement" kindref="member">Stage lifetime management</ref> methods for constructing and initially populating a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> from an existing layer file, or one that will be created as a result, in memory or on the filesystem.</para>
</listitem><listitem><para><ref refid="class_usd_stage_1Usd_workingSetManagement" kindref="member">Load/unload working set management</ref> methods that allow you to specify which <ref refid="_usd__page__best_practices_1Usd_Payloads" kindref="member">payloads</ref> should be included and excluded from the stage&apos;s composition.</para>
</listitem><listitem><para><ref refid="class_usd_stage_1Usd_variantManagement" kindref="member">Variant management</ref> methods to manage policy for which variant to use when composing prims that provide a named variant set, but do not specify a selection.</para>
</listitem><listitem><para><ref refid="class_usd_stage_1Usd_primManagement" kindref="member">Prim access, creation, and mutation</ref> methods that allow you to find, create, or remove a prim identified by a path on the stage. This group also provides methods for efficiently traversing the prims on the stage.</para>
</listitem><listitem><para><ref refid="class_usd_stage_1Usd_layerManagement" kindref="member">Layers and EditTargets</ref> methods provide access to the layers in the stage&apos;s <emphasis>root LayerStack</emphasis> (i.e. the root layer and all of its recursive sublayers), and the ability to set a <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> into which all subsequent mutations to objects associated with the stage (e.g. prims, properties, etc) will go.</para>
</listitem><listitem><para><ref refid="class_usd_stage_1Usd_stageSerialization" kindref="member">Serialization</ref> methods for &quot;flattening&quot; a composition (to varying degrees), and exporting a completely flattened view of the stage to a string or file. These methods can be very useful for targeted asset optimization and debugging, though care should be exercized with large scenes, as flattening defeats some of the benefits of referenced scene description, and may produce very large results, especially in file formats that do not support data de-duplication, like the usda text format!</para>
</listitem></itemizedlist>
</para>
<sect1 id="class_usd_stage_1Usd_SessionLayer">
<title>Stage Session Layers</title>
<para>Each <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> can possess an optional &quot;session layer&quot;. The purpose of a session layer is to hold ephemeral edits that modify a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>&apos;s contents or behavior in a way that is useful to the client, but should not be considered as permanent mutations to be recorded upon export. A very common use of session layers is to make variant selections, to pick a specific LOD or shading variation, for example. The session layer is also frequently used to override the visibility of geometry and assets in the scene. A session layer, if present, contributes to a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>&apos;s identity, for purposes of stage-caching, etc.</para>
<para>To edit content in a session layer, get the layer&apos;s edit target using stage-&gt;GetEditTargetForLocalLayer(stage-&gt;<ref refid="class_usd_stage_1afcfb38efd355873d96fd2488da4dcddd" kindref="member">GetSessionLayer()</ref>) and set that target in the stage by calling <ref refid="class_usd_stage_1ac90008efb0f2b624fcff43de00188792" kindref="member">SetEditTarget()</ref> or creating a <ref refid="class_usd_edit_context" kindref="compound">UsdEditContext</ref>. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="8291">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="8289">
        <label>UsdStage</label>
        <link refid="class_usd_stage"/>
        <childnode refid="8290" relation="public-inheritance">
        </childnode>
        <childnode refid="8291" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8290">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8294">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="8292">
        <label>UsdStage</label>
        <link refid="class_usd_stage"/>
        <childnode refid="8293" relation="public-inheritance">
        </childnode>
        <childnode refid="8294" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8293">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/stage.h" line="151" column="1" bodyfile="pxr/usd/usd/stage.h" bodystart="151" bodyend="2373"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_usd_stage_1afd719080298c2bcb2fa2fa369c093aec" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_cache</name></member>
      <member refid="class_usd_stage_1a6bd1eeceedd42df69edd5317cb42ab22" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ClearMetadata</name></member>
      <member refid="class_usd_stage_1a7804c28b75399e511b4c9cab5cdf40f5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ClearValue</name></member>
      <member refid="class_usd_stage_1a925be936e7e2c64df1dd5b88f1601f9e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_clipCache</name></member>
      <member refid="class_usd_stage_1afec59681870c30b4678600508b9e1303" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_Close</name></member>
      <member refid="class_usd_stage_1aa99c6424e93a5f13ba6f52dae8d14349" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposeChildren</name></member>
      <member refid="class_usd_stage_1a7c5921edd344026b63f8610081f3358d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposeChildSubtree</name></member>
      <member refid="class_usd_stage_1ad3ee1a652e6a596e6f7c5c4ad41e7f52" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposePrimIndexesInParallel</name></member>
      <member refid="class_usd_stage_1aa486ced3c478785e09ae6b35c5b35838" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposePrimTypeInfoImpl</name></member>
      <member refid="class_usd_stage_1a074616b8aaee029d4edca854908fb610" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposeSubtree</name></member>
      <member refid="class_usd_stage_1a9a5a8eb5f1260353d5c7773bfbcc70e6" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposeSubtreeImpl</name></member>
      <member refid="class_usd_stage_1a6472e9e06377a12ce0eff76953c59615" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComposeSubtreesInParallel</name></member>
      <member refid="class_usd_stage_1a5283f028a70717a5a289445791eded1f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ComputeSubtreesToRecompose</name></member>
      <member refid="class_usd_stage_1a0c18603834b4449560d5d4e990fee5da" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreateAttributeSpecForEditing</name></member>
      <member refid="class_usd_stage_1a83e4d2cfaf854f8ff73af689501e331c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreateNewPropertySpecFromSchema</name></member>
      <member refid="class_usd_stage_1ab6ba910dd26c0e1ddb3c6bb121816058" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreateNewSpecFromSchemaAttribute</name></member>
      <member refid="class_usd_stage_1a1d6b79f4ce73ebec02236874fadeb163" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreateNewSpecFromSchemaRelationship</name></member>
      <member refid="class_usd_stage_1a2a8710fdc9806fe8d605587214c308ec" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreatePrimSpecForEditing</name></member>
      <member refid="class_usd_stage_1a697d286b0ec0e9efb8357f2b24397bef" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreatePropertySpecForEditing</name></member>
      <member refid="class_usd_stage_1a1d9f7af2e77151bd77ffb7c69d12fbf9" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreatePropertySpecForEditing</name></member>
      <member refid="class_usd_stage_1af40aa52e9f1726d1e8e327dc100d006d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_CreateRelationshipSpecForEditing</name></member>
      <member refid="class_usd_stage_1aa86faa3f43e6f1170bb75218fefb1a5c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_DefinePrim</name></member>
      <member refid="class_usd_stage_1a203f127f5a8ff35051acc2ae42cb43ab" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_DestroyDescendents</name></member>
      <member refid="class_usd_stage_1a0f37211bd32060035bab26de4c444cd2" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_DestroyPrim</name></member>
      <member refid="class_usd_stage_1a0ca00f2dfa0eee98dbc5d195024366df" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_DestroyPrimsInParallel</name></member>
      <member refid="class_usd_stage_1ac46eb4db246229e94d4dd21e1ecfad67" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_DiscoverPayloads</name></member>
      <member refid="class_usd_stage_1a4fac3e185443ff0189b3314b5b096664" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_dispatcher</name></member>
      <member refid="class_usd_stage_1af20cb6b0fa790f08dfd214725b4c9279" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_editTarget</name></member>
      <member refid="class_usd_stage_1a948f054acd2aa3faaf7fc5f4f4055ea5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_editTargetIsLocalLayer</name></member>
      <member refid="class_usd_stage_1a06efb7319a4f334cfd5f71867b20cc51" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_FlattenProperty</name></member>
      <member refid="class_usd_stage_1a7b82187d66fd68b183349e4c16d17c5d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetAllMetadata</name></member>
      <member refid="class_usd_stage_1aba94f47f7d3c1cf0aafd43a1321659f8" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetAssetPathContext</name></member>
      <member refid="class_usd_stage_1ac5198a729ef69cbbbcdcc2a5bef27a10" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetAttrTypeImpl</name></member>
      <member refid="class_usd_stage_1a938eacd0a83446366c0e65c1b1350c9b" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetAttrVariabilityImpl</name></member>
      <member refid="class_usd_stage_1a075bf9b0c2c086c97531cf557aa7cf98" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetBracketingTimeSamples</name></member>
      <member refid="class_usd_stage_1a4aaac46b1ba7f3b75159579c668cb0aa" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetBracketingTimeSamplesFromResolveInfo</name></member>
      <member refid="class_usd_stage_1adbbbb27c86717422df0181d20f50b0c4" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetDefaultValueFromResolveInfoImpl</name></member>
      <member refid="class_usd_stage_1aa9a951671191d10d6588c1db26e14e4d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetDefiningSpecType</name></member>
      <member refid="class_usd_stage_1a3d375b5e18de326728189200459a81e3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetGeneralMetadataImpl</name></member>
      <member refid="class_usd_stage_1af90bbe470d4c9a51bd3191f37f16100f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetInstancesForPrototype</name></member>
      <member refid="class_usd_stage_1add5e2cd67ff3309acc6eb1d67c2b58f5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetKind</name></member>
      <member refid="class_usd_stage_1a68e50ae702e2e9eace1f8bb8809d93e7" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetMallocTagId</name></member>
      <member refid="class_usd_stage_1aa6a4d135ccd7a5a8b234a9c02284d34c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetMetadata</name></member>
      <member refid="class_usd_stage_1a7a707737e8c703e5033c53d44083f8a3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetMetadata</name></member>
      <member refid="class_usd_stage_1acd4b56f95e6363c2137b72ba946f2024" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetMetadata</name></member>
      <member refid="class_usd_stage_1a6b4a48eac1283ab1012540a9b7dd9a0a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetMetadataImpl</name></member>
      <member refid="class_usd_stage_1a5e8b64f755ecb229d7c8383737014e29" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetNumTimeSamples</name></member>
      <member refid="class_usd_stage_1a5b5a911c5f3ce6bdd68842b26bc6cd0a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetNumTimeSamplesFromResolveInfo</name></member>
      <member refid="class_usd_stage_1a723e4d43099df98f256c23107d1cd03d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPcpCache</name></member>
      <member refid="class_usd_stage_1aeffe1d58fe16e5464049a62661a468a3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPcpCache</name></member>
      <member refid="class_usd_stage_1a18fc2afc7cd0e7586600ebe1eba3548d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPcpPrimIndex</name></member>
      <member refid="class_usd_stage_1a20a0fffe4e3a5ac7f053b1da6d17c866" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimDataAtPath</name></member>
      <member refid="class_usd_stage_1a6796bcfdadd7813d795a99783f60cb0a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimDataAtPath</name></member>
      <member refid="class_usd_stage_1acc10ded5ad2c52cf2055ffee531a4080" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimDataAtPathOrInPrototype</name></member>
      <member refid="class_usd_stage_1aa9f1fb96f6b22a8fdc54e37c97d38016" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimPathUsingPrimIndexAtPath</name></member>
      <member refid="class_usd_stage_1aa83f1d969c28812d6ed0aa9919b04f81" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimSpec</name></member>
      <member refid="class_usd_stage_1a4e869e83f9807f7c634c11dd6663e474" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimStack</name></member>
      <member refid="class_usd_stage_1af683281543e5bbee0b9eb3b762be98f0" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrimStackWithLayerOffsets</name></member>
      <member refid="class_usd_stage_1a5360c6f1d0aa8632986eb12d757c5894" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPropCustomImpl</name></member>
      <member refid="class_usd_stage_1a4360cac5859184125c3ff4076ae2847b" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPropertyStack</name></member>
      <member refid="class_usd_stage_1a1755221d1ef5266e2b6fe54419c525da" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPropertyStackWithLayerOffsets</name></member>
      <member refid="class_usd_stage_1a77e97e197800d68f7fb32d54107b081d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetPrototypeForInstance</name></member>
      <member refid="class_usd_stage_1ad906494edf9191d3464bb6f0b77885a5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolvedValueAtDefaultImpl</name></member>
      <member refid="class_usd_stage_1a8c2473b1a26724a799a1fb130ce922fb" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolvedValueAtTimeImpl</name></member>
      <member refid="class_usd_stage_1a330e697ae8eb3d9c0d89a590304b2864" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolveInfo</name></member>
      <member refid="class_usd_stage_1a6e75e422f6ecb4be363e3419e2ee0cde" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolveInfo</name></member>
      <member refid="class_usd_stage_1a62936ea6561b4bb64fa63371dfbceea3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolveInfoImpl</name></member>
      <member refid="class_usd_stage_1ac453e9594addcc5ea66369558eda20b5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolveInfoWithResolveTarget</name></member>
      <member refid="class_usd_stage_1a7189f62084813f9cdb27f842db27b921" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetResolveInfoWithResolveTarget</name></member>
      <member refid="class_usd_stage_1a9d815bce92497df0b9593329653cfb12" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetSchemaAttribute</name></member>
      <member refid="class_usd_stage_1abaa6c1732b082e425dead06eb107fb53" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetSchemaProperty</name></member>
      <member refid="class_usd_stage_1a657acfa9c165a510cc7e4408abd33420" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetSchemaRelationship</name></member>
      <member refid="class_usd_stage_1afce5ec3df37d4cba654ff0788792d3b3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetSpecialPropMetadataImpl</name></member>
      <member refid="class_usd_stage_1ae0126ca7530eee49e4cffdd7705a6181" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetSpecifier</name></member>
      <member refid="class_usd_stage_1a37587f31f52bc9b6fd9216a3650ac548" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetStrongestResolvedMetadata</name></member>
      <member refid="class_usd_stage_1acc5a1ab5d25f72e3ba56c094b5ab1ef4" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_stage_1ad50e0244d8dc623a9f4d8007e82b0d13" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetTimeSamplesInIntervalFromResolveInfo</name></member>
      <member refid="class_usd_stage_1a71764c38b723e3e847de449822dcec94" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetTypeSpecificResolvedMetadata</name></member>
      <member refid="class_usd_stage_1a2c6875876c420b08ca5b2baed2ac51bc" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>_GetTypeSpecificResolvedMetadata</name></member>
      <member refid="class_usd_stage_1af35b991f0c826dd487e1bf9272502928" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValue</name></member>
      <member refid="class_usd_stage_1a3eb635c26f2882769390f543d7f9ca14" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValue</name></member>
      <member refid="class_usd_stage_1a86033e493e53af3907bda50a8476e9a5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValueFromResolveInfo</name></member>
      <member refid="class_usd_stage_1ac5fd970c4ed1470b83fdc64dc87d6d35" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValueFromResolveInfo</name></member>
      <member refid="class_usd_stage_1a60a967da0f62640e9138a84de02ffa11" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValueFromResolveInfoImpl</name></member>
      <member refid="class_usd_stage_1a292edbea65b05a50158707005053346b" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetValueImpl</name></member>
      <member refid="class_usd_stage_1a884e56dbf1bf61a21f8cb0907605f54c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_GetVariability</name></member>
      <member refid="class_usd_stage_1a0b72584fa40a662e634cc5b562f41a69" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_HandleLayersDidChange</name></member>
      <member refid="class_usd_stage_1a1e278a7da951a5e1159b25afb8f64750" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_HandleResolverDidChange</name></member>
      <member refid="class_usd_stage_1a198b81901f2bff47e63b118c50acb00c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_HasMetadata</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>UsdStage</scope><name>_HasRemnant</name></member>
      <member refid="class_usd_stage_1a6e1a6d67a3cb6378502c109dd39a4e62" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_initialLoadSet</name></member>
      <member refid="class_usd_stage_1aec4c6c4afd92e886836aefc6a7198826" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_instanceCache</name></member>
      <member refid="class_usd_stage_1a982abeba06fddb43cae8c1283c12a8b7" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_InstantiatePrim</name></member>
      <member refid="class_usd_stage_1a9080151de550f4fca7044486b3028f3a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_InstantiatePrototypePrim</name></member>
      <member refid="class_usd_stage_1a6f3d896a0ea7afd7bed0205be5b56d2a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_InstantiateStage</name></member>
      <member refid="class_usd_stage_1a9719d06f9cb138a900e4a9615471b496" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_interpolationType</name></member>
      <member refid="class_usd_stage_1abece05b9cfd4b8161f5808774981ae25" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_invalidPrimTypeToFallbackMap</name></member>
      <member refid="class_usd_stage_1ae80d3fc60b2d19093489fb94289f3f96" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsActive</name></member>
      <member refid="class_usd_stage_1a8953999bcd968998cb563415256bab50" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_isClosingStage</name></member>
      <member refid="class_usd_stage_1af794714597dc217a029395587c36a6d7" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsCustom</name></member>
      <member refid="class_usd_stage_1a1290b76e37840b0a36b4dfb0ab44225e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsObjectDescendantOfInstance</name></member>
      <member refid="class_usd_stage_1a95bcb6db8ac6dc84c0504447a5267331" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsValidForLoad</name></member>
      <member refid="class_usd_stage_1a50a936ec82adbbf6aedd916fd12aae7f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsValidForUnload</name></member>
      <member refid="class_usd_stage_1ac989a320bde04f7ca483922405441f0e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_IsValidPathForCreatingPrim</name></member>
      <member refid="class_usd_stage_1aba5c0f91bf8a94d8f1ea9b2e0b789946" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_isWritingFallbackPrimTypes</name></member>
      <member refid="class_usd_stage_1a6d4456d0586eef08dd4bd3a3e61cee1d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_lastChangeSerialNumber</name></member>
      <member refid="class_usd_stage_1a7bfc005244e72867638c669318b08aea" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_LayerAndNoticeKeyVec</name></member>
      <member refid="class_usd_stage_1a55b8861dfa892558645ceb390fdc1c18" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_layersAndNoticeKeys</name></member>
      <member refid="class_usd_stage_1acf8684bc545ba13d5d92c7240d4bf36d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ListMetadataFields</name></member>
      <member refid="class_usd_stage_1a22cd0680c1131b7b215adef9a18bd4e5" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_loadRules</name></member>
      <member refid="class_usd_stage_1aace5708ce167a76885e499705ebda65e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_MakeResolvedAssetPaths</name></member>
      <member refid="class_usd_stage_1a787b830f208741b37896f9c7f4ae30e2" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_MakeResolvedAssetPathsValue</name></member>
      <member refid="class_usd_stage_1affed976d4c41c0d9a4510952fe80fafa" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_MakeResolvedAttributeValue</name></member>
      <member refid="class_usd_stage_1a5e03129e1356469286f4c1eca17b89fa" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_MakeResolvedPathExpressions</name></member>
      <member refid="class_usd_stage_1ad9aad15091ffc18bc6dcfde747fb2a3d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_MakeResolvedTimeCodes</name></member>
      <member refid="class_usd_stage_1a878e6dbc1bda50a04baa2cb7eaf9ca07" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_mallocTagID</name></member>
      <member refid="class_usd_stage_1a14244eccf1bb24b75b74a8493b928e1e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_OpenImpl</name></member>
      <member refid="class_usd_stage_1a8a350be63b77c9c7ad92bc9b2980fae1" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_pendingChanges</name></member>
      <member refid="class_usd_stage_1aa03126a01e9c596943bef272ccc84c6f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_populationMask</name></member>
      <member refid="class_usd_stage_1a7319e15b61fa8a0241cbcf237ae4bca3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_primMap</name></member>
      <member refid="class_usd_stage_1ad4f6c5e8771cd8801c840dd78c75e0ad" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ProcessPendingChanges</name></member>
      <member refid="class_usd_stage_1a5ee9ea94bb9918b1b9199a1efd13c26b" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_pseudoRoot</name></member>
      <member refid="class_usd_stage_1a460834ea6d18c70203432e544094b4a3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_Recompose</name></member>
      <member refid="class_usd_stage_1a58214fe755f5710e3dbfa3215c1a6f1f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_Recompose</name></member>
      <member refid="class_usd_stage_1a432158b74834abe0af1f8c0d8b5ee5e2" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_RecomposePrims</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>UsdStage</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>UsdStage</scope><name>_Register</name></member>
      <member refid="class_usd_stage_1ad20aba48f5cc9b2c50630f0e364e491a" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_RegisterPerLayerNotices</name></member>
      <member refid="class_usd_stage_1a09f37c540db2f5053bbc806cd2b4cbe9" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_RegisterResolverChangeNotice</name></member>
      <member refid="class_usd_stage_1a00b2e059ab4f0467839d3ad36661f3c0" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_RemovePrim</name></member>
      <member refid="class_usd_stage_1a4b1d0d33bd3fd1d4933729c6a15d2d30" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_RemoveProperty</name></member>
      <member refid="class_usd_stage_1addab5d5a97ec70b1d20034562709c978" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ReportErrors</name></member>
      <member refid="class_usd_stage_1aab38e30570e34597ab54b61a1a578e2d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ReportPcpErrors</name></member>
      <member refid="class_usd_stage_1adc6304cf7064af2e3c6e4702a0340d44" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_resolverChangeKey</name></member>
      <member refid="class_usd_stage_1ac9f159c5186bdd86da6ccf7e71524002" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_rootLayer</name></member>
      <member refid="class_usd_stage_1ab155eccd509d1205b7e9bbab27abef42" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_sessionLayer</name></member>
      <member refid="class_usd_stage_1a634ea83906b7ac4d6c12529065a2201f" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetEditTargetMappedMetadata</name></member>
      <member refid="class_usd_stage_1a185b99c0d7a9bd1d47d45913a8eb8feb" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetEditTargetMappedValue</name></member>
      <member refid="class_usd_stage_1ac6ed7ff4361bb9e74ddb559bd5177ffc" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetMetadata</name></member>
      <member refid="class_usd_stage_1a0f4e6d3f841e67e1ad68f7566295aa81" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetMetadata</name></member>
      <member refid="class_usd_stage_1acf578c9e06bc195a58512388fee77c52" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetMetadata</name></member>
      <member refid="class_usd_stage_1aeff3c7711b9dffc73e3c356f92c7fabc" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetMetadataImpl</name></member>
      <member refid="class_usd_stage_1a29a8e0b1fd31c78c84f56eca0c2aabee" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetValue</name></member>
      <member refid="class_usd_stage_1a25c7f576c946c3ea1bf2b84faaad878c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetValue</name></member>
      <member refid="class_usd_stage_1a1e843bdab3ac2e2977f143554dda9d58" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetValue</name></member>
      <member refid="class_usd_stage_1a61fe7dab03cdf61970876178eed92da8" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_SetValueImpl</name></member>
      <member refid="class_usd_stage_1a4f2a30fffe1d8aebbdbaffa5e19eb8bb" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_usedLayersRevision</name></member>
      <member refid="class_usd_stage_1ae1b399449057f3d2f5b6247499fa03d8" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ValidateEditPrim</name></member>
      <member refid="class_usd_stage_1a06996d980fb63246c91ba0ce3bbd81f9" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ValidateEditPrimAtPath</name></member>
      <member refid="class_usd_stage_1ab5eb8afefe3e9449a8954618161c5636" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ValueMightBeTimeVarying</name></member>
      <member refid="class_usd_stage_1a059214a485be5057b3ca3e906c0cfd65" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>_ValueMightBeTimeVaryingFromResolveInfo</name></member>
      <member refid="class_usd_stage_1a76429ce323495ced5ec3fe5d8b240d0e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ClearDefaultPrim</name></member>
      <member refid="class_usd_stage_1af75ddb7982a5b5c77f9840e67df94435" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ClearMetadata</name></member>
      <member refid="class_usd_stage_1afd756d242f6026a3d7c5606badbf8411" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ClearMetadataByDictKey</name></member>
      <member refid="class_usd_stage_1a9437bc67851eb38bade51612f3aaa41f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateClassPrim</name></member>
      <member refid="class_usd_stage_1a7fabfeea7271b1e6e5f308865f146391" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateInMemory</name></member>
      <member refid="class_usd_stage_1a3c646259d7ddb2092e9cd62fc44bd57e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateInMemory</name></member>
      <member refid="class_usd_stage_1aa7ec81bad99609b7ca1795630dbbdf61" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateInMemory</name></member>
      <member refid="class_usd_stage_1a5ec917a246b9918a97c0eb6a590a2442" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateInMemory</name></member>
      <member refid="class_usd_stage_1a975784d8b8d9a44fbfdde692554d6b25" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateInMemory</name></member>
      <member refid="class_usd_stage_1a50c3f0a412aee9decb010787e5ca2e3e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateNew</name></member>
      <member refid="class_usd_stage_1a1eb7cf4c070e56d173246c5bdc1ff8e3" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateNew</name></member>
      <member refid="class_usd_stage_1a7f4f7c64e079d5954115616207b82331" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateNew</name></member>
      <member refid="class_usd_stage_1aa31488d38bf86c3e211a33de56a01902" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>CreateNew</name></member>
      <member refid="class_usd_stage_1a6151ae804f7145e451d9aafdde347730" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>DefinePrim</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>EnableNotification2</name></member>
      <member refid="class_usd_stage_1a5d76e23eede294e2988de22b45edc3e2" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ExpandPopulationMask</name></member>
      <member refid="class_usd_stage_1a35f4bcec4c4fbd7366d4be6de13efc6d" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ExpandPopulationMask</name></member>
      <member refid="class_usd_stage_1a3f3fa959eb4a0a6ac2ec5ca8f248cb95" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Export</name></member>
      <member refid="class_usd_stage_1a164713764becadb3b88f1c8d7694631b" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ExportToString</name></member>
      <member refid="class_usd_stage_1adf1b7f717f7418333440a0a318793b0d" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>FindLoadable</name></member>
      <member refid="class_usd_stage_1ae3271778fa2ceeb82fbd51296610820a" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Flatten</name></member>
      <member refid="class_usd_stage_1a61e1347e76e9f3e269f8be1df3e99a42" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetAttributeAtPath</name></member>
      <member refid="class_usd_stage_1a6c0776d95442b399cf8dcbd185a4109f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetColorConfigFallbacks</name></member>
      <member refid="class_usd_stage_1abca98172991cd4bd223da2ac9742d495" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetColorConfiguration</name></member>
      <member refid="class_usd_stage_1adb3f32f62031ea113321d4c66978692f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetColorManagementSystem</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetCurrentCount</name></member>
      <member refid="class_usd_stage_1a64ee78980b91d82dddfae78300276bca" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetDefaultPrim</name></member>
      <member refid="class_usd_stage_1a16cb44251a2c5964583fd9076de3f753" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetEditTarget</name></member>
      <member refid="class_usd_stage_1a39a51571cd00e6f38572f7f55a101cf5" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetEditTargetForLocalLayer</name></member>
      <member refid="class_usd_stage_1acceed6daf2f94a536ff3bc8d4bfcaf45" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetEditTargetForLocalLayer</name></member>
      <member refid="class_usd_stage_1a3c248e832dd9c974f9c24f6f4ef6f312" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetEndTimeCode</name></member>
      <member refid="class_usd_stage_1a5cf22202fde6282744edc795fa81a02f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetFramesPerSecond</name></member>
      <member refid="class_usd_stage_1a34d1d78fe8e31f0ba439d2265d694af5" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetGlobalVariantFallbacks</name></member>
      <member refid="class_usd_stage_1a6e804b49f3bc5ed54976bf1d2a458182" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetInterpolationType</name></member>
      <member refid="class_usd_stage_1a9dfcae900fd07e3344e087ea1bd478cb" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetLayerStack</name></member>
      <member refid="class_usd_stage_1a8a32bd6860d97da6d01d6dfaa7eb8e2c" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetLoadRules</name></member>
      <member refid="class_usd_stage_1a3051c81e353b2d151d360b24b8f9fb88" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetLoadSet</name></member>
      <member refid="class_usd_stage_1ad2d76f736733f3ad51aa1ea1df6f4d44" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetMetadata</name></member>
      <member refid="class_usd_stage_1af114545bd56cd7619e7d4f2f884e4128" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetMetadata</name></member>
      <member refid="class_usd_stage_1aba47c41ec8cc536290c04e219f12589c" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_stage_1a3bdf70a1d4a8754a0cb51cddab11b299" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_stage_1a41ce205d182683fe0c45b97642d8051c" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetMutedLayers</name></member>
      <member refid="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetObjectAtPath</name></member>
      <member refid="class_usd_stage_1adabe8c6ff9089b848260f4cf43958cc7" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPathResolverContext</name></member>
      <member refid="class_usd_stage_1a3eb4c2665d6ccecf2998b76041a9a3df" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPopulationMask</name></member>
      <member refid="class_usd_stage_1a6ceb556070804b712c01a7968f925735" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPrimAtPath</name></member>
      <member refid="class_usd_stage_1a5e639a0e2f163cb857149604f6042bd3" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPropertyAtPath</name></member>
      <member refid="class_usd_stage_1aedabd9cb88feca10c5fa96c7454df493" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPrototypes</name></member>
      <member refid="class_usd_stage_1a5567a555616cd3bf5fd2fc787f31accc" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetPseudoRoot</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetRefCount</name></member>
      <member refid="class_usd_stage_1aea0c4da4c5bc2470f0c5a271215c2b01" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetRelationshipAtPath</name></member>
      <member refid="class_usd_stage_1ae694960a036c724e285d044aea210d15" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetRootLayer</name></member>
      <member refid="class_usd_stage_1afcfb38efd355873d96fd2488da4dcddd" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetSessionLayer</name></member>
      <member refid="class_usd_stage_1a8999976ae5f8f57bc3ab845ea0453155" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetStartTimeCode</name></member>
      <member refid="class_usd_stage_1a85092d7455ae894d50224e761dc6e840" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetTimeCodesPerSecond</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_usd_stage_1a3b7937dd0b3f1d546e93ad4219916de9" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>GetUsedLayers</name></member>
      <member refid="class_usd_stage_1a37211404a939811e841d90c65cd19999" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasAuthoredMetadata</name></member>
      <member refid="class_usd_stage_1a20a01b0dd0dd51f9439b6a3a231c76ef" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasAuthoredMetadataDictKey</name></member>
      <member refid="class_usd_stage_1ac66540a6d818fce71dce6f9db4b7385b" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasAuthoredTimeCodeRange</name></member>
      <member refid="class_usd_stage_1a66e5592905d6be9b2be90a7dcc450873" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasDefaultPrim</name></member>
      <member refid="class_usd_stage_1aaff8c7b5cd9cdee23c5209c0ec7281b7" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasLocalLayer</name></member>
      <member refid="class_usd_stage_1ae2d99fd05dbc39c2d9746fe639c24825" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasMetadata</name></member>
      <member refid="class_usd_stage_1a911c19d77fe0552877918517818e7399" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>HasMetadataDictKey</name></member>
      <member refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>InitialLoadSet</name></member>
      <member refid="class_usd_stage_1a740db7501c0303b6c1e6e9ce87b10092" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>IsLayerMuted</name></member>
      <member refid="class_usd_stage_1aa7ae008cf02c54df2beee58c1228c5be" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>IsSupportedFile</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>IsUnique</name></member>
      <member refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Load</name></member>
      <member refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ad1ac95bf08ec6edd508491eff363b6a1" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>LoadAll</name></member>
      <member refid="class_usd_stage_1a1305b94bed8097515432ee78061ff009" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>LoadAndUnload</name></member>
      <member refid="class_usd_stage_1a7a661b8f729152c673078fbbafe29a46ae9175fcb3934ccf24235741a50556ab3" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>LoadNone</name></member>
      <member refid="class_usd_stage_1aa84244f8ed7ba7f037b8c9d9256cfeb5" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>MuteAndUnmuteLayers</name></member>
      <member refid="class_usd_stage_1a8af4162fe11cc6a5f21a39e770d397c2" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>MuteLayer</name></member>
      <member refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1ad91922a33aa5d206c8f5209fac757162" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1ad3e185c150ee38ae13fb76115863d108" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1a14a0be35427859ec030deedc150b5467" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1ab7df274caa1c118d2b7dadce1b600fe1" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1af5f83e49d0ca636b1a655192a42e9379" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Open</name></member>
      <member refid="class_usd_stage_1ade1d90d759a085022ba76ff910815320" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_usd_stage_1ad891becaa0378fe97a07bbcfd07f7aef" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_usd_stage_1a1ab01611f8cf724ea56a2a162ac1cb07" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_usd_stage_1ae79d5c92dda3279271005de91d9e7950" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_usd_stage_1a9833139e1c034c82bd06740ea1658847" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_usd_stage_1a86262226faba041d3c5a9cf6b99768bd" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OpenMasked</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>operator=</name></member>
      <member refid="class_usd_stage_1a29523207b89d9a7e47146e4a57c9b1b0" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>OverridePrim</name></member>
      <member refid="class_usd_stage_1ac9dae57efc0efe2e82b273f0e54c1455" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>PathToNodeMap</name></member>
      <member refid="class_usd_stage_1abf674de32ff446b3f2323b88adce89f8" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Reload</name></member>
      <member refid="class_usd_stage_1ac605faad8fc2673263775b1eecad2955" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>RemovePrim</name></member>
      <member refid="class_usd_stage_1a5d23f48d36d27f3f8e5099a8c655fa4e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>ResolveIdentifierToEditTarget</name></member>
      <member refid="class_usd_stage_1adefa2f7ebfc4d8c09f0cd54419aa36c4" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Save</name></member>
      <member refid="class_usd_stage_1a94b48dc29e9c66e3efed8cb42ff18618" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SaveSessionLayers</name></member>
      <member refid="class_usd_stage_1a149deb93f08b3e0da85e3dd12a20c821" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetColorConfigFallbacks</name></member>
      <member refid="class_usd_stage_1aaff338cb37de09b0fa70ea0e693c9cd2" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetColorConfiguration</name></member>
      <member refid="class_usd_stage_1a7571fb2cdc0e342775854284d53a78ab" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetColorManagementSystem</name></member>
      <member refid="class_usd_stage_1a82b260faf91fbf721b0503075f2861e2" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetDefaultPrim</name></member>
      <member refid="class_usd_stage_1ac90008efb0f2b624fcff43de00188792" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetEditTarget</name></member>
      <member refid="class_usd_stage_1a05e5e8a51041bc7f9b7f1165ccec9fa4" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetEndTimeCode</name></member>
      <member refid="class_usd_stage_1ab3cbe7df64c92e9fa082a0ef092c21e1" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetFramesPerSecond</name></member>
      <member refid="class_usd_stage_1addaffc14d334e5cb1e3a90c02fadcaf6" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetGlobalVariantFallbacks</name></member>
      <member refid="class_usd_stage_1ad29a9aaba12c36407936a21abf514ea4" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetInterpolationType</name></member>
      <member refid="class_usd_stage_1acf86347f816ee4ac98dbf16e3b09ff2a" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetLoadRules</name></member>
      <member refid="class_usd_stage_1a1a5325c3bfad050926f03f867a803c03" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetMetadata</name></member>
      <member refid="class_usd_stage_1abccca1c487755a7f08e6e4b042d39ede" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetMetadata</name></member>
      <member refid="class_usd_stage_1a7f3b367075ca8d6bba9fbf3636183ff3" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_stage_1a0c04b54500b5b6d5ef0e8aca66282770" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_stage_1a2a431cb32a2d50de05ac206c474606cd" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetPopulationMask</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_usd_stage_1aef35e121cd9662129b6e338e85ceab44" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetStartTimeCode</name></member>
      <member refid="class_usd_stage_1a61c421fcf601c28f2efc5597b8058e22" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetTimeCodesPerSecond</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>TfWeakBase</name></member>
      <member refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Traverse</name></member>
      <member refid="class_usd_stage_1a69332eeeb1970d4908a72d0c8fd0c3cb" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Traverse</name></member>
      <member refid="class_usd_stage_1a71559921b1e48949207817b2fd8bd01b" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>TraverseAll</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_usd_stage_1aedb4cb8d8943a759152b70f08e340a2c" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>Unload</name></member>
      <member refid="class_usd_stage_1a2f8158f35f1f76b227f51f875db4c5d1" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>UnmuteLayer</name></member>
      <member refid="class_usd_stage_1aec2b7ca1194f894ff2b952906abfd86c" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_stage_1aa332483a46ed09b95ae5344dcf051b92" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdAttribute</name></member>
      <member refid="class_usd_stage_1aacf3a34e9976aa79c506135cb10ea20d" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_stage_1a22d563be232e30ddb41a8f627e982e4e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdEditTarget</name></member>
      <member refid="class_usd_stage_1a597363dae3d685d482398a680c639ede" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdInherits</name></member>
      <member refid="class_usd_stage_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdObject</name></member>
      <member refid="class_usd_stage_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdPrim</name></member>
      <member refid="class_usd_stage_1a7843eb26c70fa29eb383201c78ef69c3" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdProperty</name></member>
      <member refid="class_usd_stage_1a42568ffb2bb6a89af14beca5d6603ad9" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdRelationship</name></member>
      <member refid="class_usd_stage_1a243a743ae795cc506ad49a7b026d05d0" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdSpecializes</name></member>
      <member refid="class_usd_stage_1a9556d35d759a6be7c07382f485b2cfe0" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdStage</name></member>
      <member refid="class_usd_stage_1a1b3761aadba2edf545f214f9e7757d8e" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdVariantSet</name></member>
      <member refid="class_usd_stage_1a4b76e42b0c2af879e36c8f304d7b0838" prot="private" virt="non-virtual"><scope>UsdStage</scope><name>UsdVariantSets</name></member>
      <member refid="class_usd_stage_1a14897ca124a0fb4a62e6ed2ccbbdbf4f" prot="public" virt="non-virtual"><scope>UsdStage</scope><name>WriteFallbackPrimTypes</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>UsdStage</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>UsdStage</scope><name>~TfWeakBase</name></member>
      <member refid="class_usd_stage_1af08d70412c489100b8243cf5d0e61f99" prot="public" virt="virtual"><scope>UsdStage</scope><name>~UsdStage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
