<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_asset_path" kind="class" language="C++" prot="public">
    <compoundname>SdfAssetPath</compoundname>
    <includes refid="asset_path_8h" local="no">assetPath.h</includes>
    <innerclass refid="struct_sdf_asset_path_1_1_hash" prot="public">SdfAssetPath::Hash</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_sdf_asset_path_1af37ce46611c4dacb9ae3fc2dae74fb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfAssetPath</definition>
        <argsstring>()</argsstring>
        <name>SdfAssetPath</name>
        <briefdescription>
<para>Construct an empty asset path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a3c2e18b4d939cd6e2444a40d0e5d166b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfAssetPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>SdfAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Construct an asset path with <computeroutput>path</computeroutput> and no associated resolved path. </para>
        </briefdescription>
        <detaileddescription>
<para>If the passed <computeroutput>path</computeroutput> is not valid UTF-8 or contains C0 or C1 control characters, raise a <ref refid="class_tf_error" kindref="compound">TfError</ref> and return the default-constructed empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a461b87a90dc145e26d502430b6ac628a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfAssetPath</definition>
        <argsstring>(const std::string &amp;path, const std::string &amp;resolvedPath)</argsstring>
        <name>SdfAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <briefdescription>
<para>Construct an asset path with <computeroutput>path</computeroutput> and an associated <computeroutput>resolvedPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If either the passed \path or <computeroutput>resolvedPath</computeroutput> are not valid UTF-8 or either contain C0 or C1 control characters, raise a <ref refid="class_tf_error" kindref="compound">TfError</ref> and return the default-constructed empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="69" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="class_sdf_asset_path_1ac161ddc7be63c8e020cf76fbdb8bba06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality, including the resolved path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="77" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a8604fb2dbefb8a90ca82ac075a8490c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfAssetPath::operator==(const SdfAssetPath&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="84" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a8194fa4173e3120ec617c23583d57777" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator&lt;</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Ordering first by asset path, then by resolved path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a40b9599751fc23816b9f20c16b559998" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfAssetPath::operator&lt;(const SdfAssetPath&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="93" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1aeb3b2ac9563093491b3ed5df99c55432" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfAssetPath::operator&lt;(const SdfAssetPath&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="99" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a5690bc236d644aa29831de322d088edc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const SdfAssetPath &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfAssetPath::operator&lt;(const SdfAssetPath&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="105" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Hash function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="110" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_asset_path_1a45c28660cf934be68eef633efc56f43a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfAssetPath &amp;ap)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="122" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="122" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="class_sdf_asset_path_1ae2f0ca9bb4cce9a33e4625d3159c4d80" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetAssetPath</definition>
        <argsstring>() const &amp;</argsstring>
        <name>GetAssetPath</name>
        <briefdescription>
<para>Return the asset path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="130" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a6fe71de6ab38d667e8e4c027dc8e59cb" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetAssetPath</definition>
        <argsstring>() const &amp;&amp;</argsstring>
        <name>GetAssetPath</name>
        <briefdescription>
<para>Overload for rvalues, move out the asset path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="135" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1aff2f95c537d0b53a8d155d0cad1969aa" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetResolvedPath</definition>
        <argsstring>() const &amp;</argsstring>
        <name>GetResolvedPath</name>
        <briefdescription>
<para>Return the resolved asset path, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> carries a resolved path only if its creator passed one to the constructor. <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> never performs resolution itself. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="144" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_asset_path_1a33958b6409a94613cd705ced0c2f7e02" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetResolvedPath</definition>
        <argsstring>() const &amp;&amp;</argsstring>
        <name>GetResolvedPath</name>
        <briefdescription>
<para>Overload for rvalues, move out the asset path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="149" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="149" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_asset_path_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _assetPath</definition>
        <argsstring></argsstring>
        <name>_assetPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="161" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_asset_path_1a323d9b4a723848f44d4c500bf36d30b1" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _resolvedPath</definition>
        <argsstring></argsstring>
        <name>_resolvedPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="162" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_asset_path_1a45456e01999634946414d83e80db6857" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(SdfAssetPath &amp;lhs, SdfAssetPath &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/assetPath.h" line="156" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="156" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains an asset path and an optional resolved path. </para>
    </briefdescription>
    <detaileddescription>
<para>Asset paths may contain non-control UTF-8 encoded characters. Specifically, U+0000..U+001F (C0 controls), U+007F (delete), and U+0080..U+009F (C1 controls) are disallowed. Attempts to construct asset paths with such characters will issue a <ref refid="class_tf_error" kindref="compound">TfError</ref> and produce the default-constructed empty asset path. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/assetPath.h" line="47" column="1" bodyfile="pxr/usd/sdf/assetPath.h" bodystart="46" bodyend="163"/>
    <listofallmembers>
      <member refid="class_sdf_asset_path_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" virt="non-virtual"><scope>SdfAssetPath</scope><name>_assetPath</name></member>
      <member refid="class_sdf_asset_path_1a323d9b4a723848f44d4c500bf36d30b1" prot="private" virt="non-virtual"><scope>SdfAssetPath</scope><name>_resolvedPath</name></member>
      <member refid="class_sdf_asset_path_1ae2f0ca9bb4cce9a33e4625d3159c4d80" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>GetAssetPath</name></member>
      <member refid="class_sdf_asset_path_1a6fe71de6ab38d667e8e4c027dc8e59cb" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>GetAssetPath</name></member>
      <member refid="class_sdf_asset_path_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>GetHash</name></member>
      <member refid="class_sdf_asset_path_1aff2f95c537d0b53a8d155d0cad1969aa" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>GetResolvedPath</name></member>
      <member refid="class_sdf_asset_path_1a33958b6409a94613cd705ced0c2f7e02" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>GetResolvedPath</name></member>
      <member refid="class_sdf_asset_path_1a45c28660cf934be68eef633efc56f43a" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>hash_value</name></member>
      <member refid="class_sdf_asset_path_1a8604fb2dbefb8a90ca82ac075a8490c6" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator!=</name></member>
      <member refid="class_sdf_asset_path_1a8194fa4173e3120ec617c23583d57777" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_asset_path_1a40b9599751fc23816b9f20c16b559998" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_asset_path_1ac161ddc7be63c8e020cf76fbdb8bba06" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator==</name></member>
      <member refid="class_sdf_asset_path_1aeb3b2ac9563093491b3ed5df99c55432" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_asset_path_1a5690bc236d644aa29831de322d088edc" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_asset_path_1af37ce46611c4dacb9ae3fc2dae74fb18" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>SdfAssetPath</name></member>
      <member refid="class_sdf_asset_path_1a3c2e18b4d939cd6e2444a40d0e5d166b" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>SdfAssetPath</name></member>
      <member refid="class_sdf_asset_path_1a461b87a90dc145e26d502430b6ac628a" prot="public" virt="non-virtual"><scope>SdfAssetPath</scope><name>SdfAssetPath</name></member>
      <member refid="class_sdf_asset_path_1a45456e01999634946414d83e80db6857" prot="private" virt="non-virtual"><scope>SdfAssetPath</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
