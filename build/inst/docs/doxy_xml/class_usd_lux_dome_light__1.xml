<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_dome_light__1" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxDomeLight_1</compoundname>
    <basecompoundref refid="class_usd_lux_nonboundable_light_base" prot="public" virt="non-virtual">UsdLuxNonboundableLightBase</basecompoundref>
    <includes refid="dome_light__1_8h" local="no">domeLight_1.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_dome_light__1_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="106" column="1" bodyfile="pxr/usd/usdLux/domeLight_1.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_dome_light__1_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="184" column="1" bodyfile="pxr/usd/usdLux/domeLight_1.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1ad12537a061445ac9547adc40f456d770" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxDomeLight_1</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxDomeLight_1</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_dome_light__1_1a726671d06d1de7116d409cf8a1a92844" kindref="member">UsdLuxDomeLight_1::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="112" column="1" bodyfile="pxr/usd/usdLux/domeLight_1.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a5866ca5b5a2c1b365247c1c0f86cb7e5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxDomeLight_1</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxDomeLight_1</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="120" column="1" bodyfile="pxr/usd/usdLux/domeLight_1.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1ae41bf4a97ab5846ccc357ec1902ecfa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxDomeLight_1</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxDomeLight_1</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1ac1d1558c42b00cbd906ff45437c9f287" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetTextureFileAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetTextureFileAttr</name>
        <briefdescription>
<para>A color texture to use on the dome, such as an HDR (high dynamic range) texture intended for IBL (image based lighting). </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>asset inputs:texture:file</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Asset   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a43f3095c124fd1df1a477a84c58e36b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateTextureFileAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateTextureFileAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_dome_light__1_1ac1d1558c42b00cbd906ff45437c9f287" kindref="member">GetTextureFileAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1aeee791f4a8f1d07df470d2df439e90c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetTextureFormatAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetTextureFormatAttr</name>
        <briefdescription>
<para>Specifies the parameterization of the color map file. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>automatic: Tries to determine the layout from the file itself. For example, Renderman texture files embed an explicit parameterization.</para>
</listitem><listitem><para>latlong: Latitude as X, longitude as Y.</para>
</listitem><listitem><para>mirroredBall: An image of the environment reflected in a sphere, using an implicitly orthogonal projection.</para>
</listitem><listitem><para>angular: Similar to mirroredBall but the radial dimension is mapped linearly to the angle, providing better sampling at the edges.</para>
</listitem><listitem><para>cubeMapVerticalCross: A cube map with faces laid out as a vertical cross.</para>
</listitem></itemizedlist>
</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token inputs:texture:format = &quot;automatic&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>automatic, latlong, mirroredBall, angular, cubeMapVerticalCross   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a10306365f50710da68d095d72088a75f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateTextureFormatAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateTextureFormatAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_dome_light__1_1aeee791f4a8f1d07df470d2df439e90c0" kindref="member">GetTextureFormatAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a58fd382554162769d4ce212911f72d77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetGuideRadiusAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetGuideRadiusAttr</name>
        <briefdescription>
<para>The radius of guide geometry to use to visualize the dome light. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is 1 km for scenes whose metersPerUnit is the USD default of 0.01 (i.e., 1 world unit is 1 cm).</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float guideRadius = 100000</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a1787544b1dd11a3ec783a1c57695e5e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateGuideRadiusAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateGuideRadiusAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_dome_light__1_1a58fd382554162769d4ce212911f72d77" kindref="member">GetGuideRadiusAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1aeea1bf1cbe3f0f1f52a220ca5c45572c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetPoleAxisAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetPoleAxisAttr</name>
        <briefdescription>
<para>A token which indicates the starting alignment of the dome light&apos;s top pole. </para>
        </briefdescription>
        <detaileddescription>
<para>This alignment is for the dome itself and is <emphasis>not</emphasis> inherited by the namespace children of the dome. Valid values are:<itemizedlist>
<listitem><para>scene: The dome light&apos;s top pole is aligned with the stage&apos;s up axis.</para>
</listitem><listitem><para>Y: The dome light&apos;s top pole is aligned with the +Y axis.</para>
</listitem><listitem><para>Z: The dome light&apos;s top pole is aligned with the +Z axis.</para>
</listitem></itemizedlist>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token poleAxis = &quot;scene&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>scene, Y, Z   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a83a518bfd11ab5b9cfeb2ad6808dd803" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreatePoleAxisAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreatePoleAxisAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_dome_light__1_1aeea1bf1cbe3f0f1f52a220ca5c45572c" kindref="member">GetPoleAxisAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a45c1de4f0168078f07675f3ee055c920" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship GetPortalsRel</definition>
        <argsstring>() const</argsstring>
        <name>GetPortalsRel</name>
        <briefdescription>
<para>Optional portals to guide light sampling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a54c1b2625d9830cd70c1c364c2547cf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship CreatePortalsRel</definition>
        <argsstring>() const</argsstring>
        <name>CreatePortalsRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_lux_dome_light__1_1a45c1de4f0168078f07675f3ee055c920" kindref="member">GetPortalsRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="318" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a726671d06d1de7116d409cf8a1a92844" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref></type>
        <definition>static USDLUX_API UsdLuxDomeLight_1 Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxDomeLight_1(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1ac31e47e67629efb7dfc7674a64b44cd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_dome_light__1" kindref="compound">UsdLuxDomeLight_1</ref></type>
        <definition>static USDLUX_API UsdLuxDomeLight_1 Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_xformable_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="180" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_dome_light__1_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_xformable_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/domeLight_1.h" line="192" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Light emitted inward from a distant external environment, such as a sky or IBL light probe. </para>
    </briefdescription>
    <detaileddescription>
<para>In this version of the dome light, the dome&apos;s default orientation is determined by its <emphasis>poleAxis</emphasis> property. The fallback value, &quot;scene&quot;, means that the dome starts with its top pole aligned with the stage&apos;s up axis.</para>
<para>Note that the rotation necessary to align the dome light with its <emphasis>poleAxis</emphasis> is intended to be applied by a renderer to only the dome itself, and <emphasis>not</emphasis> to inherit down to any USD namespace children of the dome light prim.</para>
<para>If <emphasis>poleAxis</emphasis> is set to &quot;Y&quot; or &quot;scene&quot; and the stage&apos;s up axis is &quot;Y&quot;, the dome&apos;s default orientation will adhere to the OpenEXR specification for latlong environment maps. From the OpenEXR documentation:</para>
<para><hruler/>
 Latitude-Longitude Map:</para>
<para>The environment is projected onto the image using polar coordinates (latitude and longitude). A pixel&apos;s x coordinate corresponds to its longitude, and the y coordinate corresponds to its latitude. Pixel (dataWindow.min.x, dataWindow.min.y) has latitude +pi/2 and longitude +pi; pixel (dataWindow.max.x, dataWindow.max.y) has latitude -pi/2 and longitude -pi.</para>
<para>In 3D space, latitudes -pi/2 and +pi/2 correspond to the negative and positive y direction. Latitude 0, longitude 0 points into positive z direction; and latitude 0, longitude pi/2 points into positive x direction.</para>
<para>The size of the data window should be 2*N by N pixels (width by height), <heading level="2">where N can be any integer greater than 0. </heading>
</para>
<para>If <emphasis>poleAxis</emphasis> is set to &quot;Z&quot; or &quot;scene&quot; and the stage&apos;s up axis is &quot;Z&quot;, latitudes -pi/2 and +pi/2 will instead correspond to the negative and positive Z direction, and latitude 0, longitude 0 will instead point into the negative Y direction in 3D space.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">UsdLuxTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdLuxTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7526">
        <label>UsdLuxDomeLight_1</label>
        <link refid="class_usd_lux_dome_light__1"/>
        <childnode refid="7527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7529">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7530" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7527">
        <label>UsdLuxNonboundableLightBase</label>
        <link refid="class_usd_lux_nonboundable_light_base"/>
        <childnode refid="7528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7530">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7531" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7531">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7528">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7529" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7532">
        <label>UsdLuxDomeLight_1</label>
        <link refid="class_usd_lux_dome_light__1"/>
        <childnode refid="7533" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7535">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7536" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7533">
        <label>UsdLuxNonboundableLightBase</label>
        <link refid="class_usd_lux_nonboundable_light_base"/>
        <childnode refid="7534" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7536">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7537" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7537">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7534">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7535" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/domeLight_1.h" line="101" column="1" bodyfile="pxr/usd/usdLux/domeLight_1.h" bodystart="100" bodyend="331"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_dome_light__1_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_dome_light__1_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_dome_light__1_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddOrientOp</name></member>
      <member refid="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddTranslateOp</name></member>
      <member refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>AddXformOp</name></member>
      <member refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ClearXformOpOrder</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1aeffd3f8ebffb0291e16928d79dfb5277" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateColorAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a1a615e306620fce3931ee64c32f0408f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1ad2fb42fcd363430bf22f67dbd6616cb3" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateDiffuseAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a9be67c10c9dc3bac947485338ce0b2fe" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateEnableColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1aa2476d5b2f457df829bff5c7ae945de1" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateExposureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1ab986f7f45bc7296c1700b2cadf49501a" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateFiltersRel</name></member>
      <member refid="class_usd_lux_dome_light__1_1a1787544b1dd11a3ec783a1c57695e5e5" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateGuideRadiusAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a6e072625143be71e751dd5df6e424f32" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateIntensityAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a258c14f40fd6752b0ce5b9f761ddef16" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateNormalizeAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1a83a518bfd11ab5b9cfeb2ad6808dd803" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreatePoleAxisAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1a54c1b2625d9830cd70c1c364c2547cf8" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreatePortalsRel</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a38bbf350c4aed31f54fc25f8416f42ff" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateSpecularAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1a43f3095c124fd1df1a477a84c58e36b9" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateTextureFileAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1a10306365f50710da68d095d72088a75f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateTextureFormatAttr</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>CreateXformOpOrderAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1ac31e47e67629efb7dfc7674a64b44cd0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>Define</name></member>
      <member refid="class_usd_lux_dome_light__1_1a726671d06d1de7116d409cf8a1a92844" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>Get</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1afec0ec447ae09fb0208fc13bf1354744" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetColorAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1ad990b3360a3c172c5340ce4e7af463a6" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a7f3e53a973a864890b6466500f1b9305" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetDiffuseAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a0d52e668b58caa585643f6f524914791" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetEnableColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a9644cb90bd4e984bde1e539dec71909e" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetExposureAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1aa485d9b82346018fbef817aafe00b40c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetFiltersRel</name></member>
      <member refid="class_usd_lux_dome_light__1_1a58fd382554162769d4ce212911f72d77" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetGuideRadiusAttr</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1aaa8abfb3def944066eca3eb7ddb2a340" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetIntensityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1acb777a3177e8ad3aeb13dcbafc03b921" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetNormalizeAttr</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetOrientOp</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPath</name></member>
      <member refid="class_usd_lux_dome_light__1_1aeea1bf1cbe3f0f1f52a220ca5c45572c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPoleAxisAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1a45c1de4f0168078f07675f3ee055c920" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPortalsRel</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetScaleOp</name></member>
      <member refid="class_usd_lux_dome_light__1_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1adfd8a4d162bb0983eb6766eec7ae969c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetSpecularAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1ac1d1558c42b00cbd906ff45437c9f287" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTextureFileAttr</name></member>
      <member refid="class_usd_lux_dome_light__1_1aeee791f4a8f1d07df470d2df439e90c0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTextureFormatAttr</name></member>
      <member refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetTranslateOp</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetXformOp</name></member>
      <member refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>GetXformOpOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsTransformationAffectedByAttrNamed</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>IsTyped</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a229cebcd21c7b6c8683655365c9be68f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>LightAPI</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>MakeMatrixXform</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_dome_light__1_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>SetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>SetXformOpOrder</name></member>
      <member refid="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_lux_dome_light__1_1ad12537a061445ac9547adc40f456d770" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdLuxDomeLight_1</name></member>
      <member refid="class_usd_lux_dome_light__1_1a5866ca5b5a2c1b365247c1c0f86cb7e5" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdLuxDomeLight_1</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1afa2012afa90608a517675caa0573566e" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdLuxNonboundableLightBase</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a902f6d45deada9349feb64eba3247074" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdLuxNonboundableLightBase</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_dome_light__1_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdLuxDomeLight_1</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdGeomXformable</name></member>
      <member refid="class_usd_lux_dome_light__1_1ae41bf4a97ab5846ccc357ec1902ecfa7" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdLuxDomeLight_1</name></member>
      <member refid="class_usd_lux_nonboundable_light_base_1a3a72a40df9118937ac505df1d959e192" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdLuxNonboundableLightBase</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdLuxDomeLight_1</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
