<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_media_asset_previews_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdMediaAssetPreviewsAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="asset_previews_a_p_i_8h" local="no">assetPreviewsAPI.h</includes>
    <innerclass refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" prot="public">UsdMediaAssetPreviewsAPI::Thumbnails</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_media_asset_previews_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="100" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_media_asset_previews_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="192" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_media_asset_previews_a_p_i_1ab077fb195c7e3e476949b7135944a090" prot="private" static="no" mutable="no">
        <type>UsdStageRefPtr</type>
        <definition>UsdStageRefPtr _defaultMaskedStage</definition>
        <argsstring></argsstring>
        <name>_defaultMaskedStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="258" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1af48fea8e52182e03f1e7ae7bff88e895" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdMediaAssetPreviewsAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdMediaAssetPreviewsAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_media_asset_previews_a_p_i_1a6d3981902228101dcf7f04bf2c02e81f" kindref="member">UsdMediaAssetPreviewsAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="106" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ab144cb4a889faeaecf711a21d67e0a5f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdMediaAssetPreviewsAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdMediaAssetPreviewsAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="114" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a4a1f51f16b6dba083b4fdabc8c2bc54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API</type>
        <definition>virtual USDMEDIA_API ~UsdMediaAssetPreviewsAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdMediaAssetPreviewsAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a8d23086fbb43e316a091ff1d1ce3ea89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API bool</type>
        <definition>USDMEDIA_API bool GetDefaultThumbnails</definition>
        <argsstring>(Thumbnails *defaultThumbnails) const</argsstring>
        <name>GetDefaultThumbnails</name>
        <param>
          <type><ref refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" kindref="compound">Thumbnails</ref> *</type>
          <declname>defaultThumbnails</declname>
        </param>
        <briefdescription>
<para>Fetch the default <ref refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" kindref="compound">Thumbnails</ref> data, returning <computeroutput>true</computeroutput> if data was successfully fetched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ac12eab8c0a0710b05185f5bb5a817118" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API void</type>
        <definition>USDMEDIA_API void SetDefaultThumbnails</definition>
        <argsstring>(const Thumbnails &amp;defaultThumbnails) const</argsstring>
        <name>SetDefaultThumbnails</name>
        <param>
          <type>const <ref refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" kindref="compound">Thumbnails</ref> &amp;</type>
          <declname>defaultThumbnails</declname>
        </param>
        <briefdescription>
<para>Author the default thumbnails dictionary from the provided <ref refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" kindref="compound">Thumbnails</ref> data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ab328aefbdc7dca2c7e4faf12b9d6576b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API void</type>
        <definition>USDMEDIA_API void ClearDefaultThumbnails</definition>
        <argsstring>() const</argsstring>
        <name>ClearDefaultThumbnails</name>
        <briefdescription>
<para>Remove the entire entry for default <ref refid="struct_usd_media_asset_previews_a_p_i_1_1_thumbnails" kindref="compound">Thumbnails</ref> in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="240" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a6c48ffea22dc6bed030ce80024158530" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDMEDIA_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a6d3981902228101dcf7f04bf2c02e81f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref></type>
        <definition>static USDMEDIA_API UsdMediaAssetPreviewsAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdMediaAssetPreviewsAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1af0c4646a58366f5d2a0f1b3ab461c190" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API bool</type>
        <definition>static USDMEDIA_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ae06557b05f255b9f4cb46998b778fd85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref></type>
        <definition>static USDMEDIA_API UsdMediaAssetPreviewsAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;AssetPreviewsAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ae9f0f75a4f8b7080335c0674066222c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref></type>
        <definition>static USDMEDIA_API UsdMediaAssetPreviewsAPI GetAssetDefaultPreviews</definition>
        <argsstring>(const std::string &amp;layerPath)</argsstring>
        <name>GetAssetDefaultPreviews</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerPath</declname>
        </param>
        <briefdescription>
<para>Return a schema object that can be used to interrogate previews for the default prim of the stage constructed from <computeroutput>layerPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The schema object will create and retain a minimal stage required for interrogation. This is equivalent to: <computeroutput>GetAssetDefaultPreviews(SdfLayer::FindOrOpen(layerPath))</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1ae3779a8e70b3a5cb5626257fbb96b746" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref></type>
        <definition>static USDMEDIA_API UsdMediaAssetPreviewsAPI GetAssetDefaultPreviews</definition>
        <argsstring>(const SdfLayerHandle &amp;layer)</argsstring>
        <name>GetAssetDefaultPreviews</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="255" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a4b449c2d8fd036608b3560779b7be4a3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDMEDIA_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a861bb4e705c4f48cd9d6f425fd23ef2f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDMEDIA_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_media_asset_previews_a_p_i_1a0761fce9ddea0f86c69c833dfb52348b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDMEDIA_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>AssetPreviewsAPI is the interface for authoring and accessing precomputed, lightweight previews of assets. </para>
    </briefdescription>
    <detaileddescription>
<para>It is an applied schema, which means that an arbitrary number of prims on a stage can have the schema applied and therefore can contain previews; however, to access a stage&apos;s &quot;default&quot; previews, one consults the stage&apos;s <computeroutput>defaultPrim</computeroutput>.</para>
<para>AssetPreviewsAPI supports the following kinds of previews:<itemizedlist>
<listitem><para><bold>thumbnails</bold> : a set of pre-rendered images of the asset. There is no prescribed size for thumbnail images, but care should be taken to ensure their inclusion does not substantially increase the overall size of an asset, as, for example, when packaged into USDZ.</para>
</listitem></itemizedlist>
</para>
<para>Although the <ref refid="class_usd_media_asset_previews_a_p_i" kindref="compound">UsdMediaAssetPreviewsAPI</ref> class can be used to interrogate any prim, no query in the API will succeed unless the schema has been applied to the prim. This schema deals only with asset paths, and clients wishing to directly consume the returned data must do so by retrieving an <ref refid="class_ar_asset" kindref="compound">ArAsset</ref> from the session&apos;s ArAssetResolver.</para>
<para>The schema defines no properties or metadata fallback values. Rather, Asset Previews are encoded as part of a prim&apos;s <computeroutput>assetInfo</computeroutput> metadata. A default thumbnail image would look like: <programlisting><codeline><highlight class="normal">1.<sp/><sp/><sp/><sp/>assetInfo<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal">2.<sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>previews<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal">3.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>thumbnails<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal">4.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>default<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal">5.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asset<sp/>defaultImage<sp/>=<sp/>@chair_thumb.jpg@</highlight></codeline>
<codeline><highlight class="normal">6.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">7.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">8.<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">9.<sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7686">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7684">
        <label>UsdMediaAssetPreviewsAPI</label>
        <link refid="class_usd_media_asset_previews_a_p_i"/>
        <childnode refid="7685" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7685">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7686" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7689">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7687">
        <label>UsdMediaAssetPreviewsAPI</label>
        <link refid="class_usd_media_asset_previews_a_p_i"/>
        <childnode refid="7688" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7688">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7689" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdMedia/assetPreviewsAPI.h" line="95" column="1" bodyfile="pxr/usd/usdMedia/assetPreviewsAPI.h" bodystart="94" bodyend="259"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ab077fb195c7e3e476949b7135944a090" prot="private" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_defaultMaskedStage</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a4b449c2d8fd036608b3560779b7be4a3" prot="protected" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a861bb4e705c4f48cd9d6f425fd23ef2f" prot="private" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a0761fce9ddea0f86c69c833dfb52348b" prot="private" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ae06557b05f255b9f4cb46998b778fd85" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>Apply</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1af0c4646a58366f5d2a0f1b3ab461c190" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ab328aefbdc7dca2c7e4faf12b9d6576b" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>ClearDefaultThumbnails</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a6d3981902228101dcf7f04bf2c02e81f" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>Get</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ae9f0f75a4f8b7080335c0674066222c9" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetAssetDefaultPreviews</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ae3779a8e70b3a5cb5626257fbb96b746" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetAssetDefaultPreviews</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a8d23086fbb43e316a091ff1d1ce3ea89" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetDefaultThumbnails</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a6c48ffea22dc6bed030ce80024158530" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ac12eab8c0a0710b05185f5bb5a817118" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>SetDefaultThumbnails</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1af48fea8e52182e03f1e7ae7bff88e895" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdMediaAssetPreviewsAPI</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1ab144cb4a889faeaecf711a21d67e0a5f" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdMediaAssetPreviewsAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_media_asset_previews_a_p_i_1a4a1f51f16b6dba083b4fdabc8c2bc54d" prot="public" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>~UsdMediaAssetPreviewsAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdMediaAssetPreviewsAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
