<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_changes" kind="class" language="C++" prot="public">
    <compoundname>PcpChanges</compoundname>
    <includes refid="changes_8h" local="no">changes.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8" prot="private" static="no" strong="no">
        <type></type>
        <name>_SublayerChangeType</name>
        <enumvalue id="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8af8b8ec970acb7e6f1ed71f283df7f28c" prot="private">
          <name>_SublayerAdded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8a9951c5865504017778b21024d1d28efe" prot="private">
          <name>_SublayerRemoved</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="340" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_changes_1aef1e8525a2de332898d69e00ab94434d" prot="private" static="no">
        <type>std::map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt;</type>
        <definition>typedef std::map&lt;SdfPath, SdfPath&gt; _PathEditMap</definition>
        <argsstring></argsstring>
        <name>_PathEditMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="313" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_changes_1a74e15604638043fc85413e46918647fb" prot="private" static="no">
        <type>std::map&lt; <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *, _PathEditMap &gt;</type>
        <definition>typedef std::map&lt;PcpCache*, _PathEditMap&gt; _RenameChanges</definition>
        <argsstring></argsstring>
        <name>_RenameChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="314" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_changes_1adc7cbd7d62d8f06658f67ea4cc975929" prot="public" static="no">
        <type>std::map&lt; PcpLayerStackPtr, <ref refid="class_pcp_layer_stack_changes" kindref="compound">PcpLayerStackChanges</ref> &gt;</type>
        <definition>typedef std::map&lt;PcpLayerStackPtr, PcpLayerStackChanges&gt; LayerStackChanges</definition>
        <argsstring></argsstring>
        <name>LayerStackChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="288" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_changes_1a172ed975a5c776c25c3ab9204d01f2f0" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *, <ref refid="class_pcp_cache_changes" kindref="compound">PcpCacheChanges</ref> &gt;</type>
        <definition>typedef std::map&lt;PcpCache*, PcpCacheChanges&gt; CacheChanges</definition>
        <argsstring></argsstring>
        <name>CacheChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="289" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_changes_1a787dd06defc718e3a9af6d58fe667e87" prot="private" static="no" mutable="no">
        <type>LayerStackChanges</type>
        <definition>LayerStackChanges _layerStackChanges</definition>
        <argsstring></argsstring>
        <name>_layerStackChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="428" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_changes_1a59aebbf21f5f3b3ca63b5c11c31d1420" prot="private" static="no" mutable="no">
        <type>CacheChanges</type>
        <definition>CacheChanges _cacheChanges</definition>
        <argsstring></argsstring>
        <name>_cacheChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="429" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_changes_1ab6286d593c1d15acbff577127f1880dc" prot="private" static="no" mutable="no">
        <type>_RenameChanges</type>
        <definition>_RenameChanges _renameChanges</definition>
        <argsstring></argsstring>
        <name>_renameChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="430" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_changes_1ad3afad9e9f0e82f05e13c31a1715d174" prot="private" static="no" mutable="yes">
        <type><ref refid="class_pcp_lifeboat" kindref="compound">PcpLifeboat</ref></type>
        <definition>PcpLifeboat _lifeboat</definition>
        <argsstring></argsstring>
        <name>_lifeboat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="431" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_changes_1a94b443cab9781f37163b3ed19d27fe5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpChanges</definition>
        <argsstring>()</argsstring>
        <name>PcpChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a986acd6f3b79e9a0ba74d03de8e2f07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API ~PcpChanges</definition>
        <argsstring>()</argsstring>
        <name>~PcpChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1aeffa80d8e31e3f0616c6865b94c20861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChange</definition>
        <argsstring>(const PcpCache *cache, const SdfLayerChangeListVec &amp;changes)</argsstring>
        <name>DidChange</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const SdfLayerChangeListVec &amp;</type>
          <declname>changes</declname>
        </param>
        <briefdescription>
<para>Breaks down <computeroutput>changes</computeroutput> into individual changes on <computeroutput>cache</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This simply translates data in <computeroutput>changes</computeroutput> into other Did...() calls on this object.</para>
<para>Clients will typically call this method once then call <computeroutput><ref refid="class_pcp_changes_1a8630b2dfef0dcdf76512ccaf888c3861" kindref="member">Apply()</ref></computeroutput> or get the changes using <computeroutput><ref refid="class_pcp_changes_1a142a05a1c3f496b669c7a6c6ce8b1dd0" kindref="member">GetLayerStackChanges()</ref></computeroutput> and <computeroutput><ref refid="class_pcp_changes_1ae48e9278a49084057b8db13ded159ee8" kindref="member">GetCacheChanges()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a2ca150ba9c5a3e7c0e92894c34ef5228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidMaybeFixSublayer</definition>
        <argsstring>(const PcpCache *cache, const SdfLayerHandle &amp;layer, const std::string &amp;assetPath)</argsstring>
        <name>DidMaybeFixSublayer</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Tries to load the sublayer of <computeroutput>layer</computeroutput> at <computeroutput>sublayerPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If successful, any layer stack using <computeroutput>layer</computeroutput> is marked as having changed and all prims in <computeroutput>cache</computeroutput> using any prim in any of those layer stacks are marked as changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a93e3b77f153918866212d34c5f069e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidMaybeFixAsset</definition>
        <argsstring>(const PcpCache *cache, const PcpSite &amp;site, const SdfLayerHandle &amp;srcLayer, const std::string &amp;assetPath)</argsstring>
        <name>DidMaybeFixAsset</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_site" kindref="compound">PcpSite</ref> &amp;</type>
          <declname>site</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>srcLayer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Tries to load the asset at <computeroutput>assetPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If successful, any prim in <computeroutput>cache</computeroutput> using the site <computeroutput>site</computeroutput> is marked as changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1aa9926f2da20e25f59eb75fa08d6aaa13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidMuteLayer</definition>
        <argsstring>(const PcpCache *cache, const std::string &amp;layerId)</argsstring>
        <name>DidMuteLayer</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerId</declname>
        </param>
        <briefdescription>
<para>The layer identified by <computeroutput>layerId</computeroutput> was muted in <computeroutput>cache</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a98ee4fdc497f3fbc1bb1f0f9df644bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidUnmuteLayer</definition>
        <argsstring>(const PcpCache *cache, const std::string &amp;layerId)</argsstring>
        <name>DidUnmuteLayer</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerId</declname>
        </param>
        <briefdescription>
<para>The layer identified by <computeroutput>layerId</computeroutput> was unmuted in <computeroutput>cache</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a025e56246f3b0359fa1eb9ec5fc495b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangeSignificantly</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;path)</argsstring>
        <name>DidChangeSignificantly</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>The object at <computeroutput>path</computeroutput> changed significantly enough to require recomputing the entire prim or property index. </para>
        </briefdescription>
        <detaileddescription>
<para>A significant change implies changes to every namespace descendant&apos;s index, specs, and dependencies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a9f06dc3dc7fdb1eb66fbf59a6c742d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangeSpecs</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;path, const SdfLayerHandle &amp;changedLayer, const SdfPath &amp;changedPath)</argsstring>
        <name>DidChangeSpecs</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>changedLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>changedPath</declname>
        </param>
        <briefdescription>
<para>The spec stack for the prim or property has changed, due to the addition or removal of the spec in <computeroutput>changedLayer</computeroutput> at <computeroutput>changedPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used when inert prims/properties are added or removed or when any change requires rebuilding the property stack. It implies that dependencies on those specs has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a6bf99e330dc4cce7ec071796ffbbb358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangeSpecStack</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;path)</argsstring>
        <name>DidChangeSpecStack</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>The spec stack for the prim or property at <computeroutput>path</computeroutput> in <computeroutput>cache</computeroutput> has changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a9a2cdaa225367199a0637fd1e0eb77a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangeTargets</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;path, PcpCacheChanges::TargetType targetType)</argsstring>
        <name>DidChangeTargets</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>PcpCacheChanges::TargetType</type>
          <declname>targetType</declname>
        </param>
        <briefdescription>
<para>The connections on the attribute or targets on the relationship have changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a2d3fcbb2f22969a0b7e565d18b073268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangePaths</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;oldPath, const SdfPath &amp;newPath)</argsstring>
        <name>DidChangePaths</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <briefdescription>
<para>The composed object at <computeroutput>oldPath</computeroutput> was moved to <computeroutput>newPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This implies every corresponding Sd change. This object will subsume those Sd changes under this higher-level move. Sd path changes that are not so subsumed will be converted to DidChangePrimGraph() and/or <ref refid="class_pcp_changes_1a9f06dc3dc7fdb1eb66fbf59a6c742d94" kindref="member">DidChangeSpecs()</ref> changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1af9d6a19711efe98e9a6d462106c62bb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidDestroyCache</definition>
        <argsstring>(const PcpCache *cache)</argsstring>
        <name>DidDestroyCache</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>Remove any changes for <computeroutput>cache</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a226b3250db62045990cd3948732c0548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DidChangeAssetResolver</definition>
        <argsstring>(const PcpCache *cache)</argsstring>
        <name>DidChangeAssetResolver</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>The asset resolver has changed, invalidating previously-resolved asset paths. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will check all prim indexes in <computeroutput>cache</computeroutput> for composition arcs that may now refer to a different asset and mark them as needing significant resyncs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ab4812152ee6a1e0ee8715a90423f290a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void Swap</definition>
        <argsstring>(PcpChanges &amp;other)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_pcp_changes" kindref="compound">PcpChanges</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this and <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a23055e9a75bfa1af8ea4462f232b3ab1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff there are no changes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a142a05a1c3f496b669c7a6c6ce8b1dd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const LayerStackChanges &amp;</type>
        <definition>PCP_API const LayerStackChanges&amp; GetLayerStackChanges</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerStackChanges</name>
        <briefdescription>
<para>Returns a map of all of the layer stack changes. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that some keys may be to expired layer stacks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ae48e9278a49084057b8db13ded159ee8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const CacheChanges &amp;</type>
        <definition>PCP_API const CacheChanges&amp; GetCacheChanges</definition>
        <argsstring>() const</argsstring>
        <name>GetCacheChanges</name>
        <briefdescription>
<para>Returns a map of all of the cache changes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1add6005eddc608a94a7f53c7f2104875c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_lifeboat" kindref="compound">PcpLifeboat</ref> &amp;</type>
        <definition>PCP_API const PcpLifeboat&amp; GetLifeboat</definition>
        <argsstring>() const</argsstring>
        <name>GetLifeboat</name>
        <briefdescription>
<para>Returns the lifeboat responsible for maintaining the lifetime of layers and layer stacks during change processing. </para>
        </briefdescription>
        <detaileddescription>
<para>Consumers may inspect this object to determine which of these objects, if any, had their lifetimes affected during change processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a8630b2dfef0dcdf76512ccaf888c3861" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void Apply</definition>
        <argsstring>() const</argsstring>
        <name>Apply</name>
        <briefdescription>
<para>Applies the changes to the layer stacks and caches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="309" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_changes_1aa26ae8f8229d416599bd00bb4148a57e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_pcp_layer_stack_changes" kindref="compound">PcpLayerStackChanges</ref> &amp;</type>
        <definition>PcpLayerStackChanges&amp; _GetLayerStackChanges</definition>
        <argsstring>(const PcpLayerStackPtr &amp;)</argsstring>
        <name>_GetLayerStackChanges</name>
        <param>
          <type>const PcpLayerStackPtr &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a366428bfbd50a6f4e5835348d1927506" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_pcp_cache_changes" kindref="compound">PcpCacheChanges</ref> &amp;</type>
        <definition>PcpCacheChanges&amp; _GetCacheChanges</definition>
        <argsstring>(const PcpCache *cache)</argsstring>
        <name>_GetCacheChanges</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1add94d870f85fca56a2942b45a7d45c51" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_PathEditMap &amp;</type>
        <definition>_PathEditMap&amp; _GetRenameChanges</definition>
        <argsstring>(const PcpCache *cache)</argsstring>
        <name>_GetRenameChanges</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ad459219d943e88f47a2440aec590b961" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Optimize</definition>
        <argsstring>() const</argsstring>
        <name>_Optimize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a9b89cf4d03eccabdf6c71db613eb562a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Optimize</definition>
        <argsstring>()</argsstring>
        <name>_Optimize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1af150e8fee282b01698b2bada5ce2c59d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Optimize</definition>
        <argsstring>(PcpCacheChanges *)</argsstring>
        <name>_Optimize</name>
        <param>
          <type><ref refid="class_pcp_cache_changes" kindref="compound">PcpCacheChanges</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a8dabe930a54fe3ea602b4e6f49fb4b53" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _OptimizePathChanges</definition>
        <argsstring>(const PcpCache *cache, PcpCacheChanges *changes, const _PathEditMap *pathChanges)</argsstring>
        <name>_OptimizePathChanges</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type><ref refid="class_pcp_cache_changes" kindref="compound">PcpCacheChanges</ref> *</type>
          <declname>changes</declname>
        </param>
        <param>
          <type>const _PathEditMap *</type>
          <declname>pathChanges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ab3f2cb3f8e2a549556286ced0d807b13" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>SdfLayerRefPtr _LoadSublayerForChange</definition>
        <argsstring>(const PcpCache *cache, const SdfLayerHandle &amp;layer, const std::string &amp;sublayerPath, _SublayerChangeType changeType) const</argsstring>
        <name>_LoadSublayerForChange</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayerPath</declname>
        </param>
        <param>
          <type>_SublayerChangeType</type>
          <declname>changeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ade3d265be9d34f95df50bcbae9c3ac52" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>SdfLayerRefPtr _LoadSublayerForChange</definition>
        <argsstring>(const PcpCache *cache, const std::string &amp;sublayerPath, _SublayerChangeType changeType) const</argsstring>
        <name>_LoadSublayerForChange</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayerPath</declname>
        </param>
        <param>
          <type>_SublayerChangeType</type>
          <declname>changeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1aab2b4a7759f7a775233922d8a82d6ebe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeSublayerAndLayerStacks</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtrVector &amp;stacks, const std::string &amp;sublayerPath, const SdfLayerHandle &amp;sublayer, _SublayerChangeType sublayerChange, std::string *debugSummary)</argsstring>
        <name>_DidChangeSublayerAndLayerStacks</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtrVector &amp;</type>
          <declname>stacks</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayerPath</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sublayer</declname>
        </param>
        <param>
          <type>_SublayerChangeType</type>
          <declname>sublayerChange</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1af0a25a62a1f37169c96838965c782f01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeSublayer</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtrVector &amp;layerStacks, const std::string &amp;sublayerPath, const SdfLayerHandle &amp;sublayer, _SublayerChangeType sublayerChange, std::string *debugSummary, bool *significant)</argsstring>
        <name>_DidChangeSublayer</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtrVector &amp;</type>
          <declname>layerStacks</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayerPath</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sublayer</declname>
        </param>
        <param>
          <type>_SublayerChangeType</type>
          <declname>sublayerChange</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>significant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1abf7aafdd260faabded2b7a6a918a6d71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidAddOrRemoveSublayer</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtrVector &amp;layerStacks, const SdfLayerHandle &amp;layer, const std::string &amp;sublayerPath, _SublayerChangeType sublayerChange, std::string *debugSummary, std::vector&lt; bool &gt; *significant)</argsstring>
        <name>_DidAddOrRemoveSublayer</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtrVector &amp;</type>
          <declname>layerStacks</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayerPath</declname>
        </param>
        <param>
          <type>_SublayerChangeType</type>
          <declname>sublayerChange</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; *</type>
          <declname>significant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ad7cf58b7f03a2b7fc356f9d6f9c38d57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeLayerStack</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtr &amp;layerStack, bool requiresLayerStackChange, bool requiresLayerStackOffsetsChange, bool requiresSignificantChange)</argsstring>
        <name>_DidChangeLayerStack</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtr &amp;</type>
          <declname>layerStack</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requiresLayerStackChange</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requiresLayerStackOffsetsChange</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requiresSignificantChange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a08bb10b6c882fb4217fe76846fb734e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeLayerStackRelocations</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtr &amp;layerStack, std::string *debugSummary)</argsstring>
        <name>_DidChangeLayerStackRelocations</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtr &amp;</type>
          <declname>layerStack</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1a724b77f1457298c16ae692cd8d75d355" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeLayerStackResolvedPath</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtr &amp;layerStack, bool requiresLayerStackChange, std::string *debugSummary)</argsstring>
        <name>_DidChangeLayerStackResolvedPath</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtr &amp;</type>
          <declname>layerStack</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requiresLayerStackChange</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1ac577371f6d9137ce8c2433a98cb50fea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeLayerStackExpressionVariables</definition>
        <argsstring>(const PcpCache *cache, const PcpLayerStackPtr &amp;layerStack, std::string *debugSummary)</argsstring>
        <name>_DidChangeLayerStackExpressionVariables</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const PcpLayerStackPtr &amp;</type>
          <declname>layerStack</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debugSummary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_changes_1aec4a52aa99c1d5099704cac2be851663" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DidChangeSpecStackInternal</definition>
        <argsstring>(const PcpCache *cache, const SdfPath &amp;path)</argsstring>
        <name>_DidChangeSpecStackInternal</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/changes.h" line="424" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes Pcp changes. </para>
    </briefdescription>
    <detaileddescription>
<para>Collects changes to Pcp necessary to reflect changes in Sdf. It does not cause any changes to any Pcp caches, layer stacks, etc; it only computes what changes would be necessary to Pcp to reflect the Sdf changes. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/changes.h" line="191" column="1" bodyfile="pxr/usd/pcp/changes.h" bodystart="191" bodyend="432"/>
    <listofallmembers>
      <member refid="class_pcp_changes_1a59aebbf21f5f3b3ca63b5c11c31d1420" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_cacheChanges</name></member>
      <member refid="class_pcp_changes_1abf7aafdd260faabded2b7a6a918a6d71" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidAddOrRemoveSublayer</name></member>
      <member refid="class_pcp_changes_1ad7cf58b7f03a2b7fc356f9d6f9c38d57" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeLayerStack</name></member>
      <member refid="class_pcp_changes_1ac577371f6d9137ce8c2433a98cb50fea" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeLayerStackExpressionVariables</name></member>
      <member refid="class_pcp_changes_1a08bb10b6c882fb4217fe76846fb734e3" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeLayerStackRelocations</name></member>
      <member refid="class_pcp_changes_1a724b77f1457298c16ae692cd8d75d355" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeLayerStackResolvedPath</name></member>
      <member refid="class_pcp_changes_1aec4a52aa99c1d5099704cac2be851663" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeSpecStackInternal</name></member>
      <member refid="class_pcp_changes_1af0a25a62a1f37169c96838965c782f01" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeSublayer</name></member>
      <member refid="class_pcp_changes_1aab2b4a7759f7a775233922d8a82d6ebe" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_DidChangeSublayerAndLayerStacks</name></member>
      <member refid="class_pcp_changes_1a366428bfbd50a6f4e5835348d1927506" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_GetCacheChanges</name></member>
      <member refid="class_pcp_changes_1aa26ae8f8229d416599bd00bb4148a57e" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_GetLayerStackChanges</name></member>
      <member refid="class_pcp_changes_1add94d870f85fca56a2942b45a7d45c51" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_GetRenameChanges</name></member>
      <member refid="class_pcp_changes_1a787dd06defc718e3a9af6d58fe667e87" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_layerStackChanges</name></member>
      <member refid="class_pcp_changes_1ad3afad9e9f0e82f05e13c31a1715d174" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_lifeboat</name></member>
      <member refid="class_pcp_changes_1ab3f2cb3f8e2a549556286ced0d807b13" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_LoadSublayerForChange</name></member>
      <member refid="class_pcp_changes_1ade3d265be9d34f95df50bcbae9c3ac52" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_LoadSublayerForChange</name></member>
      <member refid="class_pcp_changes_1ad459219d943e88f47a2440aec590b961" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_Optimize</name></member>
      <member refid="class_pcp_changes_1a9b89cf4d03eccabdf6c71db613eb562a" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_Optimize</name></member>
      <member refid="class_pcp_changes_1af150e8fee282b01698b2bada5ce2c59d" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_Optimize</name></member>
      <member refid="class_pcp_changes_1a8dabe930a54fe3ea602b4e6f49fb4b53" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_OptimizePathChanges</name></member>
      <member refid="class_pcp_changes_1aef1e8525a2de332898d69e00ab94434d" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_PathEditMap</name></member>
      <member refid="class_pcp_changes_1a74e15604638043fc85413e46918647fb" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_RenameChanges</name></member>
      <member refid="class_pcp_changes_1ab6286d593c1d15acbff577127f1880dc" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_renameChanges</name></member>
      <member refid="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8af8b8ec970acb7e6f1ed71f283df7f28c" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_SublayerAdded</name></member>
      <member refid="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_SublayerChangeType</name></member>
      <member refid="class_pcp_changes_1acbf0649ace3a14111a050aac4ecad1d8a9951c5865504017778b21024d1d28efe" prot="private" virt="non-virtual"><scope>PcpChanges</scope><name>_SublayerRemoved</name></member>
      <member refid="class_pcp_changes_1a8630b2dfef0dcdf76512ccaf888c3861" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>Apply</name></member>
      <member refid="class_pcp_changes_1a172ed975a5c776c25c3ab9204d01f2f0" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>CacheChanges</name></member>
      <member refid="class_pcp_changes_1aeffa80d8e31e3f0616c6865b94c20861" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChange</name></member>
      <member refid="class_pcp_changes_1a226b3250db62045990cd3948732c0548" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangeAssetResolver</name></member>
      <member refid="class_pcp_changes_1a2d3fcbb2f22969a0b7e565d18b073268" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangePaths</name></member>
      <member refid="class_pcp_changes_1a025e56246f3b0359fa1eb9ec5fc495b4" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangeSignificantly</name></member>
      <member refid="class_pcp_changes_1a9f06dc3dc7fdb1eb66fbf59a6c742d94" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangeSpecs</name></member>
      <member refid="class_pcp_changes_1a6bf99e330dc4cce7ec071796ffbbb358" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangeSpecStack</name></member>
      <member refid="class_pcp_changes_1a9a2cdaa225367199a0637fd1e0eb77a8" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidChangeTargets</name></member>
      <member refid="class_pcp_changes_1af9d6a19711efe98e9a6d462106c62bb1" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidDestroyCache</name></member>
      <member refid="class_pcp_changes_1a93e3b77f153918866212d34c5f069e6c" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidMaybeFixAsset</name></member>
      <member refid="class_pcp_changes_1a2ca150ba9c5a3e7c0e92894c34ef5228" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidMaybeFixSublayer</name></member>
      <member refid="class_pcp_changes_1aa9926f2da20e25f59eb75fa08d6aaa13" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidMuteLayer</name></member>
      <member refid="class_pcp_changes_1a98ee4fdc497f3fbc1bb1f0f9df644bc2" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>DidUnmuteLayer</name></member>
      <member refid="class_pcp_changes_1ae48e9278a49084057b8db13ded159ee8" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>GetCacheChanges</name></member>
      <member refid="class_pcp_changes_1a142a05a1c3f496b669c7a6c6ce8b1dd0" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>GetLayerStackChanges</name></member>
      <member refid="class_pcp_changes_1add6005eddc608a94a7f53c7f2104875c" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>GetLifeboat</name></member>
      <member refid="class_pcp_changes_1a23055e9a75bfa1af8ea4462f232b3ab1" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>IsEmpty</name></member>
      <member refid="class_pcp_changes_1adc7cbd7d62d8f06658f67ea4cc975929" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>LayerStackChanges</name></member>
      <member refid="class_pcp_changes_1a94b443cab9781f37163b3ed19d27fe5f" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>PcpChanges</name></member>
      <member refid="class_pcp_changes_1ab4812152ee6a1e0ee8715a90423f290a" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>Swap</name></member>
      <member refid="class_pcp_changes_1a986acd6f3b79e9a0ba74d03de8e2f07f" prot="public" virt="non-virtual"><scope>PcpChanges</scope><name>~PcpChanges</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
