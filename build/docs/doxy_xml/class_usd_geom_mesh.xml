<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_mesh" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomMesh</compoundname>
    <basecompoundref refid="class_usd_geom_point_based" prot="public" virt="non-virtual">UsdGeomPointBased</basecompoundref>
    <includes refid="usd_2usd_geom_2mesh_8h" local="no">mesh.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_mesh_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="139" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_mesh_1ae152d3e818c60fc8bb3b144e18efac36" prot="public" static="yes" mutable="no">
        <type>USDGEOM_API const float</type>
        <definition>const float SHARPNESS_INFINITE</definition>
        <argsstring></argsstring>
        <name>SHARPNESS_INFINITE</name>
        <briefdescription>
<para>As an element of a &apos;creaseSharpness&apos; or &apos;cornerSharpness&apos; array, indicates that the crease or corner is perfectly sharp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="619" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_mesh_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="217" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_mesh_1ac9b05fbc0b1f2315a688a3c044fa7158" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomMesh</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomMesh</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_mesh_1a7b4e5da13c0642c607ac6aebd4eda455" kindref="member">UsdGeomMesh::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="145" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a047177fd560406a47145aa52057f93be" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomMesh</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomMesh</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="153" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ae6169b5a6c7bddb204aef57620cbeba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomMesh</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomMesh</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a531feceb3df8d6c4f245637a8ef93fd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetFaceVertexIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetFaceVertexIndicesAttr</name>
        <briefdescription>
<para>Flat list of the index (into the <emphasis>points</emphasis> attribute) of each vertex of each face in the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>If this attribute has more than one timeSample, the mesh is considered to be topologically varying.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] faceVertexIndices</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ab0d7b2efa4f79d23311ff838e4513214" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateFaceVertexIndicesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateFaceVertexIndicesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a531feceb3df8d6c4f245637a8ef93fd6" kindref="member">GetFaceVertexIndicesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ab7b0aab73aede4f890977748c2c46451" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetFaceVertexCountsAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetFaceVertexCountsAttr</name>
        <briefdescription>
<para>Provides the number of vertices in each face of the mesh, which is also the number of consecutive indices in <emphasis>faceVertexIndices</emphasis> that define the face. </para>
        </briefdescription>
        <detaileddescription>
<para>The length of this attribute is the number of faces in the mesh. If this attribute has more than one timeSample, the mesh is considered to be topologically varying.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] faceVertexCounts</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a973dcfc178aef5f799adc68f0996d7a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateFaceVertexCountsAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateFaceVertexCountsAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1ab7b0aab73aede4f890977748c2c46451" kindref="member">GetFaceVertexCountsAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a01c7ff0dc2e9b6be9f09db6cfafb7c0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetSubdivisionSchemeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetSubdivisionSchemeAttr</name>
        <briefdescription>
<para>The subdivision scheme to be applied to the surface. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:</para>
<para><itemizedlist>
<listitem><para><bold>catmullClark</bold>: The default, Catmull-Clark subdivision; preferred for quad-dominant meshes (generalizes B-splines); interpolation of point data is smooth (non-linear)</para>
</listitem><listitem><para><bold>loop</bold>: Loop subdivision; preferred for purely triangular meshes; interpolation of point data is smooth (non-linear)</para>
</listitem><listitem><para><bold>bilinear</bold>: Subdivision reduces all faces to quads (topologically similar to &quot;catmullClark&quot;); interpolation of point data is bilinear</para>
</listitem><listitem><para><bold>none</bold>: No subdivision, i.e. a simple polygonal mesh; interpolation of point data is linear</para>
</listitem></itemizedlist>
</para>
<para>Polygonal meshes are typically lighter weight and faster to render, depending on renderer and render mode. Use of &quot;bilinear&quot; will produce a similar shape to a polygonal mesh and may offer additional guarantees of watertightness and additional subdivision features (e.g. holes) but may also not respect authored normals.</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token subdivisionScheme = &quot;catmullClark&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>catmullClark, loop, bilinear, none   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a83b1ef0ca0f796199018eea258b7c534" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateSubdivisionSchemeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateSubdivisionSchemeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a01c7ff0dc2e9b6be9f09db6cfafb7c0a" kindref="member">GetSubdivisionSchemeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1aaec976d873f541bcb3748390b91f3746" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetInterpolateBoundaryAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetInterpolateBoundaryAttr</name>
        <briefdescription>
<para>Specifies how subdivision is applied for faces adjacent to boundary edges and boundary points. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values correspond to choices available in OpenSubdiv:</para>
<para><itemizedlist>
<listitem><para><bold>none</bold>: No boundary interpolation is applied and boundary faces are effectively treated as holes</para>
</listitem><listitem><para><bold>edgeOnly</bold>: A sequence of boundary edges defines a smooth curve to which the edges of subdivided boundary faces converge</para>
</listitem><listitem><para><bold>edgeAndCorner</bold>: The default, similar to &quot;edgeOnly&quot; but the smooth boundary curve is made sharp at corner points</para>
</listitem></itemizedlist>
</para>
<para>These are illustrated and described in more detail in the OpenSubdiv documentation: <ulink url="https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#boundary-interpolation-rules">https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#boundary-interpolation-rules</ulink></para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token interpolateBoundary = &quot;edgeAndCorner&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>none, edgeOnly, edgeAndCorner   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ac9118e7a4988ca414fe62aefbce6a8f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateInterpolateBoundaryAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateInterpolateBoundaryAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1aaec976d873f541bcb3748390b91f3746" kindref="member">GetInterpolateBoundaryAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a718e19018f593bb86896d21439ec124d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetFaceVaryingLinearInterpolationAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetFaceVaryingLinearInterpolationAttr</name>
        <briefdescription>
<para>Specifies how elements of a primvar of interpolation type &quot;faceVarying&quot; are interpolated for subdivision surfaces. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolation can be as smooth as a &quot;vertex&quot; primvar or constrained to be linear at features specified by several options. Valid values correspond to choices available in OpenSubdiv:</para>
<para><itemizedlist>
<listitem><para><bold>none</bold>: No linear constraints or sharpening, smooth everywhere</para>
</listitem><listitem><para><bold>cornersOnly</bold>: Sharpen corners of discontinuous boundaries only, smooth everywhere else</para>
</listitem><listitem><para><bold>cornersPlus1</bold>: The default, same as &quot;cornersOnly&quot; plus additional sharpening at points where three or more distinct face-varying values occur</para>
</listitem><listitem><para><bold>cornersPlus2</bold>: Same as &quot;cornersPlus1&quot; plus additional sharpening at points with at least one discontinuous boundary corner or only one discontinuous boundary edge (a dart)</para>
</listitem><listitem><para><bold>boundaries</bold>: Piecewise linear along discontinuous boundaries, smooth interior</para>
</listitem><listitem><para><bold>all</bold>: Piecewise linear everywhere</para>
</listitem></itemizedlist>
</para>
<para>These are illustrated and described in more detail in the OpenSubdiv documentation: <ulink url="https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#face-varying-interpolation-rules">https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#face-varying-interpolation-rules</ulink></para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token faceVaryingLinearInterpolation = &quot;cornersPlus1&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>none, cornersOnly, cornersPlus1, cornersPlus2, boundaries, all   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a328bcad08364094268c82106ed5807a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateFaceVaryingLinearInterpolationAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateFaceVaryingLinearInterpolationAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a718e19018f593bb86896d21439ec124d" kindref="member">GetFaceVaryingLinearInterpolationAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1adafb724133588cfc4ade482cda5c42b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetTriangleSubdivisionRuleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetTriangleSubdivisionRuleAttr</name>
        <briefdescription>
<para>Specifies an option to the subdivision rules for the Catmull-Clark scheme to try and improve undesirable artifacts when subdividing triangles. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are &quot;catmullClark&quot; for the standard rules (the default) and &quot;smooth&quot; for the improvement.</para>
<para>See <ulink url="https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#triangle-subdivision-rule">https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#triangle-subdivision-rule</ulink></para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token triangleSubdivisionRule = &quot;catmullClark&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>catmullClark, smooth   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a0ab06cfb7ac9daf4956fb2455986f420" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateTriangleSubdivisionRuleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateTriangleSubdivisionRuleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1adafb724133588cfc4ade482cda5c42b2" kindref="member">GetTriangleSubdivisionRuleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a70e20683a4bdc2e3925cb2a4e9759702" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetHoleIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetHoleIndicesAttr</name>
        <briefdescription>
<para>The indices of all faces that should be treated as holes, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>made invisible. This is traditionally a feature of subdivision surfaces and not generally applied to polygonal meshes.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] holeIndices = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a9142082f476e52e0e33f5d589eef3cfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateHoleIndicesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateHoleIndicesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a70e20683a4bdc2e3925cb2a4e9759702" kindref="member">GetHoleIndicesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a87efe372a0463eb5844f4f57268c3ca6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetCornerIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCornerIndicesAttr</name>
        <briefdescription>
<para>The indices of points for which a corresponding sharpness value is specified in <emphasis>cornerSharpnesses</emphasis> (so the size of this array must match that of <emphasis>cornerSharpnesses</emphasis>). </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] cornerIndices = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a308f6eb21773c5a553b47024d047bda3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateCornerIndicesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCornerIndicesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a87efe372a0463eb5844f4f57268c3ca6" kindref="member">GetCornerIndicesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a5517a80bf787f39605f682db44f1b4f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetCornerSharpnessesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCornerSharpnessesAttr</name>
        <briefdescription>
<para>The sharpness values associated with a corresponding set of points specified in <emphasis>cornerIndices</emphasis> (so the size of this array must match that of <emphasis>cornerIndices</emphasis>). </para>
        </briefdescription>
        <detaileddescription>
<para>Use the constant <computeroutput>SHARPNESS_INFINITE</computeroutput> for a perfectly sharp corner.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float[] cornerSharpnesses = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;float&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;FloatArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a03154601b04bcd00c58e0f4aa7426f76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateCornerSharpnessesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCornerSharpnessesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a5517a80bf787f39605f682db44f1b4f6" kindref="member">GetCornerSharpnessesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1aa016dc952190b6fb615b0f4aa7cacaa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetCreaseIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCreaseIndicesAttr</name>
        <briefdescription>
<para>The indices of points grouped into sets of successive pairs that identify edges to be creased. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of this array must be equal to the sum of all elements of the <emphasis>creaseLengths</emphasis> attribute.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] creaseIndices = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ae7fdb51bc577ab6518785d379b524a3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateCreaseIndicesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCreaseIndicesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1aa016dc952190b6fb615b0f4aa7cacaa3" kindref="member">GetCreaseIndicesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a16b5e80bb9b2ecd31516dbae206482a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetCreaseLengthsAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCreaseLengthsAttr</name>
        <briefdescription>
<para>The length of this array specifies the number of creases (sets of adjacent sharpened edges) on the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>Each element gives the number of points of each crease, whose indices are successively laid out in the <emphasis>creaseIndices</emphasis> attribute. Since each crease must be at least one edge long, each element of this array must be at least two.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int[] creaseLengths = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;int&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;IntArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a8fd62aa4e72fd5dc90c962a4f6287ae2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateCreaseLengthsAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCreaseLengthsAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1a16b5e80bb9b2ecd31516dbae206482a4" kindref="member">GetCreaseLengthsAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ad66811480cf8d706d825c31276684109" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetCreaseSharpnessesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCreaseSharpnessesAttr</name>
        <briefdescription>
<para>The per-crease or per-edge sharpness values for all creases. </para>
        </briefdescription>
        <detaileddescription>
<para>Since <emphasis>creaseLengths</emphasis> encodes the number of points in each crease, the number of elements in this array will be either len(creaseLengths) or the sum over all X of (creaseLengths[X] - 1). Note that while the RI spec allows each crease to have either a single sharpness or a value per-edge, USD will encode either a single sharpness per crease on a mesh, or sharpnesses for all edges making up the creases on a mesh. Use the constant <computeroutput>SHARPNESS_INFINITE</computeroutput> for a perfectly sharp crease.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float[] creaseSharpnesses = []</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;float&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;FloatArray   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1af23f5de1a7dd7107f6d415f32df64899" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateCreaseSharpnessesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCreaseSharpnessesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_mesh_1ad66811480cf8d706d825c31276684109" kindref="member">GetCreaseSharpnessesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a7ec989c9960b21f2a7459faab388206e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API size_t</type>
        <definition>USDGEOM_API size_t GetFaceCount</definition>
        <argsstring>(UsdTimeCode timeCode=UsdTimeCode::Default()) const</argsstring>
        <name>GetFaceCount</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>timeCode</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the number of faces as defined by the size of the <emphasis>faceVertexCounts</emphasis> array at <emphasis>timeCode</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><para><simplesect kind="note"><para>For most code, this check will be performant. When using file formats where the cost of attribute reading is high and the time sampled array will be read into memory later, it may be better to explicitly read the value once and check the size of the array directly. </para>
</simplesect>
</para>
<simplesect kind="see"><para><ref refid="class_usd_geom_mesh_1ab7b0aab73aede4f890977748c2c46451" kindref="member">GetFaceVertexCountsAttr()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="627" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_mesh_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a7b4e5da13c0642c607ac6aebd4eda455" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref></type>
        <definition>static USDGEOM_API UsdGeomMesh Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomMesh(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a15716fa9d69678b7e3cba528309c7857" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_mesh" kindref="compound">UsdGeomMesh</ref></type>
        <definition>static USDGEOM_API UsdGeomMesh Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1a4aa82706367cf68d7f68af37b254f008" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool ValidateTopology</definition>
        <argsstring>(const VtIntArray &amp;faceVertexIndices, const VtIntArray &amp;faceVertexCounts, size_t numPoints, std::string *reason=nullptr)</argsstring>
        <name>ValidateTopology</name>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>faceVertexIndices</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>faceVertexCounts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Validate the topology of a mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This validates that the sum of <computeroutput>faceVertexCounts</computeroutput> is equal to the size of the <computeroutput>faceVertexIndices</computeroutput> array, and that all face vertex indices in the <computeroutput>faceVertexIndices</computeroutput> array are in the range [0, numPoints). Returns true if the topology is valid, or false otherwise. If the topology is invalid and <computeroutput>reason</computeroutput> is non-null, an error message describing the validation error will be set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1ad140e957ac56376b381ad649a5d53bca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsSharpnessInfinite</definition>
        <argsstring>(const float sharpness)</argsstring>
        <name>IsSharpnessInfinite</name>
        <param>
          <type>const float</type>
          <declname>sharpness</declname>
        </param>
        <briefdescription>
<para>Returns whether or not <computeroutput>sharpness</computeroutput> is considered infinite. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>sharpness</computeroutput> value is usually intended for &apos;creaseSharpness&apos; or &apos;cornerSharpness&apos; arrays and a return value of <computeroutput>true</computeroutput> indicates that the crease or corner is perfectly sharp. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="613" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_mesh_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_gprim_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="213" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_mesh_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_mesh_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="221" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_mesh_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_gprim_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/mesh.h" line="225" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encodes a mesh with optional subdivision properties and features. </para>
    </briefdescription>
    <detaileddescription>
<para>As a point-based primitive, meshes are defined in terms of points that are connected into edges and faces. Many references to meshes use the term &apos;vertex&apos; in place of or interchangeably with &apos;points&apos;, while some use &apos;vertex&apos; to refer to the &apos;face-vertices&apos; that define a face. To avoid confusion, the term &apos;vertex&apos; is intentionally avoided in favor of &apos;points&apos; or &apos;face-vertices&apos;.</para>
<para>The connectivity between points, edges and faces is encoded using a common minimal topological description of the faces of the mesh. Each face is defined by a set of face-vertices using indices into the Mesh&apos;s <emphasis>points</emphasis> array (inherited from <ref refid="class_usd_geom_point_based" kindref="compound">UsdGeomPointBased</ref>) and laid out in a single linear <emphasis>faceVertexIndices</emphasis> array for efficiency. A companion <emphasis>faceVertexCounts</emphasis> array provides, for each face, the number of consecutive face-vertices in <emphasis>faceVertexIndices</emphasis> that define the face. No additional connectivity information is required or constructed, so no adjacency or neighborhood queries are available.</para>
<para>A key property of this mesh schema is that it encodes both subdivision surfaces and simpler polygonal meshes. This is achieved by varying the <emphasis>subdivisionScheme</emphasis> attribute, which is set to specify Catmull-Clark subdivision by default, so polygonal meshes must always be explicitly declared. The available subdivision schemes and additional subdivision features encoded in optional attributes conform to the feature set of OpenSubdiv (<ulink url="https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html">https://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html</ulink>).</para>
<para><anchor id="class_usd_geom_mesh_1UsdGeom_Mesh_Primvars"/><bold>A Note About Primvars</bold></para>
<para>The following list clarifies the number of elements for and the interpolation behavior of the different primvar interpolation types for meshes:</para>
<para><itemizedlist>
<listitem><para><bold>constant</bold>: One element for the entire mesh; no interpolation.</para>
</listitem><listitem><para><bold>uniform</bold>: One element for each face of the mesh; elements are typically not interpolated but are inherited by other faces derived from a given face (via subdivision, tessellation, etc.).</para>
</listitem><listitem><para><bold>varying</bold>: One element for each point of the mesh; interpolation of point data is always linear.</para>
</listitem><listitem><para><bold>vertex</bold>: One element for each point of the mesh; interpolation of point data is applied according to the <emphasis>subdivisionScheme</emphasis> attribute.</para>
</listitem><listitem><para><bold>faceVarying</bold>: One element for each of the face-vertices that define the mesh topology; interpolation of face-vertex data may be smooth or linear, according to the <emphasis>subdivisionScheme</emphasis> and <emphasis>faceVaryingLinearInterpolation</emphasis> attributes.</para>
</listitem></itemizedlist>
</para>
<para>Primvar interpolation types and related utilities are described more generally in <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">Interpolation of Geometric Primitive Variables</ref>.</para>
<para><anchor id="class_usd_geom_mesh_1UsdGeom_Mesh_Normals"/><bold>A Note About Normals</bold></para>
<para>Normals should not be authored on a subdivision mesh, since subdivision algorithms define their own normals. They should only be authored for polygonal meshes (<emphasis>subdivisionScheme</emphasis> = &quot;none&quot;).</para>
<para>The <emphasis>normals</emphasis> attribute inherited from <ref refid="class_usd_geom_point_based" kindref="compound">UsdGeomPointBased</ref> is not a generic primvar, but the number of elements in this attribute will be determined by its <emphasis>interpolation</emphasis>. See <ref refid="class_usd_geom_point_based_1ae0ac6f60f8135799ba42a16fe466f89b" kindref="member">UsdGeomPointBased::GetNormalsInterpolation()</ref> . If <emphasis>normals</emphasis> and <emphasis>primvars:normals</emphasis> are both specified, the latter has precedence. If a polygonal mesh specifies <bold>neither</bold> <emphasis>normals</emphasis> nor <emphasis>primvars:normals</emphasis>, then it should be treated and rendered as faceted, with no attempt to compute smooth normals.</para>
<para>The normals generated for smooth subdivision schemes, e.g. Catmull-Clark and Loop, will likewise be smooth, but others, e.g. Bilinear, may be discontinuous between faces and/or within non-planar irregular faces.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">UsdGeomTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdGeomTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6334">
        <label>UsdGeomMesh</label>
        <link refid="class_usd_geom_mesh"/>
        <childnode refid="6335" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6339">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6340" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6336">
        <label>UsdGeomGprim</label>
        <link refid="class_usd_geom_gprim"/>
        <childnode refid="6337" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6335">
        <label>UsdGeomPointBased</label>
        <link refid="class_usd_geom_point_based"/>
        <childnode refid="6336" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6340">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6341" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6341">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6337">
        <label>UsdGeomBoundable</label>
        <link refid="class_usd_geom_boundable"/>
        <childnode refid="6338" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6338">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="6339" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6342">
        <label>UsdGeomMesh</label>
        <link refid="class_usd_geom_mesh"/>
        <childnode refid="6343" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6347">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6348" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6344">
        <label>UsdGeomGprim</label>
        <link refid="class_usd_geom_gprim"/>
        <childnode refid="6345" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6343">
        <label>UsdGeomPointBased</label>
        <link refid="class_usd_geom_point_based"/>
        <childnode refid="6344" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6348">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6349" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6349">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6345">
        <label>UsdGeomBoundable</label>
        <link refid="class_usd_geom_boundable"/>
        <childnode refid="6346" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6346">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="6347" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/mesh.h" line="134" column="1" bodyfile="pxr/usd/usdGeom/mesh.h" bodystart="133" bodyend="629"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomMesh</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_geom_mesh_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomMesh</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomMesh</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_mesh_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomMesh</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_mesh_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomMesh</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomMesh</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomMesh</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_mesh_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomMesh</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddOrientOp</name></member>
      <member refid="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddTranslateOp</name></member>
      <member refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>AddXformOp</name></member>
      <member refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ClearXformOpOrder</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_point_based_1a66d1156f15021eb44b2cb646f4cc066a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeExtent</name></member>
      <member refid="class_usd_geom_point_based_1a47310cb36cb5dab8509959573e1ca417" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeExtent</name></member>
      <member refid="class_usd_geom_boundable_1a99f4a8f288a211fc286c3f12f0e87fda" prot="public" virt="non-virtual" ambiguityscope="UsdGeomGprim::"><scope>UsdGeomMesh</scope><name>ComputeExtent</name></member>
      <member refid="class_usd_geom_boundable_1a413c9eb5b4e1d8fddd627cf33ed4a106" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeExtentFromPlugins</name></member>
      <member refid="class_usd_geom_boundable_1a7fa34cebf9339958ad25099dd635c9c7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeExtentFromPlugins</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_point_based_1a007aedc5640c36c1b656ae4406593a15" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePointsAtTime</name></member>
      <member refid="class_usd_geom_point_based_1aaa8d359dfd5a70ff311683b6bb989c74" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePointsAtTime</name></member>
      <member refid="class_usd_geom_point_based_1ae6f15a2de15825522391c72252c4cdc1" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePointsAtTimes</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_geom_point_based_1ae13702eda2c800254bc40d3948420457" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateAccelerationsAttr</name></member>
      <member refid="class_usd_geom_mesh_1a308f6eb21773c5a553b47024d047bda3" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateCornerIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a03154601b04bcd00c58e0f4aa7426f76" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateCornerSharpnessesAttr</name></member>
      <member refid="class_usd_geom_mesh_1ae7fdb51bc577ab6518785d379b524a3b" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateCreaseIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a8fd62aa4e72fd5dc90c962a4f6287ae2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateCreaseLengthsAttr</name></member>
      <member refid="class_usd_geom_mesh_1af23f5de1a7dd7107f6d415f32df64899" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateCreaseSharpnessesAttr</name></member>
      <member refid="class_usd_geom_gprim_1a7fd86a311b27d9b4fdd82736bb423056" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateDisplayColorAttr</name></member>
      <member refid="class_usd_geom_gprim_1a0915951c95ea904181354ac2d27c5ec6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateDisplayColorPrimvar</name></member>
      <member refid="class_usd_geom_gprim_1ad5be639be4c7963ef213b15594a1dbb6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateDisplayOpacityAttr</name></member>
      <member refid="class_usd_geom_gprim_1af90ae547097a320fad7d3f7bd9e681f9" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateDisplayOpacityPrimvar</name></member>
      <member refid="class_usd_geom_gprim_1a4cd597e15452c6b3f3fa8b0429023b65" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateDoubleSidedAttr</name></member>
      <member refid="class_usd_geom_boundable_1a20dfcd57796694016d7d852e798458d8" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateExtentAttr</name></member>
      <member refid="class_usd_geom_mesh_1a328bcad08364094268c82106ed5807a5" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateFaceVaryingLinearInterpolationAttr</name></member>
      <member refid="class_usd_geom_mesh_1a973dcfc178aef5f799adc68f0996d7a1" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateFaceVertexCountsAttr</name></member>
      <member refid="class_usd_geom_mesh_1ab0d7b2efa4f79d23311ff838e4513214" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateFaceVertexIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a9142082f476e52e0e33f5d589eef3cfc" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateHoleIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1ac9118e7a4988ca414fe62aefbce6a8f2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateInterpolateBoundaryAttr</name></member>
      <member refid="class_usd_geom_point_based_1a1143c66e2de7560cbd81fe377949ff89" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateNormalsAttr</name></member>
      <member refid="class_usd_geom_gprim_1a40d10614ef3494576ded1ef08fb75f6a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateOrientationAttr</name></member>
      <member refid="class_usd_geom_point_based_1a2eb01bcff2e20a4b8809099496bad01d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreatePointsAttr</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_geom_mesh_1a83b1ef0ca0f796199018eea258b7c534" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateSubdivisionSchemeAttr</name></member>
      <member refid="class_usd_geom_mesh_1a0ab06cfb7ac9daf4956fb2455986f420" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateTriangleSubdivisionRuleAttr</name></member>
      <member refid="class_usd_geom_point_based_1aaf96c3a4bc0546725bc50c23067b7d1a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateVelocitiesAttr</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>CreateXformOpOrderAttr</name></member>
      <member refid="class_usd_geom_mesh_1a15716fa9d69678b7e3cba528309c7857" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>Define</name></member>
      <member refid="class_usd_geom_mesh_1a7b4e5da13c0642c607ac6aebd4eda455" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>Get</name></member>
      <member refid="class_usd_geom_point_based_1abf4df1035f2f759d5119392f94a73626" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetAccelerationsAttr</name></member>
      <member refid="class_usd_geom_mesh_1a87efe372a0463eb5844f4f57268c3ca6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetCornerIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a5517a80bf787f39605f682db44f1b4f6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetCornerSharpnessesAttr</name></member>
      <member refid="class_usd_geom_mesh_1aa016dc952190b6fb615b0f4aa7cacaa3" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetCreaseIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a16b5e80bb9b2ecd31516dbae206482a4" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetCreaseLengthsAttr</name></member>
      <member refid="class_usd_geom_mesh_1ad66811480cf8d706d825c31276684109" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetCreaseSharpnessesAttr</name></member>
      <member refid="class_usd_geom_gprim_1a0f8310a9dbe0bfc4be2bf4aa32e4a3e4" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetDisplayColorAttr</name></member>
      <member refid="class_usd_geom_gprim_1ab36f805d674846aeeb296c8dbe661533" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetDisplayColorPrimvar</name></member>
      <member refid="class_usd_geom_gprim_1af3b5a808697655fb58eddafb01003527" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetDisplayOpacityAttr</name></member>
      <member refid="class_usd_geom_gprim_1a4d68d7e0959dfef2db82a7a1f1a6eea8" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetDisplayOpacityPrimvar</name></member>
      <member refid="class_usd_geom_gprim_1a63367a54086e014dda98cc79ad5f8602" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetDoubleSidedAttr</name></member>
      <member refid="class_usd_geom_boundable_1abecc87b5433fec139295a78b439b0531" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetExtentAttr</name></member>
      <member refid="class_usd_geom_mesh_1a7ec989c9960b21f2a7459faab388206e" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetFaceCount</name></member>
      <member refid="class_usd_geom_mesh_1a718e19018f593bb86896d21439ec124d" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetFaceVaryingLinearInterpolationAttr</name></member>
      <member refid="class_usd_geom_mesh_1ab7b0aab73aede4f890977748c2c46451" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetFaceVertexCountsAttr</name></member>
      <member refid="class_usd_geom_mesh_1a531feceb3df8d6c4f245637a8ef93fd6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetFaceVertexIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1a70e20683a4bdc2e3925cb2a4e9759702" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetHoleIndicesAttr</name></member>
      <member refid="class_usd_geom_mesh_1aaec976d873f541bcb3748390b91f3746" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetInterpolateBoundaryAttr</name></member>
      <member refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_point_based_1ac9a057e1f221d9a20b99887f35f84480" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetNormalsAttr</name></member>
      <member refid="class_usd_geom_point_based_1ae0ac6f60f8135799ba42a16fe466f89b" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetNormalsInterpolation</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_gprim_1a6d7f451cf0aa27125cc118b030ebb735" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetOrientationAttr</name></member>
      <member refid="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetOrientOp</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetPath</name></member>
      <member refid="class_usd_geom_point_based_1ade9b7ab444b88ff2bb20ac5533dae030" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetPointsAttr</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetScaleOp</name></member>
      <member refid="class_usd_geom_mesh_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_geom_mesh_1a01c7ff0dc2e9b6be9f09db6cfafb7c0a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetSubdivisionSchemeAttr</name></member>
      <member refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTranslateOp</name></member>
      <member refid="class_usd_geom_mesh_1adafb724133588cfc4ade482cda5c42b2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetTriangleSubdivisionRuleAttr</name></member>
      <member refid="class_usd_geom_point_based_1a2840a996c8a768ecea390147390dc222" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetVelocitiesAttr</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetXformOp</name></member>
      <member refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>GetXformOpOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_geom_mesh_1ad140e957ac56376b381ad649a5d53bca" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsSharpnessInfinite</name></member>
      <member refid="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsTransformationAffectedByAttrNamed</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>IsTyped</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>MakeMatrixXform</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_mesh_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_point_based_1a5ab0dc3cc838d49f4e8ac98d8f00ca00" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SetNormalsInterpolation</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SetXformOpOrder</name></member>
      <member refid="class_usd_geom_mesh_1ae152d3e818c60fc8bb3b144e18efac36" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>SHARPNESS_INFINITE</name></member>
      <member refid="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_boundable_1a93364dd184714cc86a93a4e6c943f54f" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomBoundable</name></member>
      <member refid="class_usd_geom_boundable_1acddb485259d4c8d3c0fdb9445b85a19e" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomBoundable</name></member>
      <member refid="class_usd_geom_gprim_1a10c1cc1805ae388635bba63c3653adb8" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomGprim</name></member>
      <member refid="class_usd_geom_gprim_1a2bb55640543c9629ee6f9b05d7dcd0cc" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomGprim</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_mesh_1ac9b05fbc0b1f2315a688a3c044fa7158" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomMesh</name></member>
      <member refid="class_usd_geom_mesh_1a047177fd560406a47145aa52057f93be" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomMesh</name></member>
      <member refid="class_usd_geom_point_based_1a8c3ea3da2f4a09ade8912582173b68ec" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomPointBased</name></member>
      <member refid="class_usd_geom_point_based_1a8303da656cab834f26a58c92937d30f5" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomPointBased</name></member>
      <member refid="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_mesh_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_mesh_1a4aa82706367cf68d7f68af37b254f008" prot="public" virt="non-virtual"><scope>UsdGeomMesh</scope><name>ValidateTopology</name></member>
      <member refid="class_usd_geom_boundable_1af5dfc6e58452966f10c6f8d0a771c346" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomBoundable</name></member>
      <member refid="class_usd_geom_gprim_1a0a03ad7c400946736b8d97a26cbf7211" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomGprim</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_mesh_1ae6169b5a6c7bddb204aef57620cbeba4" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomMesh</name></member>
      <member refid="class_usd_geom_point_based_1ac327cfc78d950cc82baefe3111580200" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomPointBased</name></member>
      <member refid="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdGeomXformable</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdGeomMesh</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
