<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_ray" kind="class" language="C++" prot="public">
    <compoundname>GfRay</compoundname>
    <includes refid="ray_8h" local="no">ray.h</includes>
      <sectiondef kind="user-defined">
      <header>Intersection methods.</header>
      <description><para>The methods in this group intersect the ray with a geometric entity. </para>
</description>
      <memberdef kind="function" id="class_gf_ray_1aef4a51290379e9a95cb26755750b76ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1, const GfVec3d &amp;p2, double *distance=NULL, GfVec3d *barycentricCoords=NULL, bool *frontFacing=NULL, double maxDist=std::numeric_limits&lt; double &gt;::infinity()) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <declname>barycentricCoords</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>frontFacing</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxDist</declname>
          <defval>std::numeric_limits&lt; double &gt;::infinity()</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with the triangle formed by points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, and <computeroutput>p2</computeroutput>, returning <computeroutput>true</computeroutput> if it hits. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an intersection, it also returns the parametric distance to the intersection point in <computeroutput>distance</computeroutput>, the barycentric coordinates of the intersection point in <computeroutput>barycentricCoords</computeroutput> and the front-facing flag in <computeroutput>frontFacing</computeroutput>. The barycentric coordinates are defined with respect to the three vertices taken in order. The front-facing flag is <computeroutput>true</computeroutput> if the intersection hit the side of the triangle that is formed when the vertices are ordered counter-clockwise (right-hand rule). If any of the return pointers are <computeroutput>NULL</computeroutput>, the corresponding values are not returned.</para>
<para>If the distance to the intersection is greater than <computeroutput>maxDist</computeroutput>, then the method will return false.</para>
<para>Barycentric coordinates are defined to sum to 1 and satisfy this relationsip: <programlisting><codeline><highlight class="normal">intersectionPoint<sp/>=<sp/>(barycentricCoords[0]<sp/>*<sp/>p0<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barycentricCoords[1]<sp/>*<sp/>p1<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barycentricCoords[2]<sp/>*<sp/>p2);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a71f11c01ed06d49ed5c7817233349277" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfPlane &amp;plane, double *distance=NULL, bool *frontFacing=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>frontFacing</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with a plane, returning <computeroutput>true</computeroutput> if the ray is not parallel to the plane and the intersection is within the ray bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an intersection, it also returns the parametric distance to the intersection point in <computeroutput>distance</computeroutput> and the front-facing flag in <computeroutput>frontFacing</computeroutput>, if they are not <computeroutput>NULL</computeroutput>. The front-facing flag is <computeroutput>true</computeroutput> if the intersection is on the side of the plane in which its normal points. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1acdd12fee6a19a837711eb86a4a7f176f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfRange3d &amp;box, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with an axis-aligned box, returning <computeroutput>true</computeroutput> if the ray intersects it at all within bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an intersection, this also returns the parametric distances to the two intersection points in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1ae5ae668a6193317243071478f059a86d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfBBox3d &amp;box, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with an oriented box, returning <computeroutput>true</computeroutput> if the ray intersects it at all within bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an intersection, this also returns the parametric distances to the two intersection points in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1ae9ff8d46ff40cf73abbd92c5d85eccf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfVec3d &amp;center, double radius, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with a sphere, returning <computeroutput>true</computeroutput> if the ray intersects it at all within bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an intersection, returns the parametric distance to the two intersection points in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a556750c7d8a3865b83972ab593b675ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfVec3d &amp;origin, const GfVec3d &amp;axis, const double radius, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with an infinite cylinder, with axis <computeroutput>axis</computeroutput>, centered at the <computeroutput>origin</computeroutput>, with radius <computeroutput>radius</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the ray intersects it at all within bounds. If there is an intersection, returns the parametric distance to the two intersection points in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>.</para>
<para>Note this method does not validate whether the radius is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a06c53f52cd3defadaee6437351b8ab6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersect</definition>
        <argsstring>(const GfVec3d &amp;origin, const GfVec3d &amp;axis, const double radius, const double height, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>height</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Intersects the ray with an infinite non-double cone, centered at <computeroutput>origin</computeroutput>, with axis <computeroutput>axis</computeroutput>, radius <computeroutput>radius</computeroutput> and apex at <computeroutput>height</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the ray intersects it at all within bounds. If there is an intersection, returns the parametric distance to the two intersection points in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>.</para>
<para>Note this method does not validate whether the radius are height are valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="224" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_ray_1ac96f89f6c1019940648893abb7608396" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _startPoint</definition>
        <argsstring></argsstring>
        <name>_startPoint</name>
        <briefdescription>
<para>The starting point of the ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="252" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_ray_1af6116596dc254f1d03b3c500d2f20c39" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _direction</definition>
        <argsstring></argsstring>
        <name>_direction</name>
        <briefdescription>
<para>The direction vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="254" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_ray_1aa2137be8ef4b7bff2fe400b59dbcc951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRay</definition>
        <argsstring>()</argsstring>
        <name>GfRay</name>
        <briefdescription>
<para>The default constructor leaves the ray parameters undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="66" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="66" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a03abeabba9b41c25e4f26ad87121ea78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRay</definition>
        <argsstring>(const GfVec3d &amp;startPoint, const GfVec3d &amp;direction)</argsstring>
        <name>GfRay</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>This constructor takes a starting point and a direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="70" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a526986d94ce1e1042d9d2a7302867b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetPointAndDirection</definition>
        <argsstring>(const GfVec3d &amp;startPoint, const GfVec3d &amp;direction)</argsstring>
        <name>SetPointAndDirection</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Sets the ray by specifying a starting point and a direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1aed75b52db1ebfde2520d42c9a6418be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetEnds</definition>
        <argsstring>(const GfVec3d &amp;startPoint, const GfVec3d &amp;endPoint)</argsstring>
        <name>SetEnds</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>endPoint</declname>
        </param>
        <briefdescription>
<para>Sets the ray by specifying a starting point and an ending point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1ac56091ce223be588473d42ae8338b63e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetStartPoint</definition>
        <argsstring>() const</argsstring>
        <name>GetStartPoint</name>
        <briefdescription>
<para>Returns the starting point of the segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="84" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a2c144e666135d6c69392c253995c275b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
<para>Returns the direction vector of the segment. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not guaranteed to be unit length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="90" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a24e68cc54f4a64c5ead9a5ba77ce7ae4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetPoint</definition>
        <argsstring>(double distance) const</argsstring>
        <name>GetPoint</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Returns the point that is <computeroutput>distance</computeroutput> units from the starting point along the direction vector, expressed in parametic distance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="96" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a6461abd34849074339f2fa1d3ef6dad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
        <definition>GF_API GfRay&amp; Transform</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transforms the ray by the given matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a044694c5786acca3666d98877d382d85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d FindClosestPoint</definition>
        <argsstring>(const GfVec3d &amp;point, double *rayDistance=NULL) const</argsstring>
        <name>FindClosestPoint</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rayDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the point on the ray that is closest to <computeroutput>point</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>rayDistance</computeroutput> is not <computeroutput>NULL</computeroutput>, it will be set to the parametric distance along the ray of the closest point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1ac8597997e52dcea9c6315d5b36a766d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRay &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points, directions, and lengths must match exactly for rays to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="113" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_ray_1a4462cefa3f2f4482a88dce37e3d71e8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRay &amp;r) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points, directions, and lengths must match exactly for rays to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="120" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="120" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_ray_1a7683701224007d3d48f903adfcb54248" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend bool</type>
        <definition>GF_API friend bool GfFindClosestPoints</definition>
        <argsstring>(const GfRay &amp;, const GfLine &amp;, GfVec3d *, GfVec3d *, double *, double *)</argsstring>
        <name>GfFindClosestPoints</name>
        <param>
          <type>const <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
          <defname>ray</defname>
        </param>
        <param>
          <type>const <ref refid="class_gf_line" kindref="compound">GfLine</ref> &amp;</type>
          <defname>line</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>rayPoint</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>linePoint</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>rayDistance</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>lineDistance</defname>
        </param>
        <briefdescription>
<para>Computes the closest points between a ray and a line. </para>
        </briefdescription>
        <detaileddescription>
<para>The two points are returned in <computeroutput>rayPoint</computeroutput> and <computeroutput>linePoint</computeroutput>. The parametric distance of each point on the lines is returned in <computeroutput>rayDistance</computeroutput> and <computeroutput>lineDistance</computeroutput>.</para>
<para>This returns <computeroutput>false</computeroutput> if the lines were close enough to parallel that no points could be computed; in this case, the other return values are undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_ray_1af5c6c41c10c294e4e4323ece1f721351" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend bool</type>
        <definition>GF_API friend bool GfFindClosestPoints</definition>
        <argsstring>(const GfRay &amp;, const GfLineSeg &amp;, GfVec3d *, GfVec3d *, double *, double *)</argsstring>
        <name>GfFindClosestPoints</name>
        <param>
          <type>const <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
          <defname>ray</defname>
        </param>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <defname>seg</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>rayPoint</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>segPoint</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>rayDistance</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>segDistance</defname>
        </param>
        <briefdescription>
<para>Computes the closest points between a ray and a line segment. </para>
        </briefdescription>
        <detaileddescription>
<para>The two points are returned in <computeroutput>rayPoint</computeroutput> and <computeroutput>segPoint</computeroutput>. The parametric distance of each point is returned in <computeroutput>rayDistance</computeroutput> and <computeroutput>segDistance</computeroutput>.</para>
<para>This returns <computeroutput>false</computeroutput> if the lines were close enough to parallel that no points could be computed; in this case, the other return values are undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="238" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_ray_1ad15e99e878e0c044e39e799210e3a6d6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _SolveQuadratic</definition>
        <argsstring>(const double a, const double b, const double c, double *enterDistance=NULL, double *exitDistance=NULL) const</argsstring>
        <name>_SolveQuadratic</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>enterDistance</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>exitDistance</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Solves the quadratic equation returning the solutions, if defined, in <computeroutput>enterDistance</computeroutput> and <computeroutput>exitDistance</computeroutput>, where <computeroutput>enterDistance</computeroutput> is less than or equal to <computeroutput>exitDistance</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="245" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: Ray used for intersection testing. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a three-dimensional ray in space, typically used for intersection testing. It consists of an origin and a direction.</para>
<para>Note that by default a <computeroutput><ref refid="class_gf_ray" kindref="compound">GfRay</ref></computeroutput> does not normalize its direction vector to unit length.</para>
<para>Note for ray intersections, the start point is included in the computations, i.e., a distance of zero is defined to be intersecting. </para>
    </detaileddescription>
    <location file="pxr/base/gf/ray.h" line="61" column="1" bodyfile="pxr/base/gf/ray.h" bodystart="61" bodyend="255"/>
    <listofallmembers>
      <member refid="class_gf_ray_1af6116596dc254f1d03b3c500d2f20c39" prot="private" virt="non-virtual"><scope>GfRay</scope><name>_direction</name></member>
      <member refid="class_gf_ray_1ad15e99e878e0c044e39e799210e3a6d6" prot="private" virt="non-virtual"><scope>GfRay</scope><name>_SolveQuadratic</name></member>
      <member refid="class_gf_ray_1ac96f89f6c1019940648893abb7608396" prot="private" virt="non-virtual"><scope>GfRay</scope><name>_startPoint</name></member>
      <member refid="class_gf_ray_1a044694c5786acca3666d98877d382d85" prot="public" virt="non-virtual"><scope>GfRay</scope><name>FindClosestPoint</name></member>
      <member refid="class_gf_ray_1a2c144e666135d6c69392c253995c275b" prot="public" virt="non-virtual"><scope>GfRay</scope><name>GetDirection</name></member>
      <member refid="class_gf_ray_1a24e68cc54f4a64c5ead9a5ba77ce7ae4" prot="public" virt="non-virtual"><scope>GfRay</scope><name>GetPoint</name></member>
      <member refid="class_gf_ray_1ac56091ce223be588473d42ae8338b63e" prot="public" virt="non-virtual"><scope>GfRay</scope><name>GetStartPoint</name></member>
      <member refid="class_gf_ray_1a7683701224007d3d48f903adfcb54248" prot="private" virt="non-virtual"><scope>GfRay</scope><name>GfFindClosestPoints</name></member>
      <member refid="class_gf_ray_1af5c6c41c10c294e4e4323ece1f721351" prot="private" virt="non-virtual"><scope>GfRay</scope><name>GfFindClosestPoints</name></member>
      <member refid="class_gf_ray_1aa2137be8ef4b7bff2fe400b59dbcc951" prot="public" virt="non-virtual"><scope>GfRay</scope><name>GfRay</name></member>
      <member refid="class_gf_ray_1a03abeabba9b41c25e4f26ad87121ea78" prot="public" virt="non-virtual"><scope>GfRay</scope><name>GfRay</name></member>
      <member refid="class_gf_ray_1aef4a51290379e9a95cb26755750b76ec" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1a71f11c01ed06d49ed5c7817233349277" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1acdd12fee6a19a837711eb86a4a7f176f" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1ae5ae668a6193317243071478f059a86d" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1ae9ff8d46ff40cf73abbd92c5d85eccf3" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1a556750c7d8a3865b83972ab593b675ad" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1a06c53f52cd3defadaee6437351b8ab6e" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Intersect</name></member>
      <member refid="class_gf_ray_1a4462cefa3f2f4482a88dce37e3d71e8f" prot="public" virt="non-virtual"><scope>GfRay</scope><name>operator !=</name></member>
      <member refid="class_gf_ray_1ac8597997e52dcea9c6315d5b36a766d4" prot="public" virt="non-virtual"><scope>GfRay</scope><name>operator==</name></member>
      <member refid="class_gf_ray_1aed75b52db1ebfde2520d42c9a6418be7" prot="public" virt="non-virtual"><scope>GfRay</scope><name>SetEnds</name></member>
      <member refid="class_gf_ray_1a526986d94ce1e1042d9d2a7302867b94" prot="public" virt="non-virtual"><scope>GfRay</scope><name>SetPointAndDirection</name></member>
      <member refid="class_gf_ray_1a6461abd34849074339f2fa1d3ef6dad1" prot="public" virt="non-virtual"><scope>GfRay</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
