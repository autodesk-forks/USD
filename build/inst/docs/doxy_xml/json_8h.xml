<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="json_8h" kind="file" language="C++">
    <compoundname>json.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2js_2api_8h" local="yes">pxr/base/js/api.h</includes>
    <includes refid="js_2value_8h" local="yes">pxr/base/js/value.h</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="43689">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="43690" relation="include">
        </childnode>
      </node>
      <node id="43697">
        <label>cstdint</label>
      </node>
      <node id="43694">
        <label>string</label>
      </node>
      <node id="43693">
        <label>map</label>
      </node>
      <node id="43687">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="43686">
        <label>pxr/base/js/json.h</label>
        <link refid="json_8h"/>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43691" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
      </node>
      <node id="43691">
        <label>pxr/base/js/value.h</label>
        <link refid="js_2value_8h"/>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43692" relation="include">
        </childnode>
        <childnode refid="43696" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43698" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
      </node>
      <node id="43688">
        <label>pxr/base/js/api.h</label>
        <link refid="base_2js_2api_8h_source"/>
        <childnode refid="43689" relation="include">
        </childnode>
      </node>
      <node id="43695">
        <label>vector</label>
      </node>
      <node id="43690">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="43692">
        <label>pxr/base/js/types.h</label>
        <link refid="base_2js_2types_8h"/>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43693" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
      </node>
      <node id="43700">
        <label>iosfwd</label>
      </node>
      <node id="43699">
        <label>type_traits</label>
      </node>
      <node id="43696">
        <label>algorithm</label>
      </node>
      <node id="43698">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_js_parse_error" prot="public">JsParseError</innerclass>
    <innerclass refid="class_js_writer" prot="public">JsWriter</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="json_8h_1a0dc6f23a66c91f70acded6be319edd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JS_API <ref refid="class_js_value" kindref="compound">JsValue</ref></type>
        <definition>JS_API JsValue JsParseStream</definition>
        <argsstring>(std::istream &amp;istr, JsParseError *error=0)</argsstring>
        <name>JsParseStream</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>istr</declname>
        </param>
        <param>
          <type><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref> *</type>
          <declname>error</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Parse the contents of input stream <computeroutput>istr</computeroutput> and return a <ref refid="class_js_value" kindref="compound">JsValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>On failure, this returns a null <ref refid="class_js_value" kindref="compound">JsValue</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/json.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="json_8h_1a7da67fe3e589fa2768c9ae2e1ffe10a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JS_API <ref refid="class_js_value" kindref="compound">JsValue</ref></type>
        <definition>JS_API JsValue JsParseString</definition>
        <argsstring>(const std::string &amp;data, JsParseError *error=0)</argsstring>
        <name>JsParseString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref> *</type>
          <declname>error</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Parse the contents of the JSON string <computeroutput>data</computeroutput> and return it as a <ref refid="class_js_value" kindref="compound">JsValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>On failure, this returns a null <ref refid="class_js_value" kindref="compound">JsValue</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/json.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="json_8h_1a74cbc6180b23fb9b29d21e15e0e1a821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JS_API void</type>
        <definition>JS_API void JsWriteToStream</definition>
        <argsstring>(const JsValue &amp;value, std::ostream &amp;ostr)</argsstring>
        <name>JsWriteToStream</name>
        <param>
          <type>const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="class_js_value" kindref="compound">JsValue</ref> <computeroutput>value</computeroutput> to JSON and write the result to output stream <computeroutput>ostr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/json.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="json_8h_1a30f796607438424b305a089a10ee2e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JS_API std::string</type>
        <definition>JS_API std::string JsWriteToString</definition>
        <argsstring>(const JsValue &amp;value)</argsstring>
        <name>JsWriteToString</name>
        <param>
          <type>const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="class_js_value" kindref="compound">JsValue</ref> <computeroutput>value</computeroutput> to JSON and return it as a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/json.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="json_8h_1a0ad24ad2653461709ddc9dc2e638be4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>JS_API void</type>
        <definition>JS_API void JsWriteValue</definition>
        <argsstring>(JsWriter *writer, const JsValue &amp;value)</argsstring>
        <name>JsWriteValue</name>
        <param>
          <type><ref refid="class_js_writer" kindref="compound">JsWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write a json value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/json.h" line="231" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Top-level entrypoints for reading and writing JSON. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_JS_JSON_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_JS_JSON_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/js/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="js_2value_8h" kindref="compound">pxr/base/js/value.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct_js_parse_error" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref>()<sp/>:<sp/>line(0),<sp/>column(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>reason;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">JS_API</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="class_js_value" kindref="compound">JsValue</ref><sp/><ref refid="json_8h_1a0dc6f23a66c91f70acded6be319edd9e" kindref="member">JsParseStream</ref>(std::istream&amp;<sp/>istr,<sp/><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref>*<sp/>error<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">JS_API</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="class_js_value" kindref="compound">JsValue</ref><sp/><ref refid="json_8h_1a7da67fe3e589fa2768c9ae2e1ffe10a5" kindref="member">JsParseString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data,<sp/><ref refid="struct_js_parse_error" kindref="compound">JsParseError</ref>*<sp/>error<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">JS_API</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="json_8h_1a74cbc6180b23fb9b29d21e15e0e1a821" kindref="member">JsWriteToStream</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_js_value" kindref="compound">JsValue</ref>&amp;<sp/>value,<sp/>std::ostream&amp;<sp/>ostr);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">JS_API</highlight></codeline>
<codeline lineno="68"><highlight class="normal">std::string<sp/><ref refid="json_8h_1a30f796607438424b305a089a10ee2e12" kindref="member">JsWriteToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_js_value" kindref="compound">JsValue</ref>&amp;<sp/>value);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_js_writer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_js_writer" kindref="compound">JsWriter</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Style<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compact,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pretty</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/><ref refid="class_js_writer_1a26d113be9a85ee1fdb22907e98f11d01" kindref="member">JsWriter</ref>(std::ostream&amp;<sp/>ostr,<sp/>Style<sp/>style<sp/>=<sp/>Style::Compact);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/><ref refid="class_js_writer_1abe1affa904cc5bdd1533cb7cc6a55d54" kindref="member">~JsWriter</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a26d113be9a85ee1fdb22907e98f11d01" kindref="member">JsWriter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_js_writer" kindref="compound">JsWriter</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_js_writer" kindref="compound">JsWriter</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_js_writer" kindref="compound">JsWriter</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(std::nullptr_t);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(int64_t<sp/>i);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(uint64_t<sp/>u);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="123" refid="class_js_writer_1abb51052d6611aa9d7f297777cbf37b3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1abb51052d6611aa9d7f297777cbf37b3e" kindref="member">WriteValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(&amp;s)[N])<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_String(s,<sp/>N-1);<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a9a9b0f01d1323c9d629620973ada4ec9" kindref="member">BeginObject</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a887e35b5403a34bdfa376a7a40fd9fde" kindref="member">WriteKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a887e35b5403a34bdfa376a7a40fd9fde" kindref="member">WriteKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="136" refid="class_js_writer_1a73fa1cf0c9490cd71accc60d824a8ff0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a73fa1cf0c9490cd71accc60d824a8ff0" kindref="member">WriteKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(&amp;s)[N])<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Key(s,<sp/>N-1);<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="140" refid="class_js_writer_1a8335ec734a59350d48f0073fb4f12307" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a8335ec734a59350d48f0073fb4f12307" kindref="member">WriteKeyValue</ref>(K&amp;&amp;<sp/>k,<sp/>V&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WriteObjectFields(std::forward&lt;K&gt;(k),<sp/>std::forward&lt;V&gt;(v));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a448eb57cc3850f981c39fe2b04992fc9" kindref="member">EndObject</ref>();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a183e58afd53b43dd068a4abc0e183cd1" kindref="member">BeginArray</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1af1997dee7a20403d3c212befac50104a" kindref="member">EndArray</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="155" refid="class_js_writer_1a87fcc365b2a5d84e1eed5b7f206a2840" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a87fcc365b2a5d84e1eed5b7f206a2840" kindref="member">WriteArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a183e58afd53b43dd068a4abc0e183cd1" kindref="member">BeginArray</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(i);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1af1997dee7a20403d3c212befac50104a" kindref="member">EndArray</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ItemWriteFn&gt;</highlight></codeline>
<codeline lineno="166" refid="class_js_writer_1a010d6adcb9684a7384e077145cc504de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a010d6adcb9684a7384e077145cc504de" kindref="member">WriteArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ItemWriteFn&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a183e58afd53b43dd068a4abc0e183cd1" kindref="member">BeginArray</ref>();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1af1997dee7a20403d3c212befac50104a" kindref="member">EndArray</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ItemWriteFn&gt;</highlight></codeline>
<codeline lineno="177" refid="class_js_writer_1a25b258d9ecfd5b4cf5376bc7b1c5aa36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a25b258d9ecfd5b4cf5376bc7b1c5aa36" kindref="member">WriteArray</ref>(</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterator&amp;<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterator&amp;<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ItemWriteFn&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a183e58afd53b43dd068a4abc0e183cd1" kindref="member">BeginArray</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Iterator<sp/>i<sp/>=<sp/>begin;<sp/>i<sp/>!=<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1af1997dee7a20403d3c212befac50104a" kindref="member">EndArray</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...T&gt;</highlight></codeline>
<codeline lineno="190" refid="class_js_writer_1a11544375f4b5f7fd2cfe37cc251836af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1a11544375f4b5f7fd2cfe37cc251836af" kindref="member">WriteObject</ref>(T&amp;&amp;...<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)<sp/>%2<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Arguments<sp/>must<sp/>come<sp/>in<sp/>key<sp/>value<sp/>pairs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a9a9b0f01d1323c9d629620973ada4ec9" kindref="member">BeginObject</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WriteObjectFields(std::forward&lt;T&gt;(f)...);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a448eb57cc3850f981c39fe2b04992fc9" kindref="member">EndObject</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>want<sp/>implicit<sp/>casts<sp/>to<sp/>write<sp/>functions,<sp/>its<sp/>better<sp/>to<sp/>get<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(T)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>JS_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_Key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KeyType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_WriteObjectFields(KeyType&amp;&amp;<sp/>key,<sp/>T&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(<ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(std::forward&lt;T&gt;(v)),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">())<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a887e35b5403a34bdfa376a7a40fd9fde" kindref="member">WriteKey</ref>(std::forward&lt;KeyType&gt;(key));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1ab954572c5e82b64f3be2aa7623084d3c" kindref="member">WriteValue</ref>(std::forward&lt;T&gt;(v));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KeyType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_WriteObjectFields(KeyType&amp;&amp;<sp/>key,<sp/>T&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(v(std::declval&lt;JsWriter&amp;&gt;()),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_js_writer_1a887e35b5403a34bdfa376a7a40fd9fde" kindref="member">WriteKey</ref>(std::forward&lt;KeyType&gt;(key));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Key0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...T&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_WriteObjectFields(Key0&amp;&amp;<sp/>key0,<sp/>T0&amp;&amp;<sp/>f0,<sp/>T&amp;&amp;...f){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WriteObjectFields(std::forward&lt;Key0&gt;(key0),<sp/>std::forward&lt;T0&gt;(f0));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_WriteObjectFields(std::forward&lt;T&gt;(f)...);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Impl;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;_Impl&gt;<sp/>_impl;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">JS_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="json_8h_1a0ad24ad2653461709ddc9dc2e638be4b" kindref="member">JsWriteValue</ref>(<ref refid="class_js_writer" kindref="compound">JsWriter</ref>*<sp/>writer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_js_value" kindref="compound">JsValue</ref>&amp;<sp/>value);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_JS_JSON_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/js/json.h"/>
  </compounddef>
</doxygen>
