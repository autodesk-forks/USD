<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_shade_utils" kind="class" language="C++" prot="public">
    <compoundname>UsdShadeUtils</compoundname>
    <includes refid="usd_2usd_shade_2utils_8h" local="no">utils.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_shade_utils_1a031f40fa35ac5eb53b4ac9a27bb4247d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::string</type>
        <definition>static USDSHADE_API std::string GetPrefixForAttributeType</definition>
        <argsstring>(UsdShadeAttributeType sourceType)</argsstring>
        <name>GetPrefixForAttributeType</name>
        <param>
          <type>UsdShadeAttributeType</type>
          <declname>sourceType</declname>
        </param>
        <briefdescription>
<para>Returns the namespace prefix of the USD attribute associated with the given shading attribute type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1ae50d19505b5511951f985ad3fc8be439" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>static USDSHADE_API SdfPath GetConnectedSourcePath</definition>
        <argsstring>(const UsdShadeConnectionSourceInfo &amp;srcInfo)</argsstring>
        <name>GetConnectedSourcePath</name>
        <param>
          <type>const <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> &amp;</type>
          <declname>srcInfo</declname>
        </param>
        <briefdescription>
<para>For a valid <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref>, return the complete path to the source property; otherwise the empty path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1ae7ed43fad153c2823541fc78eaa0a4bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::pair&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, UsdShadeAttributeType &gt;</type>
        <definition>static USDSHADE_API std::pair&lt;TfToken, UsdShadeAttributeType&gt; GetBaseNameAndType</definition>
        <argsstring>(const TfToken &amp;fullName)</argsstring>
        <name>GetBaseNameAndType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fullName</declname>
        </param>
        <briefdescription>
<para>Given the full name of a shading attribute, returns it&apos;s base name and shading attribute type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1a050e0750fbba23ded53a3dbfb610af7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API UsdShadeAttributeType</type>
        <definition>static USDSHADE_API UsdShadeAttributeType GetType</definition>
        <argsstring>(const TfToken &amp;fullName)</argsstring>
        <name>GetType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fullName</declname>
        </param>
        <briefdescription>
<para>Given the full name of a shading attribute, returns its shading attribute type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1a573c3cec8fb08f231ba62724f389d2b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static USDSHADE_API TfToken GetFullName</definition>
        <argsstring>(const TfToken &amp;baseName, const UsdShadeAttributeType type)</argsstring>
        <name>GetFullName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseName</declname>
        </param>
        <param>
          <type>const UsdShadeAttributeType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns the full shading attribute name given the basename and the shading attribute type. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>baseName</computeroutput> is the name of the input or output on the shading node. <computeroutput>type</computeroutput> is the UsdShadeAttributeType of the shading attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1ad1f99058557167a9282c2531f2332bd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_small_vector" kindref="compound">UsdShadeAttributeVector</ref></type>
        <definition>static USDSHADE_API UsdShadeAttributeVector GetValueProducingAttributes</definition>
        <argsstring>(UsdShadeInput const &amp;input, bool shaderOutputsOnly=false)</argsstring>
        <name>GetValueProducingAttributes</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shaderOutputsOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Find what is connected to an Input or Output recursively. </para>
        </briefdescription>
        <detaileddescription>
<para>GetValueProducingAttributes implements the UsdShade connectivity rules described in <ref refid="usd_shade_page_front_1UsdShadeAttributeResolution" kindref="member">Connection Resolution Utilities</ref> .</para>
<para>When tracing connections within networks that contain containers like <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> nodes, the actual output(s) or value(s) at the end of an input or output might be multiple connections removed. The methods below resolves this across multiple physical connections.</para>
<para>An <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> is getting its value from one of these sources:<itemizedlist>
<listitem><para>If the input is not connected the <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> for this input is returned, but only if it has an authored value. The input attribute itself carries the value for this input.</para>
</listitem><listitem><para>If the input is connected we follow the connection(s) until we reach a valid output of a <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref> node or if we reach a valid <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> attribute of a <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> or <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> that has an authored value.</para>
</listitem></itemizedlist>
</para>
<para>An <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> on a container can get its value from the same type of sources as a <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> on either a <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref> or <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>. Outputs on non-containers (UsdShadeShaders) cannot be connected.</para>
<para>This function returns a vector of UsdAttributes. The vector is empty if no valid attribute was found. The type of each attribute can be determined with the <computeroutput><ref refid="class_usd_shade_utils_1a050e0750fbba23ded53a3dbfb610af7d" kindref="member">UsdShadeUtils::GetType</ref></computeroutput> function.</para>
<para>If <computeroutput>shaderOutputsOnly</computeroutput> is true, it will only report attributes that are outputs of non-containers (UsdShadeShaders). This is a bit faster and what is need when determining the connections for Material terminals.</para>
<para><simplesect kind="note"><para>This will return the last attribute along the connection chain that has an authored value, which might not be the last attribute in the chain itself. </para>
</simplesect>
<simplesect kind="note"><para>When the network contains multi-connections, this function can return multiple attributes for a single input or output. The list of attributes is build by a depth-first search, following the underlying connection paths in order. The list can contain both <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> and <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> attributes. It is up to the caller to decide how to process such a mixture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_utils_1a6bbb7b53d5623a6987814d9eddcddd00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_small_vector" kindref="compound">UsdShadeAttributeVector</ref></type>
        <definition>static USDSHADE_API UsdShadeAttributeVector GetValueProducingAttributes</definition>
        <argsstring>(UsdShadeOutput const &amp;output, bool shaderOutputsOnly=false)</argsstring>
        <name>GetValueProducingAttributes</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shaderOutputsOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/utils.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class contains a set of utility functions used when authoring and querying shading networks. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/usdShade/utils.h" line="50" column="1" bodyfile="pxr/usd/usdShade/utils.h" bodystart="50" bodyend="133"/>
    <listofallmembers>
      <member refid="class_usd_shade_utils_1ae7ed43fad153c2823541fc78eaa0a4bb" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetBaseNameAndType</name></member>
      <member refid="class_usd_shade_utils_1ae50d19505b5511951f985ad3fc8be439" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetConnectedSourcePath</name></member>
      <member refid="class_usd_shade_utils_1a573c3cec8fb08f231ba62724f389d2b3" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetFullName</name></member>
      <member refid="class_usd_shade_utils_1a031f40fa35ac5eb53b4ac9a27bb4247d" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetPrefixForAttributeType</name></member>
      <member refid="class_usd_shade_utils_1a050e0750fbba23ded53a3dbfb610af7d" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetType</name></member>
      <member refid="class_usd_shade_utils_1ad1f99058557167a9282c2531f2332bd6" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetValueProducingAttributes</name></member>
      <member refid="class_usd_shade_utils_1a6bbb7b53d5623a6987814d9eddcddd00" prot="public" virt="non-virtual"><scope>UsdShadeUtils</scope><name>GetValueProducingAttributes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
