<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_multi_interval" kind="class" language="C++" prot="public">
    <compoundname>GfMultiInterval</compoundname>
    <includes refid="multi_interval_8h" local="no">multiInterval.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>Constructs an empty multi-interval.</para>
</description>
      <memberdef kind="function" id="class_gf_multi_interval_1a598bcf0894cc5e7b543a5c6014411c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfMultiInterval</definition>
        <argsstring>()=default</argsstring>
        <name>GfMultiInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ae3f6ad8a94fd0d02898c27b5546aa6e6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMultiInterval</definition>
        <argsstring>(const GfInterval &amp;i)</argsstring>
        <name>GfMultiInterval</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Constructs an multi-interval with the single given interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a754aec0492efa6200a80e2013a70c0e6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMultiInterval</definition>
        <argsstring>(const std::vector&lt; GfInterval &gt; &amp;intervals)</argsstring>
        <name>GfMultiInterval</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &gt; &amp;</type>
          <declname>intervals</declname>
        </param>
        <briefdescription>
<para>Constructs an multi-interval containing the given input intervals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="60" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="class_gf_multi_interval_1a9a424dffa6a783b1e27e49e080337e2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if the multi-interval is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="83" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ac60c64f5ad6d219d35070b997174ecd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API size_t</type>
        <definition>GF_API size_t GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the number of intervals in the set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="86" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ab74936ec3fc5e4d3c50c69c1eba94de7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GF_API GfInterval GetBounds</definition>
        <argsstring>() const</argsstring>
        <name>GetBounds</name>
        <briefdescription>
<para>Returns an interval bounding the entire multi-interval. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty interval if the multi-interval is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a4f36a6dda4aace0f7d4c4937b0184bcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Contains</definition>
        <argsstring>(double d) const</argsstring>
        <name>Contains</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns true if the multi-interval contains the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1afe7a6352c0509ca41e61c9e8349f8871" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Contains</definition>
        <argsstring>(const GfInterval &amp;i) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns true if the multi-interval contains the given interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a994d8aa2962ab78f7f22860ad13a060c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Contains</definition>
        <argsstring>(const GfMultiInterval &amp;s) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns true if the multi-interval contains all the intervals in the given multi-interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Mutation</header>
      <memberdef kind="function" id="class_gf_multi_interval_1a2a21f9a8636d2d803425ed459753fbc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clear the multi-interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="108" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a108e4daeb1112dedf6e9d6bc2af56afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Add</definition>
        <argsstring>(const GfInterval &amp;i)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Add the given interval to the multi-interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ab2e4f97ca6af2f8df89ca64e1d19c009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Add</definition>
        <argsstring>(const GfMultiInterval &amp;s)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Add the given multi-interval to the multi-interval. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets this object to the union of the two sets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a6a69352605f2b350ca121ed77516d971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void ArithmeticAdd</definition>
        <argsstring>(const GfInterval &amp;i)</argsstring>
        <name>ArithmeticAdd</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Uses the given interval to extend the multi-interval in the interval arithmetic sense. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ab7e3759002e792ca2802ca5596e980fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Remove</definition>
        <argsstring>(const GfInterval &amp;i)</argsstring>
        <name>Remove</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove the given interval from this multi-interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a9e685805eba888bcefa5a79dfa2023b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Remove</definition>
        <argsstring>(const GfMultiInterval &amp;s)</argsstring>
        <name>Remove</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Remove the given multi-interval from this multi-interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1af52380a472233c1c08a87f0a343df991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Intersect</definition>
        <argsstring>(const GfInterval &amp;i)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a7caf1905a39006d9ca7439789aead106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Intersect</definition>
        <argsstring>(const GfMultiInterval &amp;s)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a24f2bbc915a290e511c38177f2d5263f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref></type>
        <definition>GF_API GfMultiInterval GetComplement</definition>
        <argsstring>() const</argsstring>
        <name>GetComplement</name>
        <briefdescription>
<para>Return the complement of this set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iteration</header>
      <description><para>Only const iterators are returned.</para>
<para>To maintain the invariants of the multi-interval, changes must be made via the public mutation API. </para>
</description>
      <memberdef kind="function" id="class_gf_multi_interval_1a0acf0f86b62e7dcb87b5f24498e901bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="138" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1aedcbe6507e91cb06b81c40b7e452cb8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="139" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a2cb107f221d48925017b6ed74f20f2a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator lower_bound</definition>
        <argsstring>(double x) const</argsstring>
        <name>lower_bound</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns an iterator identifying the first (lowest) interval whose minimum value is &gt;= x. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such interval exists, returns end(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a5199069065f76579f3637b5233d68d9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator upper_bound</definition>
        <argsstring>(double x) const</argsstring>
        <name>upper_bound</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns an iterator identifying the first (lowest) interval whose minimum value is &gt; x. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such interval exists, returns end(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a0bba7680d899bfc031d733814e9ce70c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator GetNextNonContainingInterval</definition>
        <argsstring>(double x) const</argsstring>
        <name>GetNextNonContainingInterval</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns an iterator identifying the first (lowest) interval whose minimum value is &gt; x. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such interval exists, returns end(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a08bf878d0f1c338d18f25d2a2a869185" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator GetPriorNonContainingInterval</definition>
        <argsstring>(double x) const</argsstring>
        <name>GetPriorNonContainingInterval</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns an iterator identifying the last (highest) interval whose maximum value is &lt; x. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such interval exists, returns end(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a92df1cdfcd2c60343c517db87a415261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const_iterator</type>
        <definition>GF_API const_iterator GetContainingInterval</definition>
        <argsstring>(double x) const</argsstring>
        <name>GetContainingInterval</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns an iterator identifying the interval that contains x. </para>
        </briefdescription>
        <detaileddescription>
<para>If no interval contains x, then it returns end() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_multi_interval_1a50603e9ea7a2eb74fd266caec77e3a5b" prot="public" static="no">
        <type>std::set&lt; <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &gt;</type>
        <definition>typedef std::set&lt;GfInterval&gt; Set</definition>
        <argsstring></argsstring>
        <name>Set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="49" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_multi_interval_1af56c273115557039985e10cf84bdf577" prot="public" static="no">
        <type>Set::const_iterator</type>
        <definition>typedef Set::const_iterator const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="50" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_multi_interval_1aad5ac0a2fd84cea1ce0345c00ac59176" prot="public" static="no">
        <type>Set::const_iterator</type>
        <definition>typedef Set::const_iterator iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="51" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_multi_interval_1a40414a64d0b4594a68647a02f2f22ef5" prot="private" static="no" mutable="no">
        <type>Set</type>
        <definition>Set _set</definition>
        <argsstring></argsstring>
        <name>_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="174" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_multi_interval_1a5871261225016b6de07a8efe6f0a8ddf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="63" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a050e878bc922306c0636c00e41e7cc1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator!=</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="64" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a220fac5ee26bba58fd9276f4a27cbb6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator&lt;</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="65" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a01ed0830e3505c8ca9b80025f267f66c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator&gt;=</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="66" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1ab42121d33c11a6b1e3772eac8e449205" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator&gt;</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="67" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a7d7c45a1b75a67aabaabccb8121d39a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator&lt;=</definition>
        <argsstring>(const GfMultiInterval &amp;that) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="68" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1aefc52762a2881f051473c2b98b021a5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API size_t</type>
        <definition>GF_API size_t Hash</definition>
        <argsstring>() const</argsstring>
        <name>Hash</name>
        <briefdescription>
<para>Hash value. </para>
        </briefdescription>
        <detaileddescription>
<para>Just a basic hash function, not particularly high quality. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_multi_interval_1a1bbf5ecd573a294ca4824bbcb9d89665" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(GfMultiInterval &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap two multi-intervals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="169" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="169" bodyend="169"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_multi_interval_1a4a0d8a28332f6d011fc1126077a0f584" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfMultiInterval &amp;mi)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>mi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="75" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="75" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_multi_interval_1ae0a5922ac36cf66d8209a8ee754a2de9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref></type>
        <definition>static GfMultiInterval GetFullInterval</definition>
        <argsstring>()</argsstring>
        <name>GetFullInterval</name>
        <briefdescription>
<para>Returns the full interval (-inf, inf). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="164" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="164" bodyend="166"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_multi_interval_1aa6b569ba38372e1068a7641db33a60d7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AssertInvariants</definition>
        <argsstring>() const</argsstring>
        <name>_AssertInvariants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> represents a subset of the real number line as an ordered set of non-intersecting GfIntervals. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/gf/multiInterval.h" line="47" column="1" bodyfile="pxr/base/gf/multiInterval.h" bodystart="46" bodyend="175"/>
    <listofallmembers>
      <member refid="class_gf_multi_interval_1aa6b569ba38372e1068a7641db33a60d7" prot="private" virt="non-virtual"><scope>GfMultiInterval</scope><name>_AssertInvariants</name></member>
      <member refid="class_gf_multi_interval_1a40414a64d0b4594a68647a02f2f22ef5" prot="private" virt="non-virtual"><scope>GfMultiInterval</scope><name>_set</name></member>
      <member refid="class_gf_multi_interval_1a108e4daeb1112dedf6e9d6bc2af56afb" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Add</name></member>
      <member refid="class_gf_multi_interval_1ab2e4f97ca6af2f8df89ca64e1d19c009" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Add</name></member>
      <member refid="class_gf_multi_interval_1a6a69352605f2b350ca121ed77516d971" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>ArithmeticAdd</name></member>
      <member refid="class_gf_multi_interval_1a0acf0f86b62e7dcb87b5f24498e901bf" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>begin</name></member>
      <member refid="class_gf_multi_interval_1a2a21f9a8636d2d803425ed459753fbc0" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Clear</name></member>
      <member refid="class_gf_multi_interval_1af56c273115557039985e10cf84bdf577" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>const_iterator</name></member>
      <member refid="class_gf_multi_interval_1a4f36a6dda4aace0f7d4c4937b0184bcd" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Contains</name></member>
      <member refid="class_gf_multi_interval_1afe7a6352c0509ca41e61c9e8349f8871" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Contains</name></member>
      <member refid="class_gf_multi_interval_1a994d8aa2962ab78f7f22860ad13a060c" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Contains</name></member>
      <member refid="class_gf_multi_interval_1aedcbe6507e91cb06b81c40b7e452cb8a" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>end</name></member>
      <member refid="class_gf_multi_interval_1ab74936ec3fc5e4d3c50c69c1eba94de7" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetBounds</name></member>
      <member refid="class_gf_multi_interval_1a24f2bbc915a290e511c38177f2d5263f" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetComplement</name></member>
      <member refid="class_gf_multi_interval_1a92df1cdfcd2c60343c517db87a415261" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetContainingInterval</name></member>
      <member refid="class_gf_multi_interval_1ae0a5922ac36cf66d8209a8ee754a2de9" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetFullInterval</name></member>
      <member refid="class_gf_multi_interval_1a0bba7680d899bfc031d733814e9ce70c" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetNextNonContainingInterval</name></member>
      <member refid="class_gf_multi_interval_1a08bf878d0f1c338d18f25d2a2a869185" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetPriorNonContainingInterval</name></member>
      <member refid="class_gf_multi_interval_1ac60c64f5ad6d219d35070b997174ecd2" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GetSize</name></member>
      <member refid="class_gf_multi_interval_1a598bcf0894cc5e7b543a5c6014411c9e" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GfMultiInterval</name></member>
      <member refid="class_gf_multi_interval_1ae3f6ad8a94fd0d02898c27b5546aa6e6" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GfMultiInterval</name></member>
      <member refid="class_gf_multi_interval_1a754aec0492efa6200a80e2013a70c0e6" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>GfMultiInterval</name></member>
      <member refid="class_gf_multi_interval_1aefc52762a2881f051473c2b98b021a5b" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Hash</name></member>
      <member refid="class_gf_multi_interval_1a4a0d8a28332f6d011fc1126077a0f584" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>hash_value</name></member>
      <member refid="class_gf_multi_interval_1af52380a472233c1c08a87f0a343df991" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Intersect</name></member>
      <member refid="class_gf_multi_interval_1a7caf1905a39006d9ca7439789aead106" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Intersect</name></member>
      <member refid="class_gf_multi_interval_1a9a424dffa6a783b1e27e49e080337e2e" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>IsEmpty</name></member>
      <member refid="class_gf_multi_interval_1aad5ac0a2fd84cea1ce0345c00ac59176" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>iterator</name></member>
      <member refid="class_gf_multi_interval_1a2cb107f221d48925017b6ed74f20f2a2" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>lower_bound</name></member>
      <member refid="class_gf_multi_interval_1a050e878bc922306c0636c00e41e7cc1f" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator!=</name></member>
      <member refid="class_gf_multi_interval_1a220fac5ee26bba58fd9276f4a27cbb6c" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator&lt;</name></member>
      <member refid="class_gf_multi_interval_1a7d7c45a1b75a67aabaabccb8121d39a4" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator&lt;=</name></member>
      <member refid="class_gf_multi_interval_1a5871261225016b6de07a8efe6f0a8ddf" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator==</name></member>
      <member refid="class_gf_multi_interval_1ab42121d33c11a6b1e3772eac8e449205" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator&gt;</name></member>
      <member refid="class_gf_multi_interval_1a01ed0830e3505c8ca9b80025f267f66c" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>operator&gt;=</name></member>
      <member refid="class_gf_multi_interval_1ab7e3759002e792ca2802ca5596e980fc" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Remove</name></member>
      <member refid="class_gf_multi_interval_1a9e685805eba888bcefa5a79dfa2023b7" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Remove</name></member>
      <member refid="class_gf_multi_interval_1a50603e9ea7a2eb74fd266caec77e3a5b" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>Set</name></member>
      <member refid="class_gf_multi_interval_1a1bbf5ecd573a294ca4824bbcb9d89665" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>swap</name></member>
      <member refid="class_gf_multi_interval_1a5199069065f76579f3637b5233d68d9a" prot="public" virt="non-virtual"><scope>GfMultiInterval</scope><name>upper_bound</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
