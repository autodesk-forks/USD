<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_vt_value" kind="class" language="C++" prot="public">
    <compoundname>VtValue</compoundname>
    <includes refid="vt_2value_8h" local="no">value.h</includes>
    <innerclass refid="struct_vt_value_1_1___array_helper" prot="private">VtValue::_ArrayHelper</innerclass>
    <innerclass refid="struct_vt_value_1_1___array_helper_3_01_array_00_01typename_01std_1_1enable__if_3_01_vt_is_array1208c540332f950c86b82bae3884d9fc" prot="private">VtValue::_ArrayHelper&lt; Array, typename std::enable_if&lt; VtIsArray&lt; Array &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_vt_value_1_1___counted" prot="private">VtValue::_Counted</innerclass>
    <innerclass refid="struct_vt_value_1_1___hold_aside" prot="private">VtValue::_HoldAside</innerclass>
    <innerclass refid="struct_vt_value_1_1___local_type_info" prot="private">VtValue::_LocalTypeInfo</innerclass>
    <innerclass refid="struct_vt_value_1_1___proxy_helper" prot="private">VtValue::_ProxyHelper</innerclass>
    <innerclass refid="struct_vt_value_1_1___proxy_helper_3_01_erased_proxy_00_01typename_01std_1_1enable__if_3_01_vt_i6a962ffc54be96ea137bc7cee153852d" prot="private">VtValue::_ProxyHelper&lt; ErasedProxy, typename std::enable_if&lt; VtIsErasedValueProxy&lt; ErasedProxy &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_vt_value_1_1___remote_type_info" prot="private">VtValue::_RemoteTypeInfo</innerclass>
    <innerclass refid="struct_vt_value_1_1___type_info" prot="private">VtValue::_TypeInfo</innerclass>
    <innerclass refid="struct_vt_value_1_1___type_info_for" prot="private">VtValue::_TypeInfoFor</innerclass>
    <innerclass refid="struct_vt_value_1_1___type_info_for_3_01char[_n]_4" prot="private">VtValue::_TypeInfoFor&lt; char[N]&gt;</innerclass>
    <innerclass refid="struct_vt_value_1_1___type_info_impl" prot="private">VtValue::_TypeInfoImpl</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_vt_value_1a92b9cd39dc778046c3609948410cfef4" prot="private" static="no">
        <type>std::aligned_storage&lt; _MaxLocalSize, _MaxLocalSize &gt;::type</type>
        <definition>typedef std::aligned_storage&lt; _MaxLocalSize, _MaxLocalSize&gt;::type _Storage</definition>
        <argsstring></argsstring>
        <name>_Storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="198" column="1" bodyfile="pxr/base/vt/value.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_value_1a843d17422bfcbc022eb62a8a5a65a2a7" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, std::is_trivially_default_constructible_v&lt; T &gt; &amp;&amp;std::is_trivially_copyable_v&lt; T &gt; &amp;&amp;std::is_trivially_copy_assignable_v&lt; T &gt; &amp;&amp;std::is_trivially_destructible_v&lt; T &gt; &gt;</type>
        <definition>using _IsTriviallyCopyable =  std::integral_constant&lt;bool, std::is_trivially_default_constructible_v&lt;T&gt; &amp;&amp; std::is_trivially_copyable_v&lt;T&gt; &amp;&amp; std::is_trivially_copy_assignable_v&lt;T&gt; &amp;&amp; std::is_trivially_destructible_v&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>_IsTriviallyCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="201" column="1" bodyfile="pxr/base/vt/value.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_value_1a4c4ec56f126ee782b36a30aee8a3eaec" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool,(sizeof(T)&lt;=sizeof(_Storage)) &amp;&amp;VtValueTypeHasCheapCopy&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; T &gt;::value &gt;</type>
        <definition>using _UsesLocalStore =  std::integral_constant&lt;bool, (sizeof(T) &lt;= sizeof(_Storage)) &amp;&amp; VtValueTypeHasCheapCopy&lt;T&gt;::value &amp;&amp; std::is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; std::is_nothrow_move_assignable&lt;T&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>_UsesLocalStore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="210" column="1" bodyfile="pxr/base/vt/value.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_vt_value_1ada26d3f7abba15185cfef7445499de70" prot="private" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int _LocalFlag</definition>
        <argsstring></argsstring>
        <name>_LocalFlag</name>
        <initializer>= 1 &lt;&lt; 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="165" column="1" bodyfile="pxr/base/vt/value.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vt_value_1a4e9bbc115fa08f02e27230a2377a066d" prot="private" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int _TrivialCopyFlag</definition>
        <argsstring></argsstring>
        <name>_TrivialCopyFlag</name>
        <initializer>= 1 &lt;&lt; 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="166" column="1" bodyfile="pxr/base/vt/value.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vt_value_1a62a382fa329460c128505572ef08bd1e" prot="private" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int _ProxyFlag</definition>
        <argsstring></argsstring>
        <name>_ProxyFlag</name>
        <initializer>= 1 &lt;&lt; 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="167" column="1" bodyfile="pxr/base/vt/value.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vt_value_1abd0ca4bf635819965e16326b8d569b58" prot="private" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t _MaxLocalSize</definition>
        <argsstring></argsstring>
        <name>_MaxLocalSize</name>
        <initializer>= sizeof(void*)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="196" column="1" bodyfile="pxr/base/vt/value.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_vt_value_1a7616bd2c793acad30034205abc8ad939" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct _HoldAside</definition>
        <argsstring></argsstring>
        <name>_HoldAside</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="825" column="1" bodyfile="pxr/base/vt/value.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1acc0ec6409fcdf8f5cb368a2e19366c7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(VtValue &amp;lhs, VtValue &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Overloaded <ref refid="class_vt_value_1acc0ec6409fcdf8f5cb368a2e19366c7f" kindref="member">swap()</ref> for generic code/stl/etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="983" column="1" bodyfile="pxr/base/vt/value.h" bodystart="983" bodyend="983"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1afdd5f27fa2a46b208607b8d4ab278c0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(VtValue const &amp;val)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1306" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1306" bodyend="1308"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1a0ece68828432c993eb912f104fd0e85c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(VtValue const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Tests for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1312" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1312" bodyend="1315"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1ad749fdb21aa7dae3bbe3e050a02998c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(T const &amp;lhs, VtValue const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1317" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1317" bodyend="1319"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1acd6847b1e176ae33f6bee4385b273747" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(VtValue const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Tests for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1323" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1323" bodyend="1325"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1aa5f4d39805c4f216a67f64f08272a26f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(T const &amp;lhs, VtValue const &amp;rhs)</argsstring>
        <name>operator !=</name>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1327" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1327" bodyend="1329"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_value_1a6e9a462519b005d6795a4ecc87c521ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API friend std::ostream &amp;</type>
        <definition>VT_API friend std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const VtValue &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Calls through to operator &lt;&lt; on the held object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1347" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_vt_value_1a666c36fdf8512a4c36a247f357415820" prot="private" static="no" mutable="no">
        <type>_Storage</type>
        <definition>_Storage _storage</definition>
        <argsstring></argsstring>
        <name>_storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1501" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vt_value_1a93413d01bdaf07364bf7179d47bd1d62" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_pointer_and_bits" kindref="compound">TfPointerAndBits</ref>&lt; const _TypeInfo &gt;</type>
        <definition>TfPointerAndBits&lt;const _TypeInfo&gt; _info</definition>
        <argsstring></argsstring>
        <name>_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1502" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1502" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_vt_value_1a05a5164575a9585adc4899493151d5cd" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto _TypedProxyEqualityImpl</definition>
        <argsstring>(T const &amp;a, T const &amp;b, int) -&gt; decltype(a==b)</argsstring>
        <name>_TypedProxyEqualityImpl</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="423" column="1" bodyfile="pxr/base/vt/value.h" bodystart="423" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a6c3cc0bccdd48635a3b01bbad97e6890" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NoEqual</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _TypedProxyEqualityImpl</definition>
        <argsstring>(NoEqual const &amp;a, NoEqual const &amp;b, long)</argsstring>
        <name>_TypedProxyEqualityImpl</name>
        <param>
          <type>NoEqual const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>NoEqual const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="429" column="1" bodyfile="pxr/base/vt/value.h" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1af22740bee39d50426faeefbe8744844c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto _ErasedProxyEqualityImpl</definition>
        <argsstring>(T const &amp;a, T const &amp;b, int) -&gt; decltype(a==b)</argsstring>
        <name>_ErasedProxyEqualityImpl</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="435" column="1" bodyfile="pxr/base/vt/value.h" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a28bef97582b7dfe71474b49399854ddc" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NoEqual</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _ErasedProxyEqualityImpl</definition>
        <argsstring>(NoEqual const &amp;a, NoEqual const &amp;b, long)</argsstring>
        <name>_ErasedProxyEqualityImpl</name>
        <param>
          <type>NoEqual const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>NoEqual const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="441" column="1" bodyfile="pxr/base/vt/value.h" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a096939a4c4bd390c68b3672203a3b674" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_tf_pointer_and_bits" kindref="compound">TfPointerAndBits</ref>&lt; const _TypeInfo &gt;</type>
        <definition>static TfPointerAndBits&lt;const _TypeInfo&gt; GetTypeInfo</definition>
        <argsstring>()</argsstring>
        <name>GetTypeInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="809" column="1" bodyfile="pxr/base/vt/value.h" bodystart="809" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a47671efea3f2955a34d9b0a70b8f1400" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _Copy</definition>
        <argsstring>(VtValue const &amp;src, VtValue &amp;dst)</argsstring>
        <name>_Copy</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1355" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1355" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a2987ee8175dc2d6f58a2d68a473bcf39" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _Move</definition>
        <argsstring>(VtValue &amp;src, VtValue &amp;dst) noexcept</argsstring>
        <name>_Move</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1370" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1370" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1af08f4776ebe6100ae46027e0b7ae329a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>static VT_API void _RegisterCast</definition>
        <argsstring>(std::type_info const &amp;from, std::type_info const &amp;to, VtValue(*castFn)(VtValue const &amp;))</argsstring>
        <name>_RegisterCast</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref>(*)(<ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;)</type>
          <declname>castFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a06c35ffb50526e1462de065a7099d409" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VT_API VtValue _PerformCast</definition>
        <argsstring>(std::type_info const &amp;to, VtValue const &amp;val)</argsstring>
        <name>_PerformCast</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a62ff12f27fb00786ff9e1090c95403ff" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>static VT_API bool _CanCast</definition>
        <argsstring>(std::type_info const &amp;from, std::type_info const &amp;to)</argsstring>
        <name>_CanCast</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a88e5251745386697ec6454280cdf3473" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VtValue _SimpleCast</definition>
        <argsstring>(VtValue const &amp;val)</argsstring>
        <name>_SimpleCast</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1488" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1488" bodyend="1490"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_vt_value_1a5b9b02fb228ba8283943a95886abbaa0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; T, typename Vt_ValueGetStored&lt; T &gt;::Type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;T, typename Vt_ValueGetStored&lt;T&gt;::Type&gt;::value&gt; _Init</definition>
        <argsstring>(T const &amp;obj)</argsstring>
        <name>_Init</name>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="844" column="1" bodyfile="pxr/base/vt/value.h" bodystart="844" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ad28882d8bac95259185e970dae77243d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; !std::is_same&lt; T, typename Vt_ValueGetStored&lt; T &gt;::Type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; !std::is_same&lt;T, typename Vt_ValueGetStored&lt;T&gt;::Type&gt;::value&gt; _Init</definition>
        <argsstring>(T const &amp;obj)</argsstring>
        <name>_Init</name>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="853" column="1" bodyfile="pxr/base/vt/value.h" bodystart="853" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1afadd71ba10411952cee43b3f44d1e98a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API const Vt_ShapeData *</type>
        <definition>VT_API const Vt_ShapeData* _GetShapeData</definition>
        <argsstring>() const</argsstring>
        <name>_GetShapeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ac743b8ce46e2b9116fa4f51b76219db5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_t</type>
        <definition>VT_API size_t _GetNumElements</definition>
        <argsstring>() const</argsstring>
        <name>_GetNumElements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ac7a9dd7f6d18565f55e133a3f8947349" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; VtIsKnownValueType_Workaround&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;VtIsKnownValueType_Workaround&lt;T&gt;::value, bool&gt; _TypeIs</definition>
        <argsstring>() const</argsstring>
        <name>_TypeIs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1389" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1389" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a6b0b9ed010bd2182dbb9e9e68cbafa0a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!VtIsKnownValueType_Workaround&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;!VtIsKnownValueType_Workaround&lt;T&gt;::value, bool&gt; _TypeIs</definition>
        <argsstring>() const</argsstring>
        <name>_TypeIs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1396" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1396" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a4b509b6e3a844c3741944752f7fe887d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>VT_API bool _TypeIsImpl</definition>
        <argsstring>(std::type_info const &amp;queriedType) const</argsstring>
        <name>_TypeIsImpl</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>queriedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a12d451792ae39ecea1c371c40fe1a288" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>VT_API bool _EqualityImpl</definition>
        <argsstring>(VtValue const &amp;rhs) const</argsstring>
        <name>_EqualityImpl</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a2ebcade3e7a7bc0245305b5d9c3daa4b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Proxy</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; VtIsValueProxy&lt; Proxy &gt;::value, Proxy &amp; &gt;</type>
        <definition>std::enable_if_t&lt;VtIsValueProxy&lt;Proxy&gt;::value, Proxy &amp;&gt; _GetMutable</definition>
        <argsstring>()</argsstring>
        <name>_GetMutable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1408" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1408" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1af9c29d09fb7f22bb5473c62f9366da2d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!VtIsValueProxy&lt; T &gt;::value, T &amp; &gt;</type>
        <definition>std::enable_if_t&lt;!VtIsValueProxy&lt;T&gt;::value, T &amp;&gt; _GetMutable</definition>
        <argsstring>()</argsstring>
        <name>_GetMutable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1415" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1415" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1acdf5e7a4b01d74ca5258bb351d76e139" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Proxy</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; VtIsValueProxy&lt; Proxy &gt;::value, Proxy const &amp; &gt;</type>
        <definition>std::enable_if_t&lt;VtIsValueProxy&lt;Proxy&gt;::value, Proxy const &amp;&gt; _Get</definition>
        <argsstring>() const</argsstring>
        <name>_Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1426" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1426" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a79d8a0da222e11a802dc965a60cec7aa" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!VtIsValueProxy&lt; T &gt;::value, T const &amp; &gt;</type>
        <definition>std::enable_if_t&lt;!VtIsValueProxy&lt;T&gt;::value, T const &amp;&gt; _Get</definition>
        <argsstring>() const</argsstring>
        <name>_Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1433" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1433" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a905431e285fb62d2c39651b68e7d983e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void const  *</type>
        <definition>void const* _GetProxiedObjPtr</definition>
        <argsstring>() const</argsstring>
        <name>_GetProxiedObjPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1441" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1441" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ae00c46f0f93b7533ae551e2f22a38e83" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void const  *</type>
        <definition>VT_API void const* _FailGet</definition>
        <argsstring>(Vt_DefaultValueHolder(*factory)(), std::type_info const &amp;queryType) const</argsstring>
        <name>_FailGet</name>
        <param>
          <type>Vt_DefaultValueHolder(*)()</type>
          <declname>factory</declname>
        </param>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>queryType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a27f3771a68ae90c1ed341baa6cf5cecd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _Clear</definition>
        <argsstring>()</argsstring>
        <name>_Clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1451" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1451" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1abd52bb669fe16e30067fc2fe147eaa7c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsLocalAndTriviallyCopyable</definition>
        <argsstring>() const</argsstring>
        <name>_IsLocalAndTriviallyCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1462" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1462" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a52d7e2e07e9291717a490e199ad241f9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsProxy</definition>
        <argsstring>() const</argsstring>
        <name>_IsProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1468" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1468" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ad37e5e7fc38539e1da6852df2c3751b2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></type>
        <definition>VT_API TfPyObjWrapper _GetPythonObject</definition>
        <argsstring>() const</argsstring>
        <name>_GetPythonObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1499" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vt_value_1adc7da257c96e58dc372a30d24cab12af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtValue</definition>
        <argsstring>()</argsstring>
        <name>VtValue</name>
        <briefdescription>
<para>Default ctor gives empty <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="860" column="1" bodyfile="pxr/base/vt/value.h" bodystart="860" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a5ed819ff3e65afd8aa73073609d16e61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtValue</definition>
        <argsstring>(VtValue const &amp;other)</argsstring>
        <name>VtValue</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy construct with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="863" column="1" bodyfile="pxr/base/vt/value.h" bodystart="863" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1aecd8618a453de8a917fa48cfe6201345" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtValue</definition>
        <argsstring>(VtValue &amp;&amp;other) noexcept</argsstring>
        <name>VtValue</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move construct with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="868" column="1" bodyfile="pxr/base/vt/value.h" bodystart="868" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1aa593712919d842f4f1730c168b8bf08c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>VtValue</definition>
        <argsstring>(T const &amp;obj)</argsstring>
        <name>VtValue</name>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a copy of <computeroutput>obj</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If T is a char pointer or array, produce a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a std::string. If T is boost::python::object, produce a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a <ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="878" column="1" bodyfile="pxr/base/vt/value.h" bodystart="878" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a981ddd53cb937fa88e698eb8dc447b83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~VtValue</definition>
        <argsstring>()</argsstring>
        <name>~VtValue</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="909" column="1" bodyfile="pxr/base/vt/value.h" bodystart="909" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a0ef12f0cb86a6fcbc598e4976d84af8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; operator=</definition>
        <argsstring>(VtValue const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment from another <emphasis><ref refid="class_vt_value" kindref="compound">VtValue</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="912" column="1" bodyfile="pxr/base/vt/value.h" bodystart="912" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a918ce3a8f547f2835e400d88c4daf198" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; operator=</definition>
        <argsstring>(VtValue &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment from another <emphasis><ref refid="class_vt_value" kindref="compound">VtValue</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="919" column="1" bodyfile="pxr/base/vt/value.h" bodystart="919" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ab361be3c9ac8cb0d29edfd5233df6232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; operator=</definition>
        <argsstring>(T const &amp;obj)</argsstring>
        <name>operator=</name>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Assignment operator from any type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a979e61808a58b81cbc11cdbc4921aeb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; operator=</definition>
        <argsstring>(char const *cstr)</argsstring>
        <name>operator=</name>
        <param>
          <type>char const *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
<para>Assigning a char const * gives a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a std::string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="958" column="1" bodyfile="pxr/base/vt/value.h" bodystart="958" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a2f84c0f18aa89cfa23a6f33f0565a9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; operator=</definition>
        <argsstring>(char *cstr)</argsstring>
        <name>operator=</name>
        <param>
          <type>char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
<para>Assigning a char * gives a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a std::string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="966" column="1" bodyfile="pxr/base/vt/value.h" bodystart="966" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a3a2aff7111d57fb39b943a66f7e26880" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; Swap</definition>
        <argsstring>(VtValue &amp;rhs) noexcept</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap this with <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="971" column="1" bodyfile="pxr/base/vt/value.h" bodystart="971" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1af632dbb3ca512048a46ffe3c62b5b422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Swap</definition>
        <argsstring>(T &amp;rhs)</argsstring>
        <name>Swap</name>
        <param>
          <type>T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap the held value with <emphasis>rhs</emphasis>. If this value is holding a T,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a82624f86feb0d78a76896d3f61c09d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void UncheckedSwap</definition>
        <argsstring>(T &amp;rhs)</argsstring>
        <name>UncheckedSwap</name>
        <param>
          <type>T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap the held value with <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="class_vt_value" kindref="compound">VtValue</ref> must be holding an object of type <computeroutput>T</computeroutput>. If it does not, this invokes undefined behavior. Use <ref refid="class_vt_value_1a3a2aff7111d57fb39b943a66f7e26880" kindref="member">Swap()</ref> if this <ref refid="class_vt_value" kindref="compound">VtValue</ref> is not known to contain an object of type <computeroutput>T</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a84811700ec2b73454fb6dfb4ccae7d2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void UncheckedSwap</definition>
        <argsstring>(VtValue &amp;rhs)</argsstring>
        <name>UncheckedSwap</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1023" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1023" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a252ea635a2ccdb0187f59161528fc734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Remove</definition>
        <argsstring>()</argsstring>
        <name>Remove</name>
        <briefdescription>
<para>Make this value empty and return the held <computeroutput>T</computeroutput> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>If this value does not hold a <computeroutput>T</computeroutput> instance, make this value empty and return a default-constructed <computeroutput>T</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1029" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1029" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a098d9f9998755544e913fe7bc35948f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T UncheckedRemove</definition>
        <argsstring>()</argsstring>
        <name>UncheckedRemove</name>
        <briefdescription>
<para>Make this value empty and return the held <computeroutput>T</computeroutput> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>If this value does not hold a <computeroutput>T</computeroutput> instance, this method invokes undefined behavior. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1040" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1040" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1acec079e0f28f12f2b68ab9bcdf6fc36f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; T, typename Vt_ValueGetStored&lt; T &gt;::Type &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;T, typename Vt_ValueGetStored&lt;T&gt;::Type&gt;::value, bool&gt; Mutate</definition>
        <argsstring>(Fn &amp;&amp;mutateFn)</argsstring>
        <name>Mutate</name>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>mutateFn</declname>
        </param>
        <briefdescription>
<para>If this value holds an object of type <computeroutput>T</computeroutput>, invoke <computeroutput>mutateFn</computeroutput>, passing it a non-const reference to the held object and return true. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise do nothing and return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1053" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1053" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1acdd58bcc414335fa97537429b866e7e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; T, typename Vt_ValueGetStored&lt; T &gt;::Type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;T, typename Vt_ValueGetStored&lt;T&gt;::Type&gt;::value&gt; UncheckedMutate</definition>
        <argsstring>(Fn &amp;&amp;mutateFn)</argsstring>
        <name>UncheckedMutate</name>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>mutateFn</declname>
        </param>
        <briefdescription>
<para>Invoke <computeroutput>mutateFn</computeroutput>, it a non-const reference to the held object which must be of type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the held object is not of type <computeroutput>T</computeroutput>, this function invokes undefined behavior. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1067" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1067" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ae5d3187e0408744ac959d6146de2f2bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool IsHolding</definition>
        <argsstring>() const</argsstring>
        <name>IsHolding</name>
        <briefdescription>
<para>Return true if this value is holding an object of type <computeroutput>T</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1080" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1080" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a8dad22fd533756d767affd18aa4d2ce2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>VT_API bool IsArrayValued</definition>
        <argsstring>() const</argsstring>
        <name>IsArrayValued</name>
        <briefdescription>
<para>Returns true iff this is holding an array type (see VtIsArray&lt;&gt;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a649576f1eae8ae7cbf4d31226e84d9d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetArraySize</definition>
        <argsstring>() const</argsstring>
        <name>GetArraySize</name>
        <briefdescription>
<para>Return the number of elements in the held value if <ref refid="class_vt_value_1a8dad22fd533756d767affd18aa4d2ce2" kindref="member">IsArrayValued()</ref>, return 0 otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1089" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1089" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1afbab98c0a0930a872aa2d803cf59de50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API std::type_info const  &amp;</type>
        <definition>VT_API std::type_info const&amp; GetTypeid</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeid</name>
        <briefdescription>
<para>Returns the typeid of the type held by this value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ae0ae121c23b03eb6efe844327075afd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API std::type_info const  &amp;</type>
        <definition>VT_API std::type_info const&amp; GetElementTypeid</definition>
        <argsstring>() const</argsstring>
        <name>GetElementTypeid</name>
        <briefdescription>
<para>Return the typeid of elements in a array valued type. </para>
        </briefdescription>
        <detaileddescription>
<para>If not holding an array valued type, return typeid(void). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a978edfcefd3f5506ab455efbdc9789af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_tf_type" kindref="compound">TfType</ref></type>
        <definition>VT_API TfType GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
<para>Returns the <ref refid="class_tf_type" kindref="compound">TfType</ref> of the type held by this value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a04bc1dd706a9baa403f382b3629983f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API std::string</type>
        <definition>VT_API std::string GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
<para>Return the type name of the held typeid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a15a28e9ffc782338499c0b3e3faee6a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int GetKnownValueTypeIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetKnownValueTypeIndex</name>
        <briefdescription>
<para>Return VtKnownValueTypeIndex&lt;T&gt; for the held type T. </para>
        </briefdescription>
        <detaileddescription>
<para>If this value holds a proxy type, resolve the proxy and return the proxied type&apos;s index. If this value is empty or holds a type that is not &apos;known&apos;, return -1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1108" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1108" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a60c1f31cc358d0d74f2dcbe9b686bc80" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; UncheckedGet</definition>
        <argsstring>() const &amp;</argsstring>
        <name>UncheckedGet</name>
        <briefdescription>
<para>Returns a const reference to the held object if the held object is of type <emphasis>T</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior otherwise. This is the fastest <emphasis><ref refid="class_vt_value_1a839e753e2247bd70893de723f5d70fdf" kindref="member">Get()</ref></emphasis> method to use after a successful <emphasis><ref refid="class_vt_value_1ae5d3187e0408744ac959d6146de2f2bf" kindref="member">IsHolding()</ref></emphasis> check. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1120" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1120" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a1756a2240d2d4b8964ddfd41dc544ddb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T UncheckedGet</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>UncheckedGet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1125" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1125" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a839e753e2247bd70893de723f5d70fdf" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; Get</definition>
        <argsstring>() const &amp;</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Returns a const reference to the held object if the held object is of type <emphasis>T</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Issues an error and returns a const reference to a default value if the held object is not of type <emphasis>T</emphasis>. Use <emphasis>IsHolding</emphasis> to verify correct type before calling this function. The default value returned in case of type mismatch is constructed using Vt_DefaultValueFactory&lt;T&gt;. That may be specialized for client types. The default implementation of the default value factory produces a value-initialized T. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1136" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1136" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a64bb5aa0fbb7d247f3a1f9d9207c9425" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Get</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1152" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1152" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a734e16c6983f68c0ec9981eee4b2ad08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GetWithDefault</definition>
        <argsstring>(T const &amp;def=T()) const</argsstring>
        <name>GetWithDefault</name>
        <param>
          <type>T const &amp;</type>
          <declname>def</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Return a copy of the held object if the held object is of type T. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the default value <emphasis>def</emphasis> otherwise. Note that this always returns a copy, as opposed to <emphasis><ref refid="class_vt_value_1a839e753e2247bd70893de723f5d70fdf" kindref="member">Get()</ref></emphasis> which always returns a reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1170" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1170" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1accc74126cbf58e5879dfc3b1ce788803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; Cast</definition>
        <argsstring>()</argsstring>
        <name>Cast</name>
        <briefdescription>
<para>Return <computeroutput>this</computeroutput> holding value type cast to T. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is left empty if the cast fails.</para>
<para><simplesect kind="note"><para>Since this method mutates this value, it is not safe to invoke on the same <ref refid="class_vt_value" kindref="compound">VtValue</ref> in multiple threads simultaneously.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1244" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1244" bodyend="1248"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a5021291aa61cf8b2eb4b2a30347f2578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; CastToTypeOf</definition>
        <argsstring>(VtValue const &amp;other)</argsstring>
        <name>CastToTypeOf</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return <computeroutput>this</computeroutput> holding value type cast to same type that <computeroutput>other</computeroutput> is holding. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is left empty if the cast fails.</para>
<para><simplesect kind="note"><para>Since this method mutates this value, it is not safe to invoke on the same <ref refid="class_vt_value" kindref="compound">VtValue</ref> in multiple threads simultaneously.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1257" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1257" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ac47dc80f89f5c40cf0097abd57de09f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VtValue&amp; CastToTypeid</definition>
        <argsstring>(std::type_info const &amp;type)</argsstring>
        <name>CastToTypeid</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return <computeroutput>this</computeroutput> holding value type cast to <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is left empty if the cast fails.</para>
<para><simplesect kind="note"><para>Since this method mutates this value, it is not safe to invoke on the same <ref refid="class_vt_value" kindref="compound">VtValue</ref> in multiple threads simultaneously.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1268" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1268" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ad32f4fc547bfad96430e86e6e6d51892" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CanCast</definition>
        <argsstring>() const</argsstring>
        <name>CanCast</name>
        <briefdescription>
<para>Return if <computeroutput>this</computeroutput> can be cast to <emphasis>T</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1279" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1279" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a6beb416171fcb835ffa6eead917288f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanCastToTypeOf</definition>
        <argsstring>(VtValue const &amp;other) const</argsstring>
        <name>CanCastToTypeOf</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return if <computeroutput>this</computeroutput> can be cast to <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1286" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1286" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a08990f626e24e73df15e6ade51847bdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanCastToTypeid</definition>
        <argsstring>(std::type_info const &amp;type) const</argsstring>
        <name>CanCastToTypeid</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return if <computeroutput>this</computeroutput> can be cast to <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1293" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1293" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true iff this value is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1298" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1298" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1af1ff5b72283bea0d3cfe15292d4241b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>VT_API bool CanHash</definition>
        <argsstring>() const</argsstring>
        <name>CanHash</name>
        <briefdescription>
<para>Return true if the held object provides a hash implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1aa6f01c2ab99ff3a623b83435c0d7e30a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_t</type>
        <definition>VT_API size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Return a hash code for the held object by calling VtHashValue() on it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a6ea6c00a643779fd579d7b1c872e724b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const VtValue &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Test two values for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1332" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1332" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a5509655f29ca841163405dac9bdaa9a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const VtValue &amp;rhs) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1344" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1344" bodyend="1344"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_vt_value_1a3b961efaa66ce85b8c11e56b218f1b37" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VtValue Take</definition>
        <argsstring>(T &amp;obj)</argsstring>
        <name>Take</name>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="class_vt_value" kindref="compound">VtValue</ref>, taking its contents from <computeroutput>obj</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to creating a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a value-initialized <computeroutput>T</computeroutput> instance, then invoking swap(&lt;held-value&gt;, obj), leaving obj in a default-constructed (value-initialized) state. In the case that <computeroutput>obj</computeroutput> is expensive to copy, it may be significantly faster to use this idiom when <computeroutput>obj</computeroutput> need not retain its contents:</para>
<para><programlisting><codeline><highlight class="normal">MyExpensiveObject<sp/>obj<sp/>=<sp/>CreateObject();</highlight></codeline>
<codeline><highlight class="normal">return<sp/>VtValue::Take(obj);</highlight></codeline>
</programlisting></para>
<para>Rather than:</para>
<para><programlisting><codeline><highlight class="normal">MyExpensiveObject<sp/>obj<sp/>=<sp/>CreateObject();</highlight></codeline>
<codeline><highlight class="normal">return<sp/>VtValue(obj);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="902" column="1" bodyfile="pxr/base/vt/value.h" bodystart="902" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a61177d32c16a47bfe487a1d5e720d444" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RegisterCast</definition>
        <argsstring>(VtValue(*castFn)(VtValue const &amp;))</argsstring>
        <name>RegisterCast</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref>(*)(<ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;)</type>
          <declname>castFn</declname>
        </param>
        <briefdescription>
<para>Register a cast from <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding From to <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding To. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1176" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1176" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a3e485cce97b70bde7ab32573ee5fea1a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RegisterSimpleCast</definition>
        <argsstring>()</argsstring>
        <name>RegisterSimpleCast</name>
        <briefdescription>
<para>Register a simple cast from <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding From to <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1183" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1183" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a4b3d0866dcfc73919fbf5150f595a76b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RegisterSimpleBidirectionalCast</definition>
        <argsstring>()</argsstring>
        <name>RegisterSimpleBidirectionalCast</name>
        <briefdescription>
<para>Register a two-way cast from <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding From to <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding To. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1190" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1190" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ad0578f3c34662abae8e38349c195affd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VtValue Cast</definition>
        <argsstring>(VtValue const &amp;val)</argsstring>
        <name>Cast</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding <computeroutput>val</computeroutput> cast to hold T. </para>
        </briefdescription>
        <detaileddescription>
<para>Return empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> if cast fails.</para>
<para>This <ref refid="class_vt_value_1accc74126cbf58e5879dfc3b1ce788803" kindref="member">Cast()</ref> function is safe to call in multiple threads as it does not mutate the operant <computeroutput>val</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1203" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1203" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1a1f73b97ac0f17c57eadc798050070c85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VT_API VtValue CastToTypeOf</definition>
        <argsstring>(VtValue const &amp;val, VtValue const &amp;other)</argsstring>
        <name>CastToTypeOf</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding <computeroutput>val</computeroutput> cast to same type that <computeroutput>other</computeroutput> is holding. </para>
        </briefdescription>
        <detaileddescription>
<para>Return empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> if cast fails.</para>
<para>This <ref refid="class_vt_value_1accc74126cbf58e5879dfc3b1ce788803" kindref="member">Cast()</ref> function is safe to call in multiple threads as it does not mutate the operant <computeroutput>val</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1aee35f59a0d67262617851a4abb3f2491" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VT_API VtValue CastToTypeid</definition>
        <argsstring>(VtValue const &amp;val, std::type_info const &amp;type)</argsstring>
        <name>CastToTypeid</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding <emphasis>val</emphasis> cast to <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> if cast fails.</para>
<para>This <ref refid="class_vt_value_1accc74126cbf58e5879dfc3b1ce788803" kindref="member">Cast()</ref> function is safe to call in multiple threads as it does not mutate the operant <computeroutput>val</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_value_1ae5c2f4ddf1bea9362bbea0aa7263afd6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CanCastFromTypeidToTypeid</definition>
        <argsstring>(std::type_info const &amp;from, std::type_info const &amp;to)</argsstring>
        <name>CanCastFromTypeidToTypeid</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Return if a value of type <emphasis>from</emphasis> can be cast to type <emphasis>to</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_vt_value_1VtValue_Casting" kindref="member">Held-type Conversion with VtValue::Cast</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/value.h" line="1231" column="1" bodyfile="pxr/base/vt/value.h" bodystart="1231" bodyend="1234"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a container which may hold any type, and provides introspection and iteration over array types. </para>
    </briefdescription>
    <detaileddescription>
<para>See <emphasis><ref refid="struct_vt_is_array" kindref="compound">VtIsArray</ref></emphasis> for more info.</para>
<sect1 id="class_vt_value_1VtValue_Casting">
<title>Held-type Conversion with VtValue::Cast</title>
<para><ref refid="class_vt_value" kindref="compound">VtValue</ref> provides a suite of &quot;Cast&quot; methods that convert or create a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a requested type (via template parameter, typeid, or type-matching to another <ref refid="class_vt_value" kindref="compound">VtValue</ref>) from the type of the currently-held value. Clients can add conversions between their own types using the <ref refid="class_vt_value_1a61177d32c16a47bfe487a1d5e720d444" kindref="member">RegisterCast()</ref>, <ref refid="class_vt_value_1a3e485cce97b70bde7ab32573ee5fea1a" kindref="member">RegisterSimpleCast()</ref>, and <ref refid="class_vt_value_1a4b3d0866dcfc73919fbf5150f595a76b" kindref="member">RegisterSimpleBidirectionalCast()</ref> methods. Conversions from plugins can be guaranteed to be registered before they are needed by registering them from within a <programlisting><codeline><highlight class="normal">TF_REGISTRY_FUNCTION(VtValue)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> block.</para>
<sect2 id="class_vt_value_1VtValue_builtin_conversions">
<title>Builtin Type Conversion</title>
<para>Conversions between most of the basic &quot;value types&quot; that are intrinsically convertible are builtin, including all numeric types (including Gf&apos;s <computeroutput>half</computeroutput>), std::string/TfToken, GfVec* (for vecs of the same dimension), and VtArray&lt;T&gt; for floating-point POD and GfVec of the preceding.</para>
</sect2>
<sect2 id="class_vt_value_1VtValue_numeric_conversion">
<title>Numeric Conversion Safety</title>
<para>The conversions between all scalar numeric types are performed with range checks such as provided by boost::numeric_cast(), and will fail, returning an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> if the source value is out of range of the destination type.</para>
<para>Conversions between GfVec and other compound-numeric types provide no more or less safety or checking than the conversion constructors of the types themselves. This includes <ref refid="class_vt_array" kindref="compound">VtArray</ref>, even VtArray&lt;T&gt; for T in scalar types that are range-checked when held singly. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="pxr/base/vt/value.h" line="164" column="1" bodyfile="pxr/base/vt/value.h" bodystart="163" bodyend="1503"/>
    <listofallmembers>
      <member refid="class_vt_value_1a62ff12f27fb00786ff9e1090c95403ff" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_CanCast</name></member>
      <member refid="class_vt_value_1a27f3771a68ae90c1ed341baa6cf5cecd" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Clear</name></member>
      <member refid="class_vt_value_1a47671efea3f2955a34d9b0a70b8f1400" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Copy</name></member>
      <member refid="class_vt_value_1a12d451792ae39ecea1c371c40fe1a288" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_EqualityImpl</name></member>
      <member refid="class_vt_value_1af22740bee39d50426faeefbe8744844c" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_ErasedProxyEqualityImpl</name></member>
      <member refid="class_vt_value_1a28bef97582b7dfe71474b49399854ddc" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_ErasedProxyEqualityImpl</name></member>
      <member refid="class_vt_value_1ae00c46f0f93b7533ae551e2f22a38e83" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_FailGet</name></member>
      <member refid="class_vt_value_1acdf5e7a4b01d74ca5258bb351d76e139" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Get</name></member>
      <member refid="class_vt_value_1a79d8a0da222e11a802dc965a60cec7aa" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Get</name></member>
      <member refid="class_vt_value_1a2ebcade3e7a7bc0245305b5d9c3daa4b" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetMutable</name></member>
      <member refid="class_vt_value_1af9c29d09fb7f22bb5473c62f9366da2d" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetMutable</name></member>
      <member refid="class_vt_value_1ac743b8ce46e2b9116fa4f51b76219db5" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetNumElements</name></member>
      <member refid="class_vt_value_1a905431e285fb62d2c39651b68e7d983e" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetProxiedObjPtr</name></member>
      <member refid="class_vt_value_1ad37e5e7fc38539e1da6852df2c3751b2" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetPythonObject</name></member>
      <member refid="class_vt_value_1afadd71ba10411952cee43b3f44d1e98a" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_GetShapeData</name></member>
      <member refid="class_vt_value_1a7616bd2c793acad30034205abc8ad939" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_HoldAside</name></member>
      <member refid="class_vt_value_1a93413d01bdaf07364bf7179d47bd1d62" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_info</name></member>
      <member refid="class_vt_value_1a5b9b02fb228ba8283943a95886abbaa0" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Init</name></member>
      <member refid="class_vt_value_1ad28882d8bac95259185e970dae77243d" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Init</name></member>
      <member refid="class_vt_value_1abd52bb669fe16e30067fc2fe147eaa7c" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_IsLocalAndTriviallyCopyable</name></member>
      <member refid="class_vt_value_1a52d7e2e07e9291717a490e199ad241f9" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_IsProxy</name></member>
      <member refid="class_vt_value_1a843d17422bfcbc022eb62a8a5a65a2a7" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_IsTriviallyCopyable</name></member>
      <member refid="class_vt_value_1ada26d3f7abba15185cfef7445499de70" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_LocalFlag</name></member>
      <member refid="class_vt_value_1abd0ca4bf635819965e16326b8d569b58" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_MaxLocalSize</name></member>
      <member refid="class_vt_value_1a2987ee8175dc2d6f58a2d68a473bcf39" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Move</name></member>
      <member refid="class_vt_value_1a06c35ffb50526e1462de065a7099d409" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_PerformCast</name></member>
      <member refid="class_vt_value_1a62a382fa329460c128505572ef08bd1e" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_ProxyFlag</name></member>
      <member refid="class_vt_value_1af08f4776ebe6100ae46027e0b7ae329a" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_RegisterCast</name></member>
      <member refid="class_vt_value_1a88e5251745386697ec6454280cdf3473" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_SimpleCast</name></member>
      <member refid="class_vt_value_1a92b9cd39dc778046c3609948410cfef4" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_Storage</name></member>
      <member refid="class_vt_value_1a666c36fdf8512a4c36a247f357415820" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_storage</name></member>
      <member refid="class_vt_value_1a4e9bbc115fa08f02e27230a2377a066d" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TrivialCopyFlag</name></member>
      <member refid="class_vt_value_1a05a5164575a9585adc4899493151d5cd" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TypedProxyEqualityImpl</name></member>
      <member refid="class_vt_value_1a6c3cc0bccdd48635a3b01bbad97e6890" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TypedProxyEqualityImpl</name></member>
      <member refid="class_vt_value_1ac7a9dd7f6d18565f55e133a3f8947349" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TypeIs</name></member>
      <member refid="class_vt_value_1a6b0b9ed010bd2182dbb9e9e68cbafa0a" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TypeIs</name></member>
      <member refid="class_vt_value_1a4b509b6e3a844c3741944752f7fe887d" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_TypeIsImpl</name></member>
      <member refid="class_vt_value_1a4c4ec56f126ee782b36a30aee8a3eaec" prot="private" virt="non-virtual"><scope>VtValue</scope><name>_UsesLocalStore</name></member>
      <member refid="class_vt_value_1ad32f4fc547bfad96430e86e6e6d51892" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CanCast</name></member>
      <member refid="class_vt_value_1ae5c2f4ddf1bea9362bbea0aa7263afd6" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CanCastFromTypeidToTypeid</name></member>
      <member refid="class_vt_value_1a08990f626e24e73df15e6ade51847bdb" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CanCastToTypeid</name></member>
      <member refid="class_vt_value_1a6beb416171fcb835ffa6eead917288f0" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CanCastToTypeOf</name></member>
      <member refid="class_vt_value_1af1ff5b72283bea0d3cfe15292d4241b2" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CanHash</name></member>
      <member refid="class_vt_value_1ad0578f3c34662abae8e38349c195affd" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Cast</name></member>
      <member refid="class_vt_value_1accc74126cbf58e5879dfc3b1ce788803" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Cast</name></member>
      <member refid="class_vt_value_1aee35f59a0d67262617851a4abb3f2491" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CastToTypeid</name></member>
      <member refid="class_vt_value_1ac47dc80f89f5c40cf0097abd57de09f3" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CastToTypeid</name></member>
      <member refid="class_vt_value_1a1f73b97ac0f17c57eadc798050070c85" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CastToTypeOf</name></member>
      <member refid="class_vt_value_1a5021291aa61cf8b2eb4b2a30347f2578" prot="public" virt="non-virtual"><scope>VtValue</scope><name>CastToTypeOf</name></member>
      <member refid="class_vt_value_1a839e753e2247bd70893de723f5d70fdf" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Get</name></member>
      <member refid="class_vt_value_1a64bb5aa0fbb7d247f3a1f9d9207c9425" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Get</name></member>
      <member refid="class_vt_value_1a649576f1eae8ae7cbf4d31226e84d9d1" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetArraySize</name></member>
      <member refid="class_vt_value_1ae0ae121c23b03eb6efe844327075afd7" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetElementTypeid</name></member>
      <member refid="class_vt_value_1aa6f01c2ab99ff3a623b83435c0d7e30a" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetHash</name></member>
      <member refid="class_vt_value_1a15a28e9ffc782338499c0b3e3faee6a0" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetKnownValueTypeIndex</name></member>
      <member refid="class_vt_value_1a978edfcefd3f5506ab455efbdc9789af" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetType</name></member>
      <member refid="class_vt_value_1afbab98c0a0930a872aa2d803cf59de50" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetTypeid</name></member>
      <member refid="class_vt_value_1a096939a4c4bd390c68b3672203a3b674" prot="private" virt="non-virtual"><scope>VtValue</scope><name>GetTypeInfo</name></member>
      <member refid="class_vt_value_1a04bc1dd706a9baa403f382b3629983f5" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetTypeName</name></member>
      <member refid="class_vt_value_1a734e16c6983f68c0ec9981eee4b2ad08" prot="public" virt="non-virtual"><scope>VtValue</scope><name>GetWithDefault</name></member>
      <member refid="class_vt_value_1afdd5f27fa2a46b208607b8d4ab278c0a" prot="public" virt="non-virtual"><scope>VtValue</scope><name>hash_value</name></member>
      <member refid="class_vt_value_1a8dad22fd533756d767affd18aa4d2ce2" prot="public" virt="non-virtual"><scope>VtValue</scope><name>IsArrayValued</name></member>
      <member refid="class_vt_value_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>VtValue</scope><name>IsEmpty</name></member>
      <member refid="class_vt_value_1ae5d3187e0408744ac959d6146de2f2bf" prot="public" virt="non-virtual"><scope>VtValue</scope><name>IsHolding</name></member>
      <member refid="class_vt_value_1acec079e0f28f12f2b68ab9bcdf6fc36f" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Mutate</name></member>
      <member refid="class_vt_value_1acd6847b1e176ae33f6bee4385b273747" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator !=</name></member>
      <member refid="class_vt_value_1aa5f4d39805c4f216a67f64f08272a26f" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator !=</name></member>
      <member refid="class_vt_value_1a5509655f29ca841163405dac9bdaa9a5" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator !=</name></member>
      <member refid="class_vt_value_1a6e9a462519b005d6795a4ecc87c521ae" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_vt_value_1a0ef12f0cb86a6fcbc598e4976d84af8c" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator=</name></member>
      <member refid="class_vt_value_1a918ce3a8f547f2835e400d88c4daf198" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator=</name></member>
      <member refid="class_vt_value_1ab361be3c9ac8cb0d29edfd5233df6232" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator=</name></member>
      <member refid="class_vt_value_1a979e61808a58b81cbc11cdbc4921aeb8" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator=</name></member>
      <member refid="class_vt_value_1a2f84c0f18aa89cfa23a6f33f0565a9ec" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator=</name></member>
      <member refid="class_vt_value_1a0ece68828432c993eb912f104fd0e85c" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator==</name></member>
      <member refid="class_vt_value_1ad749fdb21aa7dae3bbe3e050a02998c6" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator==</name></member>
      <member refid="class_vt_value_1a6ea6c00a643779fd579d7b1c872e724b" prot="public" virt="non-virtual"><scope>VtValue</scope><name>operator==</name></member>
      <member refid="class_vt_value_1a61177d32c16a47bfe487a1d5e720d444" prot="public" virt="non-virtual"><scope>VtValue</scope><name>RegisterCast</name></member>
      <member refid="class_vt_value_1a4b3d0866dcfc73919fbf5150f595a76b" prot="public" virt="non-virtual"><scope>VtValue</scope><name>RegisterSimpleBidirectionalCast</name></member>
      <member refid="class_vt_value_1a3e485cce97b70bde7ab32573ee5fea1a" prot="public" virt="non-virtual"><scope>VtValue</scope><name>RegisterSimpleCast</name></member>
      <member refid="class_vt_value_1a252ea635a2ccdb0187f59161528fc734" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Remove</name></member>
      <member refid="class_vt_value_1acc0ec6409fcdf8f5cb368a2e19366c7f" prot="public" virt="non-virtual"><scope>VtValue</scope><name>swap</name></member>
      <member refid="class_vt_value_1a3a2aff7111d57fb39b943a66f7e26880" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Swap</name></member>
      <member refid="class_vt_value_1af632dbb3ca512048a46ffe3c62b5b422" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Swap</name></member>
      <member refid="class_vt_value_1a3b961efaa66ce85b8c11e56b218f1b37" prot="public" virt="non-virtual"><scope>VtValue</scope><name>Take</name></member>
      <member refid="class_vt_value_1a60c1f31cc358d0d74f2dcbe9b686bc80" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedGet</name></member>
      <member refid="class_vt_value_1a1756a2240d2d4b8964ddfd41dc544ddb" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedGet</name></member>
      <member refid="class_vt_value_1acdd58bcc414335fa97537429b866e7e5" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedMutate</name></member>
      <member refid="class_vt_value_1a098d9f9998755544e913fe7bc35948f8" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedRemove</name></member>
      <member refid="class_vt_value_1a82624f86feb0d78a76896d3f61c09d54" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedSwap</name></member>
      <member refid="class_vt_value_1a84811700ec2b73454fb6dfb4ccae7d2f" prot="public" virt="non-virtual"><scope>VtValue</scope><name>UncheckedSwap</name></member>
      <member refid="class_vt_value_1adc7da257c96e58dc372a30d24cab12af" prot="public" virt="non-virtual"><scope>VtValue</scope><name>VtValue</name></member>
      <member refid="class_vt_value_1a5ed819ff3e65afd8aa73073609d16e61" prot="public" virt="non-virtual"><scope>VtValue</scope><name>VtValue</name></member>
      <member refid="class_vt_value_1aecd8618a453de8a917fa48cfe6201345" prot="public" virt="non-virtual"><scope>VtValue</scope><name>VtValue</name></member>
      <member refid="class_vt_value_1aa593712919d842f4f1730c168b8bf08c" prot="public" virt="non-virtual"><scope>VtValue</scope><name>VtValue</name></member>
      <member refid="class_vt_value_1a981ddd53cb937fa88e698eb8dc447b83" prot="public" virt="non-virtual"><scope>VtValue</scope><name>~VtValue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
