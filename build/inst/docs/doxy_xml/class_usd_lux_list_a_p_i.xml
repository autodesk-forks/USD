<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_list_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxListAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="list_a_p_i_8h" local="no">listAPI.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" prot="public" static="no" strong="no">
        <type></type>
        <name>ComputeMode</name>
        <enumvalue id="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a367131dc07c585d43d8d35e00c322493" prot="public">
          <name>ComputeModeConsultModelHierarchyCache</name>
          <briefdescription>
<para>Consult any caches found on the model hierarchy. </para>
          </briefdescription>
          <detaileddescription>
<para>Do not traverse beneath the model hierarchy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a65717e2d3ee9b7f94d395bf0448c153b" prot="public">
          <name>ComputeModeIgnoreCache</name>
          <briefdescription>
<para>Ignore any caches found, and do a full prim traversal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Runtime control over whether to consult stored lightList caches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="235" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="235" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_list_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="71" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_list_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="163" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1aa220e7b639b9b7bef46d0a4c4136b05b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxListAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxListAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_list_a_p_i_1ad824ad7e7e3af8de95568f2ff5b6eb34" kindref="member">UsdLuxListAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="77" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a193d4ffa5a34356974785ec42e6f3cf7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxListAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxListAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="85" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a418bb47094d902a1017c3c8ed8749dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxListAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxListAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetLightListCacheBehaviorAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetLightListCacheBehaviorAttr</name>
        <briefdescription>
<para>Controls how the lightList should be interpreted. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>consumeAndHalt: The lightList should be consulted, and if it exists, treated as a final authoritative statement of any lights that exist at or below this prim, halting recursive discovery of lights.</para>
</listitem><listitem><para>consumeAndContinue: The lightList should be consulted, but recursive traversal over nameChildren should continue in case additional lights are added by descendants.</para>
</listitem><listitem><para>ignore: The lightList should be entirely ignored. This provides a simple way to temporarily invalidate an existing cache. This is the fallback behavior.</para>
</listitem></itemizedlist>
</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token lightList:cacheBehavior</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>consumeAndHalt, consumeAndContinue, ignore   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a76157f430161583c12738a82246e40ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateLightListCacheBehaviorAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateLightListCacheBehaviorAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" kindref="member">GetLightListCacheBehaviorAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship GetLightListRel</definition>
        <argsstring>() const</argsstring>
        <name>GetLightListRel</name>
        <briefdescription>
<para>Relationship to lights in the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a574246f72233390bda34bfad284045f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship CreateLightListRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateLightListRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_lux_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" kindref="member">GetLightListRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API SdfPathSet</type>
        <definition>USDLUX_API SdfPathSet ComputeLightList</definition>
        <argsstring>(ComputeMode mode) const</argsstring>
        <name>ComputeLightList</name>
        <param>
          <type><ref refid="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" kindref="member">ComputeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Computes and returns the list of lights and light filters in the stage, optionally consulting a cached result. </para>
        </briefdescription>
        <detaileddescription>
<para>In ComputeModeIgnoreCache mode, caching is ignored, and this does a prim traversal looking for prims that have a <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> or are of type <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref>.</para>
<para>In ComputeModeConsultModelHierarchyCache, this does a traversal only of the model hierarchy. In this traversal, any lights that live as model hierarchy prims are accumulated, as well as any paths stored in lightList caches. The lightList:cacheBehavior attribute gives further control over the cache behavior; see the class overview for details.</para>
<para>When instances are present, ComputeLightList(ComputeModeIgnoreCache) will return the instance-uniqiue paths to any lights discovered within those instances. Lights within a <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> will not be returned, however, since they cannot be referred to solely via paths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API void</type>
        <definition>USDLUX_API void StoreLightList</definition>
        <argsstring>(const SdfPathSet &amp;) const</argsstring>
        <name>StoreLightList</name>
        <param>
          <type>const SdfPathSet &amp;</type>
        </param>
        <briefdescription>
<para>Store the given paths as the lightlist for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Paths that do not have this prim&apos;s path as a prefix will be silently ignored. This will set the listList:cacheBehavior to &quot;consumeAndContinue&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a582213a8ab380649a8cacfe3b1b81b66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API void</type>
        <definition>USDLUX_API void InvalidateLightList</definition>
        <argsstring>() const</argsstring>
        <name>InvalidateLightList</name>
        <briefdescription>
<para>Mark any stored lightlist as invalid, by setting the lightList:cacheBehavior attribute to ignore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="275" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1ad824ad7e7e3af8de95568f2ff5b6eb34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref></type>
        <definition>static USDLUX_API UsdLuxListAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxListAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API bool</type>
        <definition>static USDLUX_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a56ca337b86e9ed7b647aea64f5cc6d08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref></type>
        <definition>static USDLUX_API UsdLuxListAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;ListAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_lux_list_a_p_i" kindref="compound">UsdLuxListAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_list_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/listAPI.h" line="171" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000084"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use LightListAPI instead</para>
</xrefdescription></xrefsect></para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">UsdLuxTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdLuxTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7575">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7573">
        <label>UsdLuxListAPI</label>
        <link refid="class_usd_lux_list_a_p_i"/>
        <childnode refid="7574" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7574">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7575" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7578">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7576">
        <label>UsdLuxListAPI</label>
        <link refid="class_usd_lux_list_a_p_i"/>
        <childnode refid="7577" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7577">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7578" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/listAPI.h" line="66" column="1" bodyfile="pxr/usd/usdLux/listAPI.h" bodystart="65" bodyend="276"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_lux_list_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxListAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxListAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxListAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxListAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_list_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a56ca337b86e9ed7b647aea64f5cc6d08" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>Apply</name></member>
      <member refid="class_usd_lux_list_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>ComputeLightList</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>ComputeMode</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a367131dc07c585d43d8d35e00c322493" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>ComputeModeConsultModelHierarchyCache</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a65717e2d3ee9b7f94d395bf0448c153b" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>ComputeModeIgnoreCache</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a76157f430161583c12738a82246e40ef" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>CreateLightListCacheBehaviorAttr</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a574246f72233390bda34bfad284045f6" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>CreateLightListRel</name></member>
      <member refid="class_usd_lux_list_a_p_i_1ad824ad7e7e3af8de95568f2ff5b6eb34" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>Get</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetLightListCacheBehaviorAttr</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetLightListRel</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_lux_list_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a582213a8ab380649a8cacfe3b1b81b66" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>InvalidateLightList</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>StoreLightList</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_list_a_p_i_1aa220e7b639b9b7bef46d0a4c4136b05b" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdLuxListAPI</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a193d4ffa5a34356974785ec42e6f3cf7" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdLuxListAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_list_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxListAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdLuxListAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_list_a_p_i_1a418bb47094d902a1017c3c8ed8749dc9" prot="public" virt="virtual"><scope>UsdLuxListAPI</scope><name>~UsdLuxListAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxListAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
