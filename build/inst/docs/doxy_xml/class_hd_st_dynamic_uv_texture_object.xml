<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_dynamic_uv_texture_object" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdStDynamicUvTextureObject</compoundname>
    <basecompoundref refid="class_hd_st_uv_texture_object" prot="public" virt="non-virtual">HdStUvTextureObject</basecompoundref>
    <includes refid="dynamic_uv_texture_object_8h" local="no">dynamicUvTextureObject.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1ae34d9eba95693c7efb3602d22c927be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStDynamicUvTextureObject</definition>
        <argsstring>(const HdStTextureIdentifier &amp;textureId, HdSt_TextureObjectRegistry *textureObjectRegistry)</argsstring>
        <name>HdStDynamicUvTextureObject</name>
        <param>
          <type>const <ref refid="class_hd_st_texture_identifier" kindref="compound">HdStTextureIdentifier</ref> &amp;</type>
          <declname>textureId</declname>
        </param>
        <param>
          <type>HdSt_TextureObjectRegistry *</type>
          <declname>textureObjectRegistry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1ad161f7ac8cfc6ed0f5143645c7d26246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStDynamicUvTextureObject</definition>
        <argsstring>() override</argsstring>
        <name>~HdStDynamicUvTextureObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a3001c5f0587b70bb8003b9e46b75c6e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CreateTexture</definition>
        <argsstring>(const HgiTextureDesc &amp;desc)</argsstring>
        <name>CreateTexture</name>
        <param>
          <type>const <ref refid="struct_hgi_texture_desc" kindref="compound">HgiTextureDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Allocate GPU resource using the texture descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Populate if data are given in the descriptor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="67" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a0256b31a4a242f59aa39b7731077dd79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GenerateMipmaps</definition>
        <argsstring>()</argsstring>
        <name>GenerateMipmaps</name>
        <briefdescription>
<para>Make GPU generate mipmaps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="73" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a5e755ebb3617094693f030713550138f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyTexture</definition>
        <argsstring>()</argsstring>
        <name>DestroyTexture</name>
        <briefdescription>
<para>Release GPU resource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="79" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a1d0c77a8ef7980b588800f4070a9f032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetWrapParameters</definition>
        <argsstring>(const std::pair&lt; HdWrap, HdWrap &gt; &amp;wrapParameters)</argsstring>
        <name>SetWrapParameters</name>
        <param>
          <type>const std::pair&lt; HdWrap, HdWrap &gt; &amp;</type>
          <declname>wrapParameters</declname>
        </param>
        <briefdescription>
<para>Set wrap mode hints used when a texture node&apos;s wrap mode is use metadata. </para>
        </briefdescription>
        <detaileddescription>
<para>This is typically called from <ref refid="class_hd_st_dynamic_uv_texture_implementation_1af542d47d1cd9e2fb539774debbf2681a" kindref="member">HdStDynamicUvTextureImplementation::Load</ref> when the texture file has wrap mode hints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="88" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1af50c5d7f01acbf6fb6849f5ce5f9541c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetCpuData</definition>
        <argsstring>(std::unique_ptr&lt; HdStTextureCpuData &gt; &amp;&amp;cpuData)</argsstring>
        <name>SetCpuData</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_texture_cpu_data" kindref="compound">HdStTextureCpuData</ref> &gt; &amp;&amp;</type>
          <declname>cpuData</declname>
        </param>
        <briefdescription>
<para>Save CPU data for this texture (transfering ownership). </para>
        </briefdescription>
        <detaileddescription>
<para>This is typically called from <ref refid="class_hd_st_dynamic_uv_texture_implementation_1af542d47d1cd9e2fb539774debbf2681a" kindref="member">HdStDynamicUvTextureImplementation::Load</ref> so that the CPU data can be uploaded during commit.</para>
<para>To free the CPU data, call with nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="99" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1abe52d88391d523391e18bcadae48c9ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_st_texture_cpu_data" kindref="compound">HdStTextureCpuData</ref> *</type>
        <definition>HdStTextureCpuData* GetCpuData</definition>
        <argsstring>() const</argsstring>
        <name>GetCpuData</name>
        <briefdescription>
<para>Get the CPU data stored for this texture. </para>
        </briefdescription>
        <detaileddescription>
<para>Typically used in <ref refid="class_hd_st_dynamic_uv_texture_implementation_1a7a347f5b1455396062420b166173e568" kindref="member">HdStDynamicUvTextureImplementation::Commit</ref> to commit CPU data to GPU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="107" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a2fc71a791d4a5815b15e7d6d827cd2a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API bool</type>
        <definition>HDST_API bool IsValid</definition>
        <argsstring>() const override</argsstring>
        <name>IsValid</name>
        <reimplements refid="class_hd_st_texture_object_1a83d17ce2f1f540385d21e9f81b3dae76">IsValid</reimplements>
        <briefdescription>
<para>Always returns true - so that samplers for this texture are created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a113afdb59ba5d85e64ff870aeae4a575" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void _Load</definition>
        <argsstring>() override</argsstring>
        <name>_Load</name>
        <reimplements refid="class_hd_st_texture_object_1a53f612f5be05577bafd37e4ca630aba8">_Load</reimplements>
        <briefdescription>
<para>Load texture to CPU (thread-safe) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1a4a0cebf86205ddd3c9b02f23b232e698" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void _Commit</definition>
        <argsstring>() override</argsstring>
        <name>_Commit</name>
        <reimplements refid="class_hd_st_texture_object_1af9c7ea62423805492df6200fa37b0452">_Commit</reimplements>
        <briefdescription>
<para>Commit texture to GPU (not thread-safe) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="122" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_dynamic_uv_texture_object_1ae76bb109c928c161898da0700cec725e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_st_dynamic_uv_texture_implementation" kindref="compound">HdStDynamicUvTextureImplementation</ref> *</type>
        <definition>HdStDynamicUvTextureImplementation* _GetImpl</definition>
        <argsstring>() const</argsstring>
        <name>_GetImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="125" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A uv texture that is managed but not populated by the Storm texture system. </para>
    </briefdescription>
    <detaileddescription>
<para>Clients can allocate an instance of this class through <ref refid="class_hd_st_resource_registry_1aca726a511db9a2b74038bffedb4fe580" kindref="member">HdStResourceRegistry::AllocateTextureHandle</ref> or AllocateTextureObject by passing an <ref refid="class_hd_st_texture_identifier" kindref="compound">HdStTextureIdentifier</ref> with a <ref refid="class_hd_st_dynamic_uv_subtexture_identifier" kindref="compound">HdStDynamicUvSubtextureIdentifier</ref>.</para>
<para>The client can allocate the GPU resource with CreateTexture and populate it by either giving data in the <ref refid="struct_hgi_texture_desc" kindref="compound">HgiTextureDesc</ref> or binding the texture as target for a computation or render.</para>
<para>Bindless texture sampler handles can only be created correctly if a client has created the texture before the texture commit phase is finished. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3120">
        <label>HdStTextureObject</label>
        <link refid="class_hd_st_texture_object"/>
      </node>
      <node id="3119">
        <label>HdStUvTextureObject</label>
        <link refid="class_hd_st_uv_texture_object"/>
        <childnode refid="3120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3118">
        <label>HdStDynamicUvTextureObject</label>
        <link refid="class_hd_st_dynamic_uv_texture_object"/>
        <childnode refid="3119" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3123">
        <label>HdStTextureObject</label>
        <link refid="class_hd_st_texture_object"/>
      </node>
      <node id="3122">
        <label>HdStUvTextureObject</label>
        <link refid="class_hd_st_uv_texture_object"/>
        <childnode refid="3123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3121">
        <label>HdStDynamicUvTextureObject</label>
        <link refid="class_hd_st_dynamic_uv_texture_object"/>
        <childnode refid="3122" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/dynamicUvTextureObject.h" line="54" column="1" bodyfile="pxr/imaging/hdSt/dynamicUvTextureObject.h" bodystart="53" bodyend="126"/>
    <listofallmembers>
      <member refid="class_hd_st_texture_object_1a4bb9e349d6ac5c6cb101c3b76c444909" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_AddToTotalTextureMemory</name></member>
      <member refid="class_hd_st_texture_object_1a498f50b8bbbe346da6e294b0551ae51f" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_AdjustTotalTextureMemory</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a4a0cebf86205ddd3c9b02f23b232e698" prot="protected" virt="virtual"><scope>HdStDynamicUvTextureObject</scope><name>_Commit</name></member>
      <member refid="class_hd_st_uv_texture_object_1ae234c5328af14bfa133ea43478bbb053" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_CreateTexture</name></member>
      <member refid="class_hd_st_uv_texture_object_1af28eecb85858ff4ad809f79491b3d284" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_DestroyTexture</name></member>
      <member refid="class_hd_st_uv_texture_object_1a31f741c42da5e3274fcaaf9339882b70" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GenerateMipmaps</name></member>
      <member refid="class_hd_st_uv_texture_object_1a0e90a006de1d81725757ce9ef72a804b" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetCpuData</name></member>
      <member refid="class_hd_st_texture_object_1a6ecfd8fb0c62f45e1a8978fb53a025f9" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetDebugName</name></member>
      <member refid="class_hd_st_texture_object_1a5a7b6bc152ae4b062a7aa5f10e7d1bab" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetHgi</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1ae76bb109c928c161898da0700cec725e" prot="private" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetImpl</name></member>
      <member refid="class_hd_st_texture_object_1a0328339184490ba78de07142381a31ce" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetPremultiplyAlpha</name></member>
      <member refid="class_hd_st_texture_object_1aecf3efc41bd50e8e4598620301ca7890" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetResourceRegistry</name></member>
      <member refid="class_hd_st_texture_object_1aab2a86741f445fd5c73d0707912e8d11" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_GetSourceColorSpace</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a113afdb59ba5d85e64ff870aeae4a575" prot="protected" virt="virtual"><scope>HdStDynamicUvTextureObject</scope><name>_Load</name></member>
      <member refid="class_hd_st_uv_texture_object_1ae43d860efb6e15205ec4bd5a98634cca" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_SetCpuData</name></member>
      <member refid="class_hd_st_uv_texture_object_1a6f6c689588c3e78139badbf3b45adfe0" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_SetWrapParameters</name></member>
      <member refid="class_hd_st_texture_object_1a656982d9323adc3d53decc0dcc731c35" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>_SubtractFromTotalTextureMemory</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a3001c5f0587b70bb8003b9e46b75c6e2" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>CreateTexture</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a5e755ebb3617094693f030713550138f" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>DestroyTexture</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a0256b31a4a242f59aa39b7731077dd79" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GenerateMipmaps</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1abe52d88391d523391e18bcadae48c9ec" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetCpuData</name></member>
      <member refid="class_hd_st_texture_object_1a1604cec087550d6968d8050060ef414f" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetTargetMemory</name></member>
      <member refid="class_hd_st_uv_texture_object_1a0f8a0f2f3d393395bdfdaf350b31dbd1" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetTexture</name></member>
      <member refid="class_hd_st_texture_object_1a9b0c375568692c0b631a211b92fb3fbc" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetTextureIdentifier</name></member>
      <member refid="class_hd_st_uv_texture_object_1a35b02f34208ef57a2e23cb5c85a9733d" prot="public" virt="virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetTextureType</name></member>
      <member refid="class_hd_st_uv_texture_object_1acea1437099c8656f01b970a2e9d9e14d" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>GetWrapParameters</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1ae34d9eba95693c7efb3602d22c927be4" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>HdStDynamicUvTextureObject</name></member>
      <member refid="class_hd_st_texture_object_1a91c3c2ce5a3fe4bee791c2b2e539a436" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>HdStTextureObject</name></member>
      <member refid="class_hd_st_uv_texture_object_1a93875e84dc0bbe39a338c244b2a4b010" prot="protected" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>HdStUvTextureObject</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a2fc71a791d4a5815b15e7d6d827cd2a9" prot="public" virt="virtual"><scope>HdStDynamicUvTextureObject</scope><name>IsValid</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1af50c5d7f01acbf6fb6849f5ce5f9541c" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>SetCpuData</name></member>
      <member refid="class_hd_st_texture_object_1a6ded25aed3b249789c7d7ea438be2076" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>SetTargetMemory</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1a1d0c77a8ef7980b588800f4070a9f032" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>SetWrapParameters</name></member>
      <member refid="class_hd_st_dynamic_uv_texture_object_1ad161f7ac8cfc6ed0f5143645c7d26246" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>~HdStDynamicUvTextureObject</name></member>
      <member refid="class_hd_st_texture_object_1a17729686cf8e982e36553a33d4c1ee7c" prot="public" virt="virtual"><scope>HdStDynamicUvTextureObject</scope><name>~HdStTextureObject</name></member>
      <member refid="class_hd_st_uv_texture_object_1a573f0e58a864a6a402da62508c7820c4" prot="public" virt="non-virtual"><scope>HdStDynamicUvTextureObject</scope><name>~HdStUvTextureObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
