<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_camera_util_framing" kind="class" language="C++" prot="public" final="yes">
    <compoundname>CameraUtilFraming</compoundname>
    <includes refid="framing_8h" local="no">framing.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_camera_util_framing_1a46c9013743998640c51e8afa2b0ff6bb" prot="public" static="no" mutable="no">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f displayWindow</definition>
        <argsstring></argsstring>
        <name>displayWindow</name>
        <briefdescription>
<para>The display window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="145" column="1" bodyfile="pxr/imaging/cameraUtil/framing.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_camera_util_framing_1a90402be1c6f96802350a39c4f744cf64" prot="public" static="no" mutable="no">
        <type><ref refid="class_gf_rect2i" kindref="compound">GfRect2i</ref></type>
        <definition>GfRect2i dataWindow</definition>
        <argsstring></argsstring>
        <name>dataWindow</name>
        <briefdescription>
<para>The data window. </para>
        </briefdescription>
        <detaileddescription>
<para>That is the rect of pixels that the renderer will fill. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="149" column="1" bodyfile="pxr/imaging/cameraUtil/framing.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_camera_util_framing_1a77feb240574bdb5015e0a4c69f1d4bb2" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float pixelAspectRatio</definition>
        <argsstring></argsstring>
        <name>pixelAspectRatio</name>
        <briefdescription>
<para>The ratio of the width to the height of a pixel - same as OpenEXR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="153" column="1" bodyfile="pxr/imaging/cameraUtil/framing.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_camera_util_framing_1a22eefccdb8003c857c928114e90e727a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API</type>
        <definition>CAMERAUTIL_API CameraUtilFraming</definition>
        <argsstring>()</argsstring>
        <name>CameraUtilFraming</name>
        <briefdescription>
<para>Creates an invalid framing, i.e., with empty display and data window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1a8556f2a517b6d49aebc1d12510621cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API</type>
        <definition>CAMERAUTIL_API CameraUtilFraming</definition>
        <argsstring>(const GfRange2f &amp;displayWindow, const GfRect2i &amp;dataWindow, float pixelAspectRatio=1.0)</argsstring>
        <name>CameraUtilFraming</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>displayWindow</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rect2i" kindref="compound">GfRect2i</ref> &amp;</type>
          <declname>dataWindow</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pixelAspectRatio</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Creates a framing with given display and data window and pixel aspect ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1a422fa639c3e4769a9a51a28ddfb664f8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API</type>
        <definition>CAMERAUTIL_API CameraUtilFraming</definition>
        <argsstring>(const GfRect2i &amp;dataWindow)</argsstring>
        <name>CameraUtilFraming</name>
        <param>
          <type>const <ref refid="class_gf_rect2i" kindref="compound">GfRect2i</ref> &amp;</type>
          <declname>dataWindow</declname>
        </param>
        <briefdescription>
<para>Creates a framing with equal display and data window (and assuming square pixels). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1a519614f5f70c8a95c5e746cdf9252650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API bool</type>
        <definition>CAMERAUTIL_API bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Is display and data window non-empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1a4577b50bb44d4740bcab0f691b3896b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API bool</type>
        <definition>CAMERAUTIL_API bool operator==</definition>
        <argsstring>(const CameraUtilFraming &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1ad85d0a370b2a22694f650b3f0a66342c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API bool</type>
        <definition>CAMERAUTIL_API bool operator!=</definition>
        <argsstring>(const CameraUtilFraming &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1a1d1ab5084d4f3593db3385a7b13b9dfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>CAMERAUTIL_API GfRange2f ComputeFilmbackWindow</definition>
        <argsstring>(float cameraAspectRatio, CameraUtilConformWindowPolicy windowPolicy) const</argsstring>
        <name>ComputeFilmbackWindow</name>
        <param>
          <type>float</type>
          <declname>cameraAspectRatio</declname>
        </param>
        <param>
          <type>CameraUtilConformWindowPolicy</type>
          <declname>windowPolicy</declname>
        </param>
        <briefdescription>
<para>The filmback window is the rectangle in pixel space corresponding to the filmback plane. </para>
        </briefdescription>
        <detaileddescription>
<para>It is obtained by conforming the display window using the camera&apos;s aspect ratio.</para>
<para>Note that the window policy describes how the camera frustum is modified to match the display window&apos;s aspect ratio. The filmback window is transforming differently: if, e.g., the camera frustum&apos;s height had to be increased to match the displayWindow&apos;s aspect ratio (since it is less than the camera&apos;s aspect ratio and the policy is CameraUtilFit), then the filmback window height will be less than that of the displayWindow. In other words, imagine an application window too tall to display the camera. We will increase the camera frustum&apos;s height to fill the entire window. To show only what the camera would see, we need to add slates on the bottom and top. The filmback window is the rect cut out by the slates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_camera_util_framing_1afa1cc9fdd20d03104c949f3f5c04472d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CAMERAUTIL_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>CAMERAUTIL_API GfMatrix4d ApplyToProjectionMatrix</definition>
        <argsstring>(const GfMatrix4d &amp;projectionMatrix, CameraUtilConformWindowPolicy windowPolicy) const</argsstring>
        <name>ApplyToProjectionMatrix</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>projectionMatrix</declname>
        </param>
        <param>
          <type>CameraUtilConformWindowPolicy</type>
          <declname>windowPolicy</declname>
        </param>
        <briefdescription>
<para>Given the projectionMatrix computed from a camera, applies the framing. </para>
        </briefdescription>
        <detaileddescription>
<para>To obtain a correct result, a rasterizer needs to use the resulting projection matrix and set the viewport to the data window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/cameraUtil/framing.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Framing information. </para>
    </briefdescription>
    <detaileddescription>
<para>That is information determining how the filmback plane of a camera maps to the pixels of the rendered image (displayWindow together with pixelAspectRatio and window policy) and what pixels of the image will be filled by the renderer (dataWindow).</para>
<para>The concepts of displayWindow and dataWindow are similar to the ones in OpenEXR, including that the x- and y-axis of the coordinate system point right and down, respectively.</para>
<para>In fact, these windows mean the same here and in OpenEXR if the displayWindow has the same aspect ratio (when accounting for the pixelAspectRatio) as the filmback plane of the camera (that is the ratio of the horizontalAperture to verticalAperture of, e.g., Usd&apos;s Camera or <ref refid="class_gf_camera" kindref="compound">GfCamera</ref>).</para>
<para>In particular, overscan can be achieved by making the dataWindow larger than the displayWindow.</para>
<para>If the aspect ratios differ, a window policy is applied to the displayWindow to determine how the pixels correspond to the filmback plane. One such window policy is to take the largest rect that fits (centered) into the displayWindow and has the camera&apos;s aspect ratio. For example, if the displayWindow and dataWindow are the same and both have an aspect ratio smaller than the camera, the image is created by enlarging the camera frustum slightly in the bottom and top direction.</para>
<para>When using the AOVs, the render buffer size is determined independently from the framing info. However, the dataWindow is supposed to be contained in the render buffer rect (in particular, the dataWindow cannot contain pixels with negative coordinates - this restriction does not apply if, e.g., hdPrman circumvents AOVs and writes directly to EXR). In other words, unlike in OpenEXR, the rect of pixels for which we allocate storage can differ from the rect the renderer fills with data (dataWindow).</para>
<para>For example, an application can set the render buffer size to match the widget size but use a dataWindow and displayWindow that only fills the render buffer horizontally to have slates at the top and bottom. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1011">
        <label>CameraUtilFraming</label>
        <link refid="class_camera_util_framing"/>
        <childnode refid="1012" relation="usage">
          <edgelabel>displayWindow</edgelabel>
        </childnode>
        <childnode refid="1013" relation="usage">
          <edgelabel>dataWindow</edgelabel>
        </childnode>
      </node>
      <node id="1013">
        <label>GfRect2i</label>
        <link refid="class_gf_rect2i"/>
      </node>
      <node id="1012">
        <label>GfRange2f</label>
        <link refid="class_gf_range2f"/>
        <childnode refid="1012" relation="usage">
          <edgelabel>UnitSquare</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/cameraUtil/framing.h" line="80" column="1" bodyfile="pxr/imaging/cameraUtil/framing.h" bodystart="79" bodyend="154"/>
    <listofallmembers>
      <member refid="class_camera_util_framing_1afa1cc9fdd20d03104c949f3f5c04472d" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>ApplyToProjectionMatrix</name></member>
      <member refid="class_camera_util_framing_1a22eefccdb8003c857c928114e90e727a" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>CameraUtilFraming</name></member>
      <member refid="class_camera_util_framing_1a8556f2a517b6d49aebc1d12510621cba" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>CameraUtilFraming</name></member>
      <member refid="class_camera_util_framing_1a422fa639c3e4769a9a51a28ddfb664f8" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>CameraUtilFraming</name></member>
      <member refid="class_camera_util_framing_1a1d1ab5084d4f3593db3385a7b13b9dfa" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>ComputeFilmbackWindow</name></member>
      <member refid="class_camera_util_framing_1a90402be1c6f96802350a39c4f744cf64" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>dataWindow</name></member>
      <member refid="class_camera_util_framing_1a46c9013743998640c51e8afa2b0ff6bb" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>displayWindow</name></member>
      <member refid="class_camera_util_framing_1a519614f5f70c8a95c5e746cdf9252650" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>IsValid</name></member>
      <member refid="class_camera_util_framing_1ad85d0a370b2a22694f650b3f0a66342c" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>operator!=</name></member>
      <member refid="class_camera_util_framing_1a4577b50bb44d4740bcab0f691b3896b5" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>operator==</name></member>
      <member refid="class_camera_util_framing_1a77feb240574bdb5015e0a4c69f1d4bb2" prot="public" virt="non-virtual"><scope>CameraUtilFraming</scope><name>pixelAspectRatio</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
