<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_attribute" kind="class" language="C++" prot="public">
    <compoundname>UsdAttribute</compoundname>
    <basecompoundref refid="class_usd_property" prot="public" virt="non-virtual">UsdProperty</basecompoundref>
    <includes refid="attribute_8h" local="no">attribute.h</includes>
      <sectiondef kind="user-defined">
      <header>Core Metadata</header>
      <memberdef kind="function" id="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
        <definition>USD_API SdfVariability GetVariability</definition>
        <argsstring>() const</argsstring>
        <name>GetVariability</name>
        <briefdescription>
<para>An attribute&apos;s variability expresses whether it is intended to have time-samples (<computeroutput>SdfVariabilityVarying</computeroutput>), or only a single default value (<computeroutput>SdfVariabilityUniform</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>Variability is required meta-data of all attributes, and its fallback value is SdfVariabilityVarying. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a5d5b05c4359aab959e717bad50f10aeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetVariability</definition>
        <argsstring>(SdfVariability variability) const</argsstring>
        <name>SetVariability</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
          <declname>variability</declname>
        </param>
        <briefdescription>
<para>Set the value for variability at the current EditTarget, return true on success, false if the value can not be written. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Note</bold> that this value should not be changed as it is typically either automatically authored or provided by a property definition. This method is provided primarily for fixing invalid scene description. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a81ff07cc76cab8a0efd51b8938b9a124" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>USD_API SdfValueTypeName GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
<para>Return the &quot;scene description&quot; value type name for this attribute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a57aaffd881c108ddcc35537c2ec7e7d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetTypeName</definition>
        <argsstring>(const SdfValueTypeName &amp;typeName) const</argsstring>
        <name>SetTypeName</name>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Set the value for typeName at the current EditTarget, return true on success, false if the value can not be written. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Note</bold> that this value should not be changed as it is typically either automatically authored or provided by a property definition. This method is provided primarily for fixing invalid scene description. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a1457c5b08b8c04e348e74842f2fa3e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USD_API TfToken GetRoleName</definition>
        <argsstring>() const</argsstring>
        <name>GetRoleName</name>
        <briefdescription>
<para>Return the roleName for this attribute&apos;s typeName. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="220" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value &amp; Time-Sample Accessors</header>
      <description><para><anchor id="class_usd_attribute_1Usd_AttributeValueMethods"/></para>
</description>
      <memberdef kind="function" id="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetTimeSamples</definition>
        <argsstring>(std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamples</name>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false only on error.</para>
<para>This method uses the standard resolution semantics, so if a stronger default value is authored over weaker time samples, the default value will hide the underlying timesamples.</para>
<para><simplesect kind="note"><para>This function will query all value clips that may contribute time samples for this attribute, opening them if needed. This may be expensive, especially if many clips are involved.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>- on return, will contain the <emphasis>sorted</emphasis>, ascending timeSample ordinates. Any data in <computeroutput>times</computeroutput> will be lost, as this method clears <computeroutput>times</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" kindref="member">UsdAttribute::GetTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetTimeSamplesInInterval</definition>
        <argsstring>(const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamplesInInterval</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times in <computeroutput>interval</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false only on an error.</para>
<para><simplesect kind="note"><para>This function will only query the value clips that may contribute time samples for this attribute in the given interval, opening them if necessary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>- the <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> on which to gather time samples.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>- on return, will contain the <emphasis>sorted</emphasis>, ascending timeSample ordinates. Any data in <computeroutput>times</computeroutput> will be lost, as this method clears <computeroutput>times</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1adb2e41f8b3e68d9acbbb05918ee9fbd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t GetNumTimeSamples</definition>
        <argsstring>() const</argsstring>
        <name>GetNumTimeSamples</name>
        <briefdescription>
<para>Returns the number of time samples that have been authored. </para>
        </briefdescription>
        <detaileddescription>
<para>This method uses the standard resolution semantics, so if a stronger default value is authored over weaker time samples, the default value will hide the underlying timesamples.</para>
<para><simplesect kind="note"><para>This function will query all value clips that may contribute time samples for this attribute, opening them if needed. This may be expensive, especially if many clips are involved. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a1f73bf9822e7300dcf4f009e07ae453f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetBracketingTimeSamples</definition>
        <argsstring>(double desiredTime, double *lower, double *upper, bool *hasTimeSamples) const</argsstring>
        <name>GetBracketingTimeSamples</name>
        <param>
          <type>double</type>
          <declname>desiredTime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>hasTimeSamples</declname>
        </param>
        <briefdescription>
<para>Populate <emphasis>lower</emphasis> and <emphasis>upper</emphasis> with the next greater and lesser value relative to the <emphasis>desiredTime</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return false if no value exists or an error occurs, true if either a default value or timeSamples exist.</para>
<para>Use standard resolution semantics: if a stronger default value is authored over weaker time samples, the default value hides the underlying timeSamples.</para>
<para>1) If a sample exists at the <emphasis>desiredTime</emphasis>, set both upper and lower to <emphasis>desiredTime</emphasis>.</para>
<para>2) If samples exist surrounding, but not equal to the <emphasis>desiredTime</emphasis>, set lower and upper to the bracketing samples nearest to the <emphasis>desiredTime</emphasis>.</para>
<para>3) If the <emphasis>desiredTime</emphasis> is outside of the range of authored samples, clamp upper and lower to the nearest time sample.</para>
<para>4) If no samples exist, do not modify upper and lower and set <emphasis>hasTimeSamples</emphasis> to false.</para>
<para>In cases (1), (2) and (3), set <emphasis>hasTimeSamples</emphasis> to true.</para>
<para>All four cases above are considered to be successful, thus the return value will be true and no error message will be emitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a7d33522bff62860c930f407afdada858" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasValue</definition>
        <argsstring>() const</argsstring>
        <name>HasValue</name>
        <briefdescription>
<para>Return true if this attribute has an authored default value, authored time samples or a fallback value provided by a registered schema. </para>
        </briefdescription>
        <detaileddescription>
<para>If the attribute has been <ref refid="class_usd_attribute_1Usd_AttributeBlocking" kindref="member">blocked</ref>, then return <computeroutput>true</computeroutput> if and only if it has a fallback value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a5af0f9735689c7dbf67a6a72da967666" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredValueOpinion</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredValueOpinion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000063"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method is deprecated because it returns <computeroutput>true</computeroutput> even when an attribute is blocked.</para>
</xrefdescription></xrefsect>Please use <ref refid="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" kindref="member">HasAuthoredValue()</ref> instead. If you truly need to know whether the attribute has <bold>any</bold> authored value opinions, <emphasis>including blocks</emphasis>, you can make the following query: <computeroutput>attr.GetResolveInfo().<ref refid="class_usd_attribute_1a5af0f9735689c7dbf67a6a72da967666" kindref="member">HasAuthoredValueOpinion()</ref></computeroutput></para>
<para>Return true if this attribute has either an authored default value or authored time samples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredValue</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredValue</name>
        <briefdescription>
<para>Return true if this attribute has either an authored default value or authored time samples. </para>
        </briefdescription>
        <detaileddescription>
<para>If the attribute has been <ref refid="class_usd_attribute_1Usd_AttributeBlocking" kindref="member">blocked</ref>, then return <computeroutput>false</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1ab2d1fe152bf22c9ca8fe1250ec9b77c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasFallbackValue</definition>
        <argsstring>() const</argsstring>
        <name>HasFallbackValue</name>
        <briefdescription>
<para>Return true if this attribute has a fallback value provided by a registered schema. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1adc2ce35114eb530bfa1d4b46c3d8fabc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ValueMightBeTimeVarying</definition>
        <argsstring>() const</argsstring>
        <name>ValueMightBeTimeVarying</name>
        <briefdescription>
<para>Return true if it is possible, but not certain, that this attribute&apos;s value changes over time, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns false, it is certain that this attribute&apos;s value remains constant over time.</para>
<para>This function is equivalent to checking if <ref refid="class_usd_attribute_1adb2e41f8b3e68d9acbbb05918ee9fbd9" kindref="member">GetNumTimeSamples()</ref> &gt; 1, but may be more efficient since it does not actually need to get a full count of all time samples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Get</definition>
        <argsstring>(T *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Perform value resolution to fetch the value of this attribute at the requested <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> <computeroutput>time</computeroutput>, which defaults to <emphasis>default</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no value is authored at <computeroutput>time</computeroutput> but values are authored at other times, this function will return an interpolated value based on the stage&apos;s interpolation type. See <ref refid="class_usd_attribute_1Usd_AttributeInterpolation" kindref="member">Attribute Value Interpolation</ref>.</para>
<para>If no value is authored and no fallback value is provided by the schema for this attribute, this function will return false. If the consumer&apos;s use-case requires a default value, the consumer will need to provide one, possibly using <ref refid="class_usd_attribute_1a81ff07cc76cab8a0efd51b8938b9a124" kindref="member">GetTypeName()</ref>.GetDefaultValue().</para>
<para>This templated accessor is designed for high performance data-streaming applications, allowing one to fetch data into the same container repeatedly, avoiding memory allocations when possible (<ref refid="class_vt_array" kindref="compound">VtArray</ref> containers will be resized as necessary to conform to the size of data being read).</para>
<para>This template is only instantiated for the valid scene description value types and their corresponding <ref refid="class_vt_array" kindref="compound">VtArray</ref> containers. See <ref refid="_usd__page__datatypes" kindref="compound">Basic Datatypes for Scene Description Provided by Sdf</ref> for the complete list of types.</para>
<para>Values are retrieved without regard to this attribute&apos;s variability. For example, a uniform attribute may retrieve time sample values if any are authored. However, the USD_VALIDATE_VARIABILITY TF_DEBUG code will cause debug information to be output if values that are inconsistent with this attribute&apos;s variability are retrieved. See <ref refid="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" kindref="member">UsdAttribute::GetVariability</ref> for more details.</para>
<para><simplesect kind="return"><para>true if there was a value to be read, it was of the type T requested, and we read it successfully - false otherwise.</para>
</simplesect>
For more details, see <ref refid="_usd__page__properties_of_scene_description_1Usd_ValueResolution" kindref="member">TimeSamples, Defaults, and Value Resolution</ref> , and also <ref refid="class_usd_attribute_1Usd_AssetPathValuedAttributes" kindref="member">Attributes of type SdfAssetPath and UsdAttribute::Get()</ref> for information on how to retrieve resolved asset paths from SdfAssetPath-valued attributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="436" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="436" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1aabe72aba718e7b6d90f85cfe77826a37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Get</definition>
        <argsstring>(VtValue *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Type-erased access, often not as efficient as typed access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a261b519c81d4108c63922819ac5a9e10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref></type>
        <definition>USD_API UsdResolveInfo GetResolveInfo</definition>
        <argsstring>(UsdTimeCode time) const</argsstring>
        <name>GetResolveInfo</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Perform value resolution to determine the source of the resolved value of this attribute at the requested <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a5f609a61f87e9df91e335644c97ee9ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref></type>
        <definition>USD_API UsdResolveInfo GetResolveInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetResolveInfo</name>
        <briefdescription>
<para>Perform value resolution to determine the source of the resolved value of this attribute at any non-default time. </para>
        </briefdescription>
        <detaileddescription>
<para>Often (i.e. unless the attribute is affected by <ref refid="_usd__page__value_clips" kindref="compound">Value Clips</ref>) the source of the resolved value does not vary over time. See <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> as an example that takes advantage of this quality of value resolution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a7fd0957eecddb7cfcd222cccd51e23e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Set</definition>
        <argsstring>(const T &amp;value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Set</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the value of this attribute in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> to <computeroutput>value</computeroutput> at <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> <computeroutput>time</computeroutput>, which defaults to <emphasis>default</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Values are authored without regard to this attribute&apos;s variability. For example, time sample values may be authored on a uniform attribute. However, the USD_VALIDATE_VARIABILITY TF_DEBUG code will cause debug information to be output if values that are inconsistent with this attribute&apos;s variability are authored. See <ref refid="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" kindref="member">UsdAttribute::GetVariability</ref> for more details.</para>
<para><simplesect kind="return"><para>false and generate an error if type <computeroutput>T</computeroutput> does not match this attribute&apos;s defined scene description type <bold>exactly</bold>, or if there is no existing definition for the attribute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="477" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="477" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a151e6fde58bbd911da8322911a3c0079" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Set</definition>
        <argsstring>(const char *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Set</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. As a convenience, we allow the setting of string value typed attributes via a C string value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a5de2a2a51debc1f3c8f3e671a5776743" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Set</definition>
        <argsstring>(const VtValue &amp;value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a4335db09e6deaf5ab80340283b23059f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Clear</definition>
        <argsstring>() const</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears the authored default value and all time samples for this attribute at the current EditTarget and returns true on success. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling clear when either no value is authored or no spec is present, is a silent no-op returning true.</para>
<para>This method does not affect any other data authored on this attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a9b493f0e1ce88dde2a17d16889997dd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearAtTime</definition>
        <argsstring>(UsdTimeCode time) const</argsstring>
        <name>ClearAtTime</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Clear the authored value for this attribute at the given <emphasis>time</emphasis>, at the current EditTarget and return true on success. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default()</ref> can be used to clear the default value.</para>
<para>Calling clear when either no value is authored or no spec is present, is a silent no-op returning true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a3c1639b65058c3cde3ae86be53c7cbf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearDefault</definition>
        <argsstring>() const</argsstring>
        <name>ClearDefault</name>
        <briefdescription>
<para>Shorthand for ClearAtTime(UsdTimeCode::Default()). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Block</definition>
        <argsstring>() const</argsstring>
        <name>Block</name>
        <briefdescription>
<para>Remove all time samples on an attribute and author a <emphasis>block</emphasis> <computeroutput>default</computeroutput> value. </para>
        </briefdescription>
        <detaileddescription>
<para>This causes the attribute to resolve as if there were no authored value opinions in weaker layers.</para>
<para>See <ref refid="class_usd_attribute_1Usd_AttributeBlocking" kindref="member">Attribute Value Blocking</ref> for more information, including information on time-varying blocking. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a6187801e648b03d584d0bf2c3d18aeec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool GetUnionedTimeSamples</definition>
        <argsstring>(const std::vector&lt; UsdAttribute &gt; &amp;attrs, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetUnionedTimeSamples</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &gt; &amp;</type>
          <declname>attrs</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates the given vector, <computeroutput>times</computeroutput> with the union of all the authored sample times on all of the given attributes, <computeroutput>attrs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will query all value clips that may contribute time samples for the attributes in <computeroutput>attrs</computeroutput>, opening them if needed. This may be expensive, especially if many clips are involved.</para>
</simplesect>
The accumulated sample times will be in sorted (increasing) order and will not contain any duplicates.</para>
<para>This clears any existing values in the <computeroutput>times</computeroutput> vector before accumulating sample times of the given attributes.</para>
<para><simplesect kind="return"><para>false if any of the attributes in <computeroutput>attr</computeroutput> are invalid or if there&apos;s an error when fetching time-samples for any of the attributes.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a63885479b8152704ee4d724a32b58d9d" kindref="member">UsdAttribute::GetUnionedTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a63885479b8152704ee4d724a32b58d9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool GetUnionedTimeSamplesInInterval</definition>
        <argsstring>(const std::vector&lt; UsdAttribute &gt; &amp;attrs, const GfInterval &amp;interval, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetUnionedTimeSamplesInInterval</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &gt; &amp;</type>
          <declname>attrs</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates the given vector, <computeroutput>times</computeroutput> with the union of all the authored sample times in the <ref refid="class_gf_interval" kindref="compound">GfInterval</ref>, <computeroutput>interval</computeroutput> on all of the given attributes, <computeroutput>attrs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will only query the value clips that may contribute time samples for the attributes in <computeroutput>attrs</computeroutput>, in the given <computeroutput>interval</computeroutput>, opening them if necessary.</para>
</simplesect>
The accumulated sample times will be in sorted (increasing) order and will not contain any duplicates.</para>
<para>This clears any existing values in the <computeroutput>times</computeroutput> vector before accumulating sample times of the given attributes.</para>
<para><simplesect kind="return"><para>false if any of the attributes in <computeroutput>attr</computeroutput> are invalid or if there&apos;s an error fetching time-samples for any of the attributes.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" kindref="member">UsdAttribute::GetTimeSamplesInInterval</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a6187801e648b03d584d0bf2c3d18aeec" kindref="member">UsdAttribute::GetUnionedTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="310" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Querying and Editing Connections</header>
      <memberdef kind="function" id="class_usd_attribute_1a7f1e7f8d2b691da3447903fb60bc8b73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddConnection</definition>
        <argsstring>(const SdfPath &amp;source, UsdListPosition position=UsdListPositionBackOfPrependList) const</argsstring>
        <name>AddConnection</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
<para>Adds <computeroutput>source</computeroutput> to the list of connections, in the position specified by <computeroutput>position</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Issue an error if <computeroutput>source</computeroutput> identifies a prototype prim or an object descendant to a prototype prim. It is not valid to author connections to these objects.</para>
<para>What data this actually authors depends on what data is currently authored in the authoring layer, with respect to list-editing semantics, which we will document soon </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a659302856df8727e408ae94896b1e137" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveConnection</definition>
        <argsstring>(const SdfPath &amp;source) const</argsstring>
        <name>RemoveConnection</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Removes <computeroutput>target</computeroutput> from the list of targets. </para>
        </briefdescription>
        <detaileddescription>
<para>Issue an error if <computeroutput>source</computeroutput> identifies a prototype prim or an object descendant to a prototype prim. It is not valid to author connections to these objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a744a17d080ea0257a1a59c8a0054cf68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetConnections</definition>
        <argsstring>(const SdfPathVector &amp;sources) const</argsstring>
        <name>SetConnections</name>
        <param>
          <type>const SdfPathVector &amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
<para>Make the authoring layer&apos;s opinion of the connection list explicit, and set exactly to <computeroutput>sources</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Issue an error if <computeroutput>source</computeroutput> identifies a prototype prim or an object descendant to a prototype prim. It is not valid to author connections to these objects.</para>
<para>If any path in <computeroutput>sources</computeroutput> is invalid, issue an error and return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a7680db2c045d82deba23afcd50d15766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearConnections</definition>
        <argsstring>() const</argsstring>
        <name>ClearConnections</name>
        <briefdescription>
<para>Remove all opinions about the connections list from the current edit target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1ab6384fe8ac90bf18c8d781e139a7d813" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetConnections</definition>
        <argsstring>(SdfPathVector *sources) const</argsstring>
        <name>GetConnections</name>
        <param>
          <type>SdfPathVector *</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
<para>Compose this attribute&apos;s connections and fill <computeroutput>sources</computeroutput> with the result. </para>
        </briefdescription>
        <detaileddescription>
<para>All preexisting elements in <computeroutput>sources</computeroutput> are lost.</para>
<para>Returns true if any connection path opinions have been authored and no composition errors were encountered, returns false otherwise. Note that authored opinions may include opinions that clear the connections and a return value of true does not necessarily indicate that <computeroutput>sources</computeroutput> will contain any connection paths.</para>
<para>See <ref refid="_usd__page__scenegraph_instancing_1Usd_ScenegraphInstancing_TargetsAndConnections" kindref="member">Relationship Targets and Attribute Connections</ref> for details on behavior when targets point to objects beneath instance prims.</para>
<para>The result is not cached, and thus recomputed on each query. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a828cbae7d4d6c6f9f220307b6b81d5cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredConnections</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredConnections</name>
        <briefdescription>
<para>Return true if this attribute has any authored opinions regarding connections. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this includes opinions that remove connections, so a true return does not necessarily indicate that this attribute has connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="590" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>ColorSpace API</header>
      <description><para><anchor id="class_usd_attribute_1Usd_AttributeColorSpaceAPI"/></para>
<para>The color space in which a given color or texture valued attribute is authored is set as token-valued metadata &apos;colorSpace&apos; on the attribute. For color or texture attributes that don&apos;t have an authored &apos;colorSpace&apos; value, the fallback color-space is gleaned from whatever color management system is specified by <ref refid="class_usd_stage_1adb3f32f62031ea113321d4c66978692f" kindref="member">UsdStage::GetColorManagementSystem()</ref>. </para>
</description>
      <memberdef kind="function" id="class_usd_attribute_1a635e3fc6927db14e49302525a354bbf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USD_API TfToken GetColorSpace</definition>
        <argsstring>() const</argsstring>
        <name>GetColorSpace</name>
        <briefdescription>
<para>Gets the color space in which the attribute is authored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1ab7003182fc7e31d5ee5be80ee518edbe" kindref="member">SetColorSpace()</ref> <ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">UsdStage Color Configuration API</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1ab7003182fc7e31d5ee5be80ee518edbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetColorSpace</definition>
        <argsstring>(const TfToken &amp;colorSpace) const</argsstring>
        <name>SetColorSpace</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>colorSpace</declname>
        </param>
        <briefdescription>
<para>Sets the color space of the attribute to <computeroutput>colorSpace</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a635e3fc6927db14e49302525a354bbf2" kindref="member">GetColorSpace()</ref> <ref refid="class_usd_stage_1Usd_ColorConfigurationAPI" kindref="member">UsdStage Color Configuration API</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1aadd967940959ca70d159789141db49a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasColorSpace</definition>
        <argsstring>() const</argsstring>
        <name>HasColorSpace</name>
        <briefdescription>
<para>Returns whether color-space is authored on the attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a635e3fc6927db14e49302525a354bbf2" kindref="member">GetColorSpace()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a8816850ccdb05117eb34eae01630219c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearColorSpace</definition>
        <argsstring>() const</argsstring>
        <name>ClearColorSpace</name>
        <briefdescription>
<para>Clears authored color-space value on the attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1ab7003182fc7e31d5ee5be80ee518edbe" kindref="member">SetColorSpace()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="627" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_attribute_1aacf3a34e9976aa79c506135cb10ea20d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdAttributeQuery</definition>
        <argsstring></argsstring>
        <name>UsdAttributeQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="635" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_attribute_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdObject</definition>
        <argsstring></argsstring>
        <name>UsdObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="636" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_attribute_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrim</definition>
        <argsstring></argsstring>
        <name>UsdPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="637" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_attribute_1ad62730bb9bc2e7bab49b4a5c64a2c249" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaBase</definition>
        <argsstring></argsstring>
        <name>UsdSchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="638" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_attribute_1a33c96f0e87ad959b22e24912e63a33e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct UsdPrim_AttrConnectionFinder</definition>
        <argsstring></argsstring>
        <name>UsdPrim_AttrConnectionFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="640" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_attribute_1afa686d666d8d620893f72d914ab1aa6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdAttribute</definition>
        <argsstring>()</argsstring>
        <name>UsdAttribute</name>
        <briefdescription>
<para>Construct an invalid attribute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="179" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="179" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_attribute_1ab0dddf04856c3e879ee17660cecded5e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdAttribute</definition>
        <argsstring>(const Usd_PrimDataHandle &amp;prim, const SdfPath &amp;proxyPrimPath, const TfToken &amp;attrName)</argsstring>
        <name>UsdAttribute</name>
        <param>
          <type>const Usd_PrimDataHandle &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="642" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a7c5c32e36c518fac6c5ac5e2bc44fd62" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdAttribute</definition>
        <argsstring>(UsdObjType objType, const Usd_PrimDataHandle &amp;prim, const SdfPath &amp;proxyPrimPath, const TfToken &amp;propName)</argsstring>
        <name>UsdAttribute</name>
        <param>
          <type><ref refid="object_8h_1ada9a9a926dbc7aa06b0449ed00d11097" kindref="member">UsdObjType</ref></type>
          <declname>objType</declname>
        </param>
        <param>
          <type>const Usd_PrimDataHandle &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="647" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a473cf928e82a30679ce06fcb20f4144d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAttributeSpecHandle</type>
        <definition>SdfAttributeSpecHandle _CreateSpec</definition>
        <argsstring>(const SdfValueTypeName &amp;typeName, bool custom, const SdfVariability &amp;variability) const</argsstring>
        <name>_CreateSpec</name>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
        </param>
        <param>
          <type>const <ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref> &amp;</type>
          <declname>variability</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1af425b8cbb8df3063cc6a73faae0d3b6f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAttributeSpecHandle</type>
        <definition>SdfAttributeSpecHandle _CreateSpec</definition>
        <argsstring>() const</argsstring>
        <name>_CreateSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a594681446989d6b4ee635d51013c42b7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _Create</definition>
        <argsstring>(const SdfValueTypeName &amp;typeName, bool custom, const SdfVariability &amp;variability) const</argsstring>
        <name>_Create</name>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
        </param>
        <param>
          <type>const <ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref> &amp;</type>
          <declname>variability</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a29d0718aad1d6a742f28c1f956f2eb8e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _Get</definition>
        <argsstring>(T *value, UsdTimeCode time) const</argsstring>
        <name>_Get</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a08e6cfa1a7ceb7b9969e07d8b8f6747f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _Set</definition>
        <argsstring>(const T &amp;value, UsdTimeCode time) const</argsstring>
        <name>_Set</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_1a3ce63b571903c8fb2fe9838e79700d97" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _GetPathForAuthoring</definition>
        <argsstring>(const SdfPath &amp;path, std::string *whyNot) const</argsstring>
        <name>_GetPathForAuthoring</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attribute.h" line="672" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Scenegraph object for authoring and retrieving numeric, string, and array valued data, sampled over time. </para>
    </briefdescription>
    <detaileddescription>
<para>The allowed value types for <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> are dictated by the Sdf (&quot;Scene Description Foundations&quot;) core&apos;s data model, which we summarize in <ref refid="_usd__page__datatypes" kindref="compound">Basic Datatypes for Scene Description Provided by Sdf</ref> .</para>
<sect1 id="class_usd_attribute_1Usd_AttributeQualities">
<title>Attribute Defining Qualities</title>
<para>In addition to its value type, an Attribute has two other defining qualities: <itemizedlist>
<listitem><para><bold>Variability</bold> Expresses whether an attribute is intended to have time samples (<ref refid="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" kindref="member">GetVariability()</ref> == <computeroutput>SdfVariabilityVarying</computeroutput>), or only a default (<ref refid="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" kindref="member">GetVariability()</ref> == <computeroutput>SdfVariabilityUniform</computeroutput>). For more on reasoning about time samples, see <ref refid="class_usd_attribute_1Usd_AttributeValueMethods" kindref="member">Value &amp; Time-Sample Accessors</ref>.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para><bold>Custom</bold> Determines whether an attribute belongs to a schema (<ref refid="class_usd_property_1ad0ffcc4c9b780ba8f6dd5a92746c0059" kindref="member">IsCustom()</ref> == <computeroutput>false</computeroutput>), or is a user-defined, custom attribute. schema attributes will always be defined on a prim of the schema type, ans may possess fallback values from the schema, whereas custom attributes must always first be authored in order to be defined. Note that <emphasis>custom</emphasis> is actually an aspect of <ref refid="class_usd_property" kindref="compound">UsdProperty</ref>, as <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> can also be custom or provided by a schema.</para>
</listitem>
</itemizedlist>
</para>
</sect1>
<sect1 id="class_usd_attribute_1Usd_AttributeExistence">
<title>Attribute Creation and Existence</title>
<para>One can always create an attribute generically via <ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">UsdPrim::CreateAttribute()</ref>, which ensures that an attribute &quot;is defined&quot; in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> . In order to author any metadata or a default or timesample for an attribute, <emphasis>it must first be defined</emphasis>. It is sufficient that the attribute be defined in any one of the layers participating in the stage&apos;s current composition; for <emphasis>builtin</emphasis> attributes (those belonging to the owning prim&apos;s defining schema, i.e. the most specific subclass of UsdTypedSchema for which prim.IsA&lt;schema&gt;() will evaluate to true) there need be no authored scene description, because a definition is provided by the prim&apos;s schema definition.</para>
<para><bold>Creating</bold> an attribute does not imply that the attribute has a value. More broadly, in the following code: <programlisting><codeline><highlight class="normal">if<sp/>(UsdAttribute<sp/>attr<sp/>=<sp/>prim.GetAttribute(TfToken(&quot;myAttr&quot;))){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> passes the bool test, because it is defined; however, inside the clause, we have no guarantee that attr has a value.</para>
</sect1>
<sect1 id="class_usd_attribute_1Usd_AttributeInterpolation">
<title>Attribute Value Interpolation</title>
<para><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> supports two interpolation behaviors when retrieving attribute values at times where no value is explicitly authored. The desired behavior may be specified via <ref refid="class_usd_stage_1ad29a9aaba12c36407936a21abf514ea4" kindref="member">UsdStage::SetInterpolationType</ref>. That behavior will be used for all calls to <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdAttribute::Get</ref>.</para>
<para>The supported interpolation types are:</para>
<para><itemizedlist>
<listitem><para><bold>Held</bold> Attribute values are held constant between authored values. An attribute&apos;s value will be equal to the nearest preceding authored value. If there is no preceding authored value, the value will be equal to the nearest subsequent value.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para><bold>Linear</bold> Attribute values are linearly interpolated between authored values.</para>
</listitem>
</itemizedlist>
Linear interpolation is only supported for certain data types. See <ref refid="interpolation_8h_1USD_LINEAR_INTERPOLATION_TYPES" kindref="member">USD_LINEAR_INTERPOLATION_TYPES</ref> for the list of these types. Types that do not support linear interpolation will use held interpolation instead.</para>
<para>Linear interpolation is done element-by-element for array, vector, and matrix data types. If linear interpolation is requested for two array values with different sizes, held interpolation will be used instead.</para>
</sect1>
<sect1 id="class_usd_attribute_1Usd_AttributeBlocking">
<title>Attribute Value Blocking</title>
<para>While prims can effectively be removed from a scene by <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">deactivating them,</ref> properties cannot. However, it is possible to <bold>block an attribute&apos;s value</bold>, thus making the attribute behave as if it has a definition (and possibly metadata), but no authored value.</para>
<para>One blocks an attribute using <ref refid="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" kindref="member">UsdAttribute::Block()</ref>, which will block the attribute in the stage&apos;s current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>, by authoring an <ref refid="struct_sdf_value_block" kindref="compound">SdfValueBlock</ref> in the attribute&apos;s <emphasis>default</emphasis>, and only values authored in weaker layers than the editTarget will be blocked. If the value block is the strongest authored opinion for the attribute, the <ref refid="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" kindref="member">HasAuthoredValue()</ref> method will return <emphasis>false</emphasis>, and the <ref refid="class_usd_attribute_1a7d33522bff62860c930f407afdada858" kindref="member">HasValue()</ref> and <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> methods will only return <emphasis>true</emphasis> if the attribute possesses a fallback value from the prim&apos;s schema. &quot;Unblocking&quot; a blocked attribute is as simple as setting a <emphasis>default</emphasis> or timeSample value for the attribute in the same or stronger layer.</para>
<sect2 id="class_usd_attribute_1Usd_TimeVaryingAttributeBlocks">
<title>Time-varying Blocks</title>
<para>The semantics of <ref refid="_usd__page__value_clips_1Usd_ValueClips_Overview" kindref="member">Value Clips</ref> necessitate the ability to selectively block an attribute&apos;s value for only some intervals in its authored range of samples. One can block an attribute&apos;s value at time <emphasis>t</emphasis> by calling <computeroutput>attr.Set(SdfValueBlock, t)</computeroutput> When an attribute is thusly &quot;partially blocked&quot;, <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdAttribute::Get()</ref> will succeed only for those time intervals whose left/earlier bracketing timeSample is <bold>not</bold> <ref refid="struct_sdf_value_block" kindref="compound">SdfValueBlock</ref>.</para>
<para>Due to this time-varying potential of value blocking, it may be the case that an attribute&apos;s <ref refid="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" kindref="member">HasAuthoredValue()</ref> and <ref refid="class_usd_attribute_1a7d33522bff62860c930f407afdada858" kindref="member">HasValue()</ref> methods both return <emphasis>true</emphasis> (because they do not and cannot consider time-varying blocks), but <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> may yet return <emphasis>false</emphasis> over some intervals.</para>
</sect2>
</sect1>
<sect1 id="class_usd_attribute_1Usd_AssetPathValuedAttributes">
<title>Attributes of type SdfAssetPath and UsdAttribute::Get()</title>
<para>If an attribute&apos;s value type is <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> or SdfAssetPathArray, <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> performs extra work to compute the resolved asset paths, using the layer that has the strongest value opinion as the anchor for &quot;relative&quot; asset paths. Both the unresolved and resolved results are available through <ref refid="class_sdf_asset_path_1ae2f0ca9bb4cce9a33e4625d3159c4d80" kindref="member">SdfAssetPath::GetAssetPath()</ref> and <ref refid="class_sdf_asset_path_1aff2f95c537d0b53a8d155d0cad1969aa" kindref="member">SdfAssetPath::GetResolvedPath()</ref>, respectively.</para>
<para>Clients that call <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> on many asset-path-valued attributes may wish to employ an <ref refid="class_ar_resolver_scoped_cache" kindref="compound">ArResolverScopedCache</ref> to improve asset path resolution performance. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="6019">
        <label>UsdAttribute</label>
        <link refid="class_usd_attribute"/>
        <childnode refid="6020" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6020">
        <label>UsdProperty</label>
        <link refid="class_usd_property"/>
        <childnode refid="6021" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6021">
        <label>UsdObject</label>
        <link refid="class_usd_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6022">
        <label>UsdAttribute</label>
        <link refid="class_usd_attribute"/>
        <childnode refid="6023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6023">
        <label>UsdProperty</label>
        <link refid="class_usd_property"/>
        <childnode refid="6024" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6024">
        <label>UsdObject</label>
        <link refid="class_usd_object"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/attribute.h" line="176" column="1" bodyfile="pxr/usd/usd/attribute.h" bodystart="176" bodyend="673"/>
    <listofallmembers>
      <member refid="class_usd_attribute_1a594681446989d6b4ee635d51013c42b7" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_Create</name></member>
      <member refid="class_usd_attribute_1a473cf928e82a30679ce06fcb20f4144d" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_CreateSpec</name></member>
      <member refid="class_usd_attribute_1af425b8cbb8df3063cc6a73faae0d3b6f" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_CreateSpec</name></member>
      <member refid="class_usd_attribute_1a29d0718aad1d6a742f28c1f956f2eb8e" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_Get</name></member>
      <member refid="class_usd_object_1a49fff1f7d23dfc1f95c40ed8bca888f7" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_GetDefiningSpecType</name></member>
      <member refid="class_usd_attribute_1a3ce63b571903c8fb2fe9838e79700d97" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_GetPathForAuthoring</name></member>
      <member refid="class_usd_object_1aaaa93a1af279c8b5551391a8b45c7bbc" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_GetStage</name></member>
      <member refid="class_usd_property_1a0f1b258b0b7494094a22463f9edc27ee" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_GetTargets</name></member>
      <member refid="class_usd_object_1a476be2b495a6fcc0f03f1b52aa61745d" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_Prim</name></member>
      <member refid="class_usd_object_1a0f84e075219fbeb85f40a5533ac6b550" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_PropName</name></member>
      <member refid="class_usd_object_1a47e60c6fc1efca5e426fd0b40a049236" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>_ProxyPrimPath</name></member>
      <member refid="class_usd_attribute_1a08e6cfa1a7ceb7b9969e07d8b8f6747f" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>_Set</name></member>
      <member refid="class_usd_attribute_1a7f1e7f8d2b691da3447903fb60bc8b73" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>AddConnection</name></member>
      <member refid="class_usd_object_1aaca099fe79c1bbdd2216e7cb583952a9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>As</name></member>
      <member refid="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Block</name></member>
      <member refid="class_usd_attribute_1a4335db09e6deaf5ab80340283b23059f" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Clear</name></member>
      <member refid="class_usd_object_1a85151085271ffb20e4c642a8a854f786" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearAssetInfo</name></member>
      <member refid="class_usd_object_1aadb1b6b9372e1de8b0cef16a8809de0a" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearAssetInfoByKey</name></member>
      <member refid="class_usd_attribute_1a9b493f0e1ce88dde2a17d16889997dd0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearAtTime</name></member>
      <member refid="class_usd_attribute_1a8816850ccdb05117eb34eae01630219c" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearColorSpace</name></member>
      <member refid="class_usd_attribute_1a7680db2c045d82deba23afcd50d15766" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearConnections</name></member>
      <member refid="class_usd_object_1a30d686bc90f3d7d6753086a484d86ed4" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearCustomData</name></member>
      <member refid="class_usd_object_1a5abc2ea6c40a3b8b9bc60896cfee0c63" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearCustomDataByKey</name></member>
      <member refid="class_usd_attribute_1a3c1639b65058c3cde3ae86be53c7cbf1" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearDefault</name></member>
      <member refid="class_usd_property_1a416edbbf0b17dc8292bae42fc6e67951" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearDisplayGroup</name></member>
      <member refid="class_usd_object_1a45f102f292999a4d2c2d5015d54ab9dc" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearDisplayName</name></member>
      <member refid="class_usd_object_1ab84f704415b18a9819918a1a73732f38" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearDocumentation</name></member>
      <member refid="class_usd_object_1a5b6b31dcfcfb34f43f334161522de847" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearHidden</name></member>
      <member refid="class_usd_object_1af75ddb7982a5b5c77f9840e67df94435" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearMetadata</name></member>
      <member refid="class_usd_object_1afd756d242f6026a3d7c5606badbf8411" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ClearMetadataByDictKey</name></member>
      <member refid="class_usd_property_1a8768ec57187614071e3df8b60d7f26eb" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>FlattenTo</name></member>
      <member refid="class_usd_property_1ad1836afc78a4368306599c26d4238818" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>FlattenTo</name></member>
      <member refid="class_usd_property_1ab89fa3e003dcd4fe843fc4b6ac8e51a8" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>FlattenTo</name></member>
      <member refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Get</name></member>
      <member refid="class_usd_attribute_1aabe72aba718e7b6d90f85cfe77826a37" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Get</name></member>
      <member refid="class_usd_object_1ac81c4a2222e6c4957ed7a540c05e2346" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetAllAuthoredMetadata</name></member>
      <member refid="class_usd_object_1afd698d0849b1a8dd4e9a4bf7608e8754" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetAllMetadata</name></member>
      <member refid="class_usd_object_1a568ab5eceb43fd673cad556f30df6619" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetAssetInfo</name></member>
      <member refid="class_usd_object_1ada201f20c6d4b33ec27fd459703909e9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetAssetInfoByKey</name></member>
      <member refid="class_usd_property_1a2011318cd445c9fc30a1a00df5318a86" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetBaseName</name></member>
      <member refid="class_usd_attribute_1a1f73bf9822e7300dcf4f009e07ae453f" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetBracketingTimeSamples</name></member>
      <member refid="class_usd_attribute_1a635e3fc6927db14e49302525a354bbf2" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetColorSpace</name></member>
      <member refid="class_usd_attribute_1ab6384fe8ac90bf18c8d781e139a7d813" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetConnections</name></member>
      <member refid="class_usd_object_1abea26b9c6a71883a2d9da4ff64952391" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetCustomData</name></member>
      <member refid="class_usd_object_1a9aebce4a579e9bb24385bac6e4ae3186" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetCustomDataByKey</name></member>
      <member refid="class_usd_object_1aa8476a8039c198245c87e27b0f6b7e78" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetDescription</name></member>
      <member refid="class_usd_property_1a0ad1f6f9e132e54b4c3fe32f9f962436" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetDisplayGroup</name></member>
      <member refid="class_usd_object_1afea773af9042346906dbd1226d704aeb" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetDisplayName</name></member>
      <member refid="class_usd_object_1afbeb96db494ea5fa795d937e532083c9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetDocumentation</name></member>
      <member refid="class_usd_object_1ad2d76f736733f3ad51aa1ea1df6f4d44" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetMetadata</name></member>
      <member refid="class_usd_object_1af114545bd56cd7619e7d4f2f884e4128" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetMetadata</name></member>
      <member refid="class_usd_object_1aba47c41ec8cc536290c04e219f12589c" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1a3bdf70a1d4a8754a0cb51cddab11b299" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1ae57e12beedf10c423e11c5b889343f6d" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetName</name></member>
      <member refid="class_usd_property_1a914ef5e6cffe6c3c85f7b1085bea0cf2" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetNamespace</name></member>
      <member refid="class_usd_object_1aa5d32fe69eb9f41ff16222ce8458f67e" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetNamespaceDelimiter</name></member>
      <member refid="class_usd_property_1aa7ca9f249313195de824478cbebc8554" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetNestedDisplayGroups</name></member>
      <member refid="class_usd_attribute_1adb2e41f8b3e68d9acbbb05918ee9fbd9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetNumTimeSamples</name></member>
      <member refid="class_usd_object_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetPath</name></member>
      <member refid="class_usd_object_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetPrim</name></member>
      <member refid="class_usd_object_1ae980898ec578c6f8082717ceac44a11e" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetPrimPath</name></member>
      <member refid="class_usd_property_1a2159d3d651cd66e4fb1c724be90ed5e0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetPropertyStack</name></member>
      <member refid="class_usd_property_1af744264b3c104a86d28948b26af7060a" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetPropertyStackWithLayerOffsets</name></member>
      <member refid="class_usd_attribute_1a261b519c81d4108c63922819ac5a9e10" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetResolveInfo</name></member>
      <member refid="class_usd_attribute_1a5f609a61f87e9df91e335644c97ee9ab" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetResolveInfo</name></member>
      <member refid="class_usd_attribute_1a1457c5b08b8c04e348e74842f2fa3e15" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetRoleName</name></member>
      <member refid="class_usd_object_1acbf11fd10a72dbc827b2f3738d2edfde" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetStage</name></member>
      <member refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_attribute_1a81ff07cc76cab8a0efd51b8938b9a124" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetTypeName</name></member>
      <member refid="class_usd_attribute_1a6187801e648b03d584d0bf2c3d18aeec" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetUnionedTimeSamples</name></member>
      <member refid="class_usd_attribute_1a63885479b8152704ee4d724a32b58d9d" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetUnionedTimeSamplesInInterval</name></member>
      <member refid="class_usd_attribute_1a79655ab3c82828093c685a1582d5e4bc" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>GetVariability</name></member>
      <member refid="class_usd_object_1aac2bfbc79842758d55ad739f471ff437" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAssetInfo</name></member>
      <member refid="class_usd_object_1a4f337c0c1709d3e161a8ff34f46eb7e5" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAssetInfoKey</name></member>
      <member refid="class_usd_object_1af05106a278e314f85483651af43e8f68" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredAssetInfo</name></member>
      <member refid="class_usd_object_1a7cc57b254d41d8f09f95b8621f238e49" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredAssetInfoKey</name></member>
      <member refid="class_usd_attribute_1a828cbae7d4d6c6f9f220307b6b81d5cf" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredConnections</name></member>
      <member refid="class_usd_object_1afe9a33d79276073db9dbc712861c3aa0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredCustomData</name></member>
      <member refid="class_usd_object_1a0b5df6ddc5f201cc3e42709b8949bb9c" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredCustomDataKey</name></member>
      <member refid="class_usd_property_1aa6ff8f0c0c16e9550e4e779e345b5343" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredDisplayGroup</name></member>
      <member refid="class_usd_object_1a6af100fedb961a5952b62a94bc8e725b" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredDisplayName</name></member>
      <member refid="class_usd_object_1ab0e3e800ab9fdaf480b767a225208767" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredDocumentation</name></member>
      <member refid="class_usd_object_1a904b990143e4b62ac64e3d1ebeaf5bdc" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredHidden</name></member>
      <member refid="class_usd_object_1a37211404a939811e841d90c65cd19999" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredMetadata</name></member>
      <member refid="class_usd_object_1a20a01b0dd0dd51f9439b6a3a231c76ef" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredMetadataDictKey</name></member>
      <member refid="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredValue</name></member>
      <member refid="class_usd_attribute_1a5af0f9735689c7dbf67a6a72da967666" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasAuthoredValueOpinion</name></member>
      <member refid="class_usd_attribute_1aadd967940959ca70d159789141db49a1" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasColorSpace</name></member>
      <member refid="class_usd_object_1ae3d80901c17a644af30bdef5c265580c" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasCustomData</name></member>
      <member refid="class_usd_object_1a2de3d809c116fe60c3646d90dcbba87f" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasCustomDataKey</name></member>
      <member refid="class_usd_attribute_1ab2d1fe152bf22c9ca8fe1250ec9b77c0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasFallbackValue</name></member>
      <member refid="class_usd_object_1ae2d99fd05dbc39c2d9746fe639c24825" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasMetadata</name></member>
      <member refid="class_usd_object_1a911c19d77fe0552877918517818e7399" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasMetadataDictKey</name></member>
      <member refid="class_usd_attribute_1a7d33522bff62860c930f407afdada858" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>HasValue</name></member>
      <member refid="class_usd_object_1a7152c172b8551a1e222bf446ce7689fd" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Is</name></member>
      <member refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsAuthored</name></member>
      <member refid="class_usd_property_1aedb04011aab7cb14ef71e6e7933129bd" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsAuthoredAt</name></member>
      <member refid="class_usd_property_1ad0ffcc4c9b780ba8f6dd5a92746c0059" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsCustom</name></member>
      <member refid="class_usd_property_1a409637b99e0b5b487b9e7d1d2016dbfc" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsDefined</name></member>
      <member refid="class_usd_object_1aaccbe79a26ceada03ab81918b30a383e" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsHidden</name></member>
      <member refid="class_usd_object_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>IsValid</name></member>
      <member refid="class_usd_object_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>operator bool</name></member>
      <member refid="class_usd_attribute_1a659302856df8727e408ae94896b1e137" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>RemoveConnection</name></member>
      <member refid="class_usd_attribute_1a7fd0957eecddb7cfcd222cccd51e23e6" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Set</name></member>
      <member refid="class_usd_attribute_1a151e6fde58bbd911da8322911a3c0079" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Set</name></member>
      <member refid="class_usd_attribute_1a5de2a2a51debc1f3c8f3e671a5776743" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>Set</name></member>
      <member refid="class_usd_object_1acd1183e9097ec5de924a87b084bb6d08" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetAssetInfo</name></member>
      <member refid="class_usd_object_1a2d4070d8ad13d6880deb6fcdb6679183" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetAssetInfoByKey</name></member>
      <member refid="class_usd_attribute_1ab7003182fc7e31d5ee5be80ee518edbe" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetColorSpace</name></member>
      <member refid="class_usd_attribute_1a744a17d080ea0257a1a59c8a0054cf68" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetConnections</name></member>
      <member refid="class_usd_property_1a3092786289fbc8cf2c3c0df08296c9e9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetCustom</name></member>
      <member refid="class_usd_object_1ac4f24685000b88fbdf783de2b1546995" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetCustomData</name></member>
      <member refid="class_usd_object_1abdcc93cd6a4dd8ad2bbe2134316ad836" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetCustomDataByKey</name></member>
      <member refid="class_usd_property_1a66724c4a721e156a88f9262694b86a67" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetDisplayGroup</name></member>
      <member refid="class_usd_object_1a89d396665875d4d4a88b5ecb0a22acb0" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetDisplayName</name></member>
      <member refid="class_usd_object_1a207a3fac40b4bd2dca8e9bce07d398e9" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetDocumentation</name></member>
      <member refid="class_usd_object_1a0e3d2a1a0e00d5e4ba2ba8aad555d593" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetHidden</name></member>
      <member refid="class_usd_object_1a1a5325c3bfad050926f03f867a803c03" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetMetadata</name></member>
      <member refid="class_usd_object_1abccca1c487755a7f08e6e4b042d39ede" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetMetadata</name></member>
      <member refid="class_usd_object_1a7f3b367075ca8d6bba9fbf3636183ff3" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1a0c04b54500b5b6d5ef0e8aca66282770" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_property_1ad136e193894e58ad6d46f29f9210379b" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetNestedDisplayGroups</name></member>
      <member refid="class_usd_attribute_1a57aaffd881c108ddcc35537c2ec7e7d5" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetTypeName</name></member>
      <member refid="class_usd_attribute_1a5d5b05c4359aab959e717bad50f10aeb" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SetVariability</name></member>
      <member refid="class_usd_property_1a7253ab8dc19d4e7540b49b70bcc82ff6" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>SplitName</name></member>
      <member refid="class_usd_attribute_1afa686d666d8d620893f72d914ab1aa6b" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdAttribute</name></member>
      <member refid="class_usd_attribute_1ab0dddf04856c3e879ee17660cecded5e" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdAttribute</name></member>
      <member refid="class_usd_attribute_1a7c5c32e36c518fac6c5ac5e2bc44fd62" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdAttribute</name></member>
      <member refid="class_usd_attribute_1aacf3a34e9976aa79c506135cb10ea20d" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a385fde82261ce94db08ca9b4d53966ab" prot="public" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdAttribute</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a16bdb9fdb779ddaa849433d5c029a2a5" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdAttribute</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1adc7d0f32c2146c7ed23416283a39e991" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdAttribute</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a2331471890f65208bdef3fa70d77fd16" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdAttribute</scope><name>UsdObject</name></member>
      <member refid="class_usd_attribute_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdPrim</name></member>
      <member refid="class_usd_attribute_1a33c96f0e87ad959b22e24912e63a33e7" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdPrim_AttrConnectionFinder</name></member>
      <member refid="class_usd_property_1a62328a1b3ff6c104338d4a4aa813b716" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdProperty</name></member>
      <member refid="class_usd_property_1ad6896705d65d50b04ceaba59ba9c71d8" prot="protected" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdProperty</name></member>
      <member refid="class_usd_attribute_1ad62730bb9bc2e7bab49b4a5c64a2c249" prot="private" virt="non-virtual"><scope>UsdAttribute</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_attribute_1adc2ce35114eb530bfa1d4b46c3d8fabc" prot="public" virt="non-virtual"><scope>UsdAttribute</scope><name>ValueMightBeTimeVarying</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
