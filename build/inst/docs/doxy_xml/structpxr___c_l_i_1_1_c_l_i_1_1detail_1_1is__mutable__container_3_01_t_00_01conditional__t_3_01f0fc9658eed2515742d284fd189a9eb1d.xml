<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__mutable__container_3_01_t_00_01conditional__t_3_01f0fc9658eed2515742d284fd189a9eb1d" kind="struct" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::detail::is_mutable_container&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type, decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().clear()), decltype(std::declval&lt; T &gt;().insert(std::declval&lt; decltype(std::declval&lt; T &gt;().end())&gt;(), std::declval&lt; const typename T::value_type &amp; &gt;()))&gt;, void &gt; &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">conditional_t&lt; std::is_constructible&lt; T, std::string &gt;::value, std::false_type, std::true_type &gt;</basecompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>type trait to test if a type is a mutable container meaning it has a value_type, it has an iterator, a clear, and end methods and an insert function. </para>
    </briefdescription>
    <detaileddescription>
<para>And for our purposes we exclude std::string and types that can be constructed from a std::string </para>
    </detaileddescription>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1186" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1177" bodyend="1186"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
