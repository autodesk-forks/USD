<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_hd_buffer_spec" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdBufferSpec</compoundname>
    <includes refid="buffer_spec_8h" local="no">bufferSpec.h</includes>
    <innerclass refid="struct_hd_buffer_spec_1_1_hash_functor" prot="public">HdBufferSpec::HashFunctor</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_hd_buffer_spec_1adcb40c34d43dc0e96d1da2000f43449c" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="119" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_hd_buffer_spec_1a8008de1455698ac5427857507ee1a29f" prot="public" static="no" mutable="no">
        <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref></type>
        <definition>HdTupleType tupleType</definition>
        <argsstring></argsstring>
        <name>tupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="120" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_hd_buffer_spec_1a9b815aafa8f95b365d45c2b974e5dd40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HdBufferSpec</definition>
        <argsstring>(TfToken const &amp;name, HdTupleType tupleType)</argsstring>
        <name>HdBufferSpec</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref></type>
          <declname>tupleType</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="55" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="55" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1ac13e2d32aa20334a9719f52eaab22fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API size_t</type>
        <definition>HD_API size_t Hash</definition>
        <argsstring>() const</argsstring>
        <name>Hash</name>
        <briefdescription>
<para>Return a size_t hash for this spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a5099beaef81f1f0192bebf2c40bcf6b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(HdBufferSpec const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="struct_hd_buffer_spec" kindref="compound">HdBufferSpec</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality checks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="106" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a722b0dda5fd48b7010d8e2e7e7ed9850" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(HdBufferSpec const &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="struct_hd_buffer_spec" kindref="compound">HdBufferSpec</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="109" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a6032b3544cfc1a0138380b4af02f26f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(HdBufferSpec const &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="struct_hd_buffer_spec" kindref="compound">HdBufferSpec</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Ordering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="114" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="114" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_hd_buffer_spec_1ac901c7519cecbf8de81d8e4daee050b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void GetBufferSpecs</definition>
        <argsstring>(T const &amp;sources, HdBufferSpecVector *bufferSpecs)</argsstring>
        <name>GetBufferSpecs</name>
        <param>
          <type>T const &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>HdBufferSpecVector *</type>
          <declname>bufferSpecs</declname>
        </param>
        <briefdescription>
<para>Util function for adding buffer specs of sources into bufferspecs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="60" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a0cf7dbf477c45278720dafe5226240be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>static HD_API bool IsSubset</definition>
        <argsstring>(HdBufferSpecVector const &amp;subset, HdBufferSpecVector const &amp;superset)</argsstring>
        <name>IsSubset</name>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>subset</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>superset</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>subset</computeroutput> is a subset of <computeroutput>superset</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty set is considered a valid subset of the superset. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a5c6d1963836685661724c779c10b6230" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdBufferSpecVector</type>
        <definition>static HD_API HdBufferSpecVector ComputeUnion</definition>
        <argsstring>(HdBufferSpecVector const &amp;spec1, HdBufferSpecVector const &amp;spec2)</argsstring>
        <name>ComputeUnion</name>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>spec1</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>spec2</declname>
        </param>
        <briefdescription>
<para>Returns union set of <computeroutput>spec1</computeroutput> and <computeroutput>spec2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Duplicated entries are uniquified. The order of items in spec1 and spec2 are preserved relative to themselves respectively in the result, with items in spec1 appearing first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a3eda23812b9d31157b23ded3428b90de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdBufferSpecVector</type>
        <definition>static HD_API HdBufferSpecVector ComputeDifference</definition>
        <argsstring>(HdBufferSpecVector const &amp;spec1, HdBufferSpecVector const &amp;spec2)</argsstring>
        <name>ComputeDifference</name>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>spec1</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>spec2</declname>
        </param>
        <briefdescription>
<para>Returns difference set of <computeroutput>spec1</computeroutput> and <computeroutput>spec2</computeroutput>, i.e., entries in spec1 that are not in spec2. </para>
        </briefdescription>
        <detaileddescription>
<para>Duplicated entries are uniquified. The order of items in spec1 is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_buffer_spec_1a59bc86b2575b462e807898ee418bb257" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>static HD_API void Dump</definition>
        <argsstring>(HdBufferSpecVector const &amp;specs)</argsstring>
        <name>Dump</name>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>specs</declname>
        </param>
        <briefdescription>
<para>Debug output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/bufferSpec.h" line="92" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes each named resource of buffer array. </para>
    </briefdescription>
    <detaileddescription>
<para>This specifies the buffer&apos;s value type as <ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref>, which specifies the value type, number of components, and number of array entries (which may be 1).</para>
<para>for example: HdBufferSpecVector 0: name = points, tupleType = {HdTypeFloatVec3, 1} 1: name = normals, tupleType = {HdTypeFloatVec3, 1} 2: name = colors, tupleType = {HdTypeFloatVec3, 1} </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1624">
        <label>HdTupleType</label>
        <link refid="struct_hd_tuple_type"/>
      </node>
      <node id="1623">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
      <node id="1622">
        <label>HdBufferSpec</label>
        <link refid="struct_hd_buffer_spec"/>
        <childnode refid="1623" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="1624" relation="usage">
          <edgelabel>tupleType</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hd/bufferSpec.h" line="53" column="1" bodyfile="pxr/imaging/hd/bufferSpec.h" bodystart="53" bodyend="121"/>
    <listofallmembers>
      <member refid="struct_hd_buffer_spec_1a3eda23812b9d31157b23ded3428b90de" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>ComputeDifference</name></member>
      <member refid="struct_hd_buffer_spec_1a5c6d1963836685661724c779c10b6230" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>ComputeUnion</name></member>
      <member refid="struct_hd_buffer_spec_1a59bc86b2575b462e807898ee418bb257" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>Dump</name></member>
      <member refid="struct_hd_buffer_spec_1ac901c7519cecbf8de81d8e4daee050b7" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>GetBufferSpecs</name></member>
      <member refid="struct_hd_buffer_spec_1ac13e2d32aa20334a9719f52eaab22fad" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>Hash</name></member>
      <member refid="struct_hd_buffer_spec_1a9b815aafa8f95b365d45c2b974e5dd40" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>HdBufferSpec</name></member>
      <member refid="struct_hd_buffer_spec_1a0cf7dbf477c45278720dafe5226240be" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>IsSubset</name></member>
      <member refid="struct_hd_buffer_spec_1adcb40c34d43dc0e96d1da2000f43449c" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>name</name></member>
      <member refid="struct_hd_buffer_spec_1a722b0dda5fd48b7010d8e2e7e7ed9850" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>operator !=</name></member>
      <member refid="struct_hd_buffer_spec_1a6032b3544cfc1a0138380b4af02f26f2" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>operator&lt;</name></member>
      <member refid="struct_hd_buffer_spec_1a5099beaef81f1f0192bebf2c40bcf6b3" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>operator==</name></member>
      <member refid="struct_hd_buffer_spec_1a8008de1455698ac5427857507ee1a29f" prot="public" virt="non-virtual"><scope>HdBufferSpec</scope><name>tupleType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
