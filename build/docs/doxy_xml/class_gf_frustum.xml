<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_frustum" kind="class" language="C++" prot="public">
    <compoundname>GfFrustum</compoundname>
    <includes refid="frustum_8h" local="no">frustum.h</includes>
      <sectiondef kind="user-defined">
      <header>Value setting and access</header>
      <description><para>The methods in this group set and access the values that are used to define a frustum. </para>
</description>
      <memberdef kind="function" id="class_gf_frustum_1a6f010b46bbaad6e147ce2150b0441f3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPosition</definition>
        <argsstring>(const GfVec3d &amp;position)</argsstring>
        <name>SetPosition</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Sets the position of the frustum in world space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="228" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a38abaaddcd3540aa003a77ca44eef227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetPosition</definition>
        <argsstring>() const</argsstring>
        <name>GetPosition</name>
        <briefdescription>
<para>Returns the position of the frustum in world space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="234" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ad1ac72a331a5ac590f411b45a7c1ac87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRotation</definition>
        <argsstring>(const GfRotation &amp;rotation)</argsstring>
        <name>SetRotation</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
<para>Sets the orientation of the frustum in world space as a rotation to apply to the default frame: looking along the -z axis with the +y axis as &quot;up&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="241" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1aea848c38adf4fde97f02e6864d31e586" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>const GfRotation&amp; GetRotation</definition>
        <argsstring>() const</argsstring>
        <name>GetRotation</name>
        <briefdescription>
<para>Returns the orientation of the frustum in world space as a rotation to apply to the -z axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="248" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ac40348c2625121cf62c7be2996a97cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetPositionAndRotationFromMatrix</definition>
        <argsstring>(const GfMatrix4d &amp;camToWorldXf)</argsstring>
        <name>SetPositionAndRotationFromMatrix</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>camToWorldXf</declname>
        </param>
        <briefdescription>
<para>Sets the position and rotation of the frustum from a camera matrix (always from a y-Up camera). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting frustum&apos;s transform will always represent a right-handed and orthonormal coordinate sytem (scale, shear, and projection are removed from the given <computeroutput>camToWorldXf</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ac962edf7ec228e906f93557b2af4d147" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetWindow</definition>
        <argsstring>(const GfRange2d &amp;window)</argsstring>
        <name>SetWindow</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Sets the window rectangle in the reference plane that defines the left, right, top, and bottom planes of the frustum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="261" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a093c816e1a3a797456f275f0a6949467" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; GetWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetWindow</name>
        <briefdescription>
<para>Returns the window rectangle in the reference plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="267" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a2ed08eb00ae4afed3180eaddb4468190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetNearFar</definition>
        <argsstring>(const GfRange1d &amp;nearFar)</argsstring>
        <name>SetNearFar</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>nearFar</declname>
        </param>
        <briefdescription>
<para>Sets the near/far interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="277" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ab1ac301d9db9c3ca04cc009fa63373d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; GetNearFar</definition>
        <argsstring>() const</argsstring>
        <name>GetNearFar</name>
        <briefdescription>
<para>Returns the near/far interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="283" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a211d6a2a5e57ce4634a9a7bcfe58f225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetViewDistance</definition>
        <argsstring>(double viewDistance)</argsstring>
        <name>SetViewDistance</name>
        <param>
          <type>double</type>
          <declname>viewDistance</declname>
        </param>
        <briefdescription>
<para>Sets the view distance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="288" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a5b3b37fe776c130c43d1328d8a3233c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetViewDistance</definition>
        <argsstring>() const</argsstring>
        <name>GetViewDistance</name>
        <briefdescription>
<para>Returns the view distance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="293" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a57f6404ad6358eac011d74977f992e9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetProjectionType</definition>
        <argsstring>(GfFrustum::ProjectionType projectionType)</argsstring>
        <name>SetProjectionType</name>
        <param>
          <type><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" kindref="member">GfFrustum::ProjectionType</ref></type>
          <declname>projectionType</declname>
        </param>
        <briefdescription>
<para>Sets the projection type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="298" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a5c1d81269960c803bb8d20d183cc16d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" kindref="member">GfFrustum::ProjectionType</ref></type>
        <definition>GfFrustum::ProjectionType GetProjectionType</definition>
        <argsstring>() const</argsstring>
        <name>GetProjectionType</name>
        <briefdescription>
<para>Returns the projection type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="304" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a05ca262684bc9448154d3077112995e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double GetReferencePlaneDepth</definition>
        <argsstring>()</argsstring>
        <name>GetReferencePlaneDepth</name>
        <briefdescription>
<para>Returns the depth of the reference plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="272" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="272" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Convenience methods</header>
      <description><para>The methods in this group allow the frustum&apos;s data to be accessed and modified in terms of different representations that may be more convenient for certain applications. </para>
</description>
      <memberdef kind="function" id="class_gf_frustum_1a37a99725a5ee0e3b2b5280e83835ee78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetPerspective</definition>
        <argsstring>(double fieldOfViewHeight, double aspectRatio, double nearDistance, double farDistance)</argsstring>
        <name>SetPerspective</name>
        <param>
          <type>double</type>
          <declname>fieldOfViewHeight</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nearDistance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>farDistance</declname>
        </param>
        <briefdescription>
<para>Sets up the frustum in a manner similar to <computeroutput>gluPerspective()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It sets the projection type to <computeroutput><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" kindref="member">GfFrustum::Perspective</ref></computeroutput> and sets the window specification so that the resulting symmetric frustum encloses an angle of <computeroutput>fieldOfViewHeight</computeroutput> degrees in the vertical direction, with <computeroutput>aspectRatio</computeroutput> used to figure the angle in the horizontal direction. The near and far distances are specified as well. The window coordinates are computed as: <programlisting><codeline><highlight class="normal">top<sp/><sp/><sp/><sp/>=<sp/>tan(fieldOfViewHeight<sp/>/<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">bottom<sp/>=<sp/>-top</highlight></codeline>
<codeline><highlight class="normal">right<sp/><sp/>=<sp/>top<sp/>*<sp/>aspectRatio</highlight></codeline>
<codeline><highlight class="normal">left<sp/><sp/><sp/>=<sp/>-right</highlight></codeline>
<codeline><highlight class="normal">near<sp/><sp/><sp/>=<sp/>nearDistance</highlight></codeline>
<codeline><highlight class="normal">far<sp/><sp/><sp/><sp/>=<sp/>farDistance</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a1c9f125875145fb6f74fa82fe38e360a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetPerspective</definition>
        <argsstring>(double fieldOfView, bool isFovVertical, double aspectRatio, double nearDistance, double farDistance)</argsstring>
        <name>SetPerspective</name>
        <param>
          <type>double</type>
          <declname>fieldOfView</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFovVertical</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nearDistance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>farDistance</declname>
        </param>
        <briefdescription>
<para>Sets up the frustum in a manner similar to gluPerspective(). </para>
        </briefdescription>
        <detaileddescription>
<para>It sets the projection type to <computeroutput><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" kindref="member">GfFrustum::Perspective</ref></computeroutput> and sets the window specification so that:</para>
<para>If <emphasis>isFovVertical</emphasis> is true, the resulting symmetric frustum encloses an angle of <computeroutput>fieldOfView</computeroutput> degrees in the vertical direction, with <computeroutput>aspectRatio</computeroutput> used to figure the angle in the horizontal direction.</para>
<para>If <emphasis>isFovVertical</emphasis> is false, the resulting symmetric frustum encloses an angle of <computeroutput>fieldOfView</computeroutput> degrees in the horizontal direction, with <computeroutput>aspectRatio</computeroutput> used to figure the angle in the vertical direction.</para>
<para>The near and far distances are specified as well. The window coordinates are computed as follows:</para>
<para><itemizedlist>
<listitem><para>if isFovVertical: </para>
</listitem>
<listitem><para>top = tan(fieldOfView / 2) </para>
</listitem>
<listitem><para>right = top * aspectRatio </para>
</listitem>
<listitem><para>if NOT isFovVertical: </para>
</listitem>
<listitem><para>right = tan(fieldOfView / 2) </para>
</listitem>
<listitem><para>top = right / aspectRation </para>
</listitem>
<listitem><para>bottom = -top </para>
</listitem>
<listitem><para>left = -right </para>
</listitem>
<listitem><para>near = nearDistance </para>
</listitem>
<listitem><para>far = farDistance </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ab7d6fc1da5da476ad820461df1f1256a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool GetPerspective</definition>
        <argsstring>(double *fieldOfViewHeight, double *aspectRatio, double *nearDistance, double *farDistance) const</argsstring>
        <name>GetPerspective</name>
        <param>
          <type>double *</type>
          <declname>fieldOfViewHeight</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nearDistance</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>farDistance</declname>
        </param>
        <briefdescription>
<para>Returns the current frustum in the format used by <computeroutput><ref refid="class_gf_frustum_1a37a99725a5ee0e3b2b5280e83835ee78" kindref="member">SetPerspective()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current frustum is not a perspective projection, this returns <computeroutput>false</computeroutput> and leaves the parameters untouched. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a7d81fdd9c3824131ac8d843b3be7c141" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool GetPerspective</definition>
        <argsstring>(bool isFovVertical, double *fieldOfView, double *aspectRatio, double *nearDistance, double *farDistance) const</argsstring>
        <name>GetPerspective</name>
        <param>
          <type>bool</type>
          <declname>isFovVertical</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fieldOfView</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nearDistance</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>farDistance</declname>
        </param>
        <briefdescription>
<para>Returns the current frustum in the format used by <computeroutput><ref refid="class_gf_frustum_1a37a99725a5ee0e3b2b5280e83835ee78" kindref="member">SetPerspective()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current frustum is not a perspective projection, this returns <computeroutput>false</computeroutput> and leaves the parameters untouched. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a7244df09e4c9e9922472e3a450c90cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetFOV</definition>
        <argsstring>(bool isFovVertical=false)</argsstring>
        <name>GetFOV</name>
        <param>
          <type>bool</type>
          <declname>isFovVertical</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the horizontal or vertical fov of the frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>The fov of the frustum is not necessarily the same value as displayed in the viewer. The displayed fov is a function of the focal length or FOV avar. The frustum&apos;s fov may be different due to things like lens breathing.</para>
<para>If the frustum is not of type <computeroutput><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" kindref="member">GfFrustum::Perspective</ref></computeroutput>, the returned FOV will be 0.0.</para>
<para><simplesect kind="note"><para>The default value for <computeroutput>isFovVertical</computeroutput> is false so calling <computeroutput>GetFOV</computeroutput> without an argument will return the horizontal field of view which is compatible with menv2x&apos;s old <ref refid="class_gf_frustum_1a7244df09e4c9e9922472e3a450c90cfb" kindref="member">GfFrustum::GetFOV</ref> routine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a859bd00de378f6d50b8eea3297644fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetOrthographic</definition>
        <argsstring>(double left, double right, double bottom, double top, double nearPlane, double farPlane)</argsstring>
        <name>SetOrthographic</name>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type>double</type>
          <declname>right</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nearPlane</declname>
        </param>
        <param>
          <type>double</type>
          <declname>farPlane</declname>
        </param>
        <briefdescription>
<para>Sets up the frustum in a manner similar to <computeroutput>glOrtho()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the projection to <computeroutput><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ac130c48aea11ca5aff222ee3e75ab9a9" kindref="member">GfFrustum::Orthographic</ref></computeroutput> and sets the window and near/far specifications based on the given values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a60594921083010977694c29eec40856e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool GetOrthographic</definition>
        <argsstring>(double *left, double *right, double *bottom, double *top, double *nearPlane, double *farPlane) const</argsstring>
        <name>GetOrthographic</name>
        <param>
          <type>double *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>right</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nearPlane</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>farPlane</declname>
        </param>
        <briefdescription>
<para>Returns the current frustum in the format used by <computeroutput><ref refid="class_gf_frustum_1a859bd00de378f6d50b8eea3297644fba" kindref="member">SetOrthographic()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the current frustum is not an orthographic projection, this returns <computeroutput>false</computeroutput> and leaves the parameters untouched. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1afe5d5191e317af93360ed25b7b5a4cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void FitToSphere</definition>
        <argsstring>(const GfVec3d &amp;center, double radius, double slack=0.0)</argsstring>
        <name>FitToSphere</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>slack</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Modifies the frustum to tightly enclose a sphere with the given center and radius, using the current view direction. </para>
        </briefdescription>
        <detaileddescription>
<para>The planes of the frustum are adjusted as necessary. The given amount of slack is added to the sphere&apos;s radius is used around the sphere to avoid boundary problems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a8722acb4240370f38e5b943ac887ebc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
        <definition>GF_API GfFrustum&amp; Transform</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transforms the frustum by the given matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The transformation matrix is applied as follows: the position and the direction vector are transformed with the given matrix. Then the length of the new direction vector is used to rescale the near and far plane and the view distance. Finally, the points that define the reference plane are transformed by the matrix. This method assures that the frustum will not be sheared or perspective-projected.</para>
<para><simplesect kind="note"><para>Note that this definition means that the transformed frustum does not preserve scales very well. Do <emphasis>not</emphasis> use this function to transform a frustum that is to be used for precise operations such as intersection testing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ab8d65ff62357d5187f1cff3f4edb8e9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d ComputeViewDirection</definition>
        <argsstring>() const</argsstring>
        <name>ComputeViewDirection</name>
        <briefdescription>
<para>Returns the normalized world-space view direction vector, which is computed by rotating the -z axis by the frustum&apos;s rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a7ea29a94b767cf16fe2ef10b535f2a71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d ComputeUpVector</definition>
        <argsstring>() const</argsstring>
        <name>ComputeUpVector</name>
        <briefdescription>
<para>Returns the normalized world-space up vector, which is computed by rotating the y axis by the frustum&apos;s rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ad5d4b0f9c7c84ef70cd33a86c94de61c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void ComputeViewFrame</definition>
        <argsstring>(GfVec3d *side, GfVec3d *up, GfVec3d *view) const</argsstring>
        <name>ComputeViewFrame</name>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <declname>up</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
<para>Computes the view frame defined by this frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>The frame consists of the view direction, up vector and side vector, as shown in this diagram.</para>
<para><programlisting><codeline><highlight class="normal">up</highlight></codeline>
<codeline><highlight class="normal">^<sp/><sp/><sp/>^</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>/<sp/></highlight></codeline>
<codeline><highlight class="normal">|<sp/>/<sp/>view</highlight></codeline>
<codeline><highlight class="normal">|/</highlight></codeline>
<codeline><highlight class="normal">+-<sp/>-<sp/>-<sp/>-<sp/>&gt;<sp/>side</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ad06e7f6dc264b66f86497dadd117e6d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d ComputeLookAtPoint</definition>
        <argsstring>() const</argsstring>
        <name>ComputeLookAtPoint</name>
        <briefdescription>
<para>Computes and returns the world-space look-at point from the eye point (position), view direction (rotation), and view distance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a9909af7d8be0f78cb3bc5b33fba8f350" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GF_API GfMatrix4d ComputeViewMatrix</definition>
        <argsstring>() const</argsstring>
        <name>ComputeViewMatrix</name>
        <briefdescription>
<para>Returns a matrix that represents the viewing transformation for this frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, it returns the matrix that converts points from world space to eye (frustum) space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1add8604ffa563c457fb7ed6aec75fdef3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GF_API GfMatrix4d ComputeViewInverse</definition>
        <argsstring>() const</argsstring>
        <name>ComputeViewInverse</name>
        <briefdescription>
<para>Returns a matrix that represents the inverse viewing transformation for this frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, it returns the matrix that converts points from eye (frustum) space to world space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ac2fdadffac3e7b07218a17ac2b81ff6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GF_API GfMatrix4d ComputeProjectionMatrix</definition>
        <argsstring>() const</argsstring>
        <name>ComputeProjectionMatrix</name>
        <briefdescription>
<para>Returns a GL-style projection matrix corresponding to the frustum&apos;s projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a13bd6b600b8c24e515e94fe65136d01f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double ComputeAspectRatio</definition>
        <argsstring>() const</argsstring>
        <name>ComputeAspectRatio</name>
        <briefdescription>
<para>Returns the aspect ratio of the frustum, defined as the width of the window divided by the height. </para>
        </briefdescription>
        <detaileddescription>
<para>If the height is zero or negative, this returns 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a1db1ddfaacbda595a21899dd60eff90e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::vector&lt; <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &gt;</type>
        <definition>GF_API std::vector&lt;GfVec3d&gt; ComputeCorners</definition>
        <argsstring>() const</argsstring>
        <name>ComputeCorners</name>
        <briefdescription>
<para>Returns the world-space corners of the frustum as a vector of 8 points, ordered as: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Left bottom near </para>
</listitem>
<listitem><para>Right bottom near </para>
</listitem>
<listitem><para>Left top near </para>
</listitem>
<listitem><para>Right top near </para>
</listitem>
<listitem><para>Left bottom far </para>
</listitem>
<listitem><para>Right bottom far </para>
</listitem>
<listitem><para>Left top far </para>
</listitem>
<listitem><para>Right top far </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1aaa9d7b53176026ea87a887853ed80007" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::vector&lt; <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &gt;</type>
        <definition>GF_API std::vector&lt;GfVec3d&gt; ComputeCornersAtDistance</definition>
        <argsstring>(double d) const</argsstring>
        <name>ComputeCornersAtDistance</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the world-space corners of the intersection of the frustum with a plane parallel to the near/far plane at distance d from the apex, ordered as: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Left bottom </para>
</listitem>
<listitem><para>Right bottom </para>
</listitem>
<listitem><para>Left top </para>
</listitem>
<listitem><para>Right top In particular, it gives the partial result of ComputeCorners when given near or far distance. </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a5c7b67054fb228b1837ac5fbfc37ae1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref></type>
        <definition>GF_API GfFrustum ComputeNarrowedFrustum</definition>
        <argsstring>(const GfVec2d &amp;windowPos, const GfVec2d &amp;size) const</argsstring>
        <name>ComputeNarrowedFrustum</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>windowPos</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Returns a frustum that is a narrowed-down version of this frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>The new frustum has the same near and far planes, but the other planes are adjusted to be centered on <computeroutput>windowPos</computeroutput> with the new width and height obtained from the existing width and height by multiplying by <computeroutput>size</computeroutput>[0] and <computeroutput>size</computeroutput>[1], respectively. Finally, the new frustum is clipped against this frustum so that it is completely contained in the existing frustum.</para>
<para><computeroutput>windowPos</computeroutput> is given in normalized coords (-1 to +1 in both dimensions). <computeroutput>size</computeroutput> is given as a scalar (0 to 1 in both dimensions).</para>
<para>If the <computeroutput>windowPos</computeroutput> or <computeroutput>size</computeroutput> given is outside these ranges, it may result in returning a collapsed frustum.</para>
<para>This method is useful for computing a volume to use for interactive picking. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a32c53c1680358da6e749541b72d50530" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref></type>
        <definition>GF_API GfFrustum ComputeNarrowedFrustum</definition>
        <argsstring>(const GfVec3d &amp;worldPoint, const GfVec2d &amp;size) const</argsstring>
        <name>ComputeNarrowedFrustum</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>worldPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Returns a frustum that is a narrowed-down version of this frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>The new frustum has the same near and far planes, but the other planes are adjusted to be centered on <computeroutput>worldPoint</computeroutput> with the new width and height obtained from the existing width and height by multiplying by <computeroutput>size</computeroutput>[0] and <computeroutput>size</computeroutput>[1], respectively. Finally, the new frustum is clipped against this frustum so that it is completely contained in the existing frustum.</para>
<para><computeroutput>worldPoint</computeroutput> is given in world space coordinates. <computeroutput>size</computeroutput> is given as a scalar (0 to 1 in both dimensions).</para>
<para>If the <computeroutput>size</computeroutput> given is outside this range, it may result in returning a collapsed frustum.</para>
<para>If the <computeroutput>worldPoint</computeroutput> is at or behind the eye of the frustum, it will return a frustum equal to this frustum.</para>
<para>This method is useful for computing a volume to use for interactive picking. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1aef077b3745ea86f23e515ebea83157f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref></type>
        <definition>GF_API GfRay ComputeRay</definition>
        <argsstring>(const GfVec2d &amp;windowPos) const</argsstring>
        <name>ComputeRay</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>windowPos</declname>
        </param>
        <briefdescription>
<para>Builds and returns a <computeroutput><ref refid="class_gf_ray" kindref="compound">GfRay</ref></computeroutput> that starts at the viewpoint and extends through the given <emphasis>windowPos</emphasis> given in normalized coords (-1 to +1 in both dimensions) window position. </para>
        </briefdescription>
        <detaileddescription>
<para>Contrasted with <ref refid="class_gf_frustum_1a1eb02bacdc20ea8513e0f9d2f1888017" kindref="member">ComputePickRay()</ref>, this method returns a ray whose origin is the eyepoint, while that method returns a ray whose origin is on the near plane. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a04f574c862db2e74ea1aefc600598d42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref></type>
        <definition>GF_API GfRay ComputeRay</definition>
        <argsstring>(const GfVec3d &amp;worldSpacePos) const</argsstring>
        <name>ComputeRay</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>worldSpacePos</declname>
        </param>
        <briefdescription>
<para>Builds and returns a <computeroutput><ref refid="class_gf_ray" kindref="compound">GfRay</ref></computeroutput> that connects the viewpoint to the given 3d point in worldspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Contrasted with <ref refid="class_gf_frustum_1a1eb02bacdc20ea8513e0f9d2f1888017" kindref="member">ComputePickRay()</ref>, this method returns a ray whose origin is the eyepoint, while that method returns a ray whose origin is on the near plane. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a1eb02bacdc20ea8513e0f9d2f1888017" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref></type>
        <definition>GF_API GfRay ComputePickRay</definition>
        <argsstring>(const GfVec2d &amp;windowPos) const</argsstring>
        <name>ComputePickRay</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>windowPos</declname>
        </param>
        <briefdescription>
<para>Builds and returns a <computeroutput><ref refid="class_gf_ray" kindref="compound">GfRay</ref></computeroutput> that can be used for picking at the given normalized (-1 to +1 in both dimensions) window position. </para>
        </briefdescription>
        <detaileddescription>
<para>Contrasted with <ref refid="class_gf_frustum_1aef077b3745ea86f23e515ebea83157f5" kindref="member">ComputeRay()</ref>, that method returns a ray whose origin is the eyepoint, while this method returns a ray whose origin is on the near plane. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a8fa36babf713e1c86178ec590d3f060e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref></type>
        <definition>GF_API GfRay ComputePickRay</definition>
        <argsstring>(const GfVec3d &amp;worldSpacePos) const</argsstring>
        <name>ComputePickRay</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>worldSpacePos</declname>
        </param>
        <briefdescription>
<para>Builds and returns a <computeroutput><ref refid="class_gf_ray" kindref="compound">GfRay</ref></computeroutput> that can be used for picking that connects the viewpoint to the given 3d point in worldspace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="583" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Intersection methods</header>
      <description><para>The methods in this group implement intersection operations between this frustum and a given primitive. </para>
</description>
      <memberdef kind="function" id="class_gf_frustum_1a6beb668491bd1ccc4c771a7e66263bd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersects</definition>
        <argsstring>(const GfBBox3d &amp;bbox) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Returns true if the given axis-aligned bbox is inside or intersecting the frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, it returns false. Useful when doing picking or frustum culling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a56598085677f67f9b2423bbf34521fae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersects</definition>
        <argsstring>(const GfVec3d &amp;point) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the given point is inside or intersecting the frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, it returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a8ec74d82df96cfcadbccabea5558d734" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersects</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the line segment formed by the given points is inside or intersecting the frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, it returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1abe1bd1e6d2db1346ac5656f706900070" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Intersects</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1, const GfVec3d &amp;p2) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the triangle formed by the given points is inside or intersecting the frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, it returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a80d0b8a3b58cbebe636d097e3defd585" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>static GF_API bool IntersectsViewVolume</definition>
        <argsstring>(const GfBBox3d &amp;bbox, const GfMatrix4d &amp;vpMat)</argsstring>
        <name>IntersectsViewVolume</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>bbox</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>vpMat</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the bbox volume intersects the view volume given by the view-projection matrix, erring on the side of false positives for efficiency. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is intended for cases where a <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> is not available or when the view-projection matrix yields a view volume that is not expressable as a <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref>.</para>
<para>Because it errs on the side of false positives, it is suitable for early-out tests such as draw or intersection culling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="625" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" prot="public" static="no" strong="no">
        <type></type>
        <name>ProjectionType</name>
        <enumvalue id="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ac130c48aea11ca5aff222ee3e75ab9a9" prot="public">
          <name>Orthographic</name>
          <briefdescription>
<para>Orthographic projection. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" prot="public">
          <name>Perspective</name>
          <briefdescription>
<para>Perspective projection. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This enum is used to determine the type of projection represented by a frustum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="92" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="92" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_frustum_1a89998bb7687089e343489262185a5f37" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _position</definition>
        <argsstring></argsstring>
        <name>_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="667" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1a0ff5107d3cbc70f76f2a14d097d4671f" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation _rotation</definition>
        <argsstring></argsstring>
        <name>_rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="671" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1ada5af3a115837a29c4375ab1d4ce1767" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d _window</definition>
        <argsstring></argsstring>
        <name>_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="674" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1a2daf83c50ed85b5af73f79f1a6f6c50c" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d _nearFar</definition>
        <argsstring></argsstring>
        <name>_nearFar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="677" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1a10f3b99cf5934230a2726221cde7b3a5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _viewDistance</definition>
        <argsstring></argsstring>
        <name>_viewDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="680" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1a96ab0481c0b76adac521510801512484" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" kindref="member">ProjectionType</ref></type>
        <definition>ProjectionType _projectionType</definition>
        <argsstring></argsstring>
        <name>_projectionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="683" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_frustum_1a07afb0b03ae7799983fee1e9259a4fe0" prot="private" static="no" mutable="yes">
        <type>std::atomic&lt; std::array&lt; <ref refid="class_gf_plane" kindref="compound">GfPlane</ref>, 6 &gt; * &gt;</type>
        <definition>std::atomic&lt;std::array&lt;GfPlane, 6&gt; *&gt; _planes</definition>
        <argsstring></argsstring>
        <name>_planes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="687" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_frustum_1a4fd619ae158e6a6c9af9b446eb9db2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfFrustum</definition>
        <argsstring>()</argsstring>
        <name>GfFrustum</name>
        <briefdescription>
<para>This constructor creates an instance with default viewing parameters: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>The position is the origin. </para>
</listitem>
<listitem><para>The rotation is the identity rotation. (The view is along the -z axis, with the +y axis as &quot;up&quot;). </para>
</listitem>
<listitem><para>The window is -1 to +1 in both dimensions. </para>
</listitem>
<listitem><para>The near/far interval is (1, 10). </para>
</listitem>
<listitem><para>The view distance is 5.0. </para>
</listitem>
<listitem><para>The projection type is <computeroutput><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" kindref="member">GfFrustum::Perspective</ref></computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a8af6bddf8d3a2245fadc527cf8c4d9a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfFrustum</definition>
        <argsstring>(GfFrustum const &amp;o)</argsstring>
        <name>GfFrustum</name>
        <param>
          <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="108" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="108" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ad00b9da63511d7619da3ff0c022d6196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfFrustum</definition>
        <argsstring>(GfFrustum &amp;&amp;o) noexcept</argsstring>
        <name>GfFrustum</name>
        <param>
          <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="122" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1ad3c782caa17daf6414a87ebf61ed7396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfFrustum</definition>
        <argsstring>(const GfVec3d &amp;position, const GfRotation &amp;rotation, const GfRange2d &amp;window, const GfRange1d &amp;nearFar, GfFrustum::ProjectionType projectionType, double viewDistance=5.0)</argsstring>
        <name>GfFrustum</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>nearFar</declname>
        </param>
        <param>
          <type><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" kindref="member">GfFrustum::ProjectionType</ref></type>
          <declname>projectionType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>viewDistance</declname>
          <defval>5.0</defval>
        </param>
        <briefdescription>
<para>This constructor creates an instance with the given viewing parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a87e9622476451d167f46ba277e3555c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfFrustum</definition>
        <argsstring>(const GfMatrix4d &amp;camToWorldXf, const GfRange2d &amp;window, const GfRange1d &amp;nearFar, GfFrustum::ProjectionType projectionType, double viewDistance=5.0)</argsstring>
        <name>GfFrustum</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>camToWorldXf</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>nearFar</declname>
        </param>
        <param>
          <type><ref refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" kindref="member">GfFrustum::ProjectionType</ref></type>
          <declname>projectionType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>viewDistance</declname>
          <defval>5.0</defval>
        </param>
        <briefdescription>
<para>This constructor creates an instance from a camera matrix (always of a y-Up camera, also see SetPositionAndRotationFromMatrix) and the given viewing parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a42e7a93d80bd2e9bf187c7dc73a16211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
        <definition>GfFrustum&amp; operator=</definition>
        <argsstring>(GfFrustum const &amp;o) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="152" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="152" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1aa33e9b4c407f8d73d96b4068dfb4816f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
        <definition>GfFrustum&amp; operator=</definition>
        <argsstring>(GfFrustum &amp;&amp;o) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="174" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="174" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a3bc827cf5578ae1c3e0af8aa63b7fd38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfFrustum &amp;f) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="203" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a25f9e799f4d60352543e2d9966ca1cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfFrustum &amp;f) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="215" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a374a1953a526710a59274dec481a2da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API ~GfFrustum</definition>
        <argsstring>()</argsstring>
        <name>~GfFrustum</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="220" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_frustum_1abda3bd03fda05b7e5133799622d42c72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfFrustum &amp;f)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="191" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="191" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_frustum_1ad9c705f8e5af5c38a6e444c671474253" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void _DirtyFrustumPlanes</definition>
        <argsstring>()</argsstring>
        <name>_DirtyFrustumPlanes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a5837ad1a53213784adc2b2796114c21d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void _CalculateFrustumPlanes</definition>
        <argsstring>() const</argsstring>
        <name>_CalculateFrustumPlanes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a10afbac2defbabfbd0e71757e242ef81" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_ray" kindref="compound">GfRay</ref></type>
        <definition>GF_API GfRay _ComputePickRayOffsetToNearPlane</definition>
        <argsstring>(const GfVec3d &amp;camSpaceFrom, const GfVec3d &amp;camSpaceDir) const</argsstring>
        <name>_ComputePickRayOffsetToNearPlane</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>camSpaceFrom</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>camSpaceDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1af5595d0517d8a5ff0f4667f9ba83456b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref></type>
        <definition>GfFrustum _ComputeNarrowedFrustumSub</definition>
        <argsstring>(const GfVec2d windowPoint, const GfVec2d &amp;size) const</argsstring>
        <name>_ComputeNarrowedFrustumSub</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
          <declname>windowPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_frustum_1a8c750b3da58e91baeca76d133250e2b8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _SegmentIntersects</definition>
        <argsstring>(GfVec3d const &amp;p0, uint32_t p0Mask, GfVec3d const &amp;p1, uint32_t p1Mask) const</argsstring>
        <name>_SegmentIntersects</name>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> const &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p0Mask</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p1Mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="663" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: View frustum. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a viewing frustum in three dimensional eye space. It may represent either a parallel (orthographic) or perspective projection. One can think of the frustum as being defined by 6 boundary planes.</para>
<para>The frustum is specified using these parameters: <itemizedlist>
<listitem><para>The <emphasis>position</emphasis> of the viewpoint. </para>
</listitem>
<listitem><para>The <emphasis>rotation</emphasis> applied to the default view frame, which is looking along the -z axis with the +y axis as the &quot;up&quot; direction. </para>
</listitem>
<listitem><para>The 2D <emphasis>window</emphasis> on the reference plane that defines the left, right, top, and bottom planes of the viewing frustum, as described below. </para>
</listitem>
<listitem><para>The distances to the <emphasis>near</emphasis> and <emphasis>far</emphasis> planes. </para>
</listitem>
<listitem><para>The <emphasis>projection</emphasis> <emphasis>type</emphasis> </para>
</listitem>
<listitem><para>The view distance.</para>
</listitem>
</itemizedlist>
The window and near/far parameters combine to define the view frustum as follows. Transform the -z axis and the +y axis by the frustum rotation to get the world-space <emphasis>view</emphasis> <emphasis>direction</emphasis> and <emphasis>up</emphasis> <emphasis>direction</emphasis>. Now consider the <emphasis>reference</emphasis> <emphasis>plane</emphasis> that is perpendicular to the view direction, a distance of referencePlaneDepth from the viewpoint, and whose y axis corresponds to the up direction. The window rectangle is specified in a 2D coordinate system embedded in this plane. The origin of the coordinate system is the point at which the view direction vector intersects the plane. Therefore, the point (0,1) in this plane is found by moving 1 unit along the up direction vector in this plane. The vector from the viewpoint to the resulting point will form a 45-degree angle with the view direction.</para>
<para>The view distance is only useful for interactive applications. It can be used to compute a look at point which is useful when rotating around an object of interest. </para>
    </detaileddescription>
    <location file="pxr/base/gf/frustum.h" line="88" column="1" bodyfile="pxr/base/gf/frustum.h" bodystart="88" bodyend="688"/>
    <listofallmembers>
      <member refid="class_gf_frustum_1a5837ad1a53213784adc2b2796114c21d" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_CalculateFrustumPlanes</name></member>
      <member refid="class_gf_frustum_1af5595d0517d8a5ff0f4667f9ba83456b" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_ComputeNarrowedFrustumSub</name></member>
      <member refid="class_gf_frustum_1a10afbac2defbabfbd0e71757e242ef81" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_ComputePickRayOffsetToNearPlane</name></member>
      <member refid="class_gf_frustum_1ad9c705f8e5af5c38a6e444c671474253" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_DirtyFrustumPlanes</name></member>
      <member refid="class_gf_frustum_1a2daf83c50ed85b5af73f79f1a6f6c50c" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_nearFar</name></member>
      <member refid="class_gf_frustum_1a07afb0b03ae7799983fee1e9259a4fe0" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_planes</name></member>
      <member refid="class_gf_frustum_1a89998bb7687089e343489262185a5f37" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_position</name></member>
      <member refid="class_gf_frustum_1a96ab0481c0b76adac521510801512484" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_projectionType</name></member>
      <member refid="class_gf_frustum_1a0ff5107d3cbc70f76f2a14d097d4671f" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_rotation</name></member>
      <member refid="class_gf_frustum_1a8c750b3da58e91baeca76d133250e2b8" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_SegmentIntersects</name></member>
      <member refid="class_gf_frustum_1a10f3b99cf5934230a2726221cde7b3a5" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_viewDistance</name></member>
      <member refid="class_gf_frustum_1ada5af3a115837a29c4375ab1d4ce1767" prot="private" virt="non-virtual"><scope>GfFrustum</scope><name>_window</name></member>
      <member refid="class_gf_frustum_1a13bd6b600b8c24e515e94fe65136d01f" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeAspectRatio</name></member>
      <member refid="class_gf_frustum_1a1db1ddfaacbda595a21899dd60eff90e" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeCorners</name></member>
      <member refid="class_gf_frustum_1aaa9d7b53176026ea87a887853ed80007" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeCornersAtDistance</name></member>
      <member refid="class_gf_frustum_1ad06e7f6dc264b66f86497dadd117e6d2" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeLookAtPoint</name></member>
      <member refid="class_gf_frustum_1a5c7b67054fb228b1837ac5fbfc37ae1e" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeNarrowedFrustum</name></member>
      <member refid="class_gf_frustum_1a32c53c1680358da6e749541b72d50530" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeNarrowedFrustum</name></member>
      <member refid="class_gf_frustum_1a1eb02bacdc20ea8513e0f9d2f1888017" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputePickRay</name></member>
      <member refid="class_gf_frustum_1a8fa36babf713e1c86178ec590d3f060e" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputePickRay</name></member>
      <member refid="class_gf_frustum_1ac2fdadffac3e7b07218a17ac2b81ff6d" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeProjectionMatrix</name></member>
      <member refid="class_gf_frustum_1aef077b3745ea86f23e515ebea83157f5" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeRay</name></member>
      <member refid="class_gf_frustum_1a04f574c862db2e74ea1aefc600598d42" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeRay</name></member>
      <member refid="class_gf_frustum_1a7ea29a94b767cf16fe2ef10b535f2a71" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeUpVector</name></member>
      <member refid="class_gf_frustum_1ab8d65ff62357d5187f1cff3f4edb8e9b" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeViewDirection</name></member>
      <member refid="class_gf_frustum_1ad5d4b0f9c7c84ef70cd33a86c94de61c" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeViewFrame</name></member>
      <member refid="class_gf_frustum_1add8604ffa563c457fb7ed6aec75fdef3" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeViewInverse</name></member>
      <member refid="class_gf_frustum_1a9909af7d8be0f78cb3bc5b33fba8f350" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ComputeViewMatrix</name></member>
      <member refid="class_gf_frustum_1afe5d5191e317af93360ed25b7b5a4cb5" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>FitToSphere</name></member>
      <member refid="class_gf_frustum_1a7244df09e4c9e9922472e3a450c90cfb" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetFOV</name></member>
      <member refid="class_gf_frustum_1ab1ac301d9db9c3ca04cc009fa63373d9" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetNearFar</name></member>
      <member refid="class_gf_frustum_1a60594921083010977694c29eec40856e" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetOrthographic</name></member>
      <member refid="class_gf_frustum_1ab7d6fc1da5da476ad820461df1f1256a" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetPerspective</name></member>
      <member refid="class_gf_frustum_1a7d81fdd9c3824131ac8d843b3be7c141" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetPerspective</name></member>
      <member refid="class_gf_frustum_1a38abaaddcd3540aa003a77ca44eef227" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetPosition</name></member>
      <member refid="class_gf_frustum_1a5c1d81269960c803bb8d20d183cc16d0" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetProjectionType</name></member>
      <member refid="class_gf_frustum_1a05ca262684bc9448154d3077112995e1" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetReferencePlaneDepth</name></member>
      <member refid="class_gf_frustum_1aea848c38adf4fde97f02e6864d31e586" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetRotation</name></member>
      <member refid="class_gf_frustum_1a5b3b37fe776c130c43d1328d8a3233c6" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetViewDistance</name></member>
      <member refid="class_gf_frustum_1a093c816e1a3a797456f275f0a6949467" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GetWindow</name></member>
      <member refid="class_gf_frustum_1a4fd619ae158e6a6c9af9b446eb9db2cd" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GfFrustum</name></member>
      <member refid="class_gf_frustum_1a8af6bddf8d3a2245fadc527cf8c4d9a3" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GfFrustum</name></member>
      <member refid="class_gf_frustum_1ad00b9da63511d7619da3ff0c022d6196" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GfFrustum</name></member>
      <member refid="class_gf_frustum_1ad3c782caa17daf6414a87ebf61ed7396" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GfFrustum</name></member>
      <member refid="class_gf_frustum_1a87e9622476451d167f46ba277e3555c7" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>GfFrustum</name></member>
      <member refid="class_gf_frustum_1abda3bd03fda05b7e5133799622d42c72" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>hash_value</name></member>
      <member refid="class_gf_frustum_1a6beb668491bd1ccc4c771a7e66263bd3" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Intersects</name></member>
      <member refid="class_gf_frustum_1a56598085677f67f9b2423bbf34521fae" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Intersects</name></member>
      <member refid="class_gf_frustum_1a8ec74d82df96cfcadbccabea5558d734" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Intersects</name></member>
      <member refid="class_gf_frustum_1abe1bd1e6d2db1346ac5656f706900070" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Intersects</name></member>
      <member refid="class_gf_frustum_1a80d0b8a3b58cbebe636d097e3defd585" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>IntersectsViewVolume</name></member>
      <member refid="class_gf_frustum_1a25f9e799f4d60352543e2d9966ca1cdc" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>operator !=</name></member>
      <member refid="class_gf_frustum_1a42e7a93d80bd2e9bf187c7dc73a16211" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>operator=</name></member>
      <member refid="class_gf_frustum_1aa33e9b4c407f8d73d96b4068dfb4816f" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>operator=</name></member>
      <member refid="class_gf_frustum_1a3bc827cf5578ae1c3e0af8aa63b7fd38" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>operator==</name></member>
      <member refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ac130c48aea11ca5aff222ee3e75ab9a9" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Orthographic</name></member>
      <member refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3ad28963ad8af924a09c6ef14c97ca3a7a" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Perspective</name></member>
      <member refid="class_gf_frustum_1addbdeb0c4a9113fece681e37faca81d3" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>ProjectionType</name></member>
      <member refid="class_gf_frustum_1a2ed08eb00ae4afed3180eaddb4468190" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetNearFar</name></member>
      <member refid="class_gf_frustum_1a859bd00de378f6d50b8eea3297644fba" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetOrthographic</name></member>
      <member refid="class_gf_frustum_1a37a99725a5ee0e3b2b5280e83835ee78" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetPerspective</name></member>
      <member refid="class_gf_frustum_1a1c9f125875145fb6f74fa82fe38e360a" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetPerspective</name></member>
      <member refid="class_gf_frustum_1a6f010b46bbaad6e147ce2150b0441f3c" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetPosition</name></member>
      <member refid="class_gf_frustum_1ac40348c2625121cf62c7be2996a97cba" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetPositionAndRotationFromMatrix</name></member>
      <member refid="class_gf_frustum_1a57f6404ad6358eac011d74977f992e9b" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetProjectionType</name></member>
      <member refid="class_gf_frustum_1ad1ac72a331a5ac590f411b45a7c1ac87" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetRotation</name></member>
      <member refid="class_gf_frustum_1a211d6a2a5e57ce4634a9a7bcfe58f225" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetViewDistance</name></member>
      <member refid="class_gf_frustum_1ac962edf7ec228e906f93557b2af4d147" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>SetWindow</name></member>
      <member refid="class_gf_frustum_1a8722acb4240370f38e5b943ac887ebc4" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>Transform</name></member>
      <member refid="class_gf_frustum_1a374a1953a526710a59274dec481a2da5" prot="public" virt="non-virtual"><scope>GfFrustum</scope><name>~GfFrustum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
