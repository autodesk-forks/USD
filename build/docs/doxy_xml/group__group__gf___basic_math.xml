<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__gf___basic_math" kind="group">
    <compoundname>group_gf_BasicMath</compoundname>
    <title>Basic Mathematical Operations</title>
    <innerfile refid="interval_8h">interval.h</innerfile>
    <innerfile refid="limits_8h">limits.h</innerfile>
    <innerfile refid="gf_2math_8h">math.h</innerfile>
    <innerfile refid="multi_interval_8h">multiInterval.h</innerfile>
    <innerclass refid="class_gf_interval" prot="public">GfInterval</innerclass>
    <innerclass refid="class_gf_multi_interval" prot="public">GfMultiInterval</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__gf___basic_math_1ga5ff05b13765390efdbd28ed359f5ca08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GfIsClose</definition>
        <argsstring>(double a, double b, double epsilon)</argsstring>
        <name>GfIsClose</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> are with <computeroutput>epsilon</computeroutput> of each other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="42" column="1" bodyfile="pxr/base/gf/math.h" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga4aa1c1e218286592f7103a837eed633d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfRadiansToDegrees</definition>
        <argsstring>(double radians)</argsstring>
        <name>GfRadiansToDegrees</name>
        <param>
          <type>double</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Converts an angle in radians to degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="48" column="1" bodyfile="pxr/base/gf/math.h" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga1ee1f08880074f8c0ae9f9572305a8f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfDegreesToRadians</definition>
        <argsstring>(double degrees)</argsstring>
        <name>GfDegreesToRadians</name>
        <param>
          <type>double</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Converts an angle in degrees to radians. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="54" column="1" bodyfile="pxr/base/gf/math.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga3301f03ab0259718f0d0671abef83db9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double GfSqr</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>GfSqr</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the inner product of <computeroutput>x</computeroutput> with itself: specifically, <computeroutput>x*x</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Defined for <computeroutput>int</computeroutput>, <computeroutput>float</computeroutput>, <computeroutput>double</computeroutput>, and all <computeroutput>GfVec</computeroutput> types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="62" column="1" bodyfile="pxr/base/gf/math.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gae9b5076d20f326eb0d93aba2d45955ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GfSgn</definition>
        <argsstring>(T v)</argsstring>
        <name>GfSgn</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return the signum of <computeroutput>v</computeroutput> (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>-1, 0, or 1).</para>
<para>The type <computeroutput>T</computeroutput> must implement the &lt; and &gt; operators; the function returns zero only if value neither positive, nor negative. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="74" column="1" bodyfile="pxr/base/gf/math.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga943b024a25ad30de6c3ad876b15cd044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfSqrt</definition>
        <argsstring>(double f)</argsstring>
        <name>GfSqrt</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return sqrt(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="80" column="1" bodyfile="pxr/base/gf/math.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga4f2d1a4855d4b8911b6ad208d07a1c65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfSqrt</definition>
        <argsstring>(float f)</argsstring>
        <name>GfSqrt</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return sqrt(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="83" column="1" bodyfile="pxr/base/gf/math.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gaf4bef340d779a426dd9f3be0776f6be2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfExp</definition>
        <argsstring>(double f)</argsstring>
        <name>GfExp</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return exp(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="87" column="1" bodyfile="pxr/base/gf/math.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gad5e36b2fe6aa7557b99f579e25d722d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfExp</definition>
        <argsstring>(float f)</argsstring>
        <name>GfExp</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return exp(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="90" column="1" bodyfile="pxr/base/gf/math.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga98a4ad8cf300bc1ce294e43cde075190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfLog</definition>
        <argsstring>(double f)</argsstring>
        <name>GfLog</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return log(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="94" column="1" bodyfile="pxr/base/gf/math.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga6bea1af0a317c6debadaafaead5c6d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfLog</definition>
        <argsstring>(float f)</argsstring>
        <name>GfLog</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return log(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="97" column="1" bodyfile="pxr/base/gf/math.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga5029915a4052b2f13485a68783d5fc45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfFloor</definition>
        <argsstring>(double f)</argsstring>
        <name>GfFloor</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return floor(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="101" column="1" bodyfile="pxr/base/gf/math.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga829f19bdaef7d636d050ec64496ec121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfFloor</definition>
        <argsstring>(float f)</argsstring>
        <name>GfFloor</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return floor(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="104" column="1" bodyfile="pxr/base/gf/math.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga67a769ba20995b6deb2293c6a315aac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfCeil</definition>
        <argsstring>(double f)</argsstring>
        <name>GfCeil</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return ceil(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="108" column="1" bodyfile="pxr/base/gf/math.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga52f7d5a191d3eeb8f9d8df03bb772150" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfCeil</definition>
        <argsstring>(float f)</argsstring>
        <name>GfCeil</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return ceil(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="111" column="1" bodyfile="pxr/base/gf/math.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gacddec2f713ad66909eddbecf80d47ae9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfAbs</definition>
        <argsstring>(double f)</argsstring>
        <name>GfAbs</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return abs(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="115" column="1" bodyfile="pxr/base/gf/math.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga00edf14574567a21d053c17fefbaf0c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfAbs</definition>
        <argsstring>(float f)</argsstring>
        <name>GfAbs</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return abs(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="118" column="1" bodyfile="pxr/base/gf/math.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga4f3fb2fd3576c7b1b03063074312f287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfRound</definition>
        <argsstring>(double f)</argsstring>
        <name>GfRound</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return round(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="122" column="1" bodyfile="pxr/base/gf/math.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gac9e8892494a79e2652d815fbd18a0c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfRound</definition>
        <argsstring>(float f)</argsstring>
        <name>GfRound</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Return round(<computeroutput>f</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="125" column="1" bodyfile="pxr/base/gf/math.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga2583ff0183ea1f7d05b5c48bcb9439ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfPow</definition>
        <argsstring>(double f, double p)</argsstring>
        <name>GfPow</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return pow(<computeroutput>f</computeroutput>, <computeroutput>p</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="129" column="1" bodyfile="pxr/base/gf/math.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga231f6e809f02cf03c8efe8165296676b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfPow</definition>
        <argsstring>(float f, float p)</argsstring>
        <name>GfPow</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return pow(<computeroutput>f</computeroutput>, <computeroutput>p</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="132" column="1" bodyfile="pxr/base/gf/math.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gaecbed12e5588d4e0832335e683b8a6e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfSin</definition>
        <argsstring>(double v)</argsstring>
        <name>GfSin</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return sin(<computeroutput>v</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="136" column="1" bodyfile="pxr/base/gf/math.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gac9dd7e77aa7d2a8e47bf14bb717ffc36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfSin</definition>
        <argsstring>(float v)</argsstring>
        <name>GfSin</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return sin(<computeroutput>v</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="139" column="1" bodyfile="pxr/base/gf/math.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga4a458d83ebf26bebd394f67808f4b65a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfCos</definition>
        <argsstring>(double v)</argsstring>
        <name>GfCos</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return cos(<computeroutput>v</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="142" column="1" bodyfile="pxr/base/gf/math.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga356952a4e0b00d9fc20824ab5d77e0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfCos</definition>
        <argsstring>(float v)</argsstring>
        <name>GfCos</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return cos(<computeroutput>v</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="145" column="1" bodyfile="pxr/base/gf/math.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga92dcfc03a018b087d0147933732fff45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GfSinCos</definition>
        <argsstring>(double v, double *s, double *c)</argsstring>
        <name>GfSinCos</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Return sin(<computeroutput>v</computeroutput>) in <computeroutput>s</computeroutput> and cos(<computeroutput>v</computeroutput>) in <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="148" column="1" bodyfile="pxr/base/gf/math.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gaa82b68ae5cf295c82e5a270799d034b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GfSinCos</definition>
        <argsstring>(float v, float *s, float *c)</argsstring>
        <name>GfSinCos</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Return sin(<computeroutput>v</computeroutput>) in <computeroutput>s</computeroutput> and cos(<computeroutput>v</computeroutput>) in <computeroutput>c</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="151" column="1" bodyfile="pxr/base/gf/math.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga5032cd06709a9a7c3d205ae93944c5a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GfClamp</definition>
        <argsstring>(double value, double min, double max)</argsstring>
        <name>GfClamp</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Return the resulting of clamping <computeroutput>value</computeroutput> to lie between <computeroutput>min</computeroutput> and <computeroutput>max</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is also defined for GfVecs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="156" column="1" bodyfile="pxr/base/gf/math.h" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga4d663ce6f1e41b972ede46d4e6e765ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GfClamp</definition>
        <argsstring>(float value, float min, float max)</argsstring>
        <name>GfClamp</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="164" column="1" bodyfile="pxr/base/gf/math.h" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga3739323b734297c2d2c455269f00ebbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GfMod</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>GfMod</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The mod function with &quot;correct&quot; behaviour for negative numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>a</computeroutput> = <computeroutput>n</computeroutput> <computeroutput>b</computeroutput> for some integer <computeroutput>n</computeroutput>, zero is returned. Otherwise, for positive <computeroutput>a</computeroutput>, the value returned is <computeroutput>fmod(a,b)</computeroutput>, and for negative <computeroutput>a</computeroutput>, the value returned is <computeroutput>fmod(a,b)+b</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gaaff80be324cf2dbc72cd00c596522465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GfLerp</definition>
        <argsstring>(double alpha, const T &amp;a, const T &amp;b)</argsstring>
        <name>GfLerp</name>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Linear interpolation function. </para>
        </briefdescription>
        <detaileddescription>
<para>For any type that supports multiplication by a scalar and binary addition, returns <programlisting><codeline><highlight class="normal">(1-alpha)<sp/>*<sp/>a<sp/>+<sp/>alpha<sp/>*<sp/>b<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="193" column="1" bodyfile="pxr/base/gf/math.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga7048e65142f74b760c0da4587bedeb11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GfMin</definition>
        <argsstring>(T a1, T a2)</argsstring>
        <name>GfMin</name>
        <param>
          <type>T</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
<para>Returns the smallest of the given <computeroutput>values</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="200" column="1" bodyfile="pxr/base/gf/math.h" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga9d86d387bd01a296ac48cea96ec8dc2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GfMax</definition>
        <argsstring>(T a1, T a2)</argsstring>
        <name>GfMax</name>
        <param>
          <type>T</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
<para>Returns the largest of the given <computeroutput>values</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="219" column="1" bodyfile="pxr/base/gf/math.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1ga48416535086ae5f988657bd930809dae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Left</type>
          </param>
          <param>
            <type>typename Right</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Left &gt;::value &amp;&amp;<ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Right &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; Left &gt;() *std::declval&lt; Right &gt;())</type>
        <definition>decltype(std::declval&lt;Left&gt;() * std::declval&lt;Right&gt;()) GfDot</definition>
        <argsstring>(Left left, Right right)</argsstring>
        <name>GfDot</name>
        <param>
          <type>Left</type>
          <declname>left</declname>
        </param>
        <param>
          <type>Right</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Returns the dot (inner) product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>For scalar types, this is just the regular product. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="242" column="1" bodyfile="pxr/base/gf/math.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gad8a790ccc3faf832f03042b50553ff3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Left</type>
          </param>
          <param>
            <type>typename Right</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Left &gt;::value &amp;&amp;<ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Right &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; Left &gt;() *std::declval&lt; Right &gt;())</type>
        <definition>decltype(std::declval&lt;Left&gt;() * std::declval&lt;Right&gt;()) GfCompMult</definition>
        <argsstring>(Left left, Right right)</argsstring>
        <name>GfCompMult</name>
        <param>
          <type>Left</type>
          <declname>left</declname>
        </param>
        <param>
          <type>Right</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Returns component-wise multiplication of vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>For scalar types, this is just the regular product. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="253" column="1" bodyfile="pxr/base/gf/math.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___basic_math_1gaa105d30d36361404518a984c2e08cb57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Left</type>
          </param>
          <param>
            <type>typename Right</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Left &gt;::value &amp;&amp;<ref refid="struct_gf_is_arithmetic" kindref="compound">GfIsArithmetic</ref>&lt; Right &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; Left &gt;()/std::declval&lt; Right &gt;())</type>
        <definition>decltype(std::declval&lt;Left&gt;() / std::declval&lt;Right&gt;()) GfCompDiv</definition>
        <argsstring>(Left left, Right right)</argsstring>
        <name>GfCompDiv</name>
        <param>
          <type>Left</type>
          <declname>left</declname>
        </param>
        <param>
          <type>Right</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Returns component-wise quotient of vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>For scalar types, this is just the regular quotient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/math.h" line="264" column="1" bodyfile="pxr/base/gf/math.h" bodystart="264" bodyend="266"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" prot="public" static="no">
        <name>GF_MIN_VECTOR_LENGTH</name>
        <initializer>1e-10</initializer>
        <briefdescription>
<para>This constant is used to determine whether the length of a vector is too small to handle accurately. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/limits.h" line="34" column="9" bodyfile="pxr/base/gf/limits.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
