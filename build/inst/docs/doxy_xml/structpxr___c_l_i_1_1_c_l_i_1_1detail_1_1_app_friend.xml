<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend" kind="struct" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::detail::AppFriend</compoundname>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a8c97859e25d9f7a3f8778418a15ab511" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto parse_arg</definition>
        <argsstring>(App *app, Args &amp;&amp;...args) -&gt; typename std::result_of&lt; decltype(&amp;App::_parse_arg)(App, Args...)&gt;::type</argsstring>
        <name>parse_arg</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Wrap _parse_short, perfectly forward arguments and return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6902" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6902" bodyend="6905"/>
      </memberdef>
      <memberdef kind="function" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a4f44c4eca4552a2aa1bc69935c85703d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto parse_subcommand</definition>
        <argsstring>(App *app, Args &amp;&amp;...args) -&gt; typename std::result_of&lt; decltype(&amp;App::_parse_subcommand)(App, Args...)&gt;::type</argsstring>
        <name>parse_subcommand</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Wrap _parse_subcommand, perfectly forward arguments and return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6909" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6909" bodyend="6912"/>
      </memberdef>
      <memberdef kind="function" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a18dffad8c7110ca26398b6637e04a8cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>static App* get_fallthrough_parent</definition>
        <argsstring>(App *app)</argsstring>
        <name>get_fallthrough_parent</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>Wrap the fallthrough parent function to make sure that is working correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6915" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6915" bodyend="6915"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is simply to allow tests access to <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>&apos;s protected functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6887" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6887" bodyend="6916"/>
    <listofallmembers>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a18dffad8c7110ca26398b6637e04a8cb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::AppFriend</scope><name>get_fallthrough_parent</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a8c97859e25d9f7a3f8778418a15ab511" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::AppFriend</scope><name>parse_arg</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a4f44c4eca4552a2aa1bc69935c85703d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::AppFriend</scope><name>parse_subcommand</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
