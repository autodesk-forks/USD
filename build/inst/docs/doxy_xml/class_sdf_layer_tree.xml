<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_layer_tree" kind="class" language="C++" prot="public">
    <compoundname>SdfLayerTree</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="layer_tree_8h" local="no">layerTree.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_layer_tree_1a227a4820cdc3c214c805f60d843b3cfc" prot="private" static="no" mutable="no">
        <type>const SdfLayerHandle</type>
        <definition>const SdfLayerHandle _layer</definition>
        <argsstring></argsstring>
        <name>_layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="83" column="1" bodyfile="pxr/usd/sdf/layerTree.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_tree_1a0e115c02dc68d865a17a463219c67a5c" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>const SdfLayerOffset _offset</definition>
        <argsstring></argsstring>
        <name>_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="84" column="1" bodyfile="pxr/usd/sdf/layerTree.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_tree_1a30bddf163ad0562152d4c8239ff36c35" prot="private" static="no" mutable="no">
        <type>const SdfLayerTreeHandleVector</type>
        <definition>const SdfLayerTreeHandleVector _childTrees</definition>
        <argsstring></argsstring>
        <name>_childTrees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="85" column="1" bodyfile="pxr/usd/sdf/layerTree.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_layer_tree_1a9c3af7a0e6f6fb54ed663e6b892cea3c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfLayerTree</definition>
        <argsstring>(const SdfLayerTree &amp;)=delete</argsstring>
        <name>SdfLayerTree</name>
        <param>
          <type>const <ref refid="class_sdf_layer_tree" kindref="compound">SdfLayerTree</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_tree_1a32e614bc49bf22028248e2a8fa9cfb86" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_layer_tree" kindref="compound">SdfLayerTree</ref> &amp;</type>
        <definition>SdfLayerTree&amp; operator=</definition>
        <argsstring>(const SdfLayerTree &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_layer_tree" kindref="compound">SdfLayerTree</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_tree_1acae289d52946af4509a079bf9cfe83b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfLayerTree</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfLayerTreeHandleVector &amp;childTrees, const SdfLayerOffset &amp;cumulativeOffset)</argsstring>
        <name>SdfLayerTree</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const SdfLayerTreeHandleVector &amp;</type>
          <declname>childTrees</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>cumulativeOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="78" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sdf_layer_tree_1a499ea0285289297680dc2c6c212509c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerTreeHandle</ref></type>
        <definition>static SDF_API SdfLayerTreeHandle New</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfLayerTreeHandleVector &amp;childTrees, const SdfLayerOffset &amp;cumulativeOffset=SdfLayerOffset())</argsstring>
        <name>New</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const SdfLayerTreeHandleVector &amp;</type>
          <declname>childTrees</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>cumulativeOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a new layer tree node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="64" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_layer_tree_1a38f79a194a35316c04b77ad2598cee34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const SdfLayerHandle &amp;</type>
        <definition>SDF_API const SdfLayerHandle&amp; GetLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetLayer</name>
        <briefdescription>
<para>Returns the layer handle this tree node represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_tree_1a89cbd3dcd55ca69ba45277f381b30c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
        <definition>SDF_API const SdfLayerOffset&amp; GetOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetOffset</name>
        <briefdescription>
<para>Returns the cumulative layer offset from the root of the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_tree_1aa1da7cecba7bbad00cec15bc516cc764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const SdfLayerTreeHandleVector &amp;</type>
        <definition>SDF_API const SdfLayerTreeHandleVector&amp; GetChildTrees</definition>
        <argsstring>() const</argsstring>
        <name>GetChildTrees</name>
        <briefdescription>
<para>Returns the children of this tree node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerTree.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="class_sdf_layer_tree" kindref="compound">SdfLayerTree</ref> is an immutable tree structure representing a sublayer stack and its recursive structure. </para>
    </briefdescription>
    <detaileddescription>
<para>Layers can have sublayers, which can in turn have sublayers of their own. Clients that want to represent that hierarchical structure in memory can build a <ref refid="class_sdf_layer_tree" kindref="compound">SdfLayerTree</ref> for that purpose.</para>
<para>We use <ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr&lt;SdfLayerTree&gt;</ref> as handles to LayerTrees, as a simple way to pass them around as immutable trees without worrying about lifetime. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5086">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5084">
        <label>SdfLayerTree</label>
        <link refid="class_sdf_layer_tree"/>
        <childnode refid="5085" relation="public-inheritance">
        </childnode>
        <childnode refid="5086" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5085">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5089">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5087">
        <label>SdfLayerTree</label>
        <link refid="class_sdf_layer_tree"/>
        <childnode refid="5088" relation="public-inheritance">
        </childnode>
        <childnode refid="5089" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5088">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/layerTree.h" line="57" column="1" bodyfile="pxr/usd/sdf/layerTree.h" bodystart="57" bodyend="86"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_sdf_layer_tree_1a30bddf163ad0562152d4c8239ff36c35" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>_childTrees</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfLayerTree</scope><name>_HasRemnant</name></member>
      <member refid="class_sdf_layer_tree_1a227a4820cdc3c214c805f60d843b3cfc" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>_layer</name></member>
      <member refid="class_sdf_layer_tree_1a0e115c02dc68d865a17a463219c67a5c" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>_offset</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfLayerTree</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfLayerTree</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_layer_tree_1aa1da7cecba7bbad00cec15bc516cc764" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetChildTrees</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetCurrentCount</name></member>
      <member refid="class_sdf_layer_tree_1a38f79a194a35316c04b77ad2598cee34" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetLayer</name></member>
      <member refid="class_sdf_layer_tree_1a89cbd3dcd55ca69ba45277f381b30c19" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetOffset</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetRefCount</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>IsUnique</name></member>
      <member refid="class_sdf_layer_tree_1a499ea0285289297680dc2c6c212509c6" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>New</name></member>
      <member refid="class_sdf_layer_tree_1a32e614bc49bf22028248e2a8fa9cfb86" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>SdfLayerTree</scope><name>operator=</name></member>
      <member refid="class_sdf_layer_tree_1a9c3af7a0e6f6fb54ed663e6b892cea3c" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>SdfLayerTree</name></member>
      <member refid="class_sdf_layer_tree_1acae289d52946af4509a079bf9cfe83b9" prot="private" virt="non-virtual"><scope>SdfLayerTree</scope><name>SdfLayerTree</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>SdfLayerTree</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>SdfLayerTree</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfLayerTree</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
