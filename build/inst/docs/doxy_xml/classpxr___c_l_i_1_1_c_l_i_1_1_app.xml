<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_app" kind="class" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::App</compoundname>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" prot="public" virt="non-virtual">Option_group</derivedcompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
      <sectiondef kind="user-defined">
      <header>Basics</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Subcommand name or program name (from parser if name is empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5616" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string description_</definition>
        <argsstring></argsstring>
        <name>description_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Description of the current program/subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5619" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool allow_extras_</definition>
        <argsstring></argsstring>
        <name>allow_extras_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If true, allow extra arguments (ie, don&apos;t throw an error). INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5622" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" prot="protected" static="no" mutable="no">
        <type>config_extras_mode</type>
        <definition>config_extras_mode allow_config_extras_</definition>
        <argsstring></argsstring>
        <name>allow_config_extras_</name>
        <initializer>{config_extras_mode::ignore}</initializer>
        <briefdescription>
<para>If ignore, allow extra arguments in the ini file (ie, don&apos;t throw an error). </para>
        </briefdescription>
        <detaileddescription>
<para>INHERITABLE if error error on an extra argument, and if capture feed it to the app </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5626" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool prefix_command_</definition>
        <argsstring></argsstring>
        <name>prefix_command_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If true, return immediately on an unrecognized option (implies allow_extras) INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5629" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool has_automatic_name_</definition>
        <argsstring></argsstring>
        <name>has_automatic_name_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If set to true the name was automatically generated from the command line vs a user set name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5632" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool required_</definition>
        <argsstring></argsstring>
        <name>required_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If set to true the subcommand is required to be processed and used, ignored for main app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5635" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool disabled_</definition>
        <argsstring></argsstring>
        <name>disabled_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If set to true the subcommand is disabled and cannot be used, ignored for main app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5638" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pre_parse_called_</definition>
        <argsstring></argsstring>
        <name>pre_parse_called_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Flag indicating that the pre_parse_callback has been triggered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5641" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool immediate_callback_</definition>
        <argsstring></argsstring>
        <name>immediate_callback_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Flag indicating that the callback for the subcommand should be executed immediately on parse completion which is before help or ini files are processed. </para>
        </briefdescription>
        <detaileddescription>
<para>INHERITABLE </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5645" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(std::size_t)&gt;</type>
        <definition>std::function&lt;void(std::size_t)&gt; pre_parse_callback_</definition>
        <argsstring></argsstring>
        <name>pre_parse_callback_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a function that runs prior to the start of parsing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5648" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; parse_complete_callback_</definition>
        <argsstring></argsstring>
        <name>parse_complete_callback_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a function that runs when parsing has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5651" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; final_callback_</definition>
        <argsstring></argsstring>
        <name>final_callback_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a function that runs when all processing has completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5654" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5654" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Options</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" prot="protected" static="no" mutable="no">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref></type>
        <definition>OptionDefaults option_defaults_</definition>
        <argsstring></argsstring>
        <name>option_defaults_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The default values for options, customizable and changeable INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5661" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Option_p &gt;</type>
        <definition>std::vector&lt;Option_p&gt; options_</definition>
        <argsstring></argsstring>
        <name>options_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The list of options, stored locally. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5664" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5664" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Help</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string footer_</definition>
        <argsstring></argsstring>
        <name>footer_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Footer to put after all options in the help output INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5671" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string()&gt;</type>
        <definition>std::function&lt;std::string()&gt; footer_callback_</definition>
        <argsstring></argsstring>
        <name>footer_callback_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a function that generates a footer to put after all other options in help output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5674" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" prot="protected" static="no" mutable="no">
        <type>Option *</type>
        <definition>Option* help_ptr_</definition>
        <argsstring></argsstring>
        <name>help_ptr_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>A pointer to the help flag if there is one INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5677" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" prot="protected" static="no" mutable="no">
        <type>Option *</type>
        <definition>Option* help_all_ptr_</definition>
        <argsstring></argsstring>
        <name>help_all_ptr_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>A pointer to the help all flag if there is one INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5680" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" prot="protected" static="no" mutable="no">
        <type>Option *</type>
        <definition>Option* version_ptr_</definition>
        <argsstring></argsstring>
        <name>version_ptr_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>A pointer to a version flag if there is one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5683" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FormatterBase&gt; formatter_</definition>
        <argsstring></argsstring>
        <name>formatter_</name>
        <initializer>{new <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref>()}</initializer>
        <briefdescription>
<para>This is the formatter for help printing. Default provided. INHERITABLE (same pointer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5686" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string(const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *, const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref> &amp;e)&gt;</type>
        <definition>std::function&lt;std::string(const App *, const Error &amp;e)&gt; failure_message_</definition>
        <argsstring></argsstring>
        <name>failure_message_</name>
        <initializer>{FailureMessage::simple}</initializer>
        <briefdescription>
<para>The error message printing function INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5689" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a30b11d4452413990fba2ec8fc0172efc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* footer</definition>
        <argsstring>(std::string footer_string)</argsstring>
        <name>footer</name>
        <param>
          <type>std::string</type>
          <declname>footer_string</declname>
        </param>
        <briefdescription>
<para>Set footer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6466" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6466" bodyend="6469"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d1bcef92a847020b411b2585067dd16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* footer</definition>
        <argsstring>(std::function&lt; std::string()&gt; footer_function)</argsstring>
        <name>footer</name>
        <param>
          <type>std::function&lt; std::string()&gt;</type>
          <declname>footer_function</declname>
        </param>
        <briefdescription>
<para>Set footer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6471" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6471" bodyend="6474"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae4e8a61c46c7b9a47fb7442f93e4c2ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string config_to_str</definition>
        <argsstring>(bool default_also=false, bool write_description=false) const</argsstring>
        <name>config_to_str</name>
        <param>
          <type>bool</type>
          <declname>default_also</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>write_description</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Produce a string that could be read in as a config of the current values of the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Set default_also to include default arguments. write_descriptions will print a description for the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> and for each option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6477" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6477" bodyend="6479"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string help</definition>
        <argsstring>(std::string prev=&quot;&quot;, AppFormatMode mode=AppFormatMode::Normal) const</argsstring>
        <name>help</name>
        <param>
          <type>std::string</type>
          <declname>prev</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>AppFormatMode</type>
          <declname>mode</declname>
          <defval>AppFormatMode::Normal</defval>
        </param>
        <briefdescription>
<para>Makes a help message, using the currently configured formatter Will only do one subcommand at a time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6483" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7559" bodyend="7571"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string version</definition>
        <argsstring>() const</argsstring>
        <name>version</name>
        <briefdescription>
<para>Displays a version string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6486" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7573" bodyend="7588"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parsing</header>
      <memberdef kind="typedef" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2642c0a46ee029e8a71b28d30ed2a28e" prot="protected" static="no">
        <type>std::vector&lt; std::pair&lt; detail::Classifier, std::string &gt; &gt;</type>
        <definition>using missing_t =  std::vector&lt;std::pair&lt;detail::Classifier, std::string&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>missing_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5695" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" prot="protected" static="no" mutable="no">
        <type>missing_t</type>
        <definition>missing_t missing_</definition>
        <argsstring></argsstring>
        <name>missing_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Pair of classifier, string for missing options. </para>
        </briefdescription>
        <detaileddescription>
<para>(extra detail is removed on returning from parse)</para>
<para>This is faster and cleaner than storing just a list of strings and reparsing. This may contain the <ndash/> separator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5700" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Option * &gt;</type>
        <definition>std::vector&lt;Option *&gt; parse_order_</definition>
        <argsstring></argsstring>
        <name>parse_order_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a list of pointers to options with the original parse order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5703" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>std::vector&lt;App *&gt; parsed_subcommands_</definition>
        <argsstring></argsstring>
        <name>parsed_subcommands_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a list of the subcommands collected, in order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5706" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>std::set&lt;App *&gt; exclude_subcommands_</definition>
        <argsstring></argsstring>
        <name>exclude_subcommands_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>this is a list of subcommands that are exclusionary to this one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5709" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" prot="protected" static="no" mutable="no">
        <type>std::set&lt; Option * &gt;</type>
        <definition>std::set&lt;Option *&gt; exclude_options_</definition>
        <argsstring></argsstring>
        <name>exclude_options_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a list of options which are exclusionary to this <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>, if the options were used this subcommand should not be. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5713" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>std::set&lt;App *&gt; need_subcommands_</definition>
        <argsstring></argsstring>
        <name>need_subcommands_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>this is a list of subcommands or option groups that are required by this one, the list is not mutual, the listed subcommands do not require this one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5717" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" prot="protected" static="no" mutable="no">
        <type>std::set&lt; Option * &gt;</type>
        <definition>std::set&lt;Option *&gt; need_options_</definition>
        <argsstring></argsstring>
        <name>need_options_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is a list of options which are required by this app, the list is not mutual, listed options do not need the subcommand not be. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5721" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Reset the parsed data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6347" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7358" bodyend="7371"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void parse</definition>
        <argsstring>(int argc, const char *const *argv)</argsstring>
        <name>parse</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Parses the command line - throws errors. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called after the options are in but before the rest of the program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6351" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7373" bodyend="7385"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8f967543ae089d679078517ef937bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void parse</definition>
        <argsstring>(std::string commandline, bool program_name_included=false)</argsstring>
        <name>parse</name>
        <param>
          <type>std::string</type>
          <declname>commandline</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>program_name_included</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Parse a single string as if it contained command line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function splits the string into arguments then calls <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adde7905bad5a6390e40f437d9796dd77" kindref="member">parse(std::vector&lt;std::string&gt; &amp;)</ref> the function takes an optional boolean argument specifying if the programName is included in the string to process </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6357" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7387" bodyend="7412"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adde7905bad5a6390e40f437d9796dd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void parse</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args)</argsstring>
        <name>parse</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The real work is done here. </para>
        </briefdescription>
        <detaileddescription>
<para>Expects a reversed vector. Changes the vector to the remaining options. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6361" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7414" bodyend="7431"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a950cfe0525e2b72cd0e7d86d0f961f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void parse</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;&amp;args)</argsstring>
        <name>parse</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The real work is done here. Expects a reversed vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6364" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7433" bodyend="7450"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6508b3671057990c564e2872e7e3f6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void parse_from_stream</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>parse_from_stream</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6366" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7452" bodyend="7461"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac3ead65ee88595674c7818dc312e3d65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void failure_message</definition>
        <argsstring>(std::function&lt; std::string(const App *, const Error &amp;e)&gt; function)</argsstring>
        <name>failure_message</name>
        <param>
          <type>std::function&lt; std::string(const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *, const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref> &amp;e)&gt;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Provide a function to print a help message. The function gets access to the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> pointer and error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6369" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6369" bodyend="6371"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>CLI11_INLINE int exit</definition>
        <argsstring>(const Error &amp;e, std::ostream &amp;out=std::cout, std::ostream &amp;err=std::cerr) const</argsstring>
        <name>exit</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>err</declname>
          <defval>std::cerr</defval>
        </param>
        <briefdescription>
<para>Print a nice error message and return the exit code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Avoid printing anything if this is a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" kindref="compound">CLI::RuntimeError</ref> </para>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6374" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7463" bodyend="7490"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Subcommands</header>
      <memberdef kind="enum" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aef0e18348231875c846d51cd02792284" prot="protected" static="no" strong="yes">
        <type>char</type>
        <name>startup_mode</name>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aef0e18348231875c846d51cd02792284af40faf6384fc85a33d3b05a9d41c012b" prot="protected">
          <name>stable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aef0e18348231875c846d51cd02792284aa10311459433adf322f2590a4987c423" prot="protected">
          <name>enabled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aef0e18348231875c846d51cd02792284a075ae3d2fc31640504f814f60e5ef713" prot="protected">
          <name>disabled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5750" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5750" bodyend="5750"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; App_p &gt;</type>
        <definition>std::vector&lt;App_p&gt; subcommands_</definition>
        <argsstring></argsstring>
        <name>subcommands_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Storage for subcommand list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5728" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ignore_case_</definition>
        <argsstring></argsstring>
        <name>ignore_case_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If true, the program name is not case sensitive INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5731" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ignore_underscore_</definition>
        <argsstring></argsstring>
        <name>ignore_underscore_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If true, the program should ignore underscores INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5734" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fallthrough_</definition>
        <argsstring></argsstring>
        <name>fallthrough_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Allow subcommand fallthrough, so that parent commands can collect commands after subcommand. INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5737" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool allow_windows_style_options_</definition>
        <argsstring></argsstring>
        <name>allow_windows_style_options_</name>
        <initializer>{



        false

    }</initializer>
        <briefdescription>
<para>Allow &apos;/&apos; for options for Windows like options. Defaults to true on Windows, false otherwise. INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5740" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool positionals_at_end_</definition>
        <argsstring></argsstring>
        <name>positionals_at_end_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>specify that positional arguments come at the end of the argument sequence not inheritable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5748" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" prot="protected" static="no" mutable="no">
        <type>startup_mode</type>
        <definition>startup_mode default_startup</definition>
        <argsstring></argsstring>
        <name>default_startup</name>
        <initializer>{startup_mode::stable}</initializer>
        <briefdescription>
<para>specify the startup mode for the app stable=no change, enabled= startup enabled, disabled=startup disabled </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5753" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool configurable_</definition>
        <argsstring></argsstring>
        <name>configurable_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>if set to true the subcommand can be triggered via configuration files INHERITABLE </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5756" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool validate_positionals_</definition>
        <argsstring></argsstring>
        <name>validate_positionals_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If set to true positional options are validated before assigning INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5759" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool validate_optional_arguments_</definition>
        <argsstring></argsstring>
        <name>validate_optional_arguments_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If set to true optional vector arguments are validated before assigning INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5762" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool silent_</definition>
        <argsstring></argsstring>
        <name>silent_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>indicator that the subcommand is silent and won&apos;t show up in subcommands list This is potentially useful as a modifier subcommand </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5766" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" prot="protected" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t parsed_</definition>
        <argsstring></argsstring>
        <name>parsed_</name>
        <initializer>{0U}</initializer>
        <briefdescription>
<para>Counts the number of times this command/subcommand was parsed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5769" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t require_subcommand_min_</definition>
        <argsstring></argsstring>
        <name>require_subcommand_min_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Minimum required subcommands (not inheritable!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5772" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t require_subcommand_max_</definition>
        <argsstring></argsstring>
        <name>require_subcommand_max_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Max number of subcommands allowed (parsing stops after this number). 0 is unlimited INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5775" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t require_option_min_</definition>
        <argsstring></argsstring>
        <name>require_option_min_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Minimum required options (not inheritable!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5778" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t require_option_max_</definition>
        <argsstring></argsstring>
        <name>require_option_max_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Max number of options allowed. 0 is unlimited (not inheritable) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5781" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" prot="protected" static="no" mutable="no">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* parent_</definition>
        <argsstring></argsstring>
        <name>parent_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>A pointer to the parent if this is a subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5784" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string group_</definition>
        <argsstring></argsstring>
        <name>group_</name>
        <initializer>{&quot;Subcommands&quot;}</initializer>
        <briefdescription>
<para>The group membership INHERITABLE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5787" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; aliases_</definition>
        <argsstring></argsstring>
        <name>aliases_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Alias names for the subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5790" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * add_subcommand</definition>
        <argsstring>(std::string subcommand_name=&quot;&quot;, std::string subcommand_description=&quot;&quot;)</argsstring>
        <name>add_subcommand</name>
        <param>
          <type>std::string</type>
          <declname>subcommand_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>subcommand_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add a subcommand. Inherits INHERITABLE and <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref>, and help flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6219" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7239" bodyend="7254"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2e086b84f545436d7f570eab581c27ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * add_subcommand</definition>
        <argsstring>(CLI::App_p subcom)</argsstring>
        <name>add_subcommand</name>
        <param>
          <type>CLI::App_p</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Add a previously created app as a subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6222" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7256" bodyend="7267"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8942d46c22ff948571addc12b19046c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_subcommand</definition>
        <argsstring>(App *subcom)</argsstring>
        <name>remove_subcommand</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Removes a subcommand from the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>. Takes a subcommand pointer. Returns true if found and removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6225" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7269" bodyend="7283"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * get_subcommand</definition>
        <argsstring>(const App *subcom) const</argsstring>
        <name>get_subcommand</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Check to see if a subcommand is part of this command (doesn&apos;t have to be in command line) returns the first subcommand if passed a nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6229" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7285" bodyend="7292"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaecb71029b5eb048714ac9b628a9f110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_NODISCARD CLI11_INLINE App * get_subcommand</definition>
        <argsstring>(std::string subcom) const</argsstring>
        <name>get_subcommand</name>
        <param>
          <type>std::string</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Check to see if a subcommand is part of this command (text version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6232" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7294" bodyend="7299"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8146b29b69f5f615f2a3b36b2c84f00d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_NODISCARD CLI11_INLINE App * get_subcommand</definition>
        <argsstring>(int index=0) const</argsstring>
        <name>get_subcommand</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get a pointer to subcommand by index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6235" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7301" bodyend="7308"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI::App_p</type>
        <definition>CLI11_INLINE CLI::App_p get_subcommand_ptr</definition>
        <argsstring>(App *subcom) const</argsstring>
        <name>get_subcommand_ptr</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Check to see if a subcommand is part of this command and get a shared_ptr to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6238" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7310" bodyend="7317"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff814e6a6a22ec8373cbb6c51370431f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD CLI::App_p</type>
        <definition>CLI11_NODISCARD CLI11_INLINE CLI::App_p get_subcommand_ptr</definition>
        <argsstring>(std::string subcom) const</argsstring>
        <name>get_subcommand_ptr</name>
        <param>
          <type>std::string</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Check to see if a subcommand is part of this command (text version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6241" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7319" bodyend="7324"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4c32b388e78dce87f7a2ec83dbdbf0bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD CLI::App_p</type>
        <definition>CLI11_NODISCARD CLI11_INLINE CLI::App_p get_subcommand_ptr</definition>
        <argsstring>(int index=0) const</argsstring>
        <name>get_subcommand_ptr</name>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get an owning pointer to subcommand by index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6244" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7326" bodyend="7333"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa64469441e8b15077a781710a1e98871" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_NODISCARD CLI11_INLINE CLI::App * get_option_group</definition>
        <argsstring>(std::string group_name) const</argsstring>
        <name>get_option_group</name>
        <param>
          <type>std::string</type>
          <declname>group_name</declname>
        </param>
        <briefdescription>
<para>Check to see if an option group is part of this <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6247" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7335" bodyend="7342"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac2ca386068235802660cc62c460ca8ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
<para>No argument version of count counts the number of times this subcommand was passed in. </para>
        </briefdescription>
        <detaileddescription>
<para>The main app will return 1. Unnamed subcommands will also return 1 unless otherwise modified in a callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6252" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6252" bodyend="6252"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::size_t count_all</definition>
        <argsstring>() const</argsstring>
        <name>count_all</name>
        <briefdescription>
<para>Get a count of all the arguments processed in options and subcommands, this excludes arguments which were treated as extras. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6256" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7344" bodyend="7356"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa87fcb3a7a564b563a1f2525e748b8e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* group</definition>
        <argsstring>(std::string group_name)</argsstring>
        <name>group</name>
        <param>
          <type>std::string</type>
          <declname>group_name</declname>
        </param>
        <briefdescription>
<para>Changes the group membership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6259" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6259" bodyend="6262"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0f5a053f7e47b9c6f5d96aafb8656575" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_subcommand</definition>
        <argsstring>()</argsstring>
        <name>require_subcommand</name>
        <briefdescription>
<para>The argumentless form of require subcommand requires 1 or more subcommands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6265" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6265" bodyend="6269"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28ff6ea733a811cf87c68f7a42a10254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_subcommand</definition>
        <argsstring>(int value)</argsstring>
        <name>require_subcommand</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Require a subcommand to be given (does not affect help call) The number required can be given. </para>
        </briefdescription>
        <detaileddescription>
<para>Negative values indicate maximum number allowed (0 for any number). Max number inheritable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6274" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6274" bodyend="6283"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae08daff7ea3e3b08a4b7292a4407f1af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_subcommand</definition>
        <argsstring>(std::size_t min, std::size_t max)</argsstring>
        <name>require_subcommand</name>
        <param>
          <type>std::size_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Explicitly control the number of subcommands required. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting 0 for the max means unlimited number allowed. Max number inheritable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6287" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6287" bodyend="6291"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7575a99103cdeced539d3b82bb1e85fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_option</definition>
        <argsstring>()</argsstring>
        <name>require_option</name>
        <briefdescription>
<para>The argumentless form of require option requires 1 or more options be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6294" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6294" bodyend="6298"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af5767ab7c438e80a5199f01b1ffdec25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_option</definition>
        <argsstring>(int value)</argsstring>
        <name>require_option</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Require an option to be given (does not affect help call) The number required can be given. </para>
        </briefdescription>
        <detaileddescription>
<para>Negative values indicate maximum number allowed (0 for any number). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6303" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6303" bodyend="6312"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4dae8efca9fb592375211a6e05204bdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* require_option</definition>
        <argsstring>(std::size_t min, std::size_t max)</argsstring>
        <name>require_option</name>
        <param>
          <type>std::size_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Explicitly control the number of options required. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting 0 for the max means unlimited number allowed. Max number inheritable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6316" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6316" bodyend="6320"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04196aeaf97226205f8853fe056945b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* fallthrough</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>fallthrough</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Stop subcommand fallthrough, so that parent commands cannot collect commands after subcommand. </para>
        </briefdescription>
        <detaileddescription>
<para>Default from parent, usually set on parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6324" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6324" bodyend="6327"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Check to see if this subcommand was parsed, true only if received on command line. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows the subcommand to be directly checked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6331" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6331" bodyend="6331"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Config</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" prot="protected" static="no" mutable="no">
        <type>Option *</type>
        <definition>Option* config_ptr_</definition>
        <argsstring></argsstring>
        <name>config_ptr_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to the config option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5797" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Config&gt; config_formatter_</definition>
        <argsstring></argsstring>
        <name>config_formatter_</name>
        <initializer>{new <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigTOML</ref>()}</initializer>
        <briefdescription>
<para>This is the formatter for help printing. Default provided. INHERITABLE (same pointer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5800" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5800" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basic</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a02ccff5126753b4ffcab4e389ed58956" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>App</definition>
        <argsstring>(std::string app_description=&quot;&quot;, std::string app_name=&quot;&quot;)</argsstring>
        <name>App</name>
        <param>
          <type>std::string</type>
          <declname>app_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>app_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new program. Pass in the same arguments as main(), along with a help string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5812" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5812" bodyend="5815"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9655ed150557afb8cbffa8f26a473345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>App</definition>
        <argsstring>(const App &amp;)=delete</argsstring>
        <name>App</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a954a2649e205cac3d5c05c51f3448178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
        <definition>App&amp; operator=</definition>
        <argsstring>(const App &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bbf259b886b9746e86466e57148c892" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~App</definition>
        <argsstring>()=default</argsstring>
        <name>~App</name>
        <briefdescription>
<para>virtual destructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5821" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9c1c691769ad7a23ec03880444fa0e2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* callback</definition>
        <argsstring>(std::function&lt; void()&gt; app_callback)</argsstring>
        <name>callback</name>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>app_callback</declname>
        </param>
        <briefdescription>
<para>Set a callback for execution when all parsing and processing has completed. </para>
        </briefdescription>
        <detaileddescription>
<para>Due to a bug in c++11, it is not possible to overload on std::function (fixed in c++14 and backported to c++11 on newer compilers). Use capture by reference to get a pointer to <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> if needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5829" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5829" bodyend="5836"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a60f297d7fa084079895748a644e03c33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* final_callback</definition>
        <argsstring>(std::function&lt; void()&gt; app_callback)</argsstring>
        <name>final_callback</name>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>app_callback</declname>
        </param>
        <briefdescription>
<para>Set a callback for execution when all parsing and processing has completed aliased as callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5840" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5840" bodyend="5843"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0dc0d9d96c02f6e1dac5acc867c91c0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* parse_complete_callback</definition>
        <argsstring>(std::function&lt; void()&gt; pc_callback)</argsstring>
        <name>parse_complete_callback</name>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>pc_callback</declname>
        </param>
        <briefdescription>
<para>Set a callback to execute when parsing has completed for the app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5847" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5847" bodyend="5850"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68f0feab1c657383b1c1e21b35d1c779" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* preparse_callback</definition>
        <argsstring>(std::function&lt; void(std::size_t)&gt; pp_callback)</argsstring>
        <name>preparse_callback</name>
        <param>
          <type>std::function&lt; void(std::size_t)&gt;</type>
          <declname>pp_callback</declname>
        </param>
        <briefdescription>
<para>Set a callback to execute prior to parsing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5854" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5854" bodyend="5857"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8d1f0de783c1d733da0520cad084a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * name</definition>
        <argsstring>(std::string app_name=&quot;&quot;)</argsstring>
        <name>name</name>
        <param>
          <type>std::string</type>
          <declname>app_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Set a name for the app (empty will use parser to set the name) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5860" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6955" bodyend="6970"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6404244a5f76ae7c407b1c29f6cc7fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * alias</definition>
        <argsstring>(std::string app_name)</argsstring>
        <name>alias</name>
        <param>
          <type>std::string</type>
          <declname>app_name</declname>
        </param>
        <briefdescription>
<para>Set an alias for the app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5863" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6972" bodyend="6988"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4e54d234368404393b1ce7cecdbb37cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* allow_extras</definition>
        <argsstring>(bool allow=true)</argsstring>
        <name>allow_extras</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove the error when extras are left over on the command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5866" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5866" bodyend="5869"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0b7a03be2977022e1273c72c617aed00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* required</definition>
        <argsstring>(bool require=true)</argsstring>
        <name>required</name>
        <param>
          <type>bool</type>
          <declname>require</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove the error when extras are left over on the command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5872" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5872" bodyend="5875"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab7f3149ed992c3f85500af05e782da2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* disabled</definition>
        <argsstring>(bool disable=true)</argsstring>
        <name>disabled</name>
        <param>
          <type>bool</type>
          <declname>disable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Disable the subcommand or option group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5878" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5878" bodyend="5881"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeb76062af8973d6048b3d3beb7559844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* silent</definition>
        <argsstring>(bool silence=true)</argsstring>
        <name>silent</name>
        <param>
          <type>bool</type>
          <declname>silence</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>silence the subcommand from showing up in the processed list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5884" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5884" bodyend="5887"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab2d6a69ab64b222cc723cefce4c92493" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* disabled_by_default</definition>
        <argsstring>(bool disable=true)</argsstring>
        <name>disabled_by_default</name>
        <param>
          <type>bool</type>
          <declname>disable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the subcommand to be disabled by default, so on <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear()</ref>, at the start of each parse it is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5890" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5890" bodyend="5897"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a998cc0b044ff3921c23acf073ef251d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* enabled_by_default</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>enabled_by_default</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the subcommand to be enabled by default, so on <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear()</ref>, at the start of each parse it is enabled (not disabled) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5901" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5901" bodyend="5909"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adfe1830c87c5e05a68bc4f97a195b674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * immediate_callback</definition>
        <argsstring>(bool immediate=true)</argsstring>
        <name>immediate_callback</name>
        <param>
          <type>bool</type>
          <declname>immediate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the subcommand callback to be executed immediately on subcommand completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5912" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6990" bodyend="7000"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe07f600f0c293d6e0d74b48b5c67ce3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* validate_positionals</definition>
        <argsstring>(bool validate=true)</argsstring>
        <name>validate_positionals</name>
        <param>
          <type>bool</type>
          <declname>validate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the subcommand to validate positional arguments before assigning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5915" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5915" bodyend="5918"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af8f8937c68ab7dfdc665271d287db368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* validate_optional_arguments</definition>
        <argsstring>(bool validate=true)</argsstring>
        <name>validate_optional_arguments</name>
        <param>
          <type>bool</type>
          <declname>validate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the subcommand to validate optional vector arguments before assigning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5921" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5921" bodyend="5924"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c0b4c95c2246c64ac915b0471958a1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* allow_config_extras</definition>
        <argsstring>(bool allow=true)</argsstring>
        <name>allow_config_extras</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>ignore extras in config files </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5927" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5927" bodyend="5935"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a860ba3afc9f4ce2e9c888864b1872ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* allow_config_extras</definition>
        <argsstring>(config_extras_mode mode)</argsstring>
        <name>allow_config_extras</name>
        <param>
          <type>config_extras_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>ignore extras in config files </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5938" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5938" bodyend="5941"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb802d9960b5aefac40ee64851f48813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* prefix_command</definition>
        <argsstring>(bool allow=true)</argsstring>
        <name>prefix_command</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Do not parse anything after the first unrecognized option and return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5944" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5944" bodyend="5947"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a228cf7aa0656d0046b3cb352de935951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * ignore_case</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>ignore_case</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Ignore case. Subcommands inherit value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5950" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7002" bodyend="7014"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe9d597d34b973b211cd36d6ad767dcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* allow_windows_style_options</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>allow_windows_style_options</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Allow windows style options, such as <computeroutput>/opt</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>First matching short or long name used. Subcommands inherit value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5954" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5954" bodyend="5957"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa7dde3e7d08e4ee12665568f68fdd865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* positionals_at_end</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>positionals_at_end</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Specify that the positional arguments are only at the end of the sequence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5960" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5960" bodyend="5963"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a436c94f3e4f33ecc56fe8e06946b81b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* configurable</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>configurable</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Specify that the subcommand can be triggered by a config file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5966" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5966" bodyend="5969"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2533a70e2fdb56fb72b0230583f3ea0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * ignore_underscore</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>ignore_underscore</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Ignore underscore. Subcommands inherit value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5972" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7016" bodyend="7028"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80f45622cc976c313bb69f6446c581da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* formatter</definition>
        <argsstring>(std::shared_ptr&lt; FormatterBase &gt; fmt)</argsstring>
        <name>formatter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref> &gt;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set the help formatter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5975" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5975" bodyend="5978"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2215484bb3c1d34ca1b4e2114e990e75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* formatter_fn</definition>
        <argsstring>(std::function&lt; std::string(const App *, std::string, AppFormatMode)&gt; fmt)</argsstring>
        <name>formatter_fn</name>
        <param>
          <type>std::function&lt; std::string(const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *, std::string, AppFormatMode)&gt;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set the help formatter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5981" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5981" bodyend="5984"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6c3ea90b92c629563f35d35b73fac0b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* config_formatter</definition>
        <argsstring>(std::shared_ptr&lt; Config &gt; fmt)</argsstring>
        <name>config_formatter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref> &gt;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set the config formatter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5987" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5987" bodyend="5990"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a85ddfe0dfa512e92b4f1da02abc67cbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool parsed</definition>
        <argsstring>() const</argsstring>
        <name>parsed</name>
        <briefdescription>
<para>Check to see if this subcommand was parsed, true only if received on command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5993" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5993" bodyend="5993"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab1438513a1d763814634737986617c85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref> *</type>
        <definition>OptionDefaults* option_defaults</definition>
        <argsstring>()</argsstring>
        <name>option_defaults</name>
        <briefdescription>
<para>Get the OptionDefault object, to set option defaults. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5996" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5996" bodyend="5996"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Adding options</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_option</definition>
        <argsstring>(std::string option_name, callback_t option_callback, std::string option_description=&quot;&quot;, bool defaulted=false, std::function&lt; std::string()&gt; func={})</argsstring>
        <name>add_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>callback_t</type>
          <declname>option_callback</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>defaulted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::function&lt; std::string()&gt;</type>
          <declname>func</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add an option, will automatically understand the type for common types. </para>
        </briefdescription>
        <detaileddescription>
<para>To use, create a variable with the expected type, and pass it in after the name. After start is called, you can use count to see if the value was passed, and the value will be initialized properly. Numbers, vectors, and strings are supported.</para>
<para>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0b7a03be2977022e1273c72c617aed00" kindref="member">required()</ref>, -&gt;default, and the validators are options, The positional options take an optional number of arguments.</para>
<para>For example, <verbatim>std::string filename;
program.add_option(&quot;filename&quot;, filename, &quot;description of filename&quot;);
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6016" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7030" bodyend="7068"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa8d0cfc48f11bdfed94349ee2fcf8b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AssignTo</type>
          </param>
          <param>
            <type>typename ConvertTo</type>
            <defval>AssignTo</defval>
          </param>
          <param>
            <type>enable_if_t&lt;!std::is_const&lt; ConvertTo &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_option</definition>
        <argsstring>(std::string option_name, AssignTo &amp;variable, std::string option_description=&quot;&quot;)</argsstring>
        <name>add_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>AssignTo &amp;</type>
          <declname>variable</declname>
          <briefdescription><para>The variable to set </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add option for assigning to a variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6026" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6026" bodyend="6046"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad4b29d41ca534bf9c65ea34aa08a3fda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AssignTo</type>
          </param>
          <param>
            <type>enable_if_t&lt;!std::is_const&lt; AssignTo &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_option_no_stream</definition>
        <argsstring>(std::string option_name, AssignTo &amp;variable, std::string option_description=&quot;&quot;)</argsstring>
        <name>add_option_no_stream</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>AssignTo &amp;</type>
          <declname>variable</declname>
          <briefdescription><para>The variable to set </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add option for assigning to a variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6050" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6050" bodyend="6064"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40342cbe1ff0d626be6d0332f8221c10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArgType</type>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_option_function</definition>
        <argsstring>(std::string option_name, const std::function&lt; void(const ArgType &amp;)&gt; &amp;func, std::string option_description=&quot;&quot;)</argsstring>
        <name>add_option_function</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>const std::function&lt; void(const ArgType &amp;)&gt; &amp;</type>
          <declname>func</declname>
          <briefdescription><para>the callback to execute </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add option for a callback of a specific type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6068" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6068" bodyend="6086"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab39730ca5e5df9cefbf9740b8ca8a318" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* add_option</definition>
        <argsstring>(std::string option_name)</argsstring>
        <name>add_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Add option with no description or variable assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6089" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6089" bodyend="6091"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b29a9179fe3da2f2ccfefa06279082c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_const&lt; T &gt;::value &amp;&amp;std::is_constructible&lt; std::string, T &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_option</definition>
        <argsstring>(std::string option_name, T &amp;option_description)</argsstring>
        <name>add_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>option_description</declname>
        </param>
        <briefdescription>
<para>Add option with description but with no variable assignment or callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6097" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6097" bodyend="6099"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * set_help_flag</definition>
        <argsstring>(std::string flag_name=&quot;&quot;, const std::string &amp;help_description=&quot;&quot;)</argsstring>
        <name>set_help_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>help_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Set a help flag, replace the existing one if present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6102" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7070" bodyend="7084"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * set_help_all_flag</definition>
        <argsstring>(std::string help_name=&quot;&quot;, const std::string &amp;help_description=&quot;&quot;)</argsstring>
        <name>set_help_all_flag</name>
        <param>
          <type>std::string</type>
          <declname>help_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>help_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Set a help all flag, replaced the existing one if present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6105" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7086" bodyend="7100"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * set_version_flag</definition>
        <argsstring>(std::string flag_name=&quot;&quot;, const std::string &amp;versionString=&quot;&quot;, const std::string &amp;version_help=&quot;Display program version information and exit&quot;)</argsstring>
        <name>set_version_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionString</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>version_help</declname>
          <defval>&quot;Display program <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" kindref="member">version</ref> information and <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" kindref="member">exit</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Set a version flag and version display string, replace the existing one if present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6108" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7103" bodyend="7118"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27318e507ec2d03076797ea771c35b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * set_version_flag</definition>
        <argsstring>(std::string flag_name, std::function&lt; std::string()&gt; vfunc, const std::string &amp;version_help=&quot;Display program version information and exit&quot;)</argsstring>
        <name>set_version_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>std::function&lt; std::string()&gt;</type>
          <declname>vfunc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>version_help</declname>
          <defval>&quot;Display program <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" kindref="member">version</ref> information and <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" kindref="member">exit</ref>&quot;</defval>
        </param>
        <briefdescription>
<para>Generate the version string through a callback function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6113" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7121" bodyend="7135"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* add_flag</definition>
        <argsstring>(std::string flag_name)</argsstring>
        <name>add_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <briefdescription>
<para>Add a flag with no description or variable assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6123" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6123" bodyend="6123"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3cc14aa547ff5ac8885b11127ad03f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_const&lt; T &gt;::value &amp;&amp;std::is_constructible&lt; std::string, T &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_flag</definition>
        <argsstring>(std::string flag_name, T &amp;flag_description)</argsstring>
        <name>add_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>flag_description</declname>
        </param>
        <briefdescription>
<para>Add flag with description but with no variable assignment or callback takes a constant string, if a variable string is passed that variable will be assigned the results from the flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6131" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6131" bodyend="6133"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae567e17d569d36bff8924329aea72a44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt;!detail::is_mutable_container&lt; T &gt;::value &amp;&amp;!std::is_const&lt; T &gt;::value &amp;&amp;!std::is_constructible&lt; std::function&lt; void(int)&gt;, T &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_flag</definition>
        <argsstring>(std::string flag_name, T &amp;flag_result, std::string flag_description=&quot;&quot;)</argsstring>
        <name>add_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>flag_result</declname>
          <briefdescription><para>A variable holding the flag result </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>flag_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Other type version accepts all other types that are not vectors such as bool, enum, string or other classes that can be converted from a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6141" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6141" bodyend="6150"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abb07ee7fa4e542b5cd72cd4895065df2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt;!std::is_assignable&lt; std::function&lt; void(std::int64_t)&gt; &amp;, T &gt;::value, detail::enabler &gt;</type>
            <defval>detail::dummy</defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* add_flag</definition>
        <argsstring>(std::string flag_name, std::vector&lt; T &gt; &amp;flag_results, std::string flag_description=&quot;&quot;)</argsstring>
        <name>add_flag</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>flag_results</declname>
          <briefdescription><para>A vector of values with the flag results </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>flag_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Vector version to capture multiple flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6156" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6156" bodyend="6170"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_flag_callback</definition>
        <argsstring>(std::string flag_name, std::function&lt; void(void)&gt; function, std::string flag_description=&quot;&quot;)</argsstring>
        <name>add_flag_callback</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>std::function&lt; void(void)&gt;</type>
          <declname>function</declname>
          <briefdescription><para>A function to call, void(void) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>flag_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add option for callback that is triggered with a true flag and takes no arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6173" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7162" bodyend="7175"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_flag_function</definition>
        <argsstring>(std::string flag_name, std::function&lt; void(std::int64_t)&gt; function, std::string flag_description=&quot;&quot;)</argsstring>
        <name>add_flag_function</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>std::function&lt; void(std::int64_t)&gt;</type>
          <declname>function</declname>
          <briefdescription><para>A function to call, void(int) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string</type>
          <declname>flag_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add option for callback with an integer value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6178" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7178" bodyend="7190"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a12ef5b8d5509c0bdf6d488f649427d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * set_config</definition>
        <argsstring>(std::string option_name=&quot;&quot;, std::string default_filename=&quot;&quot;, const std::string &amp;help_message=&quot;Read an ini file&quot;, bool config_required=false)</argsstring>
        <name>set_config</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>default_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>help_message</declname>
          <defval>&quot;Read an ini file&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>config_required</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set a configuration ini file option, or clear it if no name passed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6192" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7192" bodyend="7216"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_option</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>remove_option</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Removes an option from the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>. Takes an option pointer. Returns true if found and removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6198" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7218" bodyend="7237"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1497276c3d2be458a9f57b6f9f65c3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" kindref="compound">Option_group</ref></defval>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* add_option_group</definition>
        <argsstring>(std::string group_name, std::string group_description=&quot;&quot;)</argsstring>
        <name>add_option_group</name>
        <param>
          <type>std::string</type>
          <declname>group_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>group_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>creates an option group as part of the given app </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6202" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6202" bodyend="6212"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb643feb22295f89542212f52ce3ce8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * _add_flag_internal</definition>
        <argsstring>(std::string flag_name, CLI::callback_t fun, std::string flag_description)</argsstring>
        <name>_add_flag_internal</name>
        <param>
          <type>std::string</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>CLI::callback_t</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>flag_description</declname>
        </param>
        <briefdescription>
<para>Internal function for adding a flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6119" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7137" bodyend="7160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Extras for subclassing</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a22e79d21d2fbf77c5c27ff047875600e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void pre_callback</definition>
        <argsstring>()</argsstring>
        <name>pre_callback</name>
        <briefdescription>
<para>This allows subclasses to inject code before callbacks but after parse. </para>
        </briefdescription>
        <detaileddescription>
<para>This does not run if any errors or help is thrown. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6340" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6340" bodyend="6340"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Post parsing</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae05f185842264e39e18609bf0892c24e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t count</definition>
        <argsstring>(std::string option_name) const</argsstring>
        <name>count</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Counts the number of times the given option was passed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6381" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6381" bodyend="6381"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>CLI11_NODISCARD std::vector&lt;App *&gt; get_subcommands</definition>
        <argsstring>() const</argsstring>
        <name>get_subcommands</name>
        <briefdescription>
<para>Get a subcommand pointer list to the currently selected subcommands (after parsing by default, in command line order; use parsed = false to get the original definition list.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6385" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6385" bodyend="6385"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b8aa435a7824989959657c95a07ecfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>CLI11_INLINE std::vector&lt; const App * &gt; get_subcommands</definition>
        <argsstring>(const std::function&lt; bool(const App *)&gt; &amp;filter) const</argsstring>
        <name>get_subcommands</name>
        <param>
          <type>const std::function&lt; bool(const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *)&gt; &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Get a filtered subcommand pointer list from the original definition list. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty function will provide all subcommands (const) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6389" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7492" bodyend="7505"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5e4369ae7837b55b7625514e3d8d6946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
        <definition>CLI11_INLINE std::vector&lt; App * &gt; get_subcommands</definition>
        <argsstring>(const std::function&lt; bool(App *)&gt; &amp;filter)</argsstring>
        <name>get_subcommands</name>
        <param>
          <type>const std::function&lt; bool(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *)&gt; &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Get a filtered subcommand pointer list from the original definition list. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty function will provide all subcommands </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6393" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7507" bodyend="7519"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91e12fbe8e73dacf3f07fa3e0336ef5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool got_subcommand</definition>
        <argsstring>(const App *subcom) const</argsstring>
        <name>got_subcommand</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>subcom</declname>
        </param>
        <briefdescription>
<para>Check to see if given subcommand was selected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6396" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6396" bodyend="6399"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4366841156555cabcc744672edcc4217" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool got_subcommand</definition>
        <argsstring>(std::string subcommand_name) const</argsstring>
        <name>got_subcommand</name>
        <param>
          <type>std::string</type>
          <declname>subcommand_name</declname>
        </param>
        <briefdescription>
<para>Check with name instead of pointer to see if subcommand was selected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6402" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6402" bodyend="6404"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa2b9497984b47074bf1908867a8bb22e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* excludes</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>excludes</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Sets excluded options for the subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6407" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6407" bodyend="6413"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a584154000428c699513a8d5fcd8d06f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* excludes</definition>
        <argsstring>(App *app)</argsstring>
        <name>excludes</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>Sets excluded subcommands for the subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6416" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6416" bodyend="6429"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9d308ff66a0f8d360bd3e488d1fa125" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* needs</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>needs</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6431" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6431" bodyend="6437"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abed7c4127e7154e54d454390026bf651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* needs</definition>
        <argsstring>(App *app)</argsstring>
        <name>needs</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6439" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6439" bodyend="6448"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_excludes</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>remove_excludes</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Removes an option from the excludes list of this subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6451" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7521" bodyend="7528"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8808949155ba78731522d5c45e7f8916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_excludes</definition>
        <argsstring>(App *app)</argsstring>
        <name>remove_excludes</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>Removes a subcommand from the excludes list of this subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6454" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7530" bodyend="7539"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_needs</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>remove_needs</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Removes an option from the needs list of this subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6457" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7541" bodyend="7548"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aec0be3a58d09023dbd0da58e8e5d1fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_needs</definition>
        <argsstring>(App *app)</argsstring>
        <name>remove_needs</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>Removes a subcommand from the needs list of this subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6460" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7550" bodyend="7557"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af26c608fed12cfaeee0a6e2465ac1035" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref> &gt;</type>
        <definition>CLI11_NODISCARD std::shared_ptr&lt;FormatterBase&gt; get_formatter</definition>
        <argsstring>() const</argsstring>
        <name>get_formatter</name>
        <briefdescription>
<para>Access the formatter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6492" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6492" bodyend="6492"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac5c01ff9b053f1e7a8501c01cf056ba7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref> &gt;</type>
        <definition>CLI11_NODISCARD std::shared_ptr&lt;Config&gt; get_config_formatter</definition>
        <argsstring>() const</argsstring>
        <name>get_config_formatter</name>
        <briefdescription>
<para>Access the config formatter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6495" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6495" bodyend="6495"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a979d7f4c7407afe7be9aa08d7a34662b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref> &gt;</type>
        <definition>CLI11_NODISCARD std::shared_ptr&lt;ConfigBase&gt; get_config_formatter_base</definition>
        <argsstring>() const</argsstring>
        <name>get_config_formatter_base</name>
        <briefdescription>
<para>Access the config formatter as a configBase pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6498" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6498" bodyend="6505"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string get_description</definition>
        <argsstring>() const</argsstring>
        <name>get_description</name>
        <briefdescription>
<para>Get the app or subcommand description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6508" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6508" bodyend="6508"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab81b4e3cdef7552b3f7257b0ddf0ef71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* description</definition>
        <argsstring>(std::string app_description)</argsstring>
        <name>description</name>
        <param>
          <type>std::string</type>
          <declname>app_description</declname>
        </param>
        <briefdescription>
<para>Set the description of the app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6511" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6511" bodyend="6514"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const Option * &gt;</type>
        <definition>CLI11_INLINE std::vector&lt; const Option * &gt; get_options</definition>
        <argsstring>(const std::function&lt; bool(const Option *)&gt; filter={}) const</argsstring>
        <name>get_options</name>
        <param>
          <type>const std::function&lt; bool(const Option *)&gt;</type>
          <declname>filter</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the list of options (user facing function, so returns raw pointers), has optional filter function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6517" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7590" bodyend="7603"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6180da32436acf9caa8bcd74fbecb8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Option * &gt;</type>
        <definition>CLI11_INLINE std::vector&lt; Option * &gt; get_options</definition>
        <argsstring>(const std::function&lt; bool(Option *)&gt; filter={})</argsstring>
        <name>get_options</name>
        <param>
          <type>const std::function&lt; bool(Option *)&gt;</type>
          <declname>filter</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Non-const version of the above. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6520" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7605" bodyend="7617"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * get_option_no_throw</definition>
        <argsstring>(std::string option_name) noexcept</argsstring>
        <name>get_option_no_throw</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Get an option by name (noexcept non-const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6523" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7619" bodyend="7635"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa983690ef8499db22af04291e9b5ed00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD CLI11_INLINE const Option * get_option_no_throw</definition>
        <argsstring>(std::string option_name) const noexcept</argsstring>
        <name>get_option_no_throw</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Get an option by name (noexcept const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6526" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7637" bodyend="7653"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD const Option* get_option</definition>
        <argsstring>(std::string option_name) const</argsstring>
        <name>get_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Get an option by name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6529" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6529" bodyend="6535"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a478eee852d6be1b41a3d996bd6e4b72c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* get_option</definition>
        <argsstring>(std::string option_name)</argsstring>
        <name>get_option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Get an option by name (non-const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6538" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6538" bodyend="6544"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a65bbcc369b1dce94207058aec8fc147b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Option *</type>
        <definition>const Option* operator[]</definition>
        <argsstring>(const std::string &amp;option_name) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Shortcut bracket operator for getting a pointer to an option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6547" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6547" bodyend="6547"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7a6d5ba67168a1d4928482e90679f4d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Option *</type>
        <definition>const Option* operator[]</definition>
        <argsstring>(const char *option_name) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Shortcut bracket operator for getting a pointer to an option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6550" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6550" bodyend="6550"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8b541e6f3cb51a57d01b59d700a465e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_ignore_case</definition>
        <argsstring>() const</argsstring>
        <name>get_ignore_case</name>
        <briefdescription>
<para>Check the status of ignore_case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6553" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6553" bodyend="6553"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3d0bed939c8c3062b440bf5a38df8516" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_ignore_underscore</definition>
        <argsstring>() const</argsstring>
        <name>get_ignore_underscore</name>
        <briefdescription>
<para>Check the status of ignore_underscore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6556" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6556" bodyend="6556"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a609427ae740364127e3d720d3379dbae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_fallthrough</definition>
        <argsstring>() const</argsstring>
        <name>get_fallthrough</name>
        <briefdescription>
<para>Check the status of fallthrough. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6559" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6559" bodyend="6559"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaef9e902d1c898a260c6b3d893e00b55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_allow_windows_style_options</definition>
        <argsstring>() const</argsstring>
        <name>get_allow_windows_style_options</name>
        <briefdescription>
<para>Check the status of the allow windows style options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6562" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6562" bodyend="6562"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0a45b6ebd9b11005cf7e73ba5bf97298" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_positionals_at_end</definition>
        <argsstring>() const</argsstring>
        <name>get_positionals_at_end</name>
        <briefdescription>
<para>Check the status of the allow windows style options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6565" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6565" bodyend="6565"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8a16a63a10270e0fff7d240ed4822cfd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_configurable</definition>
        <argsstring>() const</argsstring>
        <name>get_configurable</name>
        <briefdescription>
<para>Check the status of the allow windows style options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6568" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6568" bodyend="6568"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_group</definition>
        <argsstring>() const</argsstring>
        <name>get_group</name>
        <briefdescription>
<para>Get the group of this subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6571" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6571" bodyend="6571"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8da8669cd42e33a2121fb59fb2f0eee5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string get_footer</definition>
        <argsstring>() const</argsstring>
        <name>get_footer</name>
        <briefdescription>
<para>Generate and return the footer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6574" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6574" bodyend="6576"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t get_require_subcommand_min</definition>
        <argsstring>() const</argsstring>
        <name>get_require_subcommand_min</name>
        <briefdescription>
<para>Get the required min subcommand value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6579" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6579" bodyend="6579"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afad381247df12373537f6c6d0c008127" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t get_require_subcommand_max</definition>
        <argsstring>() const</argsstring>
        <name>get_require_subcommand_max</name>
        <briefdescription>
<para>Get the required max subcommand value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6582" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6582" bodyend="6582"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82883969eedd7f205421c80ea948396a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t get_require_option_min</definition>
        <argsstring>() const</argsstring>
        <name>get_require_option_min</name>
        <briefdescription>
<para>Get the required min option value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6585" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6585" bodyend="6585"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a077197f834d0a9781992882c7a775a4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t get_require_option_max</definition>
        <argsstring>() const</argsstring>
        <name>get_require_option_max</name>
        <briefdescription>
<para>Get the required max option value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6588" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6588" bodyend="6588"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad70da29928003f25de5d6737be340db6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_prefix_command</definition>
        <argsstring>() const</argsstring>
        <name>get_prefix_command</name>
        <briefdescription>
<para>Get the prefix command status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6591" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6591" bodyend="6591"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68255849687b80db424d2f2496a9848d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_allow_extras</definition>
        <argsstring>() const</argsstring>
        <name>get_allow_extras</name>
        <briefdescription>
<para>Get the status of allow extras. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6594" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6594" bodyend="6594"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adb854d8a9944e306e11497510854e240" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_required</definition>
        <argsstring>() const</argsstring>
        <name>get_required</name>
        <briefdescription>
<para>Get the status of required. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6597" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6597" bodyend="6597"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac168a4ba1dd08d74cf9d648170980eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_disabled</definition>
        <argsstring>() const</argsstring>
        <name>get_disabled</name>
        <briefdescription>
<para>Get the status of disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6600" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6600" bodyend="6600"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae8b9aa3494d0012ea516d5df28132437" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_silent</definition>
        <argsstring>() const</argsstring>
        <name>get_silent</name>
        <briefdescription>
<para>Get the status of silence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6603" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6603" bodyend="6603"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a37d471ba32260b027335e087c478e3ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_immediate_callback</definition>
        <argsstring>() const</argsstring>
        <name>get_immediate_callback</name>
        <briefdescription>
<para>Get the status of disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6606" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6606" bodyend="6606"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2abe129d2c30054dba9f4b6054ce9ade" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_disabled_by_default</definition>
        <argsstring>() const</argsstring>
        <name>get_disabled_by_default</name>
        <briefdescription>
<para>Get the status of disabled by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6609" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6609" bodyend="6609"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af1227eccfef8b760598df067460e325b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_enabled_by_default</definition>
        <argsstring>() const</argsstring>
        <name>get_enabled_by_default</name>
        <briefdescription>
<para>Get the status of disabled by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6612" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6612" bodyend="6612"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a593613ff40dd5c55e1174c38b3d0586c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_validate_positionals</definition>
        <argsstring>() const</argsstring>
        <name>get_validate_positionals</name>
        <briefdescription>
<para>Get the status of validating positionals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6614" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6614" bodyend="6614"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a45542f67bcb5a84a7cb3f6000c43ca74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_validate_optional_arguments</definition>
        <argsstring>() const</argsstring>
        <name>get_validate_optional_arguments</name>
        <briefdescription>
<para>Get the status of validating optional vector arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6616" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6616" bodyend="6616"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD config_extras_mode</type>
        <definition>CLI11_NODISCARD config_extras_mode get_allow_config_extras</definition>
        <argsstring>() const</argsstring>
        <name>get_allow_config_extras</name>
        <briefdescription>
<para>Get the status of allow extras. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6619" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6619" bodyend="6619"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* get_help_ptr</definition>
        <argsstring>()</argsstring>
        <name>get_help_ptr</name>
        <briefdescription>
<para>Get a pointer to the help flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6622" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6622" bodyend="6622"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa9248d418370c61bf9442db2f73aa5a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD const Option* get_help_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_help_ptr</name>
        <briefdescription>
<para>Get a pointer to the help flag. (const) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6625" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6625" bodyend="6625"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD const Option* get_help_all_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_help_all_ptr</name>
        <briefdescription>
<para>Get a pointer to the help all flag. (const) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6628" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6628" bodyend="6628"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39c66f4dfbe352d606965941f19c750e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* get_config_ptr</definition>
        <argsstring>()</argsstring>
        <name>get_config_ptr</name>
        <briefdescription>
<para>Get a pointer to the config option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6631" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6631" bodyend="6631"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5021ac2170d25f2d9192cf7c1b19600b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD const Option* get_config_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_config_ptr</name>
        <briefdescription>
<para>Get a pointer to the config option. (const) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6634" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6634" bodyend="6634"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a167974308bb56d52c33bbb358eca434d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* get_version_ptr</definition>
        <argsstring>()</argsstring>
        <name>get_version_ptr</name>
        <briefdescription>
<para>Get a pointer to the version option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6637" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6637" bodyend="6637"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa466134b451b3f5a8c071b498d740153" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const Option *</type>
        <definition>CLI11_NODISCARD const Option* get_version_ptr</definition>
        <argsstring>() const</argsstring>
        <name>get_version_ptr</name>
        <briefdescription>
<para>Get a pointer to the version option. (const) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6640" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6640" bodyend="6640"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* get_parent</definition>
        <argsstring>()</argsstring>
        <name>get_parent</name>
        <briefdescription>
<para>Get the parent of this subcommand (or nullptr if main app) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6643" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6643" bodyend="6643"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a125d7fa604a639e80957f801dc839aed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_NODISCARD const App* get_parent</definition>
        <argsstring>() const</argsstring>
        <name>get_parent</name>
        <briefdescription>
<para>Get the parent of this subcommand (or nullptr if main app) (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6646" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6646" bodyend="6646"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Get the name of the current app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6649" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6649" bodyend="6649"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::vector&lt; std::string &gt; &amp;</type>
        <definition>CLI11_NODISCARD const std::vector&lt;std::string&gt;&amp; get_aliases</definition>
        <argsstring>() const</argsstring>
        <name>get_aliases</name>
        <briefdescription>
<para>Get the aliases of the current app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6652" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6652" bodyend="6652"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0429ce7817da4d23222db14febd25850" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* clear_aliases</definition>
        <argsstring>()</argsstring>
        <name>clear_aliases</name>
        <briefdescription>
<para>clear all the aliases of the current <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6655" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6655" bodyend="6658"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string get_display_name</definition>
        <argsstring>(bool with_aliases=false) const</argsstring>
        <name>get_display_name</name>
        <param>
          <type>bool</type>
          <declname>with_aliases</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a display name for an app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6661" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7655" bodyend="7669"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD CLI11_INLINE bool check_name</definition>
        <argsstring>(std::string name_to_check) const</argsstring>
        <name>check_name</name>
        <param>
          <type>std::string</type>
          <declname>name_to_check</declname>
        </param>
        <briefdescription>
<para>Check the name, case insensitive and underscore insensitive if set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6664" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7671" bodyend="7697"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::vector&lt; std::string &gt;</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::vector&lt; std::string &gt; get_groups</definition>
        <argsstring>() const</argsstring>
        <name>get_groups</name>
        <briefdescription>
<para>Get the groups available directly from this option (in order) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6667" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7699" bodyend="7710"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afc3b4b130504111494d844e36cd4140e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::vector&lt; Option * &gt; &amp;</type>
        <definition>CLI11_NODISCARD const std::vector&lt;Option *&gt;&amp; parse_order</definition>
        <argsstring>() const</argsstring>
        <name>parse_order</name>
        <briefdescription>
<para>This gets a vector of pointers with the original parse order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6670" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6670" bodyend="6670"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::vector&lt; std::string &gt;</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::vector&lt; std::string &gt; remaining</definition>
        <argsstring>(bool recurse=false) const</argsstring>
        <name>remaining</name>
        <param>
          <type>bool</type>
          <declname>recurse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This returns the missing options from the current subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6673" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7712" bodyend="7736"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::vector&lt; std::string &gt;</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::vector&lt; std::string &gt; remaining_for_passthrough</definition>
        <argsstring>(bool recurse=false) const</argsstring>
        <name>remaining_for_passthrough</name>
        <param>
          <type>bool</type>
          <declname>recurse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This returns the missing options in a form ready for processing by another command line program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6676" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7738" bodyend="7742"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::size_t remaining_size</definition>
        <argsstring>(bool recurse=false) const</argsstring>
        <name>remaining_size</name>
        <param>
          <type>bool</type>
          <declname>recurse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This returns the number of remaining options, minus the <ndash/> separator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6679" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7744" bodyend="7756"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a32832401aebb9cfe2e53f95f6d6f9fe3" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend Option</definition>
        <argsstring></argsstring>
        <name>Option</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5606" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5606" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CLI11_INLINE App</definition>
        <argsstring>(std::string app_description, std::string app_name, App *parent)</argsstring>
        <name>App</name>
        <param>
          <type>std::string</type>
          <declname>app_description</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>app_name</declname>
        </param>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Special private constructor for subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref> </para>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5805" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6922" bodyend="6953"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _validate</definition>
        <argsstring>() const</argsstring>
        <name>_validate</name>
        <briefdescription>
<para>Check the options to make sure there are no conflicts. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently checks to see if multiple positionals exist with unlimited args and checks if the min and max options are feasible </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6688" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7758" bodyend="7791"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _configure</definition>
        <argsstring>()</argsstring>
        <name>_configure</name>
        <briefdescription>
<para>configure subcommands to enable parsing through the current object set the correct fallthrough and prefix for nameless subcommands and manage the automatic enable or disable makes sure parent is set correctly </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6693" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7793" bodyend="7811"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void run_callback</definition>
        <argsstring>(bool final_mode=false, bool suppress_final_callback=false)</argsstring>
        <name>run_callback</name>
        <param>
          <type>bool</type>
          <declname>final_mode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress_final_callback</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Internal function to run (<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>) callback, bottom up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6696" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7813" bodyend="7838"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD CLI11_INLINE bool _valid_subcommand</definition>
        <argsstring>(const std::string &amp;current, bool ignore_used=true) const</argsstring>
        <name>_valid_subcommand</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>current</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_used</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Check to see if a subcommand is valid. Give up immediately if subcommand max has been reached. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6699" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7840" bodyend="7851"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD detail::Classifier</type>
        <definition>CLI11_NODISCARD CLI11_INLINE detail::Classifier _recognize</definition>
        <argsstring>(const std::string &amp;current, bool ignore_used_subcommands=true) const</argsstring>
        <name>_recognize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>current</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_used_subcommands</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Selects a Classifier enum based on the type of the current argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6702" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7853" bodyend="7876"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_config_file</definition>
        <argsstring>()</argsstring>
        <name>_process_config_file</name>
        <briefdescription>
<para>Read and process a configuration file (main app only) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6708" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7878" bodyend="7908"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_env</definition>
        <argsstring>()</argsstring>
        <name>_process_env</name>
        <briefdescription>
<para>Get envname options if not yet passed. Runs on <emphasis>all</emphasis> subcommands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6711" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7910" bodyend="7940"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_callbacks</definition>
        <argsstring>()</argsstring>
        <name>_process_callbacks</name>
        <briefdescription>
<para>Process callbacks. Runs on <emphasis>all</emphasis> subcommands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6714" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7942" bodyend="7964"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_help_flags</definition>
        <argsstring>(bool trigger_help=false, bool trigger_all_help=false) const</argsstring>
        <name>_process_help_flags</name>
        <param>
          <type>bool</type>
          <declname>trigger_help</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>trigger_all_help</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Run help flag processing if any are found. </para>
        </briefdescription>
        <detaileddescription>
<para>The flags allow recursive calls to remember if there was a help flag on a parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6719" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7966" bodyend="7986"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_requirements</definition>
        <argsstring>()</argsstring>
        <name>_process_requirements</name>
        <briefdescription>
<para>Verify required options and cross requirements. Subcommands too (only if selected). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6722" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="7988" bodyend="8114"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process</definition>
        <argsstring>()</argsstring>
        <name>_process</name>
        <briefdescription>
<para>Process callbacks and such. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6725" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8116" bodyend="8136"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_extras</definition>
        <argsstring>()</argsstring>
        <name>_process_extras</name>
        <briefdescription>
<para>Throw an error if anything is left over and should not be. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6728" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8138" bodyend="8150"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a191738ec58e0f00abc81326aa955be3e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _process_extras</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args)</argsstring>
        <name>_process_extras</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Throw an error if anything is left over and should not be. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the args to fill in the missing items before throwing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6732" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8152" bodyend="8165"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void increment_parsed</definition>
        <argsstring>()</argsstring>
        <name>increment_parsed</name>
        <briefdescription>
<para>Internal function to recursively increment the parsed counter on the current app as well unnamed subcommands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6735" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8167" bodyend="8173"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _parse</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args)</argsstring>
        <name>_parse</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Internal parse function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6738" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8175" bodyend="8201"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1227ec2d01c5168b93cb547f4367e02" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _parse</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;&amp;args)</argsstring>
        <name>_parse</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Internal parse function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6741" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8203" bodyend="8217"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _parse_stream</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>_parse_stream</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Internal function to parse a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6744" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8219" bodyend="8228"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _parse_config</definition>
        <argsstring>(const std::vector&lt; ConfigItem &gt; &amp;args)</argsstring>
        <name>_parse_config</name>
        <param>
          <type>const std::vector&lt; <ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Parse one config param, return false if not found in any subcommand, remove if it is. </para>
        </briefdescription>
        <detaileddescription>
<para>If this has more than one dot.separated.name, go into the subcommand matching it Returns true if it managed to find the option, if false you&apos;ll need to remove the arg manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6750" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8230" bodyend="8235"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool _parse_single_config</definition>
        <argsstring>(const ConfigItem &amp;item, std::size_t level=0)</argsstring>
        <name>_parse_single_config</name>
        <param>
          <type>const <ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Fill in a single config option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6753" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8237" bodyend="8315"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool _parse_single</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args, bool &amp;positional_only)</argsstring>
        <name>_parse_single</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>positional_only</declname>
        </param>
        <briefdescription>
<para>Parse &quot;one&quot; argument (some may eat more than one), delegate to parent if fails, add to missing if missing from main return false if the parse has failed and needs to return to parent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6757" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8317" bodyend="8357"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::size_t _count_remaining_positionals</definition>
        <argsstring>(bool required_only=false) const</argsstring>
        <name>_count_remaining_positionals</name>
        <param>
          <type>bool</type>
          <declname>required_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Count the required remaining positional arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6760" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8359" bodyend="8369"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD CLI11_INLINE bool _has_remaining_positionals</definition>
        <argsstring>() const</argsstring>
        <name>_has_remaining_positionals</name>
        <briefdescription>
<para>Count the required remaining positional arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6763" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8371" bodyend="8379"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool _parse_positional</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args, bool haltOnSubcommand)</argsstring>
        <name>_parse_positional</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>haltOnSubcommand</declname>
        </param>
        <briefdescription>
<para>Parse a positional, go up the tree to check. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>haltOnSubcommand</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to true the operation will not process subcommands merely return false Return true if the positional was used false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>if we require a separator add it here</para>
<para>Try to find a local subcommand that is repeated</para>
<para>now try one last gasp at subcommands that have been executed before, go to root app and try to find a subcommand in a broader way, if one exists let the parent deal with it</para>
<para>If this is an option group don&apos;t deal with it</para>
<para>We are out of other options this goes to missing </para>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6768" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8381" bodyend="8503"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_NODISCARD CLI11_INLINE App * _find_subcommand</definition>
        <argsstring>(const std::string &amp;subc_name, bool ignore_disabled, bool ignore_used) const noexcept</argsstring>
        <name>_find_subcommand</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>subc_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_disabled</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_used</declname>
        </param>
        <briefdescription>
<para>Locate a subcommand by name with two conditions, should disabled subcommands be ignored, and should used subcommands be ignored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6773" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8506" bodyend="8522"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool _parse_subcommand</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args)</argsstring>
        <name>_parse_subcommand</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Parse a subcommand, modify args and continue. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike the others, this one will always allow fallthrough return true if the subcommand was processed false otherwise </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6779" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8524" bodyend="8550"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool _parse_arg</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;args, detail::Classifier current_type)</argsstring>
        <name>_parse_arg</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>detail::Classifier</type>
          <declname>current_type</declname>
        </param>
        <briefdescription>
<para>Parse a short (false) or long (true) argument, must be at the top of the list return true if the argument was processed or false if nothing was done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>if we require a separator add it here </para>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6783" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8552" bodyend="8721"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _trigger_pre_parse</definition>
        <argsstring>(std::size_t remaining_args)</argsstring>
        <name>_trigger_pre_parse</name>
        <param>
          <type>std::size_t</type>
          <declname>remaining_args</declname>
        </param>
        <briefdescription>
<para>Trigger the pre_parse callback if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6786" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8723" bodyend="8739"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>CLI11_INLINE App * _get_fallthrough_parent</definition>
        <argsstring>()</argsstring>
        <name>_get_fallthrough_parent</name>
        <briefdescription>
<para>Get the appropriate parent to fallthrough to which is the first one that has a name or the main app. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6789" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8741" bodyend="8750"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD CLI11_INLINE const std::string &amp; _compare_subcommand_names</definition>
        <argsstring>(const App &amp;subcom, const App &amp;base) const</argsstring>
        <name>_compare_subcommand_names</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>subcom</declname>
        </param>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Helper function to run through all possible comparisons of subcommand names to check there is no overlap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6792" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8752" bodyend="8801"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _move_to_missing</definition>
        <argsstring>(detail::Classifier val_type, const std::string &amp;val)</argsstring>
        <name>_move_to_missing</name>
        <param>
          <type>detail::Classifier</type>
          <declname>val_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Helper function to place extra values in the most appropriate position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6795" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8803" bodyend="8817"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _move_option</definition>
        <argsstring>(Option *opt, App *app)</argsstring>
        <name>_move_option</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>function that could be used by subclasses of <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> to shift options around into subcommands </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6799" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8819" bodyend="8856"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Creates a command line program, with very few defaults. </para>
    </briefdescription>
    <detaileddescription>
<para>To use, create a new <computeroutput>Program()</computeroutput> instance with <computeroutput>argc</computeroutput>, <computeroutput>argv</computeroutput>, and a help description. The templated add_option methods make it easy to prepare options. Remember to call <computeroutput>.start</computeroutput> before starting your program, so that the options can be evaluated and the help option doesn&apos;t accidentally run your program. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="669">
        <label>Option_group</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group"/>
        <childnode refid="668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="668">
        <label>App</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_app"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="672">
        <label>OptionBase&lt; OptionDefaults &gt;</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base"/>
      </node>
      <node id="670">
        <label>App</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_app"/>
        <childnode refid="670" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
        <childnode refid="671" relation="usage">
          <edgelabel>option_defaults_</edgelabel>
        </childnode>
      </node>
      <node id="671">
        <label>OptionDefaults</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults"/>
        <childnode refid="672" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5605" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5605" bodyend="6800"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb643feb22295f89542212f52ce3ce8d" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_add_flag_internal</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_compare_subcommand_names</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_configure</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_count_remaining_positionals</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_find_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_get_fallthrough_parent</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_has_remaining_positionals</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_move_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_move_to_missing</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1227ec2d01c5168b93cb547f4367e02" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_arg</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_config</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_positional</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_single</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_single_config</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_stream</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_parse_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_callbacks</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_config_file</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_env</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a191738ec58e0f00abc81326aa955be3e" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_help_flags</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_process_requirements</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_recognize</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_trigger_pre_parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_valid_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>_validate</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3cc14aa547ff5ac8885b11127ad03f8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae567e17d569d36bff8924329aea72a44" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abb07ee7fa4e542b5cd72cd4895065df2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_flag_function</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa8d0cfc48f11bdfed94349ee2fcf8b7" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab39730ca5e5df9cefbf9740b8ca8a318" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b29a9179fe3da2f2ccfefa06279082c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40342cbe1ff0d626be6d0332f8221c10" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option_function</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1497276c3d2be458a9f57b6f9f65c3e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad4b29d41ca534bf9c65ea34aa08a3fda" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_option_no_stream</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2e086b84f545436d7f570eab581c27ba" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>add_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6404244a5f76ae7c407b1c29f6cc7fd7" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>alias</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>aliases_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c0b4c95c2246c64ac915b0471958a1a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_config_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a860ba3afc9f4ce2e9c888864b1872ee3" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_config_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_config_extras_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4e54d234368404393b1ce7cecdbb37cc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_extras_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe9d597d34b973b211cd36d6ad767dcb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_windows_style_options</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>allow_windows_style_options_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>App</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a02ccff5126753b4ffcab4e389ed58956" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>App</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9655ed150557afb8cbffa8f26a473345" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>App</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9c1c691769ad7a23ec03880444fa0e2b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>check_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>clear</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0429ce7817da4d23222db14febd25850" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>clear_aliases</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6c3ea90b92c629563f35d35b73fac0b9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>config_formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>config_formatter_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>config_ptr_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae4e8a61c46c7b9a47fb7442f93e4c2ab" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>config_to_str</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a436c94f3e4f33ecc56fe8e06946b81b4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>configurable_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac2ca386068235802660cc62c460ca8ff" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>count</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae05f185842264e39e18609bf0892c24e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>count</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>count_all</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>default_startup</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab81b4e3cdef7552b3f7257b0ddf0ef71" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>description_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab7f3149ed992c3f85500af05e782da2c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>disabled</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>disabled_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab2d6a69ab64b222cc723cefce4c92493" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>disabled_by_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a998cc0b044ff3921c23acf073ef251d3" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>enabled_by_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>exclude_options_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>exclude_subcommands_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa2b9497984b47074bf1908867a8bb22e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a584154000428c699513a8d5fcd8d06f8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>exit</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac3ead65ee88595674c7818dc312e3d65" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>failure_message</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>failure_message_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04196aeaf97226205f8853fe056945b4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>fallthrough</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>fallthrough_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a60f297d7fa084079895748a644e03c33" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>final_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>final_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a30b11d4452413990fba2ec8fc0172efc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>footer</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d1bcef92a847020b411b2585067dd16" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>footer</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>footer_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>footer_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80f45622cc976c313bb69f6446c581da" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>formatter_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2215484bb3c1d34ca1b4e2114e990e75" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>formatter_fn</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_aliases</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_allow_config_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68255849687b80db424d2f2496a9848d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_allow_extras</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaef9e902d1c898a260c6b3d893e00b55" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_allow_windows_style_options</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac5c01ff9b053f1e7a8501c01cf056ba7" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_config_formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a979d7f4c7407afe7be9aa08d7a34662b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_config_formatter_base</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39c66f4dfbe352d606965941f19c750e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_config_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5021ac2170d25f2d9192cf7c1b19600b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_config_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8a16a63a10270e0fff7d240ed4822cfd" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac168a4ba1dd08d74cf9d648170980eb6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_disabled</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2abe129d2c30054dba9f4b6054ce9ade" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_disabled_by_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_display_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af1227eccfef8b760598df067460e325b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_enabled_by_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a609427ae740364127e3d720d3379dbae" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_fallthrough</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8da8669cd42e33a2121fb59fb2f0eee5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_footer</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af26c608fed12cfaeee0a6e2465ac1035" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_groups</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_help_all_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_help_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa9248d418370c61bf9442db2f73aa5a9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_help_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8b541e6f3cb51a57d01b59d700a465e1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_ignore_case</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3d0bed939c8c3062b440bf5a38df8516" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_ignore_underscore</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a37d471ba32260b027335e087c478e3ee" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_immediate_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a478eee852d6be1b41a3d996bd6e4b72c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa64469441e8b15077a781710a1e98871" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_option_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_option_no_throw</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa983690ef8499db22af04291e9b5ed00" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_option_no_throw</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_options</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6180da32436acf9caa8bcd74fbecb8be" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_options</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_parent</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a125d7fa604a639e80957f801dc839aed" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_parent</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0a45b6ebd9b11005cf7e73ba5bf97298" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_positionals_at_end</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad70da29928003f25de5d6737be340db6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_prefix_command</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a077197f834d0a9781992882c7a775a4b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_require_option_max</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82883969eedd7f205421c80ea948396a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_require_option_min</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afad381247df12373537f6c6d0c008127" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_require_subcommand_max</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_require_subcommand_min</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adb854d8a9944e306e11497510854e240" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae8b9aa3494d0012ea516d5df28132437" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_silent</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaecb71029b5eb048714ac9b628a9f110" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8146b29b69f5f615f2a3b36b2c84f00d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff814e6a6a22ec8373cbb6c51370431f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4c32b388e78dce87f7a2ec83dbdbf0bc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommand_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommands</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b8aa435a7824989959657c95a07ecfd" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommands</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5e4369ae7837b55b7625514e3d8d6946" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_subcommands</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a45542f67bcb5a84a7cb3f6000c43ca74" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_validate_optional_arguments</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a593613ff40dd5c55e1174c38b3d0586c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_validate_positionals</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a167974308bb56d52c33bbb358eca434d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_version_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa466134b451b3f5a8c071b498d740153" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>get_version_ptr</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91e12fbe8e73dacf3f07fa3e0336ef5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>got_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4366841156555cabcc744672edcc4217" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>got_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa87fcb3a7a564b563a1f2525e748b8e4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>group_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>has_automatic_name_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>help</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>help_all_ptr_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>help_ptr_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a228cf7aa0656d0046b3cb352de935951" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>ignore_case</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>ignore_case_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2533a70e2fdb56fb72b0230583f3ea0d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>ignore_underscore</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>ignore_underscore_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adfe1830c87c5e05a68bc4f97a195b674" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>immediate_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>immediate_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>increment_parsed</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>missing_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2642c0a46ee029e8a71b28d30ed2a28e" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>missing_t</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8d1f0de783c1d733da0520cad084a80" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>name_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>need_options_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>need_subcommands_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9d308ff66a0f8d360bd3e488d1fa125" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abed7c4127e7154e54d454390026bf651" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>operator bool</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a954a2649e205cac3d5c05c51f3448178" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a65bbcc369b1dce94207058aec8fc147b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>operator[]</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7a6d5ba67168a1d4928482e90679f4d5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>operator[]</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a32832401aebb9cfe2e53f95f6d6f9fe3" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>Option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab1438513a1d763814634737986617c85" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>option_defaults</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>option_defaults_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>options_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parent_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8f967543ae089d679078517ef937bb2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adde7905bad5a6390e40f437d9796dd77" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a950cfe0525e2b72cd0e7d86d0f961f39" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0dc0d9d96c02f6e1dac5acc867c91c0a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse_complete_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse_complete_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6508b3671057990c564e2872e7e3f6fb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse_from_stream</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afc3b4b130504111494d844e36cd4140e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse_order</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parse_order_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a85ddfe0dfa512e92b4f1da02abc67cbc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parsed</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parsed_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>parsed_subcommands_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa7dde3e7d08e4ee12665568f68fdd865" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>positionals_at_end</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>positionals_at_end_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a22e79d21d2fbf77c5c27ff047875600e" prot="public" virt="virtual"><scope>pxr_CLI::CLI::App</scope><name>pre_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>pre_parse_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>pre_parse_called_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb802d9960b5aefac40ee64851f48813" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>prefix_command</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>prefix_command_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68f0feab1c657383b1c1e21b35d1c779" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>preparse_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remaining</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remaining_for_passthrough</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remaining_size</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8808949155ba78731522d5c45e7f8916" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aec0be3a58d09023dbd0da58e8e5d1fe9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8942d46c22ff948571addc12b19046c0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>remove_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7575a99103cdeced539d3b82bb1e85fe" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af5767ab7c438e80a5199f01b1ffdec25" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4dae8efca9fb592375211a6e05204bdf" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_option_max_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_option_min_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0f5a053f7e47b9c6f5d96aafb8656575" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28ff6ea733a811cf87c68f7a42a10254" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae08daff7ea3e3b08a4b7292a4407f1af" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_subcommand_max_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>require_subcommand_min_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0b7a03be2977022e1273c72c617aed00" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>required_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>run_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a12ef5b8d5509c0bdf6d488f649427d42" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>set_config</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>set_help_all_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>set_help_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>set_version_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27318e507ec2d03076797ea771c35b0b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>set_version_flag</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeb76062af8973d6048b3d3beb7559844" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>silent</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>silent_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aef0e18348231875c846d51cd02792284" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>startup_mode</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>subcommands_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af8f8937c68ab7dfdc665271d287db368" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>validate_optional_arguments</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>validate_optional_arguments_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe07f600f0c293d6e0d74b48b5c67ce3" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>validate_positionals</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>validate_positionals_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>version</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::App</scope><name>version_ptr_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bbf259b886b9746e86466e57148c892" prot="public" virt="virtual"><scope>pxr_CLI::CLI::App</scope><name>~App</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
