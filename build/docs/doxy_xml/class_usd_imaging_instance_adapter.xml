<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_imaging_instance_adapter" kind="class" language="C++" prot="public">
    <compoundname>UsdImagingInstanceAdapter</compoundname>
    <basecompoundref refid="class_usd_imaging_prim_adapter" prot="public" virt="non-virtual">UsdImagingPrimAdapter</basecompoundref>
    <includes refid="instance_adapter_8h" local="no">instanceAdapter.h</includes>
    <innerclass refid="struct_usd_imaging_instance_adapter_1_1___compute_inherited_primvar_fn" prot="private">UsdImagingInstanceAdapter::_ComputeInheritedPrimvarFn</innerclass>
    <innerclass refid="struct_usd_imaging_instance_adapter_1_1___instancer_data" prot="private">UsdImagingInstanceAdapter::_InstancerData</innerclass>
    <innerclass refid="struct_usd_imaging_instance_adapter_1_1___proto_prim" prot="private">UsdImagingInstanceAdapter::_ProtoPrim</innerclass>
      <sectiondef kind="user-defined">
      <header>Parallel Setup and Resolve</header>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1adcc895d453b2f831bac168e5d56da210" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void TrackVariability</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdDirtyBits *timeVaryingBits, UsdImagingInstancerContext const *instancerContext=NULL) const override</argsstring>
        <name>TrackVariability</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a564bb6d6d7410a6ddb531b84ed4acab1">TrackVariability</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>timeVaryingBits</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>For the given <computeroutput>prim</computeroutput>, variability is detected and stored in <computeroutput>timeVaryingBits</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial values are cached into the value cache.</para>
<para>This method is expected to be called from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a81abe807121a4fa33867a79dc469c5c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void UpdateForTime</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, HdDirtyBits requestedBits, UsdImagingInstancerContext const *instancerContext=NULL) const override</argsstring>
        <name>UpdateForTime</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ab8a29444fdb073be8376f740382a292b">UpdateForTime</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>HdDirtyBits</type>
          <declname>requestedBits</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Populates the <computeroutput>cache</computeroutput> for the given <computeroutput>prim</computeroutput>, <computeroutput>time</computeroutput> and <computeroutput>requestedBits</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is expected to be called from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Change Processing</header>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a6d596e4e51cfba3e62dbecb034672813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HdDirtyBits</type>
        <definition>virtual HdDirtyBits ProcessPropertyChange</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;propertyName) override</argsstring>
        <name>ProcessPropertyChange</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a032673f9da38a14ae35d8bbda16df9b9">ProcessPropertyChange</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>propertyName</declname>
        </param>
        <briefdescription>
<para>Returns a bit mask of attributes to be updated, or HdChangeTracker::AllDirty if the entire prim must be resynchronized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a7ad92b96e500919268108636de99f22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ProcessPrimResync</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>ProcessPrimResync</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a00e21d912fefbaad864599c7d92aaa0b">ProcessPrimResync</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>When a PrimResync event occurs, the prim may have been deleted entirely, adapter plug-ins should override this method to free any per-prim state that was accumulated in the adapter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab82bf9ff9b978a420044c9fa754abca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ProcessPrimRemoval</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>ProcessPrimRemoval</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a5d4629b8ec9799c383091adc5b58355f">ProcessPrimRemoval</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes all associated Rprims and dependencies from the render index without scheduling them for repopulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a76126633edeb5c4c2410f621b42d6666" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdDirtyBits dirty, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7a1f10e2d4e33fefdd519e29122fbbad">MarkDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdDirtyBits</type>
          <declname>dirty</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aa6f35e8ba6ed501ab63269dc7d51819b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkRefineLevelDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkRefineLevelDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aaf29cda887c2c78eac0de3009b45f732">MarkRefineLevelDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab33f3872d17b1fcb3ff1acede36fb1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkReprDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkReprDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac3badad44051bfbe691511b0755e4993">MarkReprDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a8bd707ddc7ffa48d75b4983bd1d46b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkCullStyleDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkCullStyleDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a6dc902aab72315e6866b051ff730d572">MarkCullStyleDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab64642b87f65a3af272f36b70fc09fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkRenderTagDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkRenderTagDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a4c0720f4006fd3d5ee29f7049f936e33">MarkRenderTagDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aa7ce7e03cc2ecda18b5eb13f2942425e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkTransformDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkTransformDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a88bd811ca89b2b7da3ef723eef09212f">MarkTransformDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1acf03e2e02997b547b63805b83dc47330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkVisibilityDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkVisibilityDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aab5388d7d7073516840f7ab70bf03439">MarkVisibilityDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instancing</header>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a472ae1d6a94b40463e9c17ad394b6612" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt; &gt;</type>
        <definition>std::vector&lt;VtArray&lt;TfToken&gt; &gt; GetInstanceCategories</definition>
        <argsstring>(UsdPrim const &amp;prim) override</argsstring>
        <name>GetInstanceCategories</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a0fa5f7c6b0c0928b0881f68227e13659">GetInstanceCategories</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Return an array of the categories used by each instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ad025c4dfca7328b5a2ea8715ccd9b0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d GetInstancerTransform</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerPath, UsdTimeCode time) const override</argsstring>
        <name>GetInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a55fd9868660b92f4f47f68d7c6843888">GetInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get the instancer transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a5aab8b5764cea69054ec3299899a87c0" kindref="member">HdSceneDelegate::GetInstancerTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a5eaea042c619f43c1d4c9820d89a7655" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath GetInstancerId</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath) const override</argsstring>
        <name>GetInstancerId</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad3ef49ded4b9ace510159215eb86b18d">GetInstancerId</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
<para>Return the instancerId for this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1af0b5cfc2ea17352badc26a9662035454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SdfPathVector</type>
        <definition>SdfPathVector GetInstancerPrototypes</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath) const override</argsstring>
        <name>GetInstancerPrototypes</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a53f5a6c348355d522433952567f5a08b">GetInstancerPrototypes</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
<para>Return the list of known prototypes of this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aef10e570398e5715df1aee403893c710" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SampleInstancerTransform</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerPath, UsdTimeCode time, size_t maxSampleCount, float *sampleTimes, GfMatrix4d *sampleValues) override</argsstring>
        <name>SampleInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac6327a595c00ab00b7a7769230c190a2">SampleInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Sample the instancer transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1ab1498ca73626e7be29ddc569f0275139" kindref="member">HdSceneDelegate::SampleInstancerTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a9ec40e9e548998240045149472803fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SampleTransform</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, size_t maxNumSamples, float *sampleTimes, GfMatrix4d *sampleValues) override</argsstring>
        <name>SampleTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a32a6d8299c04a2faed8a3b738d97571f">SampleTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Samples the transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a35d67df1f59204464b0249f4241bae59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SamplePrimvar</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, TfToken const &amp;key, UsdTimeCode time, size_t maxNumSamples, float *sampleTimes, VtValue *sampleValues, VtIntArray *sampleIndices) override</argsstring>
        <name>SamplePrimvar</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a1a8cf9a322dd77daae259e9b341532f7">SamplePrimvar</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>sampleIndices</declname>
        </param>
        <briefdescription>
<para>Sample the primvar for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If *sampleIndices is not nullptr and the primvar has indices, it will sample the unflattened primvar and set *sampleIndices to the primvar&apos;s sampled indices. <simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" kindref="member">HdSceneDelegate::SamplePrimvar()</ref> and <ref refid="class_hd_scene_delegate_1a0664f6c5132d8c113383e4f7bdc2eb7e" kindref="member">HdSceneDelegate::SampleIndexedPrimvar()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a872ff5f5c60036dc01ea88ed26057cd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetPurpose</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, TfToken const &amp;instanceInheritablePurpose) const override</argsstring>
        <name>GetPurpose</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aab0ac7f12f08a58b9ddcdfbcd17052ff">GetPurpose</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>instanceInheritablePurpose</declname>
        </param>
        <briefdescription>
<para>Returns the purpose token for <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a non-empty <computeroutput>instanceInheritablePurpose</computeroutput> is specified and the prim doesn&apos;t have an explicitly authored or inherited purpose, it may inherit the instancer&apos;s purpose if the instance has an explicit purpose. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a1d3109b5952413cfea55b41f358786e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_px_osd_subdiv_tags" kindref="compound">PxOsdSubdivTags</ref></type>
        <definition>PxOsdSubdivTags GetSubdivTags</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetSubdivTags</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aba8d3e6328aba30da93752716429e171">GetSubdivTags</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get the subdiv tags for this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab6953d8bc3583677afcc79f23a82b287" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetTopology</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetTopology</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a9f4cb1953174726c7783f94d604574d1">GetTopology</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Gets the topology object of a specific Usd prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If the adapter is a mesh it will return an <ref refid="class_hd_mesh_topology" kindref="compound">HdMeshTopology</ref>, if it is of type basis curves, it will return an <ref refid="class_hd_basis_curves_topology" kindref="compound">HdBasisCurvesTopology</ref>. If the adapter does not have a topology, it returns an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a4cbb2c6ca72466c432b42ee037ea3878" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdCullStyle</type>
        <definition>HdCullStyle GetCullStyle</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetCullStyle</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a0508903536e217a3bc4e7a1a5aa4bd6d">GetCullStyle</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Gets the cullstyle of a specific path in the scene graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a220adabe0a9afe20e879f16da86de8ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d GetExtent</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetExtent</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ab030573ca777994e9d3494b2a0a22d19">GetExtent</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reads the extent from the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If the extent is not authored, an empty <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> is returned, the extent will not be computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a44e11f0758876f080701ee556582b119" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool GetVisible</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetVisible</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a877656d784ee6ce523e213f1b5ec2cfb">GetVisible</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns true if the given prim is visible, taking into account inherited visibility values. </para>
        </briefdescription>
        <detaileddescription>
<para>Inherited values are strongest, Usd has no notion of &quot;super vis/invis&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a15f47cf531923be913dea6875ad0a83e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool GetDoubleSided</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetDoubleSided</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1add2f0a29b507bb61258c6880b09d0ace">GetDoubleSided</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reads double-sided from the given prim. If not authored, returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aed6f8d990a3addf199a6c161821bd1bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d GetTransform</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, bool ignoreRootTransform=false) const override</argsstring>
        <name>GetTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a03804796b195bbea3a0c6ad6bc0c2360">GetTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreRootTransform</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fetches the transform for the given prim at the given time from a pre-computed cache of prim transforms. </para>
        </briefdescription>
        <detaileddescription>
<para>Requesting transforms at incoherent times is currently inefficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a7e3bdd61171532cc3833acf810bff7db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath GetMaterialId</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetMaterialId</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad6db080e66e56d11a4fda944cd094876">GetMaterialId</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a8533ec0ab785fd91a10983c5d2c2218d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetLightParamValue</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, const TfToken &amp;paramName, UsdTimeCode time) const override</argsstring>
        <name>GetLightParamValue</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a02ce9a5aa4feb6412e586f0e2168ec02">GetLightParamValue</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1af90c3ed54e7ab8d6d63bdc1d8723c391" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetMaterialResource</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetMaterialResource</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a287e074e3fc5afba11c21c71e32280a2">GetMaterialResource</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a89bfd745fc83281d5d0aa86b3e705e71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationInputDescriptorVector</type>
        <definition>HdExtComputationInputDescriptorVector GetExtComputationInputs</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationInputs</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7887a2a631e90852e31119192a251e43">GetExtComputationInputs</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a6c5f913a5dbc1dffa62d3bddc1bbc57a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationOutputDescriptorVector</type>
        <definition>HdExtComputationOutputDescriptorVector GetExtComputationOutputs</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationOutputs</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a09b590cd10756109c787c30629a04001">GetExtComputationOutputs</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ae84dbd510d992edb3f2463539be3d0f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationPrimvarDescriptorVector</type>
        <definition>HdExtComputationPrimvarDescriptorVector GetExtComputationPrimvars</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdInterpolation interpolation, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationPrimvars</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a0fd121398cba7fe07b09fcbe26becadb">GetExtComputationPrimvars</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdInterpolation</type>
          <declname>interpolation</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ad6c2c55aca084d325bd52f92a95414e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetExtComputationInput</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;name, UsdTimeCode time, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationInput</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aeec2cbd8f3454a6af348ffab21693d8c">GetExtComputationInput</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a2b0adc1187f2d54a953b74363816ab52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string GetExtComputationKernel</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationKernel</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1acaafa264485326b418baa4cf7d673b84">GetExtComputationKernel</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a21403349c6066e6479d5ca3cb5ef567b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetInstanceIndices</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerCachePath, SdfPath const &amp;prototypeCachePath, UsdTimeCode time) const override</argsstring>
        <name>GetInstanceIndices</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ae4a1289b2c77df83b10d93c79dfd0098">GetInstanceIndices</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerCachePath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>prototypeCachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aa4e361794eab684b95e6f4302d5a7375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue Get</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;key, UsdTimeCode time, VtIntArray *outIndices) const override</argsstring>
        <name>Get</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a027f6f1384b2dad97d3ecb09d77722d6">Get</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>outIndices</declname>
        </param>
        <briefdescription>
<para>Gets the value of the parameter named key for the given prim (which has the given cache path) and given time. </para>
        </briefdescription>
        <detaileddescription>
<para>If outIndices is not nullptr and the value has indices, it will return the unflattened value and set outIndices to the value&apos;s associated indices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="304" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nested instancing support</header>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a169b808932015b23a12b74cfcbcba72f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual GfMatrix4d GetRelativeInstancerTransform</definition>
        <argsstring>(SdfPath const &amp;parentInstancerPath, SdfPath const &amp;instancerPath, UsdTimeCode time) const override</argsstring>
        <name>GetRelativeInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a17e78ca5666d58cf15318316cc337200">GetRelativeInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>protoInstancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the transform of <computeroutput>protoInstancerPath</computeroutput> relative to <computeroutput>instancerPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instancerPath</computeroutput> must be managed by this adapter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="314" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Picking &amp; selection</header>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ae60bad8e351dcf22e6b0cd438f1e2051" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual SdfPath GetScenePrimPath</definition>
        <argsstring>(SdfPath const &amp;cachePath, int instanceIndex, HdInstancerContext *instancerContext) const override</argsstring>
        <name>GetScenePrimPath</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1afe88b2303da555cb22d4bcb94ea72333">GetScenePrimPath</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instanceIndex</declname>
        </param>
        <param>
          <type>HdInstancerContext *</type>
          <declname>instancerCtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000147"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Call and implement GetScenePrimPaths instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ad4ad7653bfdc1de9c92f8867e8e5320d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SdfPathVector</type>
        <definition>virtual SdfPathVector GetScenePrimPaths</definition>
        <argsstring>(SdfPath const &amp;cachePath, std::vector&lt; int &gt; const &amp;instanceIndices, std::vector&lt; HdInstancerContext &gt; *instancerCtxs) const override</argsstring>
        <name>GetScenePrimPaths</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ae7efe8724b8f44578192f7708a8eeaf2">GetScenePrimPaths</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>instanceIndices</declname>
        </param>
        <param>
          <type>std::vector&lt; HdInstancerContext &gt; *</type>
          <declname>instancerCtxs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a766b5c7fc1015b62eac45cb1f921591c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PopulateSelection</definition>
        <argsstring>(HdSelection::HighlightMode const &amp;highlightMode, SdfPath const &amp;cachePath, UsdPrim const &amp;usdPrim, int const hydraInstanceIndex, VtIntArray const &amp;parentInstanceIndices, HdSelectionSharedPtr const &amp;result) const override</argsstring>
        <name>PopulateSelection</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a64d3d2d6f49ba3cdda8f7b224527b2f3">PopulateSelection</reimplements>
        <param>
          <type><ref refid="class_hd_selection_1a98fbf004fcd9b83c51b34f506ed59a7e" kindref="member">HdSelection::HighlightMode</ref> const &amp;</type>
          <declname>highlightMode</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>hydraInstanceIndex</declname>
        </param>
        <param>
          <type>VtIntArray const &amp;</type>
          <declname>parentInstanceIndices</declname>
        </param>
        <param>
          <type>HdSelectionSharedPtr const &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Volume field information</header>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a08b68bea63e57413c3a163aa4b49f1f6" prot="private" static="no">
        <type>TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, size_t, SdfPath::Hash &gt;</type>
        <definition>typedef TfHashMap&lt;SdfPath, size_t, SdfPath::Hash&gt; _InstancerDrawCounts</definition>
        <argsstring></argsstring>
        <name>_InstancerDrawCounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="511" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a31c722c153f02b6e3c9542cba35e62ee" prot="private" static="no">
        <type>TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, _ProtoPrim, SdfPath::Hash &gt;</type>
        <definition>typedef TfHashMap&lt;SdfPath, _ProtoPrim, SdfPath::Hash&gt; _PrimMap</definition>
        <argsstring></argsstring>
        <name>_PrimMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="529" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a59e8cac4ef498a413072a764e872bddf" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, _InstancerData, SdfPath::Hash &gt;</type>
        <definition>typedef std::unordered_map&lt;SdfPath, _InstancerData, SdfPath::Hash&gt; _InstancerDataMap</definition>
        <argsstring></argsstring>
        <name>_InstancerDataMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="608" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a30e2ca1c92c506bc57c2efe2ba34d0f4" prot="private" static="no">
        <type>TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, SdfPath::Hash &gt;</type>
        <definition>typedef TfHashMap&lt;SdfPath, SdfPath, SdfPath::Hash&gt; _InstanceToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_InstanceToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="616" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a5d43e400ea064434625c2962fda94847" prot="private" static="no">
        <type>TfHashMultiMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, SdfPath::Hash &gt;</type>
        <definition>typedef TfHashMultiMap&lt;SdfPath, SdfPath, SdfPath::Hash&gt; _PrototypeToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_PrototypeToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="640" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a1774e3f442f58b74a35194d0e072edd5" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, SdfPath::Hash &gt;</type>
        <definition>typedef std::unordered_map&lt;SdfPath, SdfPath, SdfPath::Hash&gt; _ProtoPrimToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_ProtoPrimToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="646" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_imaging_instance_adapter_1a8040b105000cbbbf7d9ee94fbde906a3" prot="private" static="no" mutable="no">
        <type>_InstancerDataMap</type>
        <definition>_InstancerDataMap _instancerData</definition>
        <argsstring></argsstring>
        <name>_instancerData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="609" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_imaging_instance_adapter_1a9d795cf2bf2a81fa196928ddb9cc5dba" prot="private" static="no" mutable="no">
        <type>_InstanceToInstancerMap</type>
        <definition>_InstanceToInstancerMap _instanceToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_instanceToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="617" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_imaging_instance_adapter_1a2ffa589716c135a4bca32d06d5a35df2" prot="private" static="no" mutable="no">
        <type>_PrototypeToInstancerMap</type>
        <definition>_PrototypeToInstancerMap _prototypeToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_prototypeToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="641" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_imaging_instance_adapter_1a1cab2c203bd8716a75a4e80400d7a3f8" prot="private" static="no" mutable="no">
        <type>_ProtoPrimToInstancerMap</type>
        <definition>_ProtoPrimToInstancerMap _protoPrimToInstancerMap</definition>
        <argsstring></argsstring>
        <name>_protoPrimToInstancerMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="647" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab5319a6aaa024c7879484d1fa2f49834" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdVolumeFieldDescriptorVector</type>
        <definition>virtual HdVolumeFieldDescriptorVector GetVolumeFieldDescriptors</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;id, UsdTimeCode time) const override</argsstring>
        <name>GetVolumeFieldDescriptors</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad82a481b63f24cfbd7a3e5243ae24d2b">GetVolumeFieldDescriptors</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1acaff99fffb1485b95eb67bbbd6fe0eb3" prot="protected" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void _RemovePrim</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override final</argsstring>
        <name>_RemovePrim</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac6d7e37fabd76c2275b5e1798b4defae">_RemovePrim</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab01538530cc0494427e420f52d1a2ace" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _Populate</definition>
        <argsstring>(UsdPrim const &amp;prim, UsdImagingIndexProxy *index, UsdImagingInstancerContext const *instancerContext, SdfPath const &amp;parentProxyPath)</argsstring>
        <name>_Populate</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>parentProxyPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a783b558291c35ccecbe802dd6baed126" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsChildPrim</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath) const</argsstring>
        <name>_IsChildPrim</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a4f06b7bb61adfb4cffa3fb9d3e6f1484" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _PrimIsInstancer</definition>
        <argsstring>(UsdPrim const &amp;prim) const</argsstring>
        <name>_PrimIsInstancer</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1af99a69b711eef975d1f42083af7dd00a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _InsertProtoPrim</definition>
        <argsstring>(UsdPrimRange::iterator *iter, const TfToken &amp;protoName, SdfPath materialId, TfToken drawMode, TfToken inheritablePurpose, SdfPath instancerPath, UsdImagingPrimAdapterSharedPtr const &amp;primAdapter, UsdImagingPrimAdapterSharedPtr const &amp;instancerAdapter, UsdImagingIndexProxy *index, bool *isLeafInstancer)</argsstring>
        <name>_InsertProtoPrim</name>
        <param>
          <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">UsdPrimRange::iterator</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>protoName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
          <declname>materialId</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
          <declname>drawMode</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
          <declname>inheritablePurpose</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type>UsdImagingPrimAdapterSharedPtr const &amp;</type>
          <declname>primAdapter</declname>
        </param>
        <param>
          <type>UsdImagingPrimAdapterSharedPtr const &amp;</type>
          <declname>instancerAdapter</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isLeafInstancer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ad5cf080195b543da58858f17b9b8957c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ResyncPath</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index, bool reload)</argsstring>
        <name>_ResyncPath</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a87bee09143ea444f9a09c08cd97964fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ResyncInstancer</definition>
        <argsstring>(SdfPath const &amp;instancerPath, UsdImagingIndexProxy *index, bool reload)</argsstring>
        <name>_ResyncInstancer</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a206a97afcf1d5a56c18eebbdcd8c7b49" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VtIntArray</type>
        <definition>VtIntArray _ComputeInstanceMap</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, _InstancerData const &amp;instrData, UsdTimeCode time) const</argsstring>
        <name>_ComputeInstanceMap</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type>_InstancerData const &amp;</type>
          <declname>instrData</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a3d1e1e44633a6077c9526b9655368773" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComputeInstanceMapVariability</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, _InstancerData const &amp;instrData) const</argsstring>
        <name>_ComputeInstanceMapVariability</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type>_InstancerData const &amp;</type>
          <declname>instrData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a415cbe42a63a00e1e93a0ea6bff46c76" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>_ProtoPrim const  &amp;</type>
        <definition>_ProtoPrim const&amp; _GetProtoPrim</definition>
        <argsstring>(SdfPath const &amp;instancerPath, SdfPath const &amp;cachePath, UsdImagingInstancerContext *ctx) const</argsstring>
        <name>_GetProtoPrim</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a295b0e2e4531ddaf7cf4802f01e10106" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetProtoPrimForChild</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, _ProtoPrim const **proto, UsdImagingInstancerContext *ctx) const</argsstring>
        <name>_GetProtoPrimForChild</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>_ProtoPrim const **</type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a354bad709ad946048705ffe7af4b57ae" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComputeInstanceTransforms</definition>
        <argsstring>(UsdPrim const &amp;instancer, VtMatrix4dArray *transforms, UsdTimeCode time) const</argsstring>
        <name>_ComputeInstanceTransforms</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>VtMatrix4dArray *</type>
          <declname>transforms</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ab5edf611e09424e83ed44ca852a80a76" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GatherInstanceTransformsTimeSamples</definition>
        <argsstring>(UsdPrim const &amp;instancer, GfInterval interval, std::vector&lt; double &gt; *outTimes) const</argsstring>
        <name>_GatherInstanceTransformsTimeSamples</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>outTimes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a6a9d6e1be895ed81218feb5cc5a6f628" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GatherInstancePrimvarTimeSamples</definition>
        <argsstring>(UsdPrim const &amp;instancer, TfToken const &amp;key, GfInterval interval, std::vector&lt; double &gt; *outTimes) const</argsstring>
        <name>_GatherInstancePrimvarTimeSamples</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>outTimes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a4c0a3e7e022bdfe9199601652e128906" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsInstanceTransformVarying</definition>
        <argsstring>(UsdPrim const &amp;instancer) const</argsstring>
        <name>_IsInstanceTransformVarying</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a4a7dbbbd9e7c22fb7229dd568547561e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _ComputeInheritedPrimvar</definition>
        <argsstring>(UsdPrim const &amp;instancer, TfToken const &amp;primvarName, VtValue *result, UsdTimeCode time) const</argsstring>
        <name>_ComputeInheritedPrimvar</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>primvarName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a138b7d3f67478b99b7244c7a26dcada4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComputeInheritedPrimvar</definition>
        <argsstring>(UsdPrim const &amp;instancer, TfToken const &amp;primvarName, SdfValueTypeName const &amp;type, VtValue *result, UsdTimeCode time) const</argsstring>
        <name>_ComputeInheritedPrimvar</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>primvarName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a6e087eddab6661a5934ca3adc7b58481" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsInstanceInheritedPrimvarVarying</definition>
        <argsstring>(UsdPrim const &amp;instancer) const</argsstring>
        <name>_IsInstanceInheritedPrimvarVarying</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1af023583bb2eb61dde7ea97557aed76cf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _RunForAllInstancesToDraw</definition>
        <argsstring>(UsdPrim const &amp;instancer, Functor *fn) const</argsstring>
        <name>_RunForAllInstancesToDraw</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>Functor *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a936e838dd97c2c29d3914f2d78c7f809" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _RunForAllInstancesToDrawImpl</definition>
        <argsstring>(UsdPrim const &amp;instancer, std::vector&lt; UsdPrim &gt; *instanceContext, size_t *instanceIdx, Functor *fn) const</argsstring>
        <name>_RunForAllInstancesToDrawImpl</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt; *</type>
          <declname>instanceContext</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>instanceIdx</declname>
        </param>
        <param>
          <type>Functor *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ae327dc26f87caf212d6e5516c778c8de" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _CountAllInstancesToDraw</definition>
        <argsstring>(UsdPrim const &amp;instancer) const</argsstring>
        <name>_CountAllInstancesToDraw</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1af31e0beb92a26e91bb9ab572cf27d271" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _CountAllInstancesToDrawImpl</definition>
        <argsstring>(UsdPrim const &amp;instancer, _InstancerDrawCounts *drawCounts) const</argsstring>
        <name>_CountAllInstancesToDrawImpl</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>_InstancerDrawCounts *</type>
          <declname>drawCounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="513" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usd_imaging_instance_adapter_1a11426b96a15aab5849f0bd20a87e7c84" prot="public" static="no">
        <type><ref refid="class_usd_imaging_prim_adapter" kindref="compound">UsdImagingPrimAdapter</ref></type>
        <definition>using BaseAdapter =  UsdImagingPrimAdapter</definition>
        <argsstring></argsstring>
        <name>BaseAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="94" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a2b75fc256d76468f19ac8b687740406c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdImagingInstanceAdapter</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingInstanceAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1aba09b5f2bbc25c17f69187489fed6d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~UsdImagingInstanceAdapter</definition>
        <argsstring>()</argsstring>
        <name>~UsdImagingInstanceAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ac00a7b3d584fd24111a9a5d4b4bff2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual SdfPath Populate</definition>
        <argsstring>(UsdPrim const &amp;prim, UsdImagingIndexProxy *index, UsdImagingInstancerContext const *instancerContext=nullptr) override</argsstring>
        <name>Populate</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a47890dbd73ea260bc7709f1bdf410a79">Populate</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Called to populate the RenderIndex for this <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The adapter is expected to create one or more prims in the render index using the given proxy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1a48122c5fafba311add03b6ff90274fcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool ShouldCullChildren</definition>
        <argsstring>() const override</argsstring>
        <name>ShouldCullChildren</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad040936f7afba2447770f49c7c6c28b2">ShouldCullChildren</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_instance_adapter_1ae57ecb128adf0388f4977a2555ed0ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool IsInstancerAdapter</definition>
        <argsstring>() const override</argsstring>
        <name>IsInstancerAdapter</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aea5091e52d06638c414072478efb1bf9">IsInstancerAdapter</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="106" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Delegate support for instanced prims. </para>
    </briefdescription>
    <detaileddescription>
<para>In addition to prim schemas that support instancing, like the point instancer, USD has a built in instancing feature that will allow prims composed from the same assets, with compatible attributes, to be de-duplicated inside of USD.</para>
<para>When these prims are found during scene load, the prim location is marked as an instance (meaning prim.IsInstance() == true), and its descendants are added to a new hidden scene root. There can be multiple prototype scene roots, and each one can be pointed to by many instance prims, and these prototype sub-scenes can themselves contain instances.</para>
<para>We handle this by sending all instance prims to the instance adapter. In order to preserve USD&apos;s native instancing work during rendering, for each prototype scene root, we insert one hydra gprim per prototype USD gprim, and we insert a hydra instancer that computes all of the places these gprims (and any child instancers) are referenced in the scene, adjusting the instancing count accordingly.</para>
<para>The instance adapter is responsible for computing and passing down a small amount of inheritable data that we allow to vary per-instance: for example, transform and visibility state, and inherited constant primvars. Otherwise, prototypes have no knowledge of the instance prims that refer to them.</para>
<para>Just like the scene root, the root of the prototype tree isn&apos;t allowed to have attributes or a prim type; those are set on the instance prim instead. This means if a gprim is directly instanced, USD won&apos;t actually de-duplicate it. The instance adapter could theoretically bucket such gprims together, but the difficulty of doing so is the same as the difficulty of deduplicating arbitrary prims in the scene. Instead, the instance adapter refuses to image directly-instanced gprims, and the recommended authoring guidelines is to only enable USD instancing on enclosing scopes or xforms.</para>
<para>There&apos;s a small set of extremely-special-case prims that are allowed to be directly instanced, including cards and support prims that designate e.g. skinning buffers. These prim adapters opt-in via CanPopulateUsdInstance, and generally require very careful coding and support in the instance adapter; but they are useful for restricted schemas where we know how to vary the data per-instance or know how to efficiently aggregate instances.</para>
<para>Finally, there&apos;s a small (hopefully shrinking) set of inherited attributes that we need to respect, but don&apos;t know how to vary per-instance; for example, material bindings. If two instances point to the same USD proto root, but have different material bindings, we currently populate two hydra instancers with two sets of hydra prototypes. This cuts into the efficiency of instancing, so we try to minimize it. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7136">
        <label>UsdImagingInstanceAdapter</label>
        <link refid="class_usd_imaging_instance_adapter"/>
        <childnode refid="7137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7137">
        <label>UsdImagingPrimAdapter</label>
        <link refid="class_usd_imaging_prim_adapter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7138">
        <label>UsdImagingInstanceAdapter</label>
        <link refid="class_usd_imaging_instance_adapter"/>
        <childnode refid="7139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7139">
        <label>UsdImagingPrimAdapter</label>
        <link refid="class_usd_imaging_prim_adapter"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usdImaging/usdImaging/instanceAdapter.h" line="92" column="1" bodyfile="pxr/usdImaging/usdImaging/instanceAdapter.h" bodystart="91" bodyend="648"/>
    <listofallmembers>
      <member refid="class_usd_imaging_prim_adapter_1a3acd62abeb5877876c6fb3187bb5b768" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeAndMergePrimvar</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a4a7dbbbd9e7c22fb7229dd568547561e" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeInheritedPrimvar</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a138b7d3f67478b99b7244c7a26dcada4" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeInheritedPrimvar</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a206a97afcf1d5a56c18eebbdcd8c7b49" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeInstanceMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a3d1e1e44633a6077c9526b9655368773" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeInstanceMapVariability</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a354bad709ad946048705ffe7af4b57ae" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ComputeInstanceTransforms</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a2de0e5cdcc41dbb9238933b82e2696ad" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ConvertCachePathToIndexPath</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a15ea1d11cbaf4a977a455dcd26a608ab" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ConvertIndexPathToCachePath</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ae327dc26f87caf212d6e5516c778c8de" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_CountAllInstancesToDraw</name></member>
      <member refid="class_usd_imaging_instance_adapter_1af31e0beb92a26e91bb9ab572cf27d271" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_CountAllInstancesToDrawImpl</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a65141f4159be9e19c82a362855f90b08" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_DoesDelegateSupportCoordSys</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a6a9d6e1be895ed81218feb5cc5a6f628" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GatherInstancePrimvarTimeSamples</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab5edf611e09424e83ed44ca852a80a76" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GatherInstanceTransformsTimeSamples</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a85e468fc9b3e3be2022693f05c1c14a5" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_Get</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac5dbdbd13022f791e2e4cfe70d13ed17" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a4a6dc0e184f3440bbb259fdc3bd0eff4" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetBlurScaleCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a73278b6161cdd80f42c29eb9e02f78b6" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetCollectionCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ad447349f414e2fb89ee5a1616cfdaff2" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetCoordSysBindings</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aaf638c38cf7cba1408dff12452dd6153" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetCurrentTimeSamplingInterval</name></member>
      <member refid="class_usd_imaging_prim_adapter_1af364ee3f863c71feee279754dc6551a0" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetDisplayPredicate</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a166c993b978c0e3db9278942b3dfd89c" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetDisplayPredicateForPrototypes</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae9865af51540eb195b1886fe2193d32b" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetInheritedPrimvar</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a116a317fc39016f97e01470fd4fc94a2" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetInheritedPrimvars</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a83eece817ea0079ea7dcc20f7db351a2" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetMaterialBindingPurpose</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a32f3e8c45035ceca12ac6bee61f94a83" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetMaterialRenderContexts</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a48011ca4f223cae29c3d57f7b8fb770a" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetNonlinearSampleCountCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa68e47438cb74938a29953400a17338a" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetPrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae2e4abe6a7402aa004567519eefb8d33" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetPrimAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa7123e837e8f6eea4640e40424c0c84c" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetPrimPathFromInstancerChain</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a43f3131277ab8b4fc36d3c1cacbad7dc" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetPrimvarDescCache</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a415cbe42a63a00e1e93a0ea6bff46c76" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetProtoPrim</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a295b0e2e4531ddaf7cf4802f01e10106" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetProtoPrimForChild</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a542974a9ca4f49b5c19ff19b21169c97" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetPtr</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7c459b18bede439f52ba5438760b1533" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetRenderSettingsNamespaces</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac8519b98a3c896a54ab4cfe1a7752ed1" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetSceneLightsEnabled</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae0e8c8231d7bdf1104e0da2c97613bba" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetSceneMaterialsEnabled</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa687978f45ad0c4229a7f86267e4c44d" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetShaderSourceTypes</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a5c7dd739b7f935439753d3265de878ff" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetStage</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a2825aa3fa72d5bd449e410402ad50135" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_GetTimeWithOffset</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a8149a5f3eccd74a0f57fabe68253398d" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_HasPrimvarsPrefix</name></member>
      <member refid="class_usd_imaging_instance_adapter_1af99a69b711eef975d1f42083af7dd00a" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_InsertProtoPrim</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a8040b105000cbbbf7d9ee94fbde906a3" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_instancerData</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a59e8cac4ef498a413072a764e872bddf" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_InstancerDataMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a08b68bea63e57413c3a163aa4b49f1f6" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_InstancerDrawCounts</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a9d795cf2bf2a81fa196928ddb9cc5dba" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_instanceToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a30e2ca1c92c506bc57c2efe2ba34d0f4" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_InstanceToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a783b558291c35ccecbe802dd6baed126" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsChildPrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a586ff49ca9dfe35016879b147debcc30" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsInInvisedPaths</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a6e087eddab6661a5934ca3adc7b58481" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsInstanceInheritedPrimvarVarying</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a4c0a3e7e022bdfe9199601652e128906" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsInstanceTransformVarying</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7a2c563d8c6cfa3915c823aeaff218a2" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsPrimvarFilteringNeeded</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a958f1a296ddaf054bd82a56b2ad53856" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsTransformVarying</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a80079dbd18b49e2870b93f2d78e8cf52" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_IsVarying</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a9df1d3d6df8daf3273562b695a1ca163" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_MergePrimvar</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab01538530cc0494427e420f52d1a2ace" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_Populate</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a4f06b7bb61adfb4cffa3fb9d3e6f1484" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_PrimIsInstancer</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a31c722c153f02b6e3c9542cba35e62ee" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_PrimMap</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ab3bfd2ee8af3862060a225e884e5636d" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ProcessNonPrefixedPrimvarPropertyChange</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a36d6a9b05886771562a4403123837419" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ProcessPrefixedPrimvarPropertyChange</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a1cab2c203bd8716a75a4e80400d7a3f8" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_protoPrimToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a1774e3f442f58b74a35194d0e072edd5" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ProtoPrimToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a2ffa589716c135a4bca32d06d5a35df2" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_prototypeToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a5d43e400ea064434625c2962fda94847" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_PrototypeToInstancerMap</name></member>
      <member refid="class_usd_imaging_instance_adapter_1acaff99fffb1485b95eb67bbbd6fe0eb3" prot="protected" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>_RemovePrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a538e24c3cbcf79a976246260e73114ac" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_RemovePrimvar</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a07f13ae7d84ef3eaa4e068bb7c1faa05" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ResyncDependents</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a87bee09143ea444f9a09c08cd97964fc" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ResyncInstancer</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ad5cf080195b543da58858f17b9b8957c" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_ResyncPath</name></member>
      <member refid="class_usd_imaging_instance_adapter_1af023583bb2eb61dde7ea97557aed76cf" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_RunForAllInstancesToDraw</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a936e838dd97c2c29d3914f2d78c7f809" prot="private" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>_RunForAllInstancesToDrawImpl</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a11426b96a15aab5849f0bd20a87e7c84" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>BaseAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a49e80ece601561d1e995eae94e08c2d4" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>CanPopulateUsdInstance</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aa4e361794eab684b95e6f4302d5a7375" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>Get</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a4cbb2c6ca72466c432b42ee037ea3878" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetCullStyle</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a15f47cf531923be913dea6875ad0a83e" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetDoubleSided</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ad6c2c55aca084d325bd52f92a95414e2" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationInput</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a89bfd745fc83281d5d0aa86b3e705e71" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationInputs</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a2b0adc1187f2d54a953b74363816ab52" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationKernel</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a6c5f913a5dbc1dffa62d3bddc1bbc57a" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationOutputs</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ae84dbd510d992edb3f2463539be3d0f2" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationPrimvars</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afd979399c4fba8f6ef13cd29cb9772d2" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtComputationSceneInputNames</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a220adabe0a9afe20e879f16da86de8ad" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetExtent</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0a25f3037820bfb13128772e75a53398" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetFullModelDrawMode</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7d97704fab05ae2bc0113b929d654e60" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetImagingSubprimData</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a97d810a59c6a92894b3a06c8269813f1" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetImagingSubprims</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a9c918ff284690b5e1e7a4462505395b2" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetImagingSubprimType</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a5a5dfa57577eb2b2098eeaba659c6791" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInheritablePurpose</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a472ae1d6a94b40463e9c17ad394b6612" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInstanceCategories</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a21403349c6066e6479d5ca3cb5ef567b" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInstanceIndices</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a5eaea042c619f43c1d4c9820d89a7655" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInstancerId</name></member>
      <member refid="class_usd_imaging_instance_adapter_1af0b5cfc2ea17352badc26a9662035454" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInstancerPrototypes</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ad025c4dfca7328b5a2ea8715ccd9b0fd" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetInstancerTransform</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a8533ec0ab785fd91a10983c5d2c2218d" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetLightParamValue</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a7e3bdd61171532cc3833acf810bff7db" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetMaterialId</name></member>
      <member refid="class_usd_imaging_instance_adapter_1af90c3ed54e7ab8d6d63bdc1d8723c391" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetMaterialResource</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a010e0778482a42b42ba165166efabc84" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetMaterialUsdPath</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac9e7c449efbe05d779fd800879f5bc6c" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetModelDrawMode</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a4db7b2d4a6c25e03a8c01b9e8bbde42e" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetPerPrototypeIndices</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a29d07ca94ee9e2dc77b7698d213ab8eb" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetPopulationMode</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a872ff5f5c60036dc01ea88ed26057cd2" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetPurpose</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a169b808932015b23a12b74cfcbcba72f" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetRelativeInstancerTransform</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa99d4b06c897e99845f200b1f5221d74" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetRootTransform</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ae60bad8e351dcf22e6b0cd438f1e2051" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetScenePrimPath</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ad4ad7653bfdc1de9c92f8867e8e5320d" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetScenePrimPaths</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a1d3109b5952413cfea55b41f358786e7" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetSubdivTags</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab6953d8bc3583677afcc79f23a82b287" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetTopology</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aed6f8d990a3addf199a6c161821bd1bc" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetTransform</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a44e11f0758876f080701ee556582b119" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetVisible</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab5319a6aaa024c7879484d1fa2f49834" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>GetVolumeFieldDescriptors</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a3a6ff93d3e73829732dd6bb14306b6ec" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>InvalidateImagingSubprim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1acd5f73f97a79bae704bdbe07abc34719" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>InvalidateImagingSubprimFromDescendent</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a10c5e1d377c4f2e82f2c7bc1de56947b" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>InvokeComputation</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a25c765b37e08f2a3b69bd991e78f70d7" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>IsChildPath</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ae57ecb128adf0388f4977a2555ed0ffa" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>IsInstancerAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aaf7a4e61284ae49548aba3d401ee7959" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>IsSupported</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a27b7ddad94c5cbf034f76019217d6b7b" prot="protected" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>Keys</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aab6eddbe0eda35428bc78128ff40cc02" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>LookupLightParamAttribute</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aded37fdba6a4f9b10f6dabb147c65e53" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkCollectionsDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a8bd707ddc7ffa48d75b4983bd1d46b20" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkCullStyleDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a76126633edeb5c4c2410f621b42d6666" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkDirty</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7fcc3bc9e33cf6ed87113a26aff381a7" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkLightParamsDirty</name></member>
      <member refid="class_usd_imaging_prim_adapter_1acaed74cb6f80f49bab0a64af6c19dbac" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkMaterialDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aa6f35e8ba6ed501ab63269dc7d51819b" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkRefineLevelDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab64642b87f65a3af272f36b70fc09fd7" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkRenderTagDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab33f3872d17b1fcb3ff1acede36fb1ec" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkReprDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aa7ce7e03cc2ecda18b5eb13f2942425e" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkTransformDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1acf03e2e02997b547b63805b83dc47330" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkVisibilityDirty</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa843c9a1a329aa7bfe6b8390c9149631" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>MarkWindowPolicyDirty</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ac00a7b3d584fd24111a9a5d4b4bff2c1" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>Populate</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a766b5c7fc1015b62eac45cb1f921591c" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>PopulateSelection</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917bea" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>PopulationMode</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a9d96a026e6d752efad10e7d56ba1ea97" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ProcessPrimChange</name></member>
      <member refid="class_usd_imaging_instance_adapter_1ab82bf9ff9b978a420044c9fa754abca6" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ProcessPrimRemoval</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a7ad92b96e500919268108636de99f22a" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ProcessPrimResync</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a6d596e4e51cfba3e62dbecb034672813" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ProcessPropertyChange</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaaa9b4a5a614848b1570cada05749804b3" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>RepresentedByAncestor</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaab9c0aa7f313e3633b21f8282c5928d0c" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>RepresentsSelf</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaa9ecca1ce1365a76ac60bf226b0162503" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>RepresentsSelfAndDescendents</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a1900bbbbb7697bf97616311e7adf489f" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>SampleExtComputationInput</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aef10e570398e5715df1aee403893c710" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>SampleInstancerTransform</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a35d67df1f59204464b0249f4241bae59" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>SamplePrimvar</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a9ec40e9e548998240045149472803fc4" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>SampleTransform</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0a99170a4c02337f67756e421333445e" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>SetDelegate</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a48122c5fafba311add03b6ff90274fcd" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ShouldCullChildren</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0c15fd7ac042f6c64570ad805bdd3922" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>ShouldCullSubtree</name></member>
      <member refid="class_usd_imaging_prim_adapter_1af073155cf25e7e85112e10ea00bbcea0" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>ShouldIgnoreNativeInstanceSubtrees</name></member>
      <member refid="class_usd_imaging_instance_adapter_1adcc895d453b2f831bac168e5d56da210" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>TrackVariability</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a81abe807121a4fa33867a79dc469c5c6" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>UpdateForTime</name></member>
      <member refid="class_usd_imaging_instance_adapter_1a2b75fc256d76468f19ac8b687740406c" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>UsdImagingInstanceAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac7642794311da3960e71f8a2994058bb" prot="public" virt="non-virtual"><scope>UsdImagingInstanceAdapter</scope><name>UsdImagingPrimAdapter</name></member>
      <member refid="class_usd_imaging_instance_adapter_1aba09b5f2bbc25c17f69187489fed6d8a" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>~UsdImagingInstanceAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a8cfb397e864d736c7f30e4f4d55b2668" prot="public" virt="virtual"><scope>UsdImagingInstanceAdapter</scope><name>~UsdImagingPrimAdapter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
