<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_references" kind="class" language="C++" prot="public">
    <compoundname>UsdReferences</compoundname>
    <includes refid="references_8h" local="no">references.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_references_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrim</definition>
        <argsstring></argsstring>
        <name>UsdPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="215" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_references_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim _prim</definition>
        <argsstring></argsstring>
        <name>_prim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="285" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_references_1a77a5c29224b79f60bbb89c91782c28a6" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdReferences</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>UsdReferences</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="217" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="217" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_references_1a95bf456b23a234d3aa017015a4ad05e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddReference</definition>
        <argsstring>(const SdfReference &amp;ref, UsdListPosition position=UsdListPositionBackOfPrependList)</argsstring>
        <name>AddReference</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
<para>Adds a reference to the reference listOp at the current EditTarget, in the position specified by <computeroutput>position</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_references_1Usd_Failing_References" kindref="member">Why adding references may fail</ref> for explanation of expectations on <computeroutput>ref</computeroutput> and what return values and errors to expect, and <ref refid="_usd__page__object_model_1Usd_OM_ListOps" kindref="member">ListOps and List Editing</ref> for details on list editing and composition of listOps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a890b5681714fae1c1f807a8b0f4ab67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddReference</definition>
        <argsstring>(const std::string &amp;identifier, const SdfPath &amp;primPath, const SdfLayerOffset &amp;layerOffset=SdfLayerOffset(), UsdListPosition position=UsdListPositionBackOfPrependList)</argsstring>
        <name>AddReference</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a9f3efc53c1a5a8386fd4bd0cdae964e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddReference</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayerOffset &amp;layerOffset=SdfLayerOffset(), UsdListPosition position=UsdListPositionBackOfPrependList)</argsstring>
        <name>AddReference</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_references_1Usd_DefaultPrim_References" kindref="member">References Without Prim Paths</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a310c2ec6ea4c1864f9a0986a4cc7a660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddInternalReference</definition>
        <argsstring>(const SdfPath &amp;primPath, const SdfLayerOffset &amp;layerOffset=SdfLayerOffset(), UsdListPosition position=UsdListPositionBackOfPrependList)</argsstring>
        <name>AddInternalReference</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
<para>Add an internal reference to the specified prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_references_1Usd_Internal_References" kindref="member">Internal References</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a8fd641f7036babe56824c154fe12ed07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveReference</definition>
        <argsstring>(const SdfReference &amp;ref)</argsstring>
        <name>RemoveReference</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Removes the specified reference from the references listOp at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>This does not necessarily eliminate the reference completely, as it may be added or set in another layer in the same LayerStack as the current EditTarget. <simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_ListOps" kindref="member">ListOps and List Editing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a6df0e79e00349cafe24650755bf4ad64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearReferences</definition>
        <argsstring>()</argsstring>
        <name>ClearReferences</name>
        <briefdescription>
<para>Removes the authored reference listOp edits at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>The same caveats for Remove() apply to Clear(). In fact, Clear() may actually increase the number of composed references, if the listOp being cleared contained the &quot;remove&quot; operator. <simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_ListOps" kindref="member">ListOps and List Editing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1aa60f8d9938279668c63844d4bfc58e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetReferences</definition>
        <argsstring>(const SdfReferenceVector &amp;items)</argsstring>
        <name>SetReferences</name>
        <param>
          <type>const SdfReferenceVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Explicitly set the references, potentially blocking weaker opinions that add or remove items. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_references_1Usd_Failing_References" kindref="member">Why adding references may fail</ref> for explanation of expectations on <computeroutput>ref</computeroutput> and what return values and errors to expect, and <ref refid="_usd__page__object_model_1Usd_OM_ListOps" kindref="member">ListOps and List Editing</ref> for details on list editing and composition of listOps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1ac44ba4d2d2cd5b29ff6b2af537f5940c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
        <definition>const UsdPrim&amp; GetPrim</definition>
        <argsstring>() const</argsstring>
        <name>GetPrim</name>
        <briefdescription>
<para>Return the prim this object is bound to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="277" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1ae819fcefe5dd54e01483fb7764b42112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim GetPrim</definition>
        <argsstring>()</argsstring>
        <name>GetPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="280" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_references_1a9b3baad8c612d81b96e46f84d7e97580" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>()</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/references.h" line="282" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="282" bodyend="282"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_references" kindref="compound">UsdReferences</ref> provides an interface to authoring and introspecting references in Usd. </para>
    </briefdescription>
    <detaileddescription>
<para>References are the primary operator for &quot;encapsulated aggregation&quot; of scene description. <emphasis>aggregation</emphasis> means that references let us build up rich scenes by composing scene description recorded in a (most often) different layer. A scene can reference the same layer many times at different locations in a scene&apos;s namespace. Referenced scene description can be overridden in the referencing (or stronger) layers, allowing each instance of the reference to be directly customized/overridden. <emphasis>Encapsulated</emphasis> means that regardless of how much scene description is in the referenced layer, only the scene description under and composed from (via other composition arcs in the referenced layer) the targeted prim will be composed into the aggregate scene. Multiple references to the same layer will result in the layer being opened and retained in memory only once, although each referencing prim will compose unique <ref refid="class_pcp_prim_index" kindref="compound">prim indices</ref> for the tree rooted at the referenced prim.</para>
<sect1 id="class_usd_references_1Usd_References">
<title>Important Qualities and Effective Use of References</title>
<para><itemizedlist>
<listitem><para>Any prim can host zero, one or multiple references</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>References are <ref refid="class_sdf_list_op" kindref="compound">list editable</ref>; that is, they compose differently than ordinary properties and metadata. In any given LayerStack, each authored reference operation at the same <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> location in each layer (i.e. on the same prim) will compose into an aggregate result by adding to, removing from, or replacing &quot;weaker&quot; references.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>References can target the same LayerStack in which they are authored, as long as doing so does not introduce a cycle in the composition graph. See <ref refid="class_usd_references_1Usd_Internal_References" kindref="member">Expressing &quot;internal&quot; references to the containing LayerStack</ref></para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>The <computeroutput>identifier</computeroutput> component of a reference in the provided API can be a resolvable asset-path to some external layer, empty, in which case the reference targets the root layer of the LayerStack containing the referencing layer, or the identifier of an existing anonymous, in-memory-only <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref>. Care should be exercised in the latter case: calling Export() on an anonymous layer to serialize it to a file will not attempt to replace any references to anonymous layers with references to file-backed layers.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Opinions brought in by reference on an ancestor prim are weaker than opinions brought in by references on a descendant prim.</para>
</listitem>
</itemizedlist>
</para>
<sect2 id="class_usd_references_1Usd_DefaultPrim_References">
<title>Expressing references without prim paths</title>
<para>References may omit the target prim path if the referenced layer has the &apos;defaultPrim&apos; metadata set. In this case, the reference targets the &apos;defaultPrim&apos; in the referenced layer. A layer&apos;s defaultPrim can be authored and accessed on a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> whose root layer is the layer in question: see <ref refid="class_usd_stage_1a64ee78980b91d82dddfae78300276bca" kindref="member">UsdStage::GetDefaultPrim()</ref> and <ref refid="class_usd_stage_1a82b260faf91fbf721b0503075f2861e2" kindref="member">UsdStage::SetDefaultPrim()</ref>. One can also author defaultPrim directly on an <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> - see <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">SdfLayer::GetDefaultPrim()</ref>, <ref refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" kindref="member">SdfLayer::SetDefaultPrim()</ref>.</para>
</sect2>
<sect2 id="class_usd_references_1Usd_Internal_References">
<title>Expressing &quot;internal&quot; references to the containing LayerStack</title>
<para>References may omit the identifier specifying the referenced layer. This creates an &quot;internal&quot; reference. During composition, the referenced layer will be resolved to the root layer of the LayerStack containing the layer where the reference was authored. See <ref refid="class_usd_references_1a310c2ec6ea4c1864f9a0986a4cc7a660" kindref="member">AddInternalReference()</ref>.</para>
</sect2>
<sect2 id="class_usd_references_1Usd_Subroot_References">
<title>Referencing sub-root prims</title>
<para>References may target any prim in a layer. In the simplest and most common case, a root prim in a layer will be referenced. However, referencing sub-root prims can be useful in a variety of other cases; for example, a user might organize prims into a meaningful hierarchy in a layer for display purposes, then use sub-root references to reference a selection from that hierarchy into a scene.</para>
<para>Sub-root references have subtle behaviors with respect to opinions and composition arcs authored on ancestors of the referenced prim. Users should carefully consider this when deciding whether to use sub-root references. These issues can be avoided by not authoring any properties or metadata on ancestors of prims that are meant to be referenced.</para>
<para>Consider the following example:</para>
<para><programlisting><codeline><highlight class="normal">*<sp/>shot.usda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>*<sp/>asset.usda</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">#usda<sp/>1.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">over<sp/>&quot;Class&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>class<sp/>&quot;Class&quot;</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>over<sp/>&quot;B&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>over<sp/>&quot;Model&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>def<sp/>&quot;A&quot;<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>inherits<sp/>=<sp/>&lt;/Class&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>a<sp/>=<sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>token<sp/>purpose<sp/>=<sp/>&quot;render&quot;</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>def<sp/>&quot;B&quot;<sp/>(</highlight></codeline>
<codeline><highlight class="normal">over<sp/>&quot;A&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variantSets<sp/>=<sp/>&quot;type&quot;</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variants<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>over<sp/>&quot;B&quot;<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>type<sp/>=<sp/>&quot;a&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>variant<sp/>selection<sp/>won&apos;t<sp/>be<sp/>used<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variants<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>type<sp/>=<sp/>&quot;b&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variantSet<sp/>&quot;type&quot;<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;a&quot;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>&quot;Model&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>a<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">def<sp/>&quot;ReferencedModel&quot;<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>references<sp/>=<sp/>@./asset.usda@&lt;/A/B/Model&gt;<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;b&quot;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>&quot;Model&quot;</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>a<sp/>=<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>}</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Property and metadata opinions on the ancestors of the referenced prim <emphasis>are not</emphasis> present in the composed stage and will never contribute to any computations. In this example, the opinion for the attribute /A.purpose in asset.usda will never be visible in the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> for shot.usda.</para>
</listitem><listitem><para>Property and metadata opinions due to ancestral composition arcs <emphasis>are</emphasis> present in the composed stage. In this example, the attribute /Class/B/Model.a in shot.usda will be present in the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> for shot.usda, even though the inherit arc is authored on an ancestor of the referenced prim.</para>
</listitem><listitem><para>A consequence of these rules is that users might not be able to override ancestral variant selections that affect the referenced prim. In this example, the Model prim being referenced comes from the variant selection {type=a} on prim /A/B in asset.usda. The {type=b} variant cannot be selected in shot.usda, even if prims with the same hierarchy happen to exist there. There are various workarounds for this; in this example, the {type=b} variant selection could be authored on /Class/B/Model in shot.usda instead because of the inherit arc that was established on prim /A.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="class_usd_references_1Usd_Failing_References">
<title>Reasons why adding a reference may fail, why adding a reference may succeed but still generate errors, and what it all means</title>
<para><ref refid="class_usd_references_1a95bf456b23a234d3aa017015a4ad05e0" kindref="member">AddReference()</ref> and <ref refid="class_usd_references_1aa60f8d9938279668c63844d4bfc58e39" kindref="member">SetReferences()</ref> can each fail for a number of reasons. If one of the specified prim targets for one of the references is not a prim, we will generate an error, fail to author any scene description, and return <computeroutput>false</computeroutput>. If anything goes wrong in attempting to write the reference, we also return false, and the reference will also remain unauthored. Otherwise, if the reference was successfully authored, we will return <computeroutput>true</computeroutput>. <bold>A successful reference authoring operation may still generate composition errors!</bold> Just because the reference you specified was syntactically correct and therefore successfully authored, does not imply it was meaningful. If you wish to ensure that the reference you are about to author will be meaningfully consumable by your stage, you are strongly encouraged to <bold>ensure it will resolve to an actual file by using <ref refid="class_usd_stage_1a5d23f48d36d27f3f8e5099a8c655fa4e" kindref="member">UsdStage::ResolveIdentifierToEditTarget()</ref> before authoring the reference.</bold></para>
<para>When adding an internal reference, the given prim path is expected to be in the namespace of the owning prim&apos;s stage. Sub-root prim paths will be translated from this namespace to the namespace of the current edit target, if necessary. If a path cannot be translated, a coding error will be issued and no changes will be made. Non-sub-root paths will not be translated.</para>
<para>Immediately upon successful authoring of the reference (before returning from <ref refid="class_usd_references_1a95bf456b23a234d3aa017015a4ad05e0" kindref="member">AddReference()</ref>, <ref refid="class_usd_references_1a8fd641f7036babe56824c154fe12ed07" kindref="member">RemoveReference()</ref>, <ref refid="class_usd_references_1a6df0e79e00349cafe24650755bf4ad64" kindref="member">ClearReferences()</ref>, or <ref refid="class_usd_references_1aa60f8d9938279668c63844d4bfc58e39" kindref="member">SetReferences()</ref>), the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> on which the reference was authored will recompose the subtree rooted at the prim hosting the reference. If the provided identifier does not resolve to a layer that is already opened or that can be opened in the usd format, <emphasis>or</emphasis> if the provided primPath is not an actual prim in that layer, the stage&apos;s recomposition will fail, and pass on composition errors to the client. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="pxr/usd/usd/references.h" line="214" column="1" bodyfile="pxr/usd/usd/references.h" bodystart="214" bodyend="286"/>
    <listofallmembers>
      <member refid="class_usd_references_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" virt="non-virtual"><scope>UsdReferences</scope><name>_prim</name></member>
      <member refid="class_usd_references_1a310c2ec6ea4c1864f9a0986a4cc7a660" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>AddInternalReference</name></member>
      <member refid="class_usd_references_1a95bf456b23a234d3aa017015a4ad05e0" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>AddReference</name></member>
      <member refid="class_usd_references_1a890b5681714fae1c1f807a8b0f4ab67b" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>AddReference</name></member>
      <member refid="class_usd_references_1a9f3efc53c1a5a8386fd4bd0cdae964e4" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>AddReference</name></member>
      <member refid="class_usd_references_1a6df0e79e00349cafe24650755bf4ad64" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>ClearReferences</name></member>
      <member refid="class_usd_references_1ac44ba4d2d2cd5b29ff6b2af537f5940c" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>GetPrim</name></member>
      <member refid="class_usd_references_1ae819fcefe5dd54e01483fb7764b42112" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>GetPrim</name></member>
      <member refid="class_usd_references_1a9b3baad8c612d81b96e46f84d7e97580" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>operator bool</name></member>
      <member refid="class_usd_references_1a8fd641f7036babe56824c154fe12ed07" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>RemoveReference</name></member>
      <member refid="class_usd_references_1aa60f8d9938279668c63844d4bfc58e39" prot="public" virt="non-virtual"><scope>UsdReferences</scope><name>SetReferences</name></member>
      <member refid="class_usd_references_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" virt="non-virtual"><scope>UsdReferences</scope><name>UsdPrim</name></member>
      <member refid="class_usd_references_1a77a5c29224b79f60bbb89c91782c28a6" prot="private" virt="non-virtual"><scope>UsdReferences</scope><name>UsdReferences</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
