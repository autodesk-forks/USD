<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_get" kind="class" language="C++" prot="public">
    <compoundname>TfGet</compoundname>
    <includes refid="stl_8h" local="no">stl.h</includes>
    <templateparamlist>
      <param>
        <type>size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_get_1ab66525ff5b4997e9bae36382b39a120f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class PairOrTuple</type>
          </param>
        </templateparamlist>
        <type>typename std::tuple_element&lt; N, PairOrTuple &gt;::type</type>
        <definition>using return_type =  typename std::tuple_element&lt;N, PairOrTuple&gt;::type</definition>
        <argsstring></argsstring>
        <name>return_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stl.h" line="382" column="1" bodyfile="pxr/base/tf/stl.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_get_1af22dd2b17851a9e05ca17dc849f8a44e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PairOrTuple</type>
          </param>
        </templateparamlist>
        <type>constexpr return_type&lt; PairOrTuple &gt; &amp;</type>
        <definition>constexpr return_type&lt;PairOrTuple&gt;&amp; operator()</definition>
        <argsstring>(PairOrTuple &amp;p) const</argsstring>
        <name>operator()</name>
        <param>
          <type>PairOrTuple &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stl.h" line="385" column="1" bodyfile="pxr/base/tf/stl.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_get_1ac345fd8885eba01886591959cac766ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PairOrTuple</type>
          </param>
        </templateparamlist>
        <type>constexpr const return_type&lt; PairOrTuple &gt; &amp;</type>
        <definition>constexpr const return_type&lt;PairOrTuple&gt;&amp; operator()</definition>
        <argsstring>(const PairOrTuple &amp;p) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const PairOrTuple &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stl.h" line="391" column="1" bodyfile="pxr/base/tf/stl.h" bodystart="391" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_get_1a89598b9dd04878a790141b2376d8ac64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PairOrTuple</type>
          </param>
        </templateparamlist>
        <type>constexpr return_type&lt; PairOrTuple &gt; &amp;&amp;</type>
        <definition>constexpr return_type&lt;PairOrTuple&gt;&amp;&amp; operator()</definition>
        <argsstring>(PairOrTuple &amp;&amp;p) const</argsstring>
        <name>operator()</name>
        <param>
          <type>PairOrTuple &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stl.h" line="398" column="1" bodyfile="pxr/base/tf/stl.h" bodystart="398" bodyend="401"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Function object for retrieving the N&apos;th element of a std::pair or std::tuple. </para>
    </briefdescription>
    <detaileddescription>
<para>This is similar to std::get&lt;N&gt;, but wrapped up in a function object suitable for use with STL algorithms.</para>
<para>Example: <programlisting><codeline><highlight class="normal">const<sp/>std::vector&lt;std::pair&lt;int,<sp/>std::string&gt;&gt;<sp/>pairs<sp/>=<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;int&gt;<sp/>intsOnly(pairs.size());</highlight></codeline>
<codeline><highlight class="normal">std::transform(pairs.begin(),<sp/>pairs.end(),<sp/>intsOnly.begin(),<sp/>TfGet&lt;0&gt;());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/base/tf/stl.h" line="379" column="1" bodyfile="pxr/base/tf/stl.h" bodystart="378" bodyend="402"/>
    <listofallmembers>
      <member refid="class_tf_get_1af22dd2b17851a9e05ca17dc849f8a44e" prot="public" virt="non-virtual"><scope>TfGet</scope><name>operator()</name></member>
      <member refid="class_tf_get_1ac345fd8885eba01886591959cac766ab" prot="public" virt="non-virtual"><scope>TfGet</scope><name>operator()</name></member>
      <member refid="class_tf_get_1a89598b9dd04878a790141b2376d8ac64" prot="public" virt="non-virtual"><scope>TfGet</scope><name>operator()</name></member>
      <member refid="class_tf_get_1ab66525ff5b4997e9bae36382b39a120f" prot="public" virt="non-virtual"><scope>TfGet</scope><name>return_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
