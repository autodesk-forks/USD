<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4" kind="class" language="C++" prot="public">
    <compoundname>std::numeric_limits&lt; 1::pxr_half::half &gt;</compoundname>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aa61b5a22998d43945545372d0e0d5b76" prot="private" static="no">
        <type>1::pxr_half::half</type>
        <definition>using half =  1::pxr_half::half</definition>
        <argsstring></argsstring>
        <name>half</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="60" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ad89f3a90af3d85c7fb425e96caa56324" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_specialized</definition>
        <argsstring></argsstring>
        <name>is_specialized</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="64" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ada669da4a249acf7f8f1b0e7b7ec46d3" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int digits</definition>
        <argsstring></argsstring>
        <name>digits</name>
        <initializer>= PXR_HALF_MANT_DIG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="69" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af9198d805a08d46f461f1cc55d5dc911" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int digits10</definition>
        <argsstring></argsstring>
        <name>digits10</name>
        <initializer>= PXR_HALF_DIG</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="70" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a16df41e6f6bfdda63fb96658edf26aef" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_signed</definition>
        <argsstring></argsstring>
        <name>is_signed</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="71" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5b4f93189d2b567d34a23cfc4b664861" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_integer</definition>
        <argsstring></argsstring>
        <name>is_integer</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="72" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ad0602dd8daa5e2adb164767e9079d751" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_exact</definition>
        <argsstring></argsstring>
        <name>is_exact</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="73" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1addd2d818169288fbd6d762bb3e10871d" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int radix</definition>
        <argsstring></argsstring>
        <name>radix</name>
        <initializer>= PXR_HALF_RADIX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="74" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7962eb4bfd9d4281c6040e823735292b" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int min_exponent</definition>
        <argsstring></argsstring>
        <name>min_exponent</name>
        <initializer>= PXR_HALF_MIN_EXP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="78" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a09e82586dbac81af335b04a91d2f5489" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int min_exponent10</definition>
        <argsstring></argsstring>
        <name>min_exponent10</name>
        <initializer>= PXR_HALF_MIN_10_EXP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="79" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7f67af72c4a2e8d22df9e8b187f964e3" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int max_exponent</definition>
        <argsstring></argsstring>
        <name>max_exponent</name>
        <initializer>= PXR_HALF_MAX_EXP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="80" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1faee9927cd0e6fac717fd1b412afe3c" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int max_exponent10</definition>
        <argsstring></argsstring>
        <name>max_exponent10</name>
        <initializer>= PXR_HALF_MAX_10_EXP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="81" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ab30b325da1c1dfcdc9c13c85aaee7f43" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool has_infinity</definition>
        <argsstring></argsstring>
        <name>has_infinity</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="83" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1b2b1c85aac4c9eff148b666ff48f46a" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool has_quiet_NaN</definition>
        <argsstring></argsstring>
        <name>has_quiet_NaN</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="84" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ae789fdd7cf8bc176f7088bdd18bf1713" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool has_signaling_NaN</definition>
        <argsstring></argsstring>
        <name>has_signaling_NaN</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="85" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aba49456eaa38f97100e31137132866c3" prot="public" static="yes" mutable="no">
        <type>const float_denorm_style</type>
        <definition>const float_denorm_style has_denorm</definition>
        <argsstring></argsstring>
        <name>has_denorm</name>
        <initializer>= denorm_present</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="86" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af021c1472338b4652303b9230c78baf2" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool has_denorm_loss</definition>
        <argsstring></argsstring>
        <name>has_denorm_loss</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="87" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1cd1439e7e82afd546609799a2665381" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_iec559</definition>
        <argsstring></argsstring>
        <name>is_iec559</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="93" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5e438f0696c9e8c50789f4a5c4dbde20" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_bounded</definition>
        <argsstring></argsstring>
        <name>is_bounded</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="94" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ada10051cc72c57338125abc93c144765" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool is_modulo</definition>
        <argsstring></argsstring>
        <name>is_modulo</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="95" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a12664b8a4dae339ed27b46f2aea43991" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool traps</definition>
        <argsstring></argsstring>
        <name>traps</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="97" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5233f39718777e0c3ba3b111c4183275" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool tinyness_before</definition>
        <argsstring></argsstring>
        <name>tinyness_before</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="98" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af191bb54d704751fc73d0a46f9ab5f79" prot="public" static="yes" mutable="no">
        <type>const float_round_style</type>
        <definition>const float_round_style round_style</definition>
        <argsstring></argsstring>
        <name>round_style</name>
        <initializer>= round_to_nearest</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="99" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7d9be36b9ddf4e5505411baacd4bc859" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="66" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0f6973db60fa1f320c649425b02feb9a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="67" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aba577b1e56d7678984307ca9c14d0837" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half epsilon</definition>
        <argsstring>()</argsstring>
        <name>epsilon</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="75" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0fd875c5fea661e6bf8b2640cb9ed3ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half round_error</definition>
        <argsstring>()</argsstring>
        <name>round_error</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="76" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ae5e8f89ea5ca0ed37fdb0f17c6e8404c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half infinity</definition>
        <argsstring>()</argsstring>
        <name>infinity</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="88" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0c6367a6e2ad1538281029f981e953c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half quiet_NaN</definition>
        <argsstring>()</argsstring>
        <name>quiet_NaN</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="89" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1acd7bdb74521a7493e30406564988b74b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half signaling_NaN</definition>
        <argsstring>()</argsstring>
        <name>signaling_NaN</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="90" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ac0432d364aced20a4bd2586fd4ec09fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>half</type>
        <definition>static half denorm_min</definition>
        <argsstring>()</argsstring>
        <name>denorm_min</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ilmbase_halfLimits.h" line="91" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="91" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/gf/ilmbase_halfLimits.h" line="58" column="1" bodyfile="pxr/base/gf/ilmbase_halfLimits.h" bodystart="57" bodyend="109"/>
    <listofallmembers>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ac0432d364aced20a4bd2586fd4ec09fc" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>denorm_min</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ada669da4a249acf7f8f1b0e7b7ec46d3" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>digits</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af9198d805a08d46f461f1cc55d5dc911" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>digits10</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aba577b1e56d7678984307ca9c14d0837" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>epsilon</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aa61b5a22998d43945545372d0e0d5b76" prot="private" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>half</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1aba49456eaa38f97100e31137132866c3" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>has_denorm</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af021c1472338b4652303b9230c78baf2" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>has_denorm_loss</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ab30b325da1c1dfcdc9c13c85aaee7f43" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>has_infinity</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1b2b1c85aac4c9eff148b666ff48f46a" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>has_quiet_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ae789fdd7cf8bc176f7088bdd18bf1713" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>has_signaling_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ae5e8f89ea5ca0ed37fdb0f17c6e8404c" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>infinity</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5e438f0696c9e8c50789f4a5c4dbde20" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_bounded</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ad0602dd8daa5e2adb164767e9079d751" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_exact</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1cd1439e7e82afd546609799a2665381" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_iec559</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5b4f93189d2b567d34a23cfc4b664861" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_integer</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ada10051cc72c57338125abc93c144765" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_modulo</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a16df41e6f6bfdda63fb96658edf26aef" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_signed</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1ad89f3a90af3d85c7fb425e96caa56324" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>is_specialized</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0f6973db60fa1f320c649425b02feb9a" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>max</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7f67af72c4a2e8d22df9e8b187f964e3" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>max_exponent</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a1faee9927cd0e6fac717fd1b412afe3c" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>max_exponent10</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7d9be36b9ddf4e5505411baacd4bc859" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>min</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a7962eb4bfd9d4281c6040e823735292b" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>min_exponent</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a09e82586dbac81af335b04a91d2f5489" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>min_exponent10</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0c6367a6e2ad1538281029f981e953c2" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>quiet_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1addd2d818169288fbd6d762bb3e10871d" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>radix</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a0fd875c5fea661e6bf8b2640cb9ed3ee" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>round_error</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1af191bb54d704751fc73d0a46f9ab5f79" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>round_style</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1acd7bdb74521a7493e30406564988b74b" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>signaling_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a5233f39718777e0c3ba3b111c4183275" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>tinyness_before</name></member>
      <member refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4_1a12664b8a4dae339ed27b46f2aea43991" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; 1::pxr_half::half &gt;</scope><name>traps</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
