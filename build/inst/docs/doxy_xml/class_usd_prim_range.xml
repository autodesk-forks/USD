<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_prim_range" kind="class" language="C++" prot="public">
    <compoundname>UsdPrimRange</compoundname>
    <includes refid="prim_range_8h" local="no">primRange.h</includes>
    <innerclass refid="class_usd_prim_range_1_1_end_sentinel" prot="public">UsdPrimRange::EndSentinel</innerclass>
    <innerclass refid="class_usd_prim_range_1_1iterator" prot="public">UsdPrimRange::iterator</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usd_prim_range_1a64f0b6467f7e47131dfbfe002a53695c" prot="public" static="no">
        <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>using const_iterator =  iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="244" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_prim_range_1a57a367a87959274afc7d7f8ee3aa7d3a" prot="private" static="no" mutable="no">
        <type>Usd_PrimDataConstPtr</type>
        <definition>Usd_PrimDataConstPtr _begin</definition>
        <argsstring></argsstring>
        <name>_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="431" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_prim_range_1abd308e17a76b807d4d8e8ebc2bb052a1" prot="private" static="no" mutable="no">
        <type>Usd_PrimDataConstPtr</type>
        <definition>Usd_PrimDataConstPtr _end</definition>
        <argsstring></argsstring>
        <name>_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="432" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_prim_range_1a087a81cad54415ff78d3037e93af8e78" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _initProxyPrimPath</definition>
        <argsstring></argsstring>
        <name>_initProxyPrimPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="433" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_prim_range_1a4c22f884338b060a29c9b60d73c7a562" prot="private" static="no" mutable="no">
        <type>Usd_PrimFlagsPredicate</type>
        <definition>Usd_PrimFlagsPredicate _predicate</definition>
        <argsstring></argsstring>
        <name>_predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="434" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_prim_range_1a3097fb5d12d8e53870e6179f341623e3" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _initDepth</definition>
        <argsstring></argsstring>
        <name>_initDepth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="435" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_prim_range_1a94f02a1878316f30ac30c946d09314cb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _postOrder</definition>
        <argsstring></argsstring>
        <name>_postOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="436" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_prim_range_1a07b57fdf10a067532e7e1cfe76f4abf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrimRange</definition>
        <argsstring>()</argsstring>
        <name>UsdPrimRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="246" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a51c75623bbcb79fe036ea94a5e636cfa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrimRange</definition>
        <argsstring>(const UsdPrim &amp;start)</argsstring>
        <name>UsdPrimRange</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Construct a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting prims that pass the default predicate (as defined by <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="255" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1aa2ce75e9eafccae061dcc56bd8ba6e14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrimRange</definition>
        <argsstring>(const UsdPrim &amp;start, const Usd_PrimFlagsPredicate &amp;predicate)</argsstring>
        <name>UsdPrimRange</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Construct a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting prims that pass <computeroutput>predicate</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="262" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="262" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a0c62c15c8ed609e7e5e9518cf5f5c712" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return an iterator to the start of this range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="334" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a39112ae08f6ffc7ee58c6aa79772e094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Return a const_iterator to the start of this range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="338" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1aa385aff78f516b1d8d4f83a1950137f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return the first element of this range. The range must not be <ref refid="class_usd_prim_range_1a644718bb2fb240de962dc3c9a1fdf0dc" kindref="member">empty()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="343" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a68b688a51bd0cf6fb5bc2cba292209a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return the past-the-end iterator for this range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="350" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="350" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a93791e61ab486b4022c389d634b4facc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Return the past-the-end const_iterator for this range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="352" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a844ca5b6b1f4fe88937860a5b89abb46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void increment_begin</definition>
        <argsstring>()</argsstring>
        <name>increment_begin</name>
        <briefdescription>
<para>Modify this range by advancing the beginning by one. </para>
        </briefdescription>
        <detaileddescription>
<para>The range must not be empty, and the range must not be a pre- and post-order range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="356" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="356" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1afb00de51a6996970844718d8ef52a4b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void set_begin</definition>
        <argsstring>(iterator const &amp;newBegin)</argsstring>
        <name>set_begin</name>
        <param>
          <type><ref refid="class_usd_prim_range_1_1iterator" kindref="compound">iterator</ref> const &amp;</type>
          <declname>newBegin</declname>
        </param>
        <briefdescription>
<para>Set the start of this range to <computeroutput>newBegin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>newBegin</computeroutput> iterator must be within this range&apos;s <ref refid="class_usd_prim_range_1a0c62c15c8ed609e7e5e9518cf5f5c712" kindref="member">begin()</ref> and <ref refid="class_usd_prim_range_1a68b688a51bd0cf6fb5bc2cba292209a8" kindref="member">end()</ref>, and must not have <ref refid="class_usd_prim_range_1_1iterator_1a0304af5400e5dc3c4010298c86557c89" kindref="member">UsdPrimRange::iterator::IsPostVisit()</ref> be true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="363" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="363" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if this range contains no prims, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="371" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Return true if this range contains one or more prims, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="374" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a8458402412138cb8efca70affebcdb36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(UsdPrimRange const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if this range is equivalent to <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="377" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="377" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1af8101913c6ef9f89d629699bbbddc472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(UsdPrimRange const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if this range is not equivalent to <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="388" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="388" bodyend="390"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_prim_range_1a439e90828f0c677181aed903f3d52cf9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>static UsdPrimRange PreAndPostVisit</definition>
        <argsstring>(const UsdPrim &amp;start)</argsstring>
        <name>PreAndPostVisit</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Create a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting prims that pass the default predicate (as defined by <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref>) with pre- and post-order visitation. </para>
        </briefdescription>
        <detaileddescription>
<para>Pre- and post-order visitation means that each prim appears twice in the range; not only prior to all its descendants as with an ordinary traversal but also immediately following its descendants. This lets client code maintain state for subtrees. See <ref refid="class_usd_prim_range_1_1iterator_1a0304af5400e5dc3c4010298c86557c89" kindref="member">UsdPrimRange::iterator::IsPostVisit()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="280" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="280" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1ac14da6159eae29f5fbb69a4fb4040267" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>static UsdPrimRange PreAndPostVisit</definition>
        <argsstring>(const UsdPrim &amp;start, const Usd_PrimFlagsPredicate &amp;predicate)</argsstring>
        <name>PreAndPostVisit</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Create a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting prims that pass <computeroutput>predicate</computeroutput> with pre- and post-order visitation. </para>
        </briefdescription>
        <detaileddescription>
<para>Pre- and post-order visitation means that each prim appears twice in the range; not only prior to all its descendants as with an ordinary traversal but also immediately following its descendants. This lets client code maintain state for subtrees. See <ref refid="class_usd_prim_range_1_1iterator_1a0304af5400e5dc3c4010298c86557c89" kindref="member">UsdPrimRange::iterator::IsPostVisit()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="296" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="296" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a1679a71108b246f779ad352cb184c9cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>static UsdPrimRange AllPrims</definition>
        <argsstring>(const UsdPrim &amp;start)</argsstring>
        <name>AllPrims</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Construct a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting all prims (including deactivated, undefined, and abstract prims). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="307" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a35b65db9726e26a7a00a4173e6f63cd6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>static UsdPrimRange AllPrimsPreAndPostVisit</definition>
        <argsstring>(const UsdPrim &amp;start)</argsstring>
        <name>AllPrimsPreAndPostVisit</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Construct a PrimRange that traverses the subtree rooted at <computeroutput>start</computeroutput> in depth-first order, visiting all prims (including deactivated, undefined, and abstract prims) with pre- and post-order visitation. </para>
        </briefdescription>
        <detaileddescription>
<para>Pre- and post-order visitation means that each prim appears twice in the range; not only prior to all its descendants as with an ordinary traversal but also immediately following its descendants. This lets client code maintain state for subtrees. See <ref refid="class_usd_prim_range_1_1iterator_1a0304af5400e5dc3c4010298c86557c89" kindref="member">UsdPrimRange::iterator::IsPostVisit()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="321" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></type>
        <definition>static USD_API UsdPrimRange Stage</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const Usd_PrimFlagsPredicate &amp;predicate=UsdPrimDefaultPredicate)</argsstring>
        <name>Stage</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
          <defval><ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref></defval>
        </param>
        <briefdescription>
<para>Create a PrimRange that traverses all the prims on <computeroutput>stage</computeroutput>, and visits those that pass the default predicate (as defined by <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="330" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_prim_range_1a396e91fe2986200dbf80473f01598bc6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrimRange</definition>
        <argsstring>(Usd_PrimDataConstPtr begin, Usd_PrimDataConstPtr end, const SdfPath &amp;proxyPrimPath, const Usd_PrimFlagsPredicate &amp;predicate=UsdPrimDefaultPredicate)</argsstring>
        <name>UsdPrimRange</name>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Usd_PrimDataConstPtr</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
          <defval><ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="393" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="393" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_range_1aab4530687b3da26dff50fe7a50191243" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _Init</definition>
        <argsstring>(const Usd_PrimData *first, const Usd_PrimData *last, const SdfPath &amp;proxyPrimPath, const Usd_PrimFlagsPredicate &amp;predicate=UsdPrimDefaultPredicate)</argsstring>
        <name>_Init</name>
        <param>
          <type>const Usd_PrimData *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const Usd_PrimData *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
          <defval><ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/primRange.h" line="403" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="403" bodyend="425"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An forward-iterable range that traverses a subtree of prims rooted at a given prim in depth-first order. </para>
    </briefdescription>
    <detaileddescription>
<para>In addition to depth-first order, <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> provides the optional ability to traverse in depth-first pre- and post-order wher prims appear twice in the range; first before all descendants and then again immediately after all descendants. This is useful for maintaining state associated with subtrees, in a stack-like fashion. See <ref refid="class_usd_prim_range_1_1iterator_1a0304af5400e5dc3c4010298c86557c89" kindref="member">UsdPrimRange::iterator::IsPostVisit()</ref> to detect when an iterator is visiting a prim for the second time.</para>
<para>There are several constructors providing different levels of configurability; ultimately, one can provide a prim predicate for a custom iteration, just as one would use <ref refid="class_usd_prim_1a41fba977a56f9a6c1c8e2ed1e98c337d" kindref="member">UsdPrim::GetFilteredChildren()</ref> in a custom recursion.</para>
<para>Why would one want to use a <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> rather than just iterating over the results of <ref refid="class_usd_prim_1a35097b9294275723ef886d39f12d0546" kindref="member">UsdPrim::GetFilteredDescendants()</ref> ? Primarily, if one of the following applies: <itemizedlist>
<listitem><para>You need to perform pre-and-post-order processing </para>
</listitem>
<listitem><para>You may want to prune sub-trees from processing (see <ref refid="class_usd_prim_range_1_1iterator_1a133177263fafb6a36fa32f4800177cc0" kindref="member">UsdPrimRange::iterator::PruneChildren()</ref>) </para>
</listitem>
<listitem><para>You want to treat the root prim itself uniformly with its descendents (GetFilteredDescendants() will not return the root prim itself, while <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> will - see <ref refid="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" kindref="member">UsdPrimRange::Stage</ref> for an exception).</para>
</listitem>
</itemizedlist>
<bold>Using <ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> in C++</bold></para>
<para><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref> provides standard container-like semantics. For example: <programlisting><codeline><highlight class="normal">//<sp/>simple<sp/>range-for<sp/>iteration</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(UsdPrim<sp/>prim:<sp/>UsdPrimRange(rootPrim))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessPrim(prim);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>using<sp/>stl<sp/>algorithms</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;UsdPrim&gt;<sp/>meshes;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>range<sp/>=<sp/>stage-&gt;Traverse();</highlight></codeline>
<codeline><highlight class="normal">std::copy_if(range.begin(),<sp/>range.end(),<sp/>std::back_inserter(meshes),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](UsdPrim<sp/>const<sp/>&amp;)<sp/>{<sp/>return<sp/>prim.IsA&lt;UsdGeomMesh&gt;();<sp/>});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>iterator-based<sp/>iterating,<sp/>with<sp/>subtree<sp/>pruning</highlight></codeline>
<codeline><highlight class="normal">UsdPrimRange<sp/>range(rootPrim);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(auto<sp/>iter<sp/>=<sp/>range.begin();<sp/>iter<sp/>!=<sp/>range.end();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(UsdModelAPI(*iter).GetKind()<sp/>==<sp/>KindTokens-&gt;component)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter.PruneChildren();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonComponents.push_back(*iter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Using Usd.PrimRange in python</bold></para>
<para>The python wrapping for PrimRange is python-iterable, so it can used directly as the object of a &quot;for x in...&quot; clause; however in that usage one loses access to PrimRange methods such as PruneChildren() and IsPostVisit(). Simply create the iterator outside the loop to overcome this limitation. Finally, in python, prim predicates must be combined with bit-wise operators rather than logical operators because the latter are not overridable. <programlisting filename=".py"><codeline><highlight class="comment">#<sp/>simple<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>prim<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Usd.PrimRange(rootPrim):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessPrim(prim)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>filtered<sp/>range<sp/>using<sp/>iterator<sp/>to<sp/>invoke<sp/>iterator<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">it<sp/>=<sp/>iter(Usd.PrimRange.Stage(stage,<sp/>Usd.PrimIsLoaded<sp/>&amp;<sp/>~Usd.PrimIsAbstract))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>prim<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>it:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Usd.ModelAPI(prim).GetKind()<sp/>==<sp/>Kind.Tokens.component:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.PruneChildren()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonComponents.append(prim)</highlight></codeline>
</programlisting></para>
<para>Finally, since iterators in python are not directly dereferencable, we provide the <emphasis>python</emphasis> <emphasis>only</emphasis> methods GetCurrentPrim() and IsValid(), documented in the python help system. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/primRange.h" line="119" column="1" bodyfile="pxr/usd/usd/primRange.h" bodystart="118" bodyend="437"/>
    <listofallmembers>
      <member refid="class_usd_prim_range_1a57a367a87959274afc7d7f8ee3aa7d3a" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_begin</name></member>
      <member refid="class_usd_prim_range_1abd308e17a76b807d4d8e8ebc2bb052a1" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_end</name></member>
      <member refid="class_usd_prim_range_1aab4530687b3da26dff50fe7a50191243" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_Init</name></member>
      <member refid="class_usd_prim_range_1a3097fb5d12d8e53870e6179f341623e3" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_initDepth</name></member>
      <member refid="class_usd_prim_range_1a087a81cad54415ff78d3037e93af8e78" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_initProxyPrimPath</name></member>
      <member refid="class_usd_prim_range_1a94f02a1878316f30ac30c946d09314cb" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_postOrder</name></member>
      <member refid="class_usd_prim_range_1a4c22f884338b060a29c9b60d73c7a562" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>_predicate</name></member>
      <member refid="class_usd_prim_range_1a1679a71108b246f779ad352cb184c9cc" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>AllPrims</name></member>
      <member refid="class_usd_prim_range_1a35b65db9726e26a7a00a4173e6f63cd6" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>AllPrimsPreAndPostVisit</name></member>
      <member refid="class_usd_prim_range_1a0c62c15c8ed609e7e5e9518cf5f5c712" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>begin</name></member>
      <member refid="class_usd_prim_range_1a39112ae08f6ffc7ee58c6aa79772e094" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>cbegin</name></member>
      <member refid="class_usd_prim_range_1a93791e61ab486b4022c389d634b4facc" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>cend</name></member>
      <member refid="class_usd_prim_range_1a64f0b6467f7e47131dfbfe002a53695c" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>const_iterator</name></member>
      <member refid="class_usd_prim_range_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>empty</name></member>
      <member refid="class_usd_prim_range_1a68b688a51bd0cf6fb5bc2cba292209a8" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>end</name></member>
      <member refid="class_usd_prim_range_1aa385aff78f516b1d8d4f83a1950137f5" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>front</name></member>
      <member refid="class_usd_prim_range_1a844ca5b6b1f4fe88937860a5b89abb46" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>increment_begin</name></member>
      <member refid="class_usd_prim_range_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>operator bool</name></member>
      <member refid="class_usd_prim_range_1af8101913c6ef9f89d629699bbbddc472" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>operator!=</name></member>
      <member refid="class_usd_prim_range_1a8458402412138cb8efca70affebcdb36" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>operator==</name></member>
      <member refid="class_usd_prim_range_1a439e90828f0c677181aed903f3d52cf9" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>PreAndPostVisit</name></member>
      <member refid="class_usd_prim_range_1ac14da6159eae29f5fbb69a4fb4040267" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>PreAndPostVisit</name></member>
      <member refid="class_usd_prim_range_1afb00de51a6996970844718d8ef52a4b5" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>set_begin</name></member>
      <member refid="class_usd_prim_range_1a8a2cda47ee8109d402d2a44b443a0098" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>Stage</name></member>
      <member refid="class_usd_prim_range_1a07b57fdf10a067532e7e1cfe76f4abf9" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>UsdPrimRange</name></member>
      <member refid="class_usd_prim_range_1a51c75623bbcb79fe036ea94a5e636cfa" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>UsdPrimRange</name></member>
      <member refid="class_usd_prim_range_1aa2ce75e9eafccae061dcc56bd8ba6e14" prot="public" virt="non-virtual"><scope>UsdPrimRange</scope><name>UsdPrimRange</name></member>
      <member refid="class_usd_prim_range_1a396e91fe2986200dbf80473f01598bc6" prot="private" virt="non-virtual"><scope>UsdPrimRange</scope><name>UsdPrimRange</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
