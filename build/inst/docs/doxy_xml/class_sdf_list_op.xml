<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_list_op" kind="class" language="C++" prot="public">
    <compoundname>SdfListOp</compoundname>
    <includes refid="list_op_8h" local="no">listOp.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_list_op_1ac6b9297546075cb59c43b79191a2f3a6" prot="public" static="no">
        <type>T</type>
        <definition>typedef T ItemType</definition>
        <argsstring></argsstring>
        <name>ItemType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="77" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1a4b2cbc15b55df5bf61ded743000207a7" prot="public" static="no">
        <type>std::vector&lt; ItemType &gt;</type>
        <definition>typedef std::vector&lt;ItemType&gt; ItemVector</definition>
        <argsstring></argsstring>
        <name>ItemVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="78" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1a7c06791da10b99dda58f2e2335e94ef2" prot="public" static="no">
        <type>ItemType</type>
        <definition>typedef ItemType value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="79" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1a14b5fff68f3488d1a13abc2f121e6ebd" prot="public" static="no">
        <type>ItemVector</type>
        <definition>typedef ItemVector value_vector_type</definition>
        <argsstring></argsstring>
        <name>value_vector_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="80" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" prot="public" static="no">
        <type>std::function&lt; boost::optional&lt; ItemType &gt;SdfListOpType, const ItemType &amp;) &gt;</type>
        <definition>typedef std::function&lt; boost::optional&lt;ItemType&gt;SdfListOpType, const ItemType&amp;) &gt; ApplyCallback</definition>
        <argsstring></argsstring>
        <name>ApplyCallback</name>
        <briefdescription>
<para>Callback type for ApplyOperations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="192" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1ad496b683fa36d4f3afa0bdfdfe22aaf9" prot="public" static="no">
        <type>std::function&lt; boost::optional&lt; ItemType &gt;const ItemType &amp;) &gt;</type>
        <definition>typedef std::function&lt; boost::optional&lt;ItemType&gt;const ItemType&amp;) &gt; ModifyCallback</definition>
        <argsstring></argsstring>
        <name>ModifyCallback</name>
        <briefdescription>
<para>Callback type for ModifyOperations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="220" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_sdf_list_op_1a057451d4a176096f6f9b38ed0ddec434" prot="private" static="no">
        <type>Sdf_ListOpTraits&lt; T &gt;::ItemComparator</type>
        <definition>typedef Sdf_ListOpTraits&lt;T&gt;::ItemComparator _ItemComparator</definition>
        <argsstring></argsstring>
        <name>_ItemComparator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="277" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1acee664ab10003b9ce618b112dc9b05e6" prot="private" static="no">
        <type>std::list&lt; ItemType &gt;</type>
        <definition>typedef std::list&lt;ItemType&gt; _ApplyList</definition>
        <argsstring></argsstring>
        <name>_ApplyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="278" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_list_op_1a8b7539d3fef5d2e15ab84bcdbad114e0" prot="private" static="no">
        <type>std::map&lt; ItemType, typename _ApplyList::iterator, _ItemComparator &gt;</type>
        <definition>typedef std::map&lt;ItemType, typename _ApplyList::iterator, _ItemComparator&gt; _ApplyMap</definition>
        <argsstring></argsstring>
        <name>_ApplyMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="280" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_list_op_1acf25a243161eb5af1b9c94b221e1b64a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isExplicit</definition>
        <argsstring></argsstring>
        <name>_isExplicit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="294" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1a06da6da7b2f7e31bdb2025e2c9ebdadd" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _explicitItems</definition>
        <argsstring></argsstring>
        <name>_explicitItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="295" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1ad33c5e717c5d101bc20045ceb067ebf5" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _addedItems</definition>
        <argsstring></argsstring>
        <name>_addedItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="296" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1af1b7fdacd424e37b52ba79d7f28b9b3d" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _prependedItems</definition>
        <argsstring></argsstring>
        <name>_prependedItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="297" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1ae24537a193ae60a4363aa6d1d534295f" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _appendedItems</definition>
        <argsstring></argsstring>
        <name>_appendedItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="298" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1ac2a361a2b2924b69a3109e42586550fa" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _deletedItems</definition>
        <argsstring></argsstring>
        <name>_deletedItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="299" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_list_op_1a8f44a2252d056d22603db1fcc06af45f" prot="private" static="no" mutable="no">
        <type>ItemVector</type>
        <definition>ItemVector _orderedItems</definition>
        <argsstring></argsstring>
        <name>_orderedItems</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="300" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sdf_list_op_1a25faa6b98711634be20db9814289265d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref></type>
        <definition>static SDF_API SdfListOp CreateExplicit</definition>
        <argsstring>(const ItemVector &amp;explicitItems=ItemVector())</argsstring>
        <name>CreateExplicit</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>explicitItems</declname>
          <defval>ItemVector()</defval>
        </param>
        <briefdescription>
<para>Create a ListOp in explicit mode with the given <computeroutput>explicitItems</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a7735e7e66831657c3c9b4288ab7a442c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref></type>
        <definition>static SDF_API SdfListOp Create</definition>
        <argsstring>(const ItemVector &amp;prependedItems=ItemVector(), const ItemVector &amp;appendedItems=ItemVector(), const ItemVector &amp;deletedItems=ItemVector())</argsstring>
        <name>Create</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>prependedItems</declname>
          <defval>ItemVector()</defval>
        </param>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>appendedItems</declname>
          <defval>ItemVector()</defval>
        </param>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>deletedItems</declname>
          <defval>ItemVector()</defval>
        </param>
        <briefdescription>
<para>Create a ListOp in non-explicit mode with the given <computeroutput>prependedItems</computeroutput>, <computeroutput>appendedItems</computeroutput>, and <computeroutput>deletedItems</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_list_op_1aa6480537bc003c37819d571c189c918c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfListOp</definition>
        <argsstring>()</argsstring>
        <name>SdfListOp</name>
        <briefdescription>
<para>Create an empty ListOp in non-explicit mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1acd301bcd5d6552644ff4f3081cfe4de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void Swap</definition>
        <argsstring>(SdfListOp&lt; T &gt; &amp;rhs)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1add853b06790235b7f13b5d1513f69d48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasKeys</definition>
        <argsstring>() const</argsstring>
        <name>HasKeys</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the editor has an explicit list (even if it&apos;s empty) or it has any added, prepended, appended, deleted, or ordered keys. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="103" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a1509e453b1305fc5111701181fd6ef8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasItem</definition>
        <argsstring>(const T &amp;item) const</argsstring>
        <name>HasItem</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the given item is in any of the item lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a849d9874ee47e59d6974cc50877a98f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsExplicit</definition>
        <argsstring>() const</argsstring>
        <name>IsExplicit</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the list is explicit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="121" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a12c3ca7183d0118d846ee1b5668db117" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetExplicitItems</definition>
        <argsstring>() const</argsstring>
        <name>GetExplicitItems</name>
        <briefdescription>
<para>Returns the explicit items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="127" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1af478eaa08ac34e3c1fc3638f21f3e027" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetAddedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetAddedItems</name>
        <briefdescription>
<para>Returns the explicit items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="133" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1ab942adc1b7a129b7370788d19994a653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetPrependedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetPrependedItems</name>
        <briefdescription>
<para>Returns the explicit items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="139" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a4096c601c82fc8830fae5949c389c9c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetAppendedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetAppendedItems</name>
        <briefdescription>
<para>Returns the explicit items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="145" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a17a4c31c4d120584dde6452496f25981" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetDeletedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetDeletedItems</name>
        <briefdescription>
<para>Returns the deleted items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="151" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a373948c7dcb6b0438a09adae4ec0f847" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ItemVector &amp;</type>
        <definition>const ItemVector&amp; GetOrderedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetOrderedItems</name>
        <briefdescription>
<para>Returns the ordered items. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="157" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1abbc2ce5c63221f1ba6a20ca65033c47d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const ItemVector &amp;</type>
        <definition>SDF_API const ItemVector&amp; GetItems</definition>
        <argsstring>(SdfListOpType type) const</argsstring>
        <name>GetItems</name>
        <param>
          <type>SdfListOpType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return the item vector identified by <computeroutput>type</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1aee2b2778a3ad3a0bccce48b95675c546" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API ItemVector</type>
        <definition>SDF_API ItemVector GetAppliedItems</definition>
        <argsstring>() const</argsstring>
        <name>GetAppliedItems</name>
        <briefdescription>
<para>Returns the effective list of items represented by the operations in this list op. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to determine the final list of items added instead of looking at the individual explicit, prepended, and appended item lists.</para>
<para>This is equivalent to calling ApplyOperations on an empty item vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a65e16e172a2de09a9797bcd233929229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetExplicitItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetExplicitItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a5bcdee759f29f92198a204acc543bef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetAddedItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetAddedItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a67e0562148309064348107088cd53d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetPrependedItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetPrependedItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a2aa389e708b271decbba14bf485c3cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetAppendedItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetAppendedItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a683246433faedab5ab3236126280e486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDeletedItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetDeletedItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a3eae405c95492b0d56c8007e2d81a0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetOrderedItems</definition>
        <argsstring>(const ItemVector &amp;items)</argsstring>
        <name>SetOrderedItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1abcc1c15b2f6a51c0709ae5ece837e6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetItems</definition>
        <argsstring>(const ItemVector &amp;items, SdfListOpType type)</argsstring>
        <name>SetItems</name>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>SdfListOpType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the item vector for the given operation <computeroutput>type</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a9013e716d1676f98b48ab913031e6d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Removes all items and changes the list to be non-explicit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1ac926477f020dea9a19e1822d86a091c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearAndMakeExplicit</definition>
        <argsstring>()</argsstring>
        <name>ClearAndMakeExplicit</name>
        <briefdescription>
<para>Removes all items and changes the list to be explicit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1ac53720d6b0247734b7d5a313a712a09e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ApplyOperations</definition>
        <argsstring>(ItemVector *vec, const ApplyCallback &amp;cb=ApplyCallback()) const</argsstring>
        <name>ApplyOperations</name>
        <param>
          <type>ItemVector *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
          <defval><ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref>()</defval>
        </param>
        <briefdescription>
<para>Applies edit operations to the given ItemVector. </para>
        </briefdescription>
        <detaileddescription>
<para>If supplied, <computeroutput>cb</computeroutput> will be called on each item in the operation vectors before they are applied to <computeroutput>vec</computeroutput>. Consumers can use this to transform the items stored in the operation vectors to match what&apos;s stored in <computeroutput>vec</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a9dc4cbc201d40b0e55948f251fbf65f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API boost::optional&lt; <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &gt;</type>
        <definition>SDF_API boost::optional&lt;SdfListOp&lt;T&gt; &gt; ApplyOperations</definition>
        <argsstring>(const SdfListOp&lt; T &gt; &amp;inner) const</argsstring>
        <name>ApplyOperations</name>
        <param>
          <type>const <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
<para>Applies edit operations to the given ListOp. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is a ListOp that, when applied to a list, has the same effect as applying <computeroutput>inner</computeroutput> and then <computeroutput>this</computeroutput> in sequence.</para>
<para>The result will be empty if the result is not well defined. The result is well-defined when <computeroutput>inner</computeroutput> and <computeroutput>this</computeroutput> do not use the &apos;ordered&apos; or &apos;added&apos; item lists. In other words, only the explicit, prepended, appended, and deleted portions of <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref> are closed under composition with <ref refid="class_sdf_list_op_1ac53720d6b0247734b7d5a313a712a09e" kindref="member">ApplyOperations()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1afcd9ecf6d05e2332c0acd0ee6239c8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ModifyOperations</definition>
        <argsstring>(const ModifyCallback &amp;callback, bool removeDuplicates=false)</argsstring>
        <name>ModifyOperations</name>
        <param>
          <type>const <ref refid="class_sdf_list_op_1ad496b683fa36d4f3afa0bdfdfe22aaf9" kindref="member">ModifyCallback</ref> &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>removeDuplicates</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Modifies operations specified in this object. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>callback</computeroutput> is called for every item in all operation vectors. If the returned key is empty then the key is removed, otherwise it&apos;s replaced with the returned key.</para>
<para>If <computeroutput>removeDuplicates</computeroutput> is <computeroutput>true</computeroutput> and <computeroutput>callback</computeroutput> returns a key that was previously returned for the current operation vector being processed, the returned key will be removed.</para>
<para>Returns true if a change was made, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1aa17695cce7f5e94b21db3758d1b29b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ReplaceOperations</definition>
        <argsstring>(const SdfListOpType op, size_t index, size_t n, const ItemVector &amp;newItems)</argsstring>
        <name>ReplaceOperations</name>
        <param>
          <type>const SdfListOpType</type>
          <declname>op</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const ItemVector &amp;</type>
          <declname>newItems</declname>
        </param>
        <briefdescription>
<para>Replaces the items in the specified operation vector in the range (index, index + n] with the given <computeroutput>newItems</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>newItems</computeroutput> is empty the items in the range will simply be removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1ad711db0ef77fa40539ebe455822925f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ComposeOperations</definition>
        <argsstring>(const SdfListOp&lt; T &gt; &amp;stronger, SdfListOpType op)</argsstring>
        <name>ComposeOperations</name>
        <param>
          <type>const <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &amp;</type>
          <declname>stronger</declname>
        </param>
        <param>
          <type>SdfListOpType</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Composes a stronger <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&apos;s opinions for a given operation list over this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a23595772f72b70ab1596a85fc410dc0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const SdfListOp&lt; T &gt; &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="260" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="260" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1ab9206d4cca792a428eafc9862bdadc7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfListOp&lt; T &gt; &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="270" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="270" bodyend="272"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_list_op_1ad6eb0dc8d0022682c6e0f75cf6461656" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfListOp &amp;op)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="248" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="248" bodyend="258"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_list_op_1a17d645a2b1e9ecab4642d0794cfd083f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetExplicit</definition>
        <argsstring>(bool isExplicit)</argsstring>
        <name>_SetExplicit</name>
        <param>
          <type>bool</type>
          <declname>isExplicit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a972c9697cb55c27ecd1ad7575b6cb0cb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AddKeys</definition>
        <argsstring>(SdfListOpType, const ApplyCallback &amp;cb, _ApplyList *result, _ApplyMap *search) const</argsstring>
        <name>_AddKeys</name>
        <param>
          <type>SdfListOpType</type>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>_ApplyList *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>_ApplyMap *</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a1629fb5a5269bbb5702fd98a94de2f52" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrependKeys</definition>
        <argsstring>(SdfListOpType, const ApplyCallback &amp;cb, _ApplyList *result, _ApplyMap *search) const</argsstring>
        <name>_PrependKeys</name>
        <param>
          <type>SdfListOpType</type>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>_ApplyList *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>_ApplyMap *</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a3bf24f5dbe4044ef496d5548f70aeae1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AppendKeys</definition>
        <argsstring>(SdfListOpType, const ApplyCallback &amp;cb, _ApplyList *result, _ApplyMap *search) const</argsstring>
        <name>_AppendKeys</name>
        <param>
          <type>SdfListOpType</type>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>_ApplyList *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>_ApplyMap *</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a66145c09977e4f9aeb4c29a31cec65e5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _DeleteKeys</definition>
        <argsstring>(SdfListOpType, const ApplyCallback &amp;cb, _ApplyList *result, _ApplyMap *search) const</argsstring>
        <name>_DeleteKeys</name>
        <param>
          <type>SdfListOpType</type>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>_ApplyList *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>_ApplyMap *</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_list_op_1a830676af119e9301a131414f548a7f7f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ReorderKeys</definition>
        <argsstring>(SdfListOpType, const ApplyCallback &amp;cb, _ApplyList *result, _ApplyMap *search) const</argsstring>
        <name>_ReorderKeys</name>
        <param>
          <type>SdfListOpType</type>
        </param>
        <param>
          <type>const <ref refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" kindref="member">ApplyCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>_ApplyList *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>_ApplyMap *</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/listOp.h" line="290" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Value type representing a list-edit operation. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_sdf_list_op" kindref="compound">SdfListOp</ref> is a value type representing an operation that edits a list. It may add or remove items, reorder them, or replace the list entirely. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/listOp.h" line="75" column="1" bodyfile="pxr/usd/sdf/listOp.h" bodystart="75" bodyend="301"/>
    <listofallmembers>
      <member refid="class_sdf_list_op_1ad33c5e717c5d101bc20045ceb067ebf5" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_addedItems</name></member>
      <member refid="class_sdf_list_op_1a972c9697cb55c27ecd1ad7575b6cb0cb" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_AddKeys</name></member>
      <member refid="class_sdf_list_op_1ae24537a193ae60a4363aa6d1d534295f" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_appendedItems</name></member>
      <member refid="class_sdf_list_op_1a3bf24f5dbe4044ef496d5548f70aeae1" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_AppendKeys</name></member>
      <member refid="class_sdf_list_op_1acee664ab10003b9ce618b112dc9b05e6" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_ApplyList</name></member>
      <member refid="class_sdf_list_op_1a8b7539d3fef5d2e15ab84bcdbad114e0" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_ApplyMap</name></member>
      <member refid="class_sdf_list_op_1ac2a361a2b2924b69a3109e42586550fa" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_deletedItems</name></member>
      <member refid="class_sdf_list_op_1a66145c09977e4f9aeb4c29a31cec65e5" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_DeleteKeys</name></member>
      <member refid="class_sdf_list_op_1a06da6da7b2f7e31bdb2025e2c9ebdadd" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_explicitItems</name></member>
      <member refid="class_sdf_list_op_1acf25a243161eb5af1b9c94b221e1b64a" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_isExplicit</name></member>
      <member refid="class_sdf_list_op_1a057451d4a176096f6f9b38ed0ddec434" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_ItemComparator</name></member>
      <member refid="class_sdf_list_op_1a8f44a2252d056d22603db1fcc06af45f" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_orderedItems</name></member>
      <member refid="class_sdf_list_op_1af1b7fdacd424e37b52ba79d7f28b9b3d" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_prependedItems</name></member>
      <member refid="class_sdf_list_op_1a1629fb5a5269bbb5702fd98a94de2f52" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_PrependKeys</name></member>
      <member refid="class_sdf_list_op_1a830676af119e9301a131414f548a7f7f" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_ReorderKeys</name></member>
      <member refid="class_sdf_list_op_1a17d645a2b1e9ecab4642d0794cfd083f" prot="private" virt="non-virtual"><scope>SdfListOp</scope><name>_SetExplicit</name></member>
      <member refid="class_sdf_list_op_1a623490e7010f780b5ab3ef11058574d4" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ApplyCallback</name></member>
      <member refid="class_sdf_list_op_1ac53720d6b0247734b7d5a313a712a09e" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ApplyOperations</name></member>
      <member refid="class_sdf_list_op_1a9dc4cbc201d40b0e55948f251fbf65f0" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ApplyOperations</name></member>
      <member refid="class_sdf_list_op_1a9013e716d1676f98b48ab913031e6d01" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>Clear</name></member>
      <member refid="class_sdf_list_op_1ac926477f020dea9a19e1822d86a091c2" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ClearAndMakeExplicit</name></member>
      <member refid="class_sdf_list_op_1ad711db0ef77fa40539ebe455822925f9" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ComposeOperations</name></member>
      <member refid="class_sdf_list_op_1a7735e7e66831657c3c9b4288ab7a442c" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>Create</name></member>
      <member refid="class_sdf_list_op_1a25faa6b98711634be20db9814289265d" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>CreateExplicit</name></member>
      <member refid="class_sdf_list_op_1af478eaa08ac34e3c1fc3638f21f3e027" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetAddedItems</name></member>
      <member refid="class_sdf_list_op_1a4096c601c82fc8830fae5949c389c9c4" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetAppendedItems</name></member>
      <member refid="class_sdf_list_op_1aee2b2778a3ad3a0bccce48b95675c546" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetAppliedItems</name></member>
      <member refid="class_sdf_list_op_1a17a4c31c4d120584dde6452496f25981" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetDeletedItems</name></member>
      <member refid="class_sdf_list_op_1a12c3ca7183d0118d846ee1b5668db117" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetExplicitItems</name></member>
      <member refid="class_sdf_list_op_1abbc2ce5c63221f1ba6a20ca65033c47d" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetItems</name></member>
      <member refid="class_sdf_list_op_1a373948c7dcb6b0438a09adae4ec0f847" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetOrderedItems</name></member>
      <member refid="class_sdf_list_op_1ab942adc1b7a129b7370788d19994a653" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>GetPrependedItems</name></member>
      <member refid="class_sdf_list_op_1ad6eb0dc8d0022682c6e0f75cf6461656" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>hash_value</name></member>
      <member refid="class_sdf_list_op_1a1509e453b1305fc5111701181fd6ef8c" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>HasItem</name></member>
      <member refid="class_sdf_list_op_1add853b06790235b7f13b5d1513f69d48" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>HasKeys</name></member>
      <member refid="class_sdf_list_op_1a849d9874ee47e59d6974cc50877a98f8" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>IsExplicit</name></member>
      <member refid="class_sdf_list_op_1ac6b9297546075cb59c43b79191a2f3a6" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ItemType</name></member>
      <member refid="class_sdf_list_op_1a4b2cbc15b55df5bf61ded743000207a7" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ItemVector</name></member>
      <member refid="class_sdf_list_op_1ad496b683fa36d4f3afa0bdfdfe22aaf9" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ModifyCallback</name></member>
      <member refid="class_sdf_list_op_1afcd9ecf6d05e2332c0acd0ee6239c8e8" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ModifyOperations</name></member>
      <member refid="class_sdf_list_op_1ab9206d4cca792a428eafc9862bdadc7c" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>operator!=</name></member>
      <member refid="class_sdf_list_op_1a23595772f72b70ab1596a85fc410dc0b" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>operator==</name></member>
      <member refid="class_sdf_list_op_1aa17695cce7f5e94b21db3758d1b29b04" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>ReplaceOperations</name></member>
      <member refid="class_sdf_list_op_1aa6480537bc003c37819d571c189c918c" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SdfListOp</name></member>
      <member refid="class_sdf_list_op_1a5bcdee759f29f92198a204acc543bef0" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetAddedItems</name></member>
      <member refid="class_sdf_list_op_1a2aa389e708b271decbba14bf485c3cb1" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetAppendedItems</name></member>
      <member refid="class_sdf_list_op_1a683246433faedab5ab3236126280e486" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetDeletedItems</name></member>
      <member refid="class_sdf_list_op_1a65e16e172a2de09a9797bcd233929229" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetExplicitItems</name></member>
      <member refid="class_sdf_list_op_1abcc1c15b2f6a51c0709ae5ece837e6dd" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetItems</name></member>
      <member refid="class_sdf_list_op_1a3eae405c95492b0d56c8007e2d81a0bb" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetOrderedItems</name></member>
      <member refid="class_sdf_list_op_1a67e0562148309064348107088cd53d49" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>SetPrependedItems</name></member>
      <member refid="class_sdf_list_op_1acd301bcd5d6552644ff4f3081cfe4de8" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>Swap</name></member>
      <member refid="class_sdf_list_op_1a7c06791da10b99dda58f2e2335e94ef2" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>value_type</name></member>
      <member refid="class_sdf_list_op_1a14b5fff68f3488d1a13abc2f121e6ebd" prot="public" virt="non-virtual"><scope>SdfListOp</scope><name>value_vector_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
