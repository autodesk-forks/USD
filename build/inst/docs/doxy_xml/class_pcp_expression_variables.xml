<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_expression_variables" kind="class" language="C++" prot="public">
    <compoundname>PcpExpressionVariables</compoundname>
    <includes refid="expression_variables_8h" local="no">expressionVariables.h</includes>
      <sectiondef kind="user-defined">
      <header>Comparison Operators</header>
      <memberdef kind="function" id="class_pcp_expression_variables_1a6565cfa2f9dc48968a428a47e48f735d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PcpExpressionVariables &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="83" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1a25c897b54421c8a97df8374185600364" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PcpExpressionVariables &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="90" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="90" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_expression_variables_1af3483ba35101343477e478d67b152491" prot="private" static="no" mutable="no">
        <type><ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref></type>
        <definition>PcpExpressionVariablesSource _source</definition>
        <argsstring></argsstring>
        <name>_source</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="109" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_expression_variables_1af69e4e6e8335931fd7e42f6439af3503" prot="private" static="no" mutable="no">
        <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>VtDictionary _expressionVariables</definition>
        <argsstring></argsstring>
        <name>_expressionVariables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="110" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pcp_expression_variables_1ab73a5bce7bb55759586a1bcf08e11c35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref></type>
        <definition>static PCP_API PcpExpressionVariables Compute</definition>
        <argsstring>(const PcpLayerStackIdentifier &amp;sourceLayerStackId, const PcpLayerStackIdentifier &amp;rootLayerStackId, const PcpExpressionVariables *overrideExpressionVars=nullptr)</argsstring>
        <name>Compute</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>sourceLayerStackId</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>rootLayerStackId</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref> *</type>
          <declname>overrideExpressionVars</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute the composed expression variables for <computeroutput>sourceLayerStackId</computeroutput>, recursively computing and composing the overrides specified by its expressionVariableOverridesSource. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>overrideExpressionVars</computeroutput> is provided, it will be used as the overrides instead of performing the recursive computation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_expression_variables_1a1f9f710a0787531ee911f71a6b30ae26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpExpressionVariables</definition>
        <argsstring>()=default</argsstring>
        <name>PcpExpressionVariables</name>
        <briefdescription>
<para>Create a new object with no expression variables and the source set to the root layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1ab3567627f523ebfe2dad9bc71f198e17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpExpressionVariables</definition>
        <argsstring>(const PcpExpressionVariablesSource &amp;source, const VtDictionary &amp;expressionVariables)</argsstring>
        <name>PcpExpressionVariables</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>expressionVariables</declname>
        </param>
        <briefdescription>
<para>Creates a new object for <computeroutput>source</computeroutput> with the given <computeroutput>expressionVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="64" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="64" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1a8c1cdf8a83fd0b9b61e76b07cdcade54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpExpressionVariables</definition>
        <argsstring>(PcpExpressionVariablesSource &amp;&amp;source, VtDictionary &amp;&amp;expressionVariables)</argsstring>
        <name>PcpExpressionVariables</name>
        <param>
          <type><ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;&amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;&amp;</type>
          <declname>expressionVariables</declname>
        </param>
        <briefdescription>
<para>Creates a new object for <computeroutput>source</computeroutput> with the given <computeroutput>expressionVariables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="74" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1a05f999d2dd5406832ab239e8a7fd5c0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;</type>
        <definition>const PcpExpressionVariablesSource&amp; GetSource</definition>
        <argsstring>() const</argsstring>
        <name>GetSource</name>
        <briefdescription>
<para>Return the source of the composed expression variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="97" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="97" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1af23ec23fbc473c59dea2cb71f6ec386d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
        <definition>const VtDictionary&amp; GetVariables</definition>
        <argsstring>() const</argsstring>
        <name>GetVariables</name>
        <briefdescription>
<para>Returns the composed expression variables dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="101" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="101" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_1abc854a0125bbc1b1795e415e837af908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetVariables</definition>
        <argsstring>(const VtDictionary &amp;variables)</argsstring>
        <name>SetVariables</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>variables</declname>
        </param>
        <briefdescription>
<para>Set the composed expression variables to <computeroutput>variables</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariables.h" line="105" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="105" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object containing composed expression variables associated with a given layer stack, identified by a <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/pcp/expressionVariables.h" line="44" column="1" bodyfile="pxr/usd/pcp/expressionVariables.h" bodystart="43" bodyend="111"/>
    <listofallmembers>
      <member refid="class_pcp_expression_variables_1af69e4e6e8335931fd7e42f6439af3503" prot="private" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>_expressionVariables</name></member>
      <member refid="class_pcp_expression_variables_1af3483ba35101343477e478d67b152491" prot="private" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>_source</name></member>
      <member refid="class_pcp_expression_variables_1ab73a5bce7bb55759586a1bcf08e11c35" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>Compute</name></member>
      <member refid="class_pcp_expression_variables_1a05f999d2dd5406832ab239e8a7fd5c0e" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>GetSource</name></member>
      <member refid="class_pcp_expression_variables_1af23ec23fbc473c59dea2cb71f6ec386d" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>GetVariables</name></member>
      <member refid="class_pcp_expression_variables_1a25c897b54421c8a97df8374185600364" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>operator!=</name></member>
      <member refid="class_pcp_expression_variables_1a6565cfa2f9dc48968a428a47e48f735d" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>operator==</name></member>
      <member refid="class_pcp_expression_variables_1a1f9f710a0787531ee911f71a6b30ae26" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>PcpExpressionVariables</name></member>
      <member refid="class_pcp_expression_variables_1ab3567627f523ebfe2dad9bc71f198e17" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>PcpExpressionVariables</name></member>
      <member refid="class_pcp_expression_variables_1a8c1cdf8a83fd0b9b61e76b07cdcade54" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>PcpExpressionVariables</name></member>
      <member refid="class_pcp_expression_variables_1abc854a0125bbc1b1795e415e837af908" prot="public" virt="non-virtual"><scope>PcpExpressionVariables</scope><name>SetVariables</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
