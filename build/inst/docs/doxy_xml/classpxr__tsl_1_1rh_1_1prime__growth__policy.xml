<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr__tsl_1_1rh_1_1prime__growth__policy" kind="class" language="C++" prot="public">
    <compoundname>pxr_tsl::rh::prime_growth_policy</compoundname>
    <includes refid="robin__growth__policy_8h" local="no">robin_growth_policy.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a7eda5f61ce01d92086a3848ab3acc9cb" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int m_iprime</definition>
        <argsstring></argsstring>
        <name>m_iprime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="401" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1aae32e281c11ae2f364f182a29ca81af6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>prime_growth_policy</definition>
        <argsstring>(std::size_t &amp;min_bucket_count_in_out)</argsstring>
        <name>prime_growth_policy</name>
        <param>
          <type>std::size_t &amp;</type>
          <declname>min_bucket_count_in_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="366" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="366" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1af1f0118280a53f24eb442f648568fe8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t bucket_for_hash</definition>
        <argsstring>(std::size_t hash) const noexcept</argsstring>
        <name>bucket_for_hash</name>
        <param>
          <type>std::size_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="383" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a616a31c9d534fd21a0537b0ade05ca69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t next_bucket_count</definition>
        <argsstring>() const</argsstring>
        <name>next_bucket_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="387" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="387" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a8a00b6bc91baf394c35510939fa1778d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t max_bucket_count</definition>
        <argsstring>() const</argsstring>
        <name>max_bucket_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="396" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a03bfacfaaba9195e4498375659f43531" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="398" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="398" bodyend="398"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Grow the hash table by using prime numbers as bucket count. </para>
    </briefdescription>
    <detaileddescription>
<para>Slower than tsl::rh::power_of_two_growth_policy in general but will probably distribute the values around better in the buckets with a poor hash function.</para>
<para>To allow the compiler to optimize the modulo operation, a lookup table is used with constant primes numbers.</para>
<para>With a switch the code would look like: <programlisting><codeline><highlight class="normal">switch(iprime)<sp/>{<sp/>//<sp/>iprime<sp/>is<sp/>the<sp/>current<sp/>prime<sp/>of<sp/>the<sp/>hash<sp/>table</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>hash<sp/>%<sp/>5ul;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>hash<sp/>%<sp/>17ul;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>2:<sp/>hash<sp/>%<sp/>29ul;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Due to the constant variable in the modulo the compiler is able to optimize the operation by a series of multiplications, substractions and shifts.</para>
<para>The &apos;hash % 5&apos; could become something like &apos;hash - (hash * 0xCCCCCCCD) &gt;&gt; 34)<itemizedlist>
<listitem><para>5&apos; in a 64 bits environment. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" line="364" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_growth_policy.h" bodystart="364" bodyend="406"/>
    <listofallmembers>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1af1f0118280a53f24eb442f648568fe8e" prot="public" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>bucket_for_hash</name></member>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a03bfacfaaba9195e4498375659f43531" prot="public" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>clear</name></member>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a7eda5f61ce01d92086a3848ab3acc9cb" prot="private" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>m_iprime</name></member>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a8a00b6bc91baf394c35510939fa1778d" prot="public" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>max_bucket_count</name></member>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1a616a31c9d534fd21a0537b0ade05ca69" prot="public" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>next_bucket_count</name></member>
      <member refid="classpxr__tsl_1_1rh_1_1prime__growth__policy_1aae32e281c11ae2f364f182a29ca81af6" prot="public" virt="non-virtual"><scope>pxr_tsl::rh::prime_growth_policy</scope><name>prime_growth_policy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
