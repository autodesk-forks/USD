<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_abstract_data_typed_value" kind="class" language="C++" prot="public">
    <compoundname>SdfAbstractDataTypedValue</compoundname>
    <basecompoundref refid="class_sdf_abstract_data_value" prot="public" virt="non-virtual">SdfAbstractDataValue</basecompoundref>
    <includes refid="abstract_data_8h" local="no">abstractData.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_abstract_data_typed_value_1a47da99343152159a63844cc7d89ed761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAbstractDataTypedValue</definition>
        <argsstring>(T *value)</argsstring>
        <name>SdfAbstractDataTypedValue</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="469" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="469" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_typed_value_1a5fc442dd3d8c56540dfc05c8fdfd13dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool StoreValue</definition>
        <argsstring>(const VtValue &amp;v) override</argsstring>
        <name>StoreValue</name>
        <reimplements refid="class_sdf_abstract_data_value_1a4ea9d070580ebc7f80da557581c143f8">StoreValue</reimplements>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="473" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="473" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_typed_value_1aceaad83f15a0d33e2fe4bd3b82406b97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool StoreValue</definition>
        <argsstring>(VtValue &amp;&amp;v) override</argsstring>
        <name>StoreValue</name>
        <reimplements refid="class_sdf_abstract_data_value_1a7466ae2d92654653d72733ccf65ded6c">StoreValue</reimplements>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="493" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="493" bodyend="511"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The fully-typed container for a field value in an <computeroutput><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref></computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
<para>An <computeroutput><ref refid="class_sdf_abstract_data_typed_value" kindref="compound">SdfAbstractDataTypedValue</ref></computeroutput> allows a consumer to pass a pointer to an object through the virtual <computeroutput><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref></computeroutput> interface along with information about that object&apos;s type. That information may allow implementations of <computeroutput><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref></computeroutput> to populate the contained object in a more efficient way, avoiding unnecessary boxing/unboxing of data.</para>
<para><ref refid="class_sdf_abstract_data_typed_value" kindref="compound">SdfAbstractDataTypedValue</ref> objects are intended to be transient; they are solely used to get pointer information into and out of an <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> container. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4993">
        <label>SdfAbstractDataTypedValue&lt; T &gt;</label>
        <link refid="class_sdf_abstract_data_typed_value"/>
        <childnode refid="4994" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4994">
        <label>SdfAbstractDataValue</label>
        <link refid="class_sdf_abstract_data_value"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4995">
        <label>SdfAbstractDataTypedValue&lt; T &gt;</label>
        <link refid="class_sdf_abstract_data_typed_value"/>
        <childnode refid="4996" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4996">
        <label>SdfAbstractDataValue</label>
        <link refid="class_sdf_abstract_data_value"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/abstractData.h" line="467" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="466" bodyend="512"/>
    <listofallmembers>
      <member refid="class_sdf_abstract_data_value_1a002fe77542bb0873195316f19f0691f7" prot="public" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>isValueBlock</name></member>
      <member refid="class_sdf_abstract_data_typed_value_1a47da99343152159a63844cc7d89ed761" prot="public" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>SdfAbstractDataTypedValue</name></member>
      <member refid="class_sdf_abstract_data_value_1a8e512eb4dd3fd6603f1e6ca87bd5c60d" prot="protected" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>SdfAbstractDataValue</name></member>
      <member refid="class_sdf_abstract_data_typed_value_1a5fc442dd3d8c56540dfc05c8fdfd13dc" prot="public" virt="virtual"><scope>SdfAbstractDataTypedValue</scope><name>StoreValue</name></member>
      <member refid="class_sdf_abstract_data_typed_value_1aceaad83f15a0d33e2fe4bd3b82406b97" prot="public" virt="virtual"><scope>SdfAbstractDataTypedValue</scope><name>StoreValue</name></member>
      <member refid="class_sdf_abstract_data_value_1a652976ce152eea6e11035596c8061d54" prot="public" virt="non-virtual" ambiguityscope="SdfAbstractDataValue::"><scope>SdfAbstractDataTypedValue</scope><name>StoreValue</name></member>
      <member refid="class_sdf_abstract_data_value_1a74c28b9a221b3cdc1a15c5375395ca63" prot="public" virt="non-virtual" ambiguityscope="SdfAbstractDataValue::"><scope>SdfAbstractDataTypedValue</scope><name>StoreValue</name></member>
      <member refid="class_sdf_abstract_data_value_1ae6243efa956c8919de33ee5151bbf193" prot="public" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>typeMismatch</name></member>
      <member refid="class_sdf_abstract_data_value_1a0f61d63b009d0880a89c843bd50d8d76" prot="public" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>value</name></member>
      <member refid="class_sdf_abstract_data_value_1aca21ea8d3375ec28c4571c5cad1f77f4" prot="public" virt="non-virtual"><scope>SdfAbstractDataTypedValue</scope><name>valueType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
