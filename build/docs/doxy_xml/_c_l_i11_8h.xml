<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_c_l_i11_8h" kind="file" language="C++">
    <compoundname>CLI11.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">locale</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">memory</includes>
    <includes local="no">exception</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">iterator</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes local="no">cmath</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">limits</includes>
    <includes local="no">set</includes>
    <includes local="no">utility</includes>
    <includes local="no">map</includes>
    <includes local="no">iostream</includes>
    <includes local="no">numeric</includes>
    <includes local="no">fstream</includes>
    <includes local="no">tuple</includes>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <incdepgraph>
      <node id="67622">
        <label>sys/stat.h</label>
      </node>
      <node id="67600">
        <label>locale</label>
      </node>
      <node id="67602">
        <label>iomanip</label>
      </node>
      <node id="67599">
        <label>functional</label>
      </node>
      <node id="67613">
        <label>limits</label>
      </node>
      <node id="67608">
        <label>iterator</label>
      </node>
      <node id="67601">
        <label>cstdint</label>
      </node>
      <node id="67611">
        <label>cmath</label>
      </node>
      <node id="67605">
        <label>stdexcept</label>
      </node>
      <node id="67618">
        <label>numeric</label>
      </node>
      <node id="67606">
        <label>string</label>
      </node>
      <node id="67616">
        <label>map</label>
      </node>
      <node id="67621">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="67604">
        <label>exception</label>
      </node>
      <node id="67619">
        <label>fstream</label>
      </node>
      <node id="67623">
        <label>sys/types.h</label>
      </node>
      <node id="67620">
        <label>tuple</label>
      </node>
      <node id="67598">
        <label>pxr/base/tf/pxrCLI11/CLI11.h</label>
        <link refid="_c_l_i11_8h"/>
        <childnode refid="67599" relation="include">
        </childnode>
        <childnode refid="67600" relation="include">
        </childnode>
        <childnode refid="67601" relation="include">
        </childnode>
        <childnode refid="67602" relation="include">
        </childnode>
        <childnode refid="67603" relation="include">
        </childnode>
        <childnode refid="67604" relation="include">
        </childnode>
        <childnode refid="67605" relation="include">
        </childnode>
        <childnode refid="67606" relation="include">
        </childnode>
        <childnode refid="67607" relation="include">
        </childnode>
        <childnode refid="67608" relation="include">
        </childnode>
        <childnode refid="67609" relation="include">
        </childnode>
        <childnode refid="67610" relation="include">
        </childnode>
        <childnode refid="67611" relation="include">
        </childnode>
        <childnode refid="67612" relation="include">
        </childnode>
        <childnode refid="67613" relation="include">
        </childnode>
        <childnode refid="67614" relation="include">
        </childnode>
        <childnode refid="67615" relation="include">
        </childnode>
        <childnode refid="67616" relation="include">
        </childnode>
        <childnode refid="67617" relation="include">
        </childnode>
        <childnode refid="67618" relation="include">
        </childnode>
        <childnode refid="67619" relation="include">
        </childnode>
        <childnode refid="67620" relation="include">
        </childnode>
        <childnode refid="67621" relation="include">
        </childnode>
        <childnode refid="67622" relation="include">
        </childnode>
        <childnode refid="67623" relation="include">
        </childnode>
      </node>
      <node id="67607">
        <label>vector</label>
      </node>
      <node id="67615">
        <label>utility</label>
      </node>
      <node id="67610">
        <label>sstream</label>
      </node>
      <node id="67617">
        <label>iostream</label>
      </node>
      <node id="67612">
        <label>type_traits</label>
      </node>
      <node id="67614">
        <label>set</label>
      </node>
      <node id="67609">
        <label>algorithm</label>
      </node>
      <node id="67603">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" prot="public">pxr_CLI::CLI::Error</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" prot="public">pxr_CLI::CLI::ConstructionError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" prot="public">pxr_CLI::CLI::IncorrectConstruction</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" prot="public">pxr_CLI::CLI::BadNameString</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" prot="public">pxr_CLI::CLI::OptionAlreadyAdded</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" prot="public">pxr_CLI::CLI::ParseError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" prot="public">pxr_CLI::CLI::Success</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" prot="public">pxr_CLI::CLI::CallForHelp</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" prot="public">pxr_CLI::CLI::CallForAllHelp</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" prot="public">pxr_CLI::CLI::CallForVersion</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" prot="public">pxr_CLI::CLI::RuntimeError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" prot="public">pxr_CLI::CLI::FileError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" prot="public">pxr_CLI::CLI::ConversionError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" prot="public">pxr_CLI::CLI::ValidationError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" prot="public">pxr_CLI::CLI::RequiredError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" prot="public">pxr_CLI::CLI::ArgumentMismatch</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" prot="public">pxr_CLI::CLI::RequiresError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" prot="public">pxr_CLI::CLI::ExcludesError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" prot="public">pxr_CLI::CLI::ExtrasError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" prot="public">pxr_CLI::CLI::ConfigError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" prot="public">pxr_CLI::CLI::InvalidError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" prot="public">pxr_CLI::CLI::HorribleError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" prot="public">pxr_CLI::CLI::OptionNotFound</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" prot="public">pxr_CLI::CLI::make_void</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool" prot="public">pxr_CLI::CLI::is_bool</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool_3_01bool_01_4" prot="public">pxr_CLI::CLI::is_bool&lt; bool &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" prot="public">pxr_CLI::CLI::is_shared_ptr</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pxr_CLI::CLI::is_shared_ptr&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01const_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pxr_CLI::CLI::is_shared_ptr&lt; const std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__copyable__ptr" prot="public">pxr_CLI::CLI::is_copyable_ptr</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type" prot="public">pxr_CLI::CLI::IsMemberType</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type_3_01const_01char_01_5_01_4" prot="public">pxr_CLI::CLI::IsMemberType&lt; const char * &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type" prot="public">pxr_CLI::CLI::detail::element_type</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type_3_01_t_00_01typename_01std_1_1enable__if_ae296cb51a40e8413595b04af8f521d4" prot="public">pxr_CLI::CLI::detail::element_type&lt; T, typename std::enable_if&lt; is_copyable_ptr&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__value__type" prot="public">pxr_CLI::CLI::detail::element_value_type</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" prot="public">pxr_CLI::CLI::detail::pair_adaptor</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357" prot="public">pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__direct__constructible" prot="public">pxr_CLI::CLI::detail::is_direct_constructible</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__ostreamable" prot="public">pxr_CLI::CLI::detail::is_ostreamable</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__istreamable" prot="public">pxr_CLI::CLI::detail::is_istreamable</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__complex" prot="public">pxr_CLI::CLI::detail::is_complex</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__mutable__container" prot="public">pxr_CLI::CLI::detail::is_mutable_container</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__mutable__container_3_01_t_00_01conditional__t_3_01f0fc9658eed2515742d284fd189a9eb1d" prot="public">pxr_CLI::CLI::detail::is_mutable_container&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type, decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().clear()), decltype(std::declval&lt; T &gt;().insert(std::declval&lt; decltype(std::declval&lt; T &gt;().end())&gt;(), std::declval&lt; const typename T::value_type &amp; &gt;()))&gt;, void &gt; &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__readable__container" prot="public">pxr_CLI::CLI::detail::is_readable_container</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__readable__container_3_01_t_00_01conditional__t_3_015deb68487f45037f4ec1002927092177" prot="public">pxr_CLI::CLI::detail::is_readable_container&lt; T, conditional_t&lt; false, void_t&lt; decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().begin())&gt;, void &gt; &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__wrapper" prot="public">pxr_CLI::CLI::detail::is_wrapper</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__wrapper_3_01_t_00_01conditional__t_3_01false_00_01vb96019f2edb62df3d854e47ac12f159a" prot="public">pxr_CLI::CLI::detail::is_wrapper&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type &gt;, void &gt; &gt;</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__tuple__like" prot="public">pxr_CLI::CLI::detail::is_tuple_like</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type" prot="public">pxr_CLI::CLI::detail::wrapped_type</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type_3_01_t_00_01def_00_01typename_01std_1_1ena13b56b88558cae053b49c37ac36da7a" prot="public">pxr_CLI::CLI::detail::wrapped_type&lt; T, def, typename std::enable_if&lt; is_wrapper&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" prot="public">pxr_CLI::CLI::detail::type_count_base</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_8edce2548eb400550874486844beff0b" prot="public">pxr_CLI::CLI::detail::type_count_base&lt; T, typename std::enable_if&lt;!is_tuple_like&lt; T &gt;::value &amp;&amp;!is_mutable_container&lt; T &gt;::value &amp;&amp;!std::is_void&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_92caf551d327eec308ddbeb704795429" prot="public">pxr_CLI::CLI::detail::type_count_base&lt; T, typename std::enable_if&lt; is_tuple_like&lt; T &gt;::value &amp;&amp;!is_mutable_container&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_8a13f8fe576a1001c6aca10cb804cab7" prot="public">pxr_CLI::CLI::detail::type_count_base&lt; T, typename std::enable_if&lt; is_mutable_container&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count" prot="public">pxr_CLI::CLI::detail::subtype_count</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count__min" prot="public">pxr_CLI::CLI::detail::subtype_count_min</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" prot="public">pxr_CLI::CLI::detail::type_count</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_554c9019fc27a3e8df4e129291a5a951" prot="public">pxr_CLI::CLI::detail::type_count&lt; T, typename std::enable_if&lt;!is_wrapper&lt; T &gt;::value &amp;&amp;!is_tuple_like&lt; T &gt;::value &amp;&amp;!is_complex&lt; T &gt;::value &amp;&amp;!std::is_void&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_4289e7af6fb3d798b82481000c59cc57" prot="public">pxr_CLI::CLI::detail::type_count&lt; T, typename std::enable_if&lt; is_complex&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_1e4545234cac89cab0a985aa37bc8128" prot="public">pxr_CLI::CLI::detail::type_count&lt; T, typename std::enable_if&lt; is_mutable_container&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_295e4dcf84d3724cfa42817f16b67f40" prot="public">pxr_CLI::CLI::detail::type_count&lt; T, typename std::enable_if&lt; is_wrapper&lt; T &gt;::value &amp;&amp;!is_complex&lt; T &gt;::value &amp;&amp;!is_tuple_like&lt; T &gt;::value &amp;&amp;!is_mutable_container&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" prot="public">pxr_CLI::CLI::ConfigItem</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" prot="public">pxr_CLI::CLI::Config</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" prot="public">pxr_CLI::CLI::ConfigBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_i_n_i" prot="public">pxr_CLI::CLI::ConfigINI</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" prot="public">pxr_CLI::CLI::Validator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator" prot="public">pxr_CLI::CLI::CustomValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" prot="public">pxr_CLI::CLI::detail::ExistingFileValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" prot="public">pxr_CLI::CLI::detail::ExistingDirectoryValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" prot="public">pxr_CLI::CLI::detail::ExistingPathValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" prot="public">pxr_CLI::CLI::detail::NonexistentPathValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" prot="public">pxr_CLI::CLI::detail::IPV4Validator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" prot="public">pxr_CLI::CLI::TypeValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" prot="public">pxr_CLI::CLI::FileOnDefaultPath</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" prot="public">pxr_CLI::CLI::Range</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" prot="public">pxr_CLI::CLI::Bound</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1has__find" prot="public">pxr_CLI::CLI::detail::has_find</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" prot="public">pxr_CLI::CLI::IsMember</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" prot="public">pxr_CLI::CLI::Transformer</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" prot="public">pxr_CLI::CLI::CheckedTransformer</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" prot="public">pxr_CLI::CLI::AsNumberWithUnit</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value" prot="public">pxr_CLI::CLI::AsSizeValue</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" prot="public">pxr_CLI::CLI::FormatterBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" prot="public">pxr_CLI::CLI::FormatterLambda</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" prot="public">pxr_CLI::CLI::Formatter</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" prot="public">pxr_CLI::CLI::OptionBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" prot="public">pxr_CLI::CLI::OptionDefaults</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option" prot="public">pxr_CLI::CLI::Option</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" prot="public">pxr_CLI::CLI::App</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" prot="public">pxr_CLI::CLI::Option_group</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend" prot="public">pxr_CLI::CLI::detail::AppFriend</innerclass>
    <innernamespace refid="namespacepxr___c_l_i">pxr_CLI</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i">pxr_CLI::CLI</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1enums">pxr_CLI::CLI::enums</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1detail">pxr_CLI::CLI::detail</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1_failure_message">pxr_CLI::CLI::FailureMessage</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_l_i11_8h_1add7aac42ba0833dab033928f72a4fa32" prot="public" static="no">
        <name>PXR_CLI11_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="40" column="10" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1a1a2e30d6baa07959d9603aeb27e1bdb4" prot="public" static="no">
        <name>CLI11_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="76" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1ab6f9ac59f853b1948fdbcf1188750208" prot="public" static="no">
        <name>CLI11_VERSION_MINOR</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="77" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1a7e997cfe2479493bde18e8f9ad4256f5" prot="public" static="no">
        <name>CLI11_VERSION_PATCH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="78" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1a1b8785b397aabcac7e4a07dafe066268" prot="public" static="no">
        <name>CLI11_VERSION</name>
        <initializer>&quot;2.3.1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="79" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1ab56dd908d351a84796414f79d57696d0" prot="public" static="no">
        <name>CLI11_DEPRECATED</name>
        <param><defname>reason</defname></param>
        <initializer>__attribute__((deprecated(reason)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="114" column="10" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1af6b299358fbdb7a4caa5da7a92ce6b23" prot="public" static="no">
        <name>CLI11_NODISCARD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="120" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1ad8c5931c1cdb73592aaca48d77ecab1a" prot="public" static="no">
        <name>CLI11_USE_STATIC_RTTI</name>
        <initializer>1</initializer>
        <briefdescription>
<para>detection of rtti </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="138" column="10" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1ae98448e41749e6ca61eebe5c743a2a01" prot="public" static="no">
        <name>CLI11_INLINE</name>
        <initializer>inline</initializer>
        <briefdescription>
<para>Inline macro. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="146" column="10" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1aa5083d44020c499995d126efcdcf5b63" prot="public" static="no">
        <name>CLI11_ERROR_DEF</name>
        <param><defname>parent</defname></param>
        <param><defname>name</defname></param>
        <initializer>protected:                                                                                                           \
    name(std::string ename, std::string msg, int exit_code) : parent(std::move(ename), std::move(msg), exit_code) {}   \
    name(std::string ename, std::string msg, ExitCodes exit_code)                                                      \
        : parent(std::move(ename), std::move(msg), exit_code) {}                                                       \
                                                                                                                       \
  public:                                                                                                              \
    name(std::string msg, ExitCodes exit_code) : parent(#name, std::move(msg), exit_code) {}                           \
    name(std::string msg, int exit_code) : parent(#name, std::move(msg), exit_code) {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="646" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1a0da004ec8320e9f80f2eac076e1c4eef" prot="public" static="no">
        <name>CLI11_ERROR_SIMPLE</name>
        <param><defname>name</defname></param>
        <initializer>explicit name(std::string msg) : name(#name, msg, ExitCodes::name) {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="657" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_l_i11_8h_1ae8938ad660eb0b84b667ea3ea54da42c" prot="public" static="no">
        <name>CLI11_PARSE</name>
        <param><defname>app</defname></param>
        <param><defname>argc</defname></param>
        <param><defname>argv</defname></param>
        <initializer>try {                                                                                                              \
        (app).parse((argc), (argv));                                                                                   \
    } catch(const CLI::ParseError &amp;e) {                                                                                \
        return (app).exit(e);                                                                                          \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5558" column="9" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5558" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>CLI11:<sp/>Version<sp/>2.3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Originally<sp/>designed<sp/>by<sp/>Henry<sp/>Schreiner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/CLIUtils/CLI11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>standalone<sp/>header<sp/>file<sp/>generated<sp/>by<sp/>MakeSingleHeader.py<sp/>in<sp/>CLI11/scripts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from:<sp/>v2.3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLI11<sp/>2.3.1<sp/>Copyright<sp/>(c)<sp/>2017-2022<sp/>University<sp/>of<sp/>Cincinnati,<sp/>developed<sp/>by<sp/>Henry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Schreiner<sp/>under<sp/>NSF<sp/>AWARD<sp/>1414736.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms<sp/>of<sp/>CLI11,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>is<sp/>not<sp/>meant<sp/>to<sp/>be<sp/>included<sp/>in<sp/>a<sp/>.h<sp/>file,<sp/>to<sp/>guard<sp/>against</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conflicts<sp/>if<sp/>a<sp/>program<sp/>includes<sp/>their<sp/>own<sp/>CLI11<sp/>header<sp/>and<sp/>then<sp/>transitively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes<sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PXR_CLI11_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>This<sp/>file<sp/>should<sp/>only<sp/>be<sp/>included<sp/>once<sp/>in<sp/>any<sp/>given<sp/>source<sp/>(.cpp)<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_CLI11_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>combined<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Guard<sp/>against<sp/>possible<sp/>conflicts<sp/>if<sp/>this<sp/>header<sp/>is<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>file<sp/>as<sp/>another<sp/>CLI11<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLI11_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>This<sp/>file<sp/>cannot<sp/>be<sp/>included<sp/>alongside<sp/>a<sp/>different<sp/>CLI11<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_VERSION_MINOR<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_VERSION_PATCH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_VERSION<sp/>&quot;2.3.1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>version<sp/>macro<sp/>is<sp/>very<sp/>similar<sp/>to<sp/>the<sp/>one<sp/>in<sp/>pybind11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>==<sp/>199711L)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>==<sp/>199711L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>sets<sp/>_MSVC_LANG<sp/>rather<sp/>than<sp/>__cplusplus<sp/>(supposedly<sp/>until<sp/>the<sp/>standard<sp/>is<sp/>fully<sp/>implemented)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>you<sp/>use<sp/>the<sp/>/Zc:__cplusplus<sp/>flag<sp/>on<sp/>Visual<sp/>Studio<sp/>2017<sp/>15.7<sp/>Preview<sp/>3<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSVC_LANG<sp/>&gt;<sp/>201402L<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1910</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSVC_LANG<sp/>&gt;<sp/>201703L<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1910</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_CPP20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLI11_CPP14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_DEPRECATED(reason)<sp/>[[deprecated(reason)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_DEPRECATED(reason)<sp/>__declspec(deprecated(reason))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_DEPRECATED(reason)<sp/>__attribute__((deprecated(reason)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC<sp/>&lt;<sp/>10<sp/>doesn&apos;t<sp/>ignore<sp/>this<sp/>in<sp/>unevaluated<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CLI11_CPP17)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__llvm__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&lt;<sp/>10<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_NODISCARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_NODISCARD<sp/>[[nodiscard]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor">#ifndef<sp/>CLI11_USE_STATIC_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if(defined(_HAS_STATIC_RTTI)<sp/>&amp;&amp;<sp/>_HAS_STATIC_RTTI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_USE_STATIC_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__cpp_rtti)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#if(defined(_CPPRTTI)<sp/>&amp;&amp;<sp/>_CPPRTTI<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_USE_STATIC_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_USE_STATIC_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#elif(defined(__GCC_RTTI)<sp/>&amp;&amp;<sp/>__GXX_RTTI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_USE_STATIC_RTTI<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_USE_STATIC_RTTI<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor">#ifdef<sp/>CLI11_COMPILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>standard<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>needed<sp/>for<sp/>existence<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CLI11_CPP17<sp/>&amp;&amp;<sp/>defined<sp/>__has_include<sp/>&amp;&amp;<sp/>!defined<sp/>CLI11_HAS_FILESYSTEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;filesystem&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Filesystem<sp/>cannot<sp/>be<sp/>used<sp/>if<sp/>targeting<sp/>macOS<sp/>&lt;<sp/>10.15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>__MAC_OS_X_VERSION_MIN_REQUIRED<sp/>&amp;&amp;<sp/>__MAC_OS_X_VERSION_MIN_REQUIRED<sp/>&lt;<sp/>101500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__wasi__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>of<sp/>wasi-sdk-14,<sp/>filesystem<sp/>is<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>__cpp_lib_filesystem<sp/>&amp;&amp;<sp/>__cpp_lib_filesystem<sp/>&gt;=<sp/>201703</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_GLIBCXX_RELEASE<sp/>&amp;&amp;<sp/>_GLIBCXX_RELEASE<sp/>&gt;=<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GLIBCXX__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>using<sp/>gcc<sp/>and<sp/>Version<sp/>&lt;9<sp/>default<sp/>to<sp/>no<sp/>filesystem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_HAS_FILESYSTEM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CLI11_HAS_FILESYSTEM<sp/>&amp;&amp;<sp/>CLI11_HAS_FILESYSTEM<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(build/include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Isolate<sp/>symbols<sp/>from<sp/>other<sp/>translation<sp/>units<sp/>that<sp/>may<sp/>have<sp/>included<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>own<sp/>copy<sp/>of<sp/>CLI11<sp/>by<sp/>wrapping<sp/>in<sp/>the<sp/>pxr<sp/>namespace<sp/>as<sp/>well<sp/>as<sp/>a<sp/>secondary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hard-coded<sp/>namespace.<sp/>The<sp/>latter<sp/>is<sp/>needed<sp/>in<sp/>case<sp/>the<sp/>outer<sp/>pxr<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>been<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pxr_CLI<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CLI<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="namespacepxr___c_l_i_1_1_c_l_i_1_1enums" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">enums<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_enum&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="203" refid="namespacepxr___c_l_i_1_1_c_l_i_1_1enums_1ac4b0fe3cbd766deb3b807e65dd179f9e" refkind="member"><highlight class="normal">std::ostream<sp/>&amp;<ref refid="namespacepxr___c_l_i_1_1_c_l_i_1_1enums_1ac4b0fe3cbd766deb3b807e65dd179f9e" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;item)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>this<sp/>is<sp/>out<sp/>of<sp/>the<sp/>detail<sp/>namespace<sp/>otherwise<sp/>it<sp/>won&apos;t<sp/>be<sp/>found<sp/>when<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in<sp/>&lt;&lt;<sp/>static_cast&lt;typename<sp/>std::underlying_type&lt;T&gt;::type&gt;(item);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enums::operator&lt;&lt;;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_max_vector_size{1<sp/>&lt;&lt;<sp/>29};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>http://stackoverflow.com/questions/236129/split-a-string-in-c</highlight></codeline>
<codeline lineno="219"><highlight class="comment"></highlight><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v,<sp/>std::string<sp/>delim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>beg<sp/>=<sp/>std::begin(v);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(v);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(beg<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>*beg++;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(beg<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>delim<sp/>&lt;&lt;<sp/>*beg++;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_constructible&lt;std::string,<sp/>Callable&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">std::string<sp/>join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v,<sp/>Callable<sp/>func,<sp/>std::string<sp/>delim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>beg<sp/>=<sp/>std::begin(v);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(v);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>s.tellp();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(beg<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nloc<sp/>=<sp/>s.tellp();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nloc<sp/>&gt;<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>delim;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc<sp/>=<sp/>nloc;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>func(*beg++);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>rjoin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v,<sp/>std::string<sp/>delim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>start<sp/>=<sp/>0;<sp/>start<sp/>&lt;<sp/>v.size();<sp/>start++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>delim;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>v[v.size()<sp/>-<sp/>start<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>roughly<sp/>on<sp/>http://stackoverflow.com/questions/25829143/c-trim-whitespace-from-a-string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;ltrim(std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;ltrim(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filter);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;rtrim(std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;rtrim(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filter);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;trim(std::string<sp/>&amp;str)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ltrim(rtrim(str));<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;trim(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>filter)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ltrim(rtrim(str,<sp/>filter),<sp/>filter);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>trim_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trim(s);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;remove_quotes(std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>fix_newlines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;leader,<sp/>std::string<sp/>input);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>trim_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filter)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trim(s,<sp/>filter);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">CLI11_INLINE<sp/>std::ostream<sp/>&amp;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">format_help(std::ostream<sp/>&amp;out,<sp/>std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;description,<sp/>std::size_t<sp/>wid);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">CLI11_INLINE<sp/>std::ostream<sp/>&amp;format_aliases(std::ostream<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;aliases,<sp/>std::size_t<sp/>wid);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_first_char(T<sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_later_char(T<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>and<sp/>:<sp/>are<sp/>value<sp/>separators,<sp/>{<sp/>has<sp/>special<sp/>meaning<sp/>for<sp/>option<sp/>defaults,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>\n<sp/>would<sp/>just<sp/>be<sp/>annoying<sp/>to<sp/>deal<sp/>with<sp/>in<sp/>many<sp/>places<sp/>allowing<sp/>space<sp/>here<sp/>has<sp/>too<sp/>much<sp/>potential<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inadvertent<sp/>entry<sp/>errors<sp/>and<sp/>bugs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_name_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_alias_name_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>badChars(std::string(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str.find_first_of(badChars)<sp/>==<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_separator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>sep(</highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str.empty()<sp/>||<sp/>str<sp/>==<sp/>sep);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isalpha(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(str.begin(),<sp/>str.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isalpha(c,<sp/>std::locale());<sp/>});</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>to_lower(std::string<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(std::begin(str),<sp/>std::end(str),<sp/>std::begin(str),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string::value_type<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tolower(x,<sp/>std::locale());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>remove_underscore(std::string<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(std::remove(std::begin(str),<sp/>std::end(str),<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">),<sp/>std::end(str));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>find_and_replace(std::string<sp/>str,<sp/>std::string<sp/>from,<sp/>std::string<sp/>to);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_default_flag_values(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;flags)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(flags.find_first_of(</highlight><highlight class="stringliteral">&quot;{!&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_default_flag_values(std::string<sp/>&amp;flags);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">CLI11_INLINE<sp/>std::ptrdiff_t<sp/>find_member(std::string<sp/>name,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>names,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_case<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_underscore<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>find_and_modify(std::string<sp/>str,<sp/>std::string<sp/>trigger,<sp/>Callable<sp/>modify)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>start_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((start_pos<sp/>=<sp/>str.find(trigger,<sp/>start_pos))<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_pos<sp/>=<sp/>modify(str,<sp/>start_pos);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split_up(std::string<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">CLI11_INLINE<sp/>std::size_t<sp/>escape_detect(std::string<sp/>&amp;str,<sp/>std::size_t<sp/>offset);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;add_quotes_if_needed(std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>elems;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>empty<sp/>string,<sp/>give<sp/>consistent<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s.empty())<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elems.emplace_back();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(s);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(ss,<sp/>item,<sp/>delim))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elems.push_back(item);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elems;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;ltrim(std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(str.begin(),<sp/>str.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace&lt;char&gt;(ch,<sp/>std::locale());<sp/>});</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(str.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;ltrim(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filter)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(str.begin(),<sp/>str.end(),<sp/>[&amp;filter](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter.find(ch)<sp/>==<sp/>std::string::npos;<sp/>});</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(str.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;rtrim(std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(str.rbegin(),<sp/>str.rend(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace&lt;char&gt;(ch,<sp/>std::locale());<sp/>});</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(it.base(),<sp/>str.end());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;rtrim(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filter)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(str.rbegin(),<sp/>str.rend(),<sp/>[&amp;filter](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter.find(ch)<sp/>==<sp/>std::string::npos;<sp/>});</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(it.base(),<sp/>str.end());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;remove_quotes(std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str.length()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>(str.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>str.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str.front()<sp/>==<sp/>str.back())<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.pop_back();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.erase(str.begin(),<sp/>str.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>fix_newlines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;leader,<sp/>std::string<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>input.size())<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>input.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.substr(0,<sp/>n<sp/>+<sp/>1)<sp/>+<sp/>leader<sp/>+<sp/>input.substr(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>leader.size();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">CLI11_INLINE<sp/>std::ostream<sp/>&amp;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">format_help(std::ostream<sp/>&amp;out,<sp/>std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;description,<sp/>std::size_t<sp/>wid)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(static_cast&lt;int&gt;(wid))<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!description.empty())<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>&gt;=<sp/>wid)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(static_cast&lt;int&gt;(wid))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>description)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.put(c);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(static_cast&lt;int&gt;(wid))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">CLI11_INLINE<sp/>std::ostream<sp/>&amp;format_aliases(std::ostream<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;aliases,<sp/>std::size_t<sp/>wid)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!aliases.empty())<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(static_cast&lt;int&gt;(wid))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>aliases:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;alias<sp/>:<sp/>aliases)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!front)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>detail::fix_newlines(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>alias);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_name_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str.empty()<sp/>||<sp/>!valid_first_char(str[0]))<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>str.end();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>str.begin()<sp/>+<sp/>1;<sp/>c<sp/>!=<sp/>e;<sp/>++c)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!valid_later_char(*c))</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>find_and_replace(std::string<sp/>str,<sp/>std::string<sp/>from,<sp/>std::string<sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>start_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((start_pos<sp/>=<sp/>str.find(from,<sp/>start_pos))<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.replace(start_pos,<sp/>from.length(),<sp/>to);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_pos<sp/>+=<sp/>to.length();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_default_flag_values(std::string<sp/>&amp;flags)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>flags.find_first_of(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(loc<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>finish<sp/>=<sp/>flags.find_first_of(</highlight><highlight class="stringliteral">&quot;},&quot;</highlight><highlight class="normal">,<sp/>loc<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((finish<sp/>!=<sp/>std::string::npos)<sp/>&amp;&amp;<sp/>(flags[finish]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags.erase(flags.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(loc),</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(finish)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc<sp/>=<sp/>flags.find_first_of(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">,<sp/>loc<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.erase(std::remove(flags.begin(),<sp/>flags.end(),<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">),<sp/>flags.end());</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">CLI11_INLINE<sp/>std::ptrdiff_t</highlight></codeline>
<codeline lineno="538"><highlight class="normal">find_member(std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>names,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_case,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_underscore)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::end(names);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_case)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_underscore)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>detail::to_lower(detail::remove_underscore(name));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find_if(std::begin(names),<sp/>std::end(names),<sp/>[&amp;name](std::string<sp/>local_name)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_lower(detail::remove_underscore(local_name))<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>detail::to_lower(name);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find_if(std::begin(names),<sp/>std::end(names),<sp/>[&amp;name](std::string<sp/>local_name)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_lower(local_name)<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_underscore)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>detail::remove_underscore(name);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find_if(std::begin(names),<sp/>std::end(names),<sp/>[&amp;name](std::string<sp/>local_name)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::remove_underscore(local_name)<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(std::begin(names),<sp/>std::end(names),<sp/>name);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>std::end(names))<sp/>?<sp/>(it<sp/>-<sp/>std::begin(names))<sp/>:<sp/>(-1);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split_up(std::string<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>delims(</highlight><highlight class="stringliteral">&quot;\&apos;\&quot;`&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_ws<sp/>=<sp/>[delimiter](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(delimiter<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>?<sp/>std::isspace&lt;char&gt;(ch,<sp/>std::locale())<sp/>:<sp/>(ch<sp/>==<sp/>delimiter);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>trim(str);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>output;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>embeddedQuote<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>keyChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!str.empty())<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delims.find_first_of(str[0])<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyChar<sp/>=<sp/>str[0];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>str.find_first_of(keyChar,<sp/>1);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((end<sp/>!=<sp/>std::string::npos)<sp/>&amp;&amp;<sp/>(str[end<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>escaped<sp/>quotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>str.find_first_of(keyChar,<sp/>end<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embeddedQuote<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(str.substr(1,<sp/>end<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end<sp/>+<sp/>2<sp/>&lt;<sp/>str.size())<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.substr(end<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.clear();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(str.substr(1));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(std::begin(str),<sp/>std::end(str),<sp/>find_ws);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>!=<sp/>std::end(str))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>std::string(str.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(value);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>std::string(it<sp/>+<sp/>1,<sp/>str.end());</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(str);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>any<sp/>embedded<sp/>quotes<sp/>into<sp/>the<sp/>regular<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(embeddedQuote)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back()<sp/>=<sp/>find_and_replace(output.back(),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">)<sp/>+<sp/>keyChar,<sp/>std::string(1,<sp/>keyChar));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embeddedQuote<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(str);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">CLI11_INLINE<sp/>std::size_t<sp/>escape_detect(std::string<sp/>&amp;str,<sp/>std::size_t<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>str[offset<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((next<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(next<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(next<sp/>==<sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>astart<sp/>=<sp/>str.find_last_of(</highlight><highlight class="stringliteral">&quot;-/<sp/>\&quot;\&apos;`&quot;</highlight><highlight class="normal">,<sp/>offset<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(astart<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str[astart]<sp/>==<sp/>((str[offset]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str[offset]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>interpret<sp/>this<sp/>as<sp/>a<sp/>space<sp/>so<sp/>the<sp/>split_up<sp/>works<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>&amp;add_quotes_if_needed(std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((str.front()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str.front()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>||<sp/>str.front()<sp/>!=<sp/>str.back())<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>quote<sp/>=<sp/>str.find(</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>&lt;<sp/>str.find(</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.insert(0,<sp/>1,<sp/>quote);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.append(1,<sp/>quote);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>one<sp/>of<sp/>these<sp/>on<sp/>all<sp/>error<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>temporary<sp/>and<sp/>are<sp/>undef&apos;d<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_ERROR_DEF(parent,<sp/>name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/>protected:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(std::string<sp/>ename,<sp/>std::string<sp/>msg,<sp/>int<sp/>exit_code)<sp/>:<sp/>parent(std::move(ename),<sp/>std::move(msg),<sp/>exit_code)<sp/>{}<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(std::string<sp/>ename,<sp/>std::string<sp/>msg,<sp/>ExitCodes<sp/>exit_code)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parent(std::move(ename),<sp/>std::move(msg),<sp/>exit_code)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(std::string<sp/>msg,<sp/>ExitCodes<sp/>exit_code)<sp/>:<sp/>parent(#name,<sp/>std::move(msg),<sp/>exit_code)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(std::string<sp/>msg,<sp/>int<sp/>exit_code)<sp/>:<sp/>parent(#name,<sp/>std::move(msg),<sp/>exit_code)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>added<sp/>after<sp/>the<sp/>one<sp/>above<sp/>if<sp/>a<sp/>class<sp/>is<sp/>used<sp/>directly<sp/>and<sp/>builds<sp/>its<sp/>own<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_ERROR_SIMPLE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>explicit<sp/>name(std::string<sp/>msg)<sp/>:<sp/>name(#name,<sp/>msg,<sp/>ExitCodes::name)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ExitCodes<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>Success<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>IncorrectConstruction<sp/>=<sp/>100,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>BadNameString,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>OptionAlreadyAdded,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>FileError,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>ConversionError,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>ValidationError,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>RequiredError,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>RequiresError,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>ExcludesError,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>ExtrasError,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigError,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>InvalidError,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>HorribleError,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>OptionNotFound,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentMismatch,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseClass<sp/>=<sp/>127</highlight></codeline>
<codeline lineno="680"><highlight class="normal">};</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"></codeline>
<codeline lineno="691" refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_exit_code;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>error_name{</highlight><highlight class="stringliteral">&quot;Error&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_exit_code()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actual_exit_code;<sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_name;<sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>(std::string<sp/>name,<sp/>std::string<sp/>msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code<sp/>=<sp/>static_cast&lt;int&gt;(ExitCodes::BaseClass))</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>runtime_error(msg),<sp/>actual_exit_code(exit_code),<sp/>error_name(std::move(name))<sp/>{}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>(std::string<sp/>name,<sp/>std::string<sp/>msg,<sp/>ExitCodes<sp/>exit_code)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>(name,<sp/>msg,<sp/>static_cast&lt;int&gt;(exit_code))<sp/>{}</highlight></codeline>
<codeline lineno="704"><highlight class="normal">};</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>Using<sp/>Error::Error<sp/>constructors<sp/>does<sp/>not<sp/>work<sp/>on<sp/>GCC<sp/>4.7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref>)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>PositionalFlag(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Flags<sp/>cannot<sp/>be<sp/>positional&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>Set0Opt(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Cannot<sp/>set<sp/>0<sp/>expected,<sp/>use<sp/>a<sp/>flag<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>SetFlag(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Cannot<sp/>set<sp/>an<sp/>expected<sp/>number<sp/>for<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>ChangeNotVector(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>You<sp/>can<sp/>only<sp/>change<sp/>the<sp/>expected<sp/>arguments<sp/>for<sp/>vectors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>AfterMultiOpt(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>You<sp/>can&apos;t<sp/>change<sp/>expected<sp/>arguments<sp/>after<sp/>you&apos;ve<sp/>changed<sp/>the<sp/>multi<sp/>option<sp/>policy!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>MissingOption(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;Option<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref><sp/>MultiOptionPolicy(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>multi_option_policy<sp/>only<sp/>works<sp/>for<sp/>flags<sp/>and<sp/>exact<sp/>value<sp/>options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal">};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref><sp/>OneCharName(std::string<sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>one<sp/>char<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);<sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref><sp/>BadLongName(std::string<sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>long<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);<sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref><sp/>DashesOnly(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>(</highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>a<sp/>name,<sp/>not<sp/>just<sp/>dashes:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref><sp/>MultiPositionalNames(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" kindref="compound">BadNameString</ref>(</highlight><highlight class="stringliteral">&quot;Only<sp/>one<sp/>positional<sp/>name<sp/>allowed,<sp/>remove:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal">};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" kindref="compound">ConstructionError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>already<sp/>added&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::OptionAlreadyAdded)<sp/>{}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref><sp/>Requires(std::string<sp/>name,<sp/>std::string<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>requires<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>other,<sp/>ExitCodes::OptionAlreadyAdded};</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref><sp/>Excludes(std::string<sp/>name,<sp/>std::string<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>excludes<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>other,<sp/>ExitCodes::OptionAlreadyAdded};</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal">};</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parsing<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">};</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>really<sp/>&quot;errors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>()<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>(</highlight><highlight class="stringliteral">&quot;Successfully<sp/>completed,<sp/>should<sp/>be<sp/>caught<sp/>and<sp/>quit&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::Success)<sp/>{}</highlight></codeline>
<codeline lineno="781"><highlight class="normal">};</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" kindref="compound">CallForHelp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" kindref="compound">CallForHelp</ref>)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" kindref="compound">CallForHelp</ref>()<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" kindref="compound">CallForHelp</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>be<sp/>caught<sp/>in<sp/>your<sp/>main<sp/>function,<sp/>see<sp/>examples&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::Success)<sp/>{}</highlight></codeline>
<codeline lineno="787"><highlight class="normal">};</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="790" refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" kindref="compound">CallForAllHelp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" kindref="compound">CallForAllHelp</ref>)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" kindref="compound">CallForAllHelp</ref>()</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" kindref="compound">CallForAllHelp</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>be<sp/>caught<sp/>in<sp/>your<sp/>main<sp/>function,<sp/>see<sp/>examples&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::Success)<sp/>{}</highlight></codeline>
<codeline lineno="794"><highlight class="normal">};</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CallForVersion</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" kindref="compound">Success</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CallForVersion</ref>)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CallForVersion</ref>()</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CallForVersion</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>be<sp/>caught<sp/>in<sp/>your<sp/>main<sp/>function,<sp/>see<sp/>examples&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::Success)<sp/>{}</highlight></codeline>
<codeline lineno="801"><highlight class="normal">};</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" kindref="compound">RuntimeError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" kindref="compound">RuntimeError</ref>)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" kindref="compound">RuntimeError</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_code<sp/>=<sp/>1)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" kindref="compound">RuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;Runtime<sp/>error&quot;</highlight><highlight class="normal">,<sp/>exit_code)<sp/>{}</highlight></codeline>
<codeline lineno="807"><highlight class="normal">};</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref>)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref>)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref><sp/>Missing(std::string<sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>was<sp/>not<sp/>readable<sp/>(missing?)&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal">};</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(std::string<sp/>member,<sp/>std::string<sp/>name)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>member<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>an<sp/>allowed<sp/>value<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name)<sp/>{}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(std::string<sp/>name,<sp/>std::vector&lt;std::string&gt;<sp/>results)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>convert:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::join(results))<sp/>{}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref><sp/>TooManyInputsFlag(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>too<sp/>many<sp/>inputs<sp/>for<sp/>a<sp/>flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref><sp/>TrueFalse(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" kindref="compound">ConversionError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Should<sp/>be<sp/>true/false<sp/>or<sp/>a<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal">};</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref>)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref>)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref>(std::string<sp/>name,<sp/>std::string<sp/>msg)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>msg)<sp/>{}</highlight></codeline>
<codeline lineno="837"><highlight class="normal">};</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="840" refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(std::string<sp/>name)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>required&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::RequiredError)<sp/>{}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref><sp/>Subcommand(std::size_t<sp/>min_subcom)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_subcom<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(</highlight><highlight class="stringliteral">&quot;A<sp/>subcommand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;Requires<sp/>at<sp/>least<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_subcom)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>subcommands&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::RequiredError};</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>Option(std::size_t<sp/>min_option,<sp/>std::size_t<sp/>max_option,<sp/>std::size_t<sp/>used,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_list)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((min_option<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(max_option<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(used<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(</highlight><highlight class="stringliteral">&quot;Exactly<sp/>1<sp/>option<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((min_option<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(max_option<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(used<sp/>&gt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;Exactly<sp/>1<sp/>option<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>required<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(used)<sp/>+</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>were<sp/>given&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::RequiredError};</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((min_option<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(used<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>least<sp/>1<sp/>option<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(used<sp/>&lt;<sp/>min_option)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;Requires<sp/>at<sp/>least<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_option)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>options<sp/>used<sp/>and<sp/>only<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(used)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;were<sp/>given<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::RequiredError};</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_option<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;Requires<sp/>at<sp/>most<sp/>1<sp/>options<sp/>be<sp/>given<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::RequiredError};</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;Requires<sp/>at<sp/>most<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(max_option)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>options<sp/>be<sp/>used<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(used)<sp/>+</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;were<sp/>given<sp/>from<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>option_list<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::RequiredError};</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal">};</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected,<sp/>std::size_t<sp/>received)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(expected<sp/>&gt;<sp/>0<sp/>?<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>exactly<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(expected)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>arguments<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(received))</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(</highlight><highlight class="stringliteral">&quot;Expected<sp/>at<sp/>least<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(-expected)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>arguments<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(received)),</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::ArgumentMismatch)<sp/>{}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>AtLeast(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>std::size_t<sp/>received)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>At<sp/>least<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(num)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>required<sp/>but<sp/>received<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(received));</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>AtMost(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>std::size_t<sp/>received)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>At<sp/>Most<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(num)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>required<sp/>but<sp/>received<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(received));</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>TypedAtLeast(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>std::string<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(num)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>required<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>missing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>FlagOverride(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>was<sp/>given<sp/>a<sp/>disallowed<sp/>flag<sp/>override&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref><sp/>PartialType(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>std::string<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" kindref="compound">ArgumentMismatch</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>only<sp/>partially<sp/>specified:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(num)<sp/>+</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>required<sp/>for<sp/>each<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="906" refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref>)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref>(std::string<sp/>curname,<sp/>std::string<sp/>subname)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref>(curname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>requires<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>subname,<sp/>ExitCodes::RequiresError)<sp/>{}</highlight></codeline>
<codeline lineno="910"><highlight class="normal">};</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="913" refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref>)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref>(std::string<sp/>curname,<sp/>std::string<sp/>subname)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref>(curname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>excludes<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>subname,<sp/>ExitCodes::ExcludesError)<sp/>{}</highlight></codeline>
<codeline lineno="917"><highlight class="normal">};</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>(std::vector&lt;std::string&gt;<sp/>args)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>((args.size()<sp/>&gt;<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>arguments<sp/>were<sp/>not<sp/>expected:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>argument<sp/>was<sp/>not<sp/>expected:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::rjoin(args,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::ExtrasError)<sp/>{}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>std::vector&lt;std::string&gt;<sp/>args)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>(name,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(args.size()<sp/>&gt;<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>arguments<sp/>were<sp/>not<sp/>expected:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>argument<sp/>was<sp/>not<sp/>expected:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::rjoin(args,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitCodes::ExtrasError)<sp/>{}</highlight></codeline>
<codeline lineno="933"><highlight class="normal">};</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref>)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref>)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref><sp/>Extras(std::string<sp/>item)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref>(</highlight><highlight class="stringliteral">&quot;INI<sp/>was<sp/>not<sp/>able<sp/>to<sp/>parse<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>item);<sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref><sp/>NotConfigurable(std::string<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" kindref="compound">ConfigError</ref>(item<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>This<sp/>option<sp/>is<sp/>not<sp/>allowed<sp/>in<sp/>a<sp/>configuration<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal">};</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Too<sp/>many<sp/>positional<sp/>arguments<sp/>with<sp/>unlimited<sp/>expected<sp/>args&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::InvalidError)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal">};</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref><sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" kindref="compound">ParseError</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_SIMPLE(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">};</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>After<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_ERROR_DEF(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(std::string<sp/>name)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::OptionNotFound)<sp/>{}</highlight></codeline>
<codeline lineno="966"><highlight class="normal">};</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CLI11_ERROR_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CLI11_ERROR_SIMPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>type<sp/>enabling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>generally<sp/>on<sp/>https://rmf.io/cxx11/almost-static-if</highlight></codeline>
<codeline lineno="982"><highlight class="comment"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>enabler<sp/>{};</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">constexpr<sp/>enabler<sp/>dummy<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enable_if_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;B,<sp/>T&gt;::type;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" kindref="compound">make_void</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>void;<sp/>};</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>void_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" kindref="compound">make_void</ref>&lt;Ts...&gt;::type;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>conditional_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;B,<sp/>T,<sp/>F&gt;::type;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool" kindref="compound">is_bool</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool_3_01bool_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool" kindref="compound">is_bool</ref>&lt;bool&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" kindref="compound">is_shared_ptr</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" kindref="compound">is_shared_ptr</ref>&lt;std::shared_ptr&lt;T&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01const_01std_1_1shared__ptr_3_01_t_01_4_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" kindref="compound">is_shared_ptr</ref>&lt;const<sp/>std::shared_ptr&lt;T&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="structpxr___c_l_i_1_1_c_l_i_1_1is__copyable__ptr" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__copyable__ptr" kindref="compound">is_copyable_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" kindref="compound">is_shared_ptr&lt;T&gt;::value</ref><sp/>||<sp/>std::is_pointer&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025" refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type" kindref="compound">IsMemberType</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028" refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type_3_01const_01char_01_5_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type" kindref="compound">IsMemberType</ref>&lt;const<sp/>char<sp/>*&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::string;<sp/>};</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>utilities<sp/>for<sp/>IsMember<sp/>and<sp/>other<sp/>transforming<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"></codeline>
<codeline lineno="1038" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type" kindref="compound">element_type</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type" kindref="compound">element_type</ref>&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_copyable_ptr&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::pointer_traits&lt;T&gt;::element_type;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__value__type" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__value__type" kindref="compound">element_value_type</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1element__type" kindref="compound">element_type&lt;T&gt;::type::value_type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">pair_adaptor</ref><sp/>:<sp/>std::false_type<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>first_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;value_type&gt;::type;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>second_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;value_type&gt;::type;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Q&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" kindref="member">first</ref>(Q<sp/>&amp;&amp;pair_value)<sp/>-&gt;<sp/>decltype(std::forward&lt;Q&gt;(pair_value))<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;Q&gt;(pair_value);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1a31bb3a16383913744f1753da815e5cb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Q&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1a31bb3a16383913744f1753da815e5cb4" kindref="member">second</ref>(Q<sp/>&amp;&amp;pair_value)<sp/>-&gt;<sp/>decltype(std::forward&lt;Q&gt;(pair_value))<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;Q&gt;(pair_value);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1067" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">pair_adaptor</ref>&lt;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>conditional_t&lt;false,<sp/>void_t&lt;typename<sp/>T::value_type::first_type,<sp/>typename<sp/>T::value_type::second_type&gt;,<sp/>void&gt;&gt;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>first_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;typename<sp/>value_type::first_type&gt;::type;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>second_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;typename<sp/>value_type::second_type&gt;::type;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab3aa810ae0f34874621845b6676c7209" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Q&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab3aa810ae0f34874621845b6676c7209" kindref="member">first</ref>(Q<sp/>&amp;&amp;pair_value)<sp/>-&gt;<sp/>decltype(std::get&lt;0&gt;(std::forward&lt;Q&gt;(pair_value)))<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(std::forward&lt;Q&gt;(pair_value));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a96fab0a544e6cee3a577e568565162d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Q&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a96fab0a544e6cee3a577e568565162d6" kindref="member">second</ref>(Q<sp/>&amp;&amp;pair_value)<sp/>-&gt;<sp/>decltype(std::get&lt;1&gt;(std::forward&lt;Q&gt;(pair_value)))<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(std::forward&lt;Q&gt;(pair_value));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Warning<sp/>is<sp/>suppressed<sp/>due<sp/>to<sp/>&quot;bug&quot;<sp/>in<sp/>gcc&lt;5.0<sp/>and<sp/>gcc<sp/>7.0<sp/>with<sp/>c++17<sp/>enabled<sp/>that<sp/>generates<sp/>a<sp/>Wnarrowing<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>unevaluated<sp/>context<sp/>even<sp/>if<sp/>the<sp/>function<sp/>that<sp/>was<sp/>using<sp/>this<sp/>wasn&apos;t<sp/>used.<sp/><sp/>The<sp/>standard<sp/>says<sp/>narrowing<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>brace<sp/>initialization<sp/>shouldn&apos;t<sp/>be<sp/>allowed<sp/>but<sp/>for<sp/>backwards<sp/>compatibility<sp/>gcc<sp/>allows<sp/>it<sp/>in<sp/>some<sp/>contexts.<sp/><sp/>It<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>little<sp/>fuzzy<sp/>what<sp/>happens<sp/>in<sp/>template<sp/>constructs<sp/>and<sp/>I<sp/>think<sp/>that<sp/>was<sp/>something<sp/>GCC<sp/>took<sp/>a<sp/>little<sp/>while<sp/>to<sp/>work<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>But<sp/>regardless<sp/>some<sp/>versions<sp/>of<sp/>gcc<sp/>generate<sp/>a<sp/>warning<sp/>when<sp/>they<sp/>shouldn&apos;t<sp/>from<sp/>the<sp/>following<sp/>code<sp/>so<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wnarrowing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>constructibility<sp/>from<sp/>a<sp/>specific<sp/>type<sp/>and<sp/>copy<sp/>assignable<sp/>used<sp/>in<sp/>the<sp/>parse<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">is_direct_constructible<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CC&gt;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::true_type)<sp/>-&gt;<sp/>decltype(</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NVCC<sp/>warns<sp/>about<sp/>narrowing<sp/>conversions<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">#ifdef<sp/>__CUDACC__</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">#pragma<sp/>diag_suppress<sp/>2361</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TT{std::declval&lt;CC&gt;()}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CUDACC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>diag_default<sp/>2361</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_move_assignable&lt;TT&gt;());</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CC&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::false_type)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;T,<sp/>C&gt;(0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::is_constructible&lt;T,<sp/>C&gt;::type()))::value;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>output<sp/>streamability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>https://stackoverflow.com/questions/22758291/how-can-i-detect-if-a-type-can-be-streamed-to-an-stdostream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>std::o</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">stream&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">is_ostreamable<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SS&gt;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::declval&lt;SS<sp/>&amp;&gt;()<sp/>&lt;&lt;<sp/>std::declval&lt;TT&gt;(),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;T,<sp/>S&gt;(0))::value;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__istreamable" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>std::i</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">stream&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__istreamable" kindref="compound">is_istreamable</ref><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SS&gt;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::declval&lt;SS<sp/>&amp;&gt;()<sp/>&gt;&gt;<sp/>std::declval&lt;TT<sp/>&amp;&gt;(),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;T,<sp/>S&gt;(0))::value;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__complex" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__complex" kindref="compound">is_complex</ref><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TT&gt;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::declval&lt;TT&gt;().real(),<sp/>std::declval&lt;TT&gt;().imag(),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;T&gt;(0))::value;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;is_istreamable&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>from_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;istring,<sp/>T<sp/>&amp;obj)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>is;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>is.str(istring);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>obj;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!is.fail()<sp/>&amp;&amp;<sp/>!is.rdbuf()-&gt;in_avail();</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;!is_istreamable&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>from_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/></highlight><highlight class="comment">/*istring*/</highlight><highlight class="normal">,<sp/>T<sp/>&amp;<sp/></highlight><highlight class="comment">/*obj*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>an<sp/>object<sp/>is<sp/>a<sp/>mutable<sp/>container<sp/>(fail<sp/>by<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_mutable_container<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1177" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__mutable__container_3_01_t_00_01conditional__t_3_01f0fc9658eed2515742d284fd189a9eb1d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_mutable_container&lt;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>conditional_t&lt;false,</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void_t&lt;typename<sp/>T::value_type,</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(std::declval&lt;T&gt;().end()),</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(std::declval&lt;T&gt;().clear()),</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(std::declval&lt;T&gt;().insert(std::declval&lt;decltype(std::declval&lt;T&gt;().end())&gt;(),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;const<sp/>typename<sp/>T::value_type<sp/>&amp;&gt;()))&gt;,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void&gt;&gt;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>conditional_t&lt;std::is_constructible&lt;T,<sp/>std::string&gt;::value,<sp/>std::false_type,<sp/>std::true_type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>an<sp/>object<sp/>is<sp/>a<sp/>mutable<sp/>container<sp/>(fail<sp/>by<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_readable_container<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1195" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1is__readable__container_3_01_t_00_01conditional__t_3_015deb68487f45037f4ec1002927092177" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_readable_container&lt;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>conditional_t&lt;false,<sp/>void_t&lt;decltype(std::declval&lt;T&gt;().end()),<sp/>decltype(std::declval&lt;T&gt;().begin())&gt;,<sp/>void&gt;&gt;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>an<sp/>object<sp/>is<sp/>a<sp/>wrapper<sp/>(fail<sp/>by<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_wrapper<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>an<sp/>object<sp/>is<sp/>a<sp/>wrapper<sp/>(it<sp/>has<sp/>a<sp/>value_type<sp/>defined)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_wrapper&lt;T,<sp/>conditional_t&lt;false,<sp/>void_t&lt;typename<sp/>T::value_type&gt;,<sp/>void&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>tuple<sp/>like<sp/>types,<sp/>as<sp/>in<sp/>classes<sp/>with<sp/>a<sp/>tuple_size<sp/>type<sp/>trait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">is_tuple_like<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SS&gt;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>auto<sp/>test(int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(std::conditional&lt;(std::tuple_size&lt;SS&gt;::value<sp/>&gt;<sp/>0),<sp/>std::true_type,<sp/>std::false_type&gt;::type());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::tuple_size&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;SS&gt;::type&gt;::value,<sp/>std::true_type{});</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;S&gt;(0))::value;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_convertible&lt;T,<sp/>std::string&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string(T<sp/>&amp;&amp;value)<sp/>-&gt;<sp/>decltype(std::forward&lt;T&gt;(value))<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(value);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_constructible&lt;std::string,<sp/>T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_convertible&lt;T,<sp/>std::string&gt;::value,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">std::string<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(value);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(google-readability-casting)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_convertible&lt;std::string,<sp/>T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_constructible&lt;std::string,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ostreamable&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">std::string<sp/>to_string(T<sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream.str();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_constructible&lt;std::string,<sp/>T&gt;::value<sp/>&amp;&amp;<sp/>!is_ostreamable&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_readable_container&lt;typename<sp/>std::remove_const&lt;T&gt;::type&gt;::value,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">std::string<sp/>to_string(T<sp/>&amp;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_constructible&lt;std::string,<sp/>T&gt;::value<sp/>&amp;&amp;<sp/>!is_ostreamable&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_readable_container&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">std::string<sp/>to_string(T<sp/>&amp;&amp;variable)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cval<sp/>=<sp/>variable.begin();</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>variable.end();</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cval<sp/>==<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>defaults;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(cval<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaults.emplace_back(CLI::detail::to_string(*cval));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cval;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::join(defaults)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_same&lt;T1,<sp/>T2&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>checked_to_string(T<sp/>&amp;&amp;value)<sp/>-&gt;<sp/>decltype(to_string(std::forward&lt;T&gt;(value)))<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(std::forward&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_same&lt;T1,<sp/>T2&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">std::string<sp/>checked_to_string(T<sp/>&amp;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">std::string<sp/>value_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::to_string(value);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_enum&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">std::string<sp/>value_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::underlying_type&lt;T&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value));</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_enum&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_arithmetic&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>-&gt;<sp/>decltype(to_string(value))<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(value);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>def,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type" kindref="compound">wrapped_type</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>def;<sp/>};</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type_3_01_t_00_01def_00_01typename_01std_1_1ena13b56b88558cae053b49c37ac36da7a" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>def&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1wrapped__type" kindref="compound">wrapped_type</ref>&lt;T,<sp/>def,<sp/>typename<sp/>std::enable_if&lt;is_wrapper&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" kindref="compound">type_count_base</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{0};<sp/>};</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1319" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_8edce2548eb400550874486844beff0b" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" kindref="compound">type_count_base</ref>&lt;T,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{1};</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1327" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_92caf551d327eec308ddbeb704795429" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" kindref="compound">type_count_base</ref>&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{std::tuple_size&lt;T&gt;::value};</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base_3_01_t_00_01typename_01std_1_1enable_8a13f8fe576a1001c6aca10cb804cab7" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" kindref="compound">type_count_base</ref>&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count__base" kindref="compound">type_count_base&lt;typename T::value_type&gt;::value</ref>};</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"></codeline>
<codeline lineno="1339" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count" kindref="compound">subtype_count</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count__min" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count__min" kindref="compound">subtype_count_min</ref>;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{0};<sp/>};</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1349" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_554c9019fc27a3e8df4e129291a5a951" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count</ref>&lt;T,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_complex&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{1};</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_4289e7af6fb3d798b82481000c59cc57" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count</ref>&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_complex&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{2};</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_1e4545234cac89cab0a985aa37bc8128" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count</ref>&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1subtype__count" kindref="compound">subtype_count&lt;typename T::value_type&gt;::value</ref>};</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1367" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count_3_01_t_00_01typename_01std_1_1enable__if_3_295e4dcf84d3724cfa42817f16b67f40" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count</ref>&lt;T,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_complex&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">type_count&lt;typename T::value_type&gt;::value</ref>};</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;I<sp/>==<sp/>type_count_base&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>tuple_type_size()<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if<sp/>&lt;<sp/>I&lt;type_count_base&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>tuple_type_size()<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subtype_count&lt;typename<sp/>std::tuple_element&lt;I,<sp/>T&gt;::type&gt;::value<sp/>+<sp/>tuple_type_size&lt;T,<sp/>I<sp/>+<sp/>1&gt;();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_tuple_like&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{tuple_type_size&lt;T,<sp/>0&gt;()};</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">subtype_count<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{is_mutable_container&lt;T&gt;::value<sp/>?<sp/>expected_max_vector_size<sp/>:<sp/>type_count&lt;T&gt;::value};</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count_min<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{0};<sp/>};</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count_min&lt;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_complex&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_void&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{type_count&lt;T&gt;::value};</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count_min&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_complex&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{1};</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count_min&lt;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_complex&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_tuple_like&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{subtype_count_min&lt;typename<sp/>T::value_type&gt;::value};</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;I<sp/>==<sp/>type_count_base&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>tuple_type_size_min()<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if<sp/>&lt;<sp/>I&lt;type_count_base&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>tuple_type_size_min()<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subtype_count_min&lt;typename<sp/>std::tuple_element&lt;I,<sp/>T&gt;::type&gt;::value<sp/>+<sp/>tuple_type_size_min&lt;T,<sp/>I<sp/>+<sp/>1&gt;();</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_count_min&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_tuple_like&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{tuple_type_size_min&lt;T,<sp/>0&gt;()};</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">subtype_count_min<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{is_mutable_container&lt;T&gt;::value</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>((type_count&lt;T&gt;::value<sp/>&lt;<sp/>expected_max_vector_size)<sp/>?<sp/>type_count&lt;T&gt;::value<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type_count_min&lt;T&gt;::value};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">expected_count<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{0};<sp/>};</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">expected_count&lt;T,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{1};</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1455"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">expected_count&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{expected_max_vector_size};</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">expected_count&lt;T,<sp/>typename<sp/>std::enable_if&lt;!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>is_wrapper&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value{expected_count&lt;typename<sp/>T::value_type&gt;::value};</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumeration<sp/>of<sp/>the<sp/>different<sp/>supported<sp/>categorizations<sp/>of<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>object_category<sp/>:<sp/>int<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>char_value<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>integral_value<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned_integral<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>enumeration<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>boolean_value<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>floating_point<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>number_constructible<sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>double_constructible<sp/>=<sp/>14,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>integer_constructible<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>like<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>string_assignable<sp/>=<sp/>23,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>string_constructible<sp/>=<sp/>24,</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>other<sp/>=<sp/>45,</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>wrapper<sp/>or<sp/>container<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_value<sp/>=<sp/>50,</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_number<sp/>=<sp/>60,</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple_value<sp/>=<sp/>70,</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>container_value<sp/>=<sp/>80,</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"></codeline>
<codeline lineno="1491"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::other};</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;T,<sp/>char&gt;::value<sp/>&amp;&amp;<sp/>std::is_signed&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_bool&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_enum&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::integral_value};</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/>char&gt;::value<sp/>&amp;&amp;<sp/>!is_bool&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::unsigned_integral};</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;std::is_same&lt;T,<sp/>char&gt;::value<sp/>&amp;&amp;<sp/>!std::is_enum&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::char_value};</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_bool&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::boolean_value};</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::floating_point};</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_floating_point&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_assignable&lt;T<sp/>&amp;,<sp/>std::string&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::string_assignable};</highlight></codeline>
<codeline lineno="1534"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;!std::is_floating_point&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/>std::string&gt;::value<sp/>&amp;&amp;<sp/>(type_count&lt;T&gt;::value<sp/>==<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>std::string&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::string_constructible};</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;std::is_enum&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::enumeration};</highlight></codeline>
<codeline lineno="1549"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_complex&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::complex_number};</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">uncommon_type<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;!std::is_floating_point&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/>std::string&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>std::string&gt;::value<sp/>&amp;&amp;<sp/>!is_complex&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_enum&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type&gt;::type;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>type::value;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;(!is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;<sp/>uncommon_type&lt;T&gt;::value)&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::wrapper_value};</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;uncommon_type&lt;T&gt;::value<sp/>&amp;&amp;<sp/>type_count&lt;T&gt;::value<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>is_direct_constructible&lt;T,<sp/>double&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_direct_constructible&lt;T,<sp/>int&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::number_constructible};</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;uncommon_type&lt;T&gt;::value<sp/>&amp;&amp;<sp/>type_count&lt;T&gt;::value<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_direct_constructible&lt;T,<sp/>double&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_direct_constructible&lt;T,<sp/>int&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::integer_constructible};</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;uncommon_type&lt;T&gt;::value<sp/>&amp;&amp;<sp/>type_count&lt;T&gt;::value<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_wrapper&lt;T&gt;::value<sp/>&amp;&amp;<sp/>is_direct_constructible&lt;T,<sp/>double&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_direct_constructible&lt;T,<sp/>int&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::double_constructible};</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::enable_if&lt;is_tuple_like&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type_count&lt;T&gt;::value<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>!is_wrapper&lt;T&gt;::value)<sp/>||</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uncommon_type&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!is_direct_constructible&lt;T,<sp/>double&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_direct_constructible&lt;T,<sp/>int&gt;::value)<sp/>||</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uncommon_type&lt;T&gt;::value<sp/>&amp;&amp;<sp/>type_count&lt;T&gt;::value<sp/>&gt;=<sp/>2))&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::tuple_value};</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>condition<sp/>on<sp/>this<sp/>class<sp/>requires<sp/>it<sp/>be<sp/>like<sp/>a<sp/>tuple,<sp/>but<sp/>on<sp/>some<sp/>compilers<sp/>(like<sp/>Xcode)<sp/>tuples<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructed<sp/>from<sp/>just<sp/>the<sp/>first<sp/>element<sp/>so<sp/>tuples<sp/>of<sp/>&lt;string,<sp/>int,int&gt;<sp/>can<sp/>be<sp/>constructed<sp/>from<sp/>a<sp/>string,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>lead<sp/>to<sp/>issues<sp/>so<sp/>there<sp/>are<sp/>two<sp/>variants<sp/>of<sp/>the<sp/>condition,<sp/>the<sp/>first<sp/>isolates<sp/>things<sp/>with<sp/>a<sp/>type<sp/>size<sp/>&gt;=2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mainly<sp/>to<sp/>get<sp/>tuples<sp/>on<sp/>Xcode<sp/>with<sp/>the<sp/>exception<sp/>of<sp/>wrappers,<sp/>the<sp/>second<sp/>is<sp/>the<sp/>main<sp/>one<sp/>and<sp/>just<sp/>separating<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>those<sp/>cases<sp/>that<sp/>are<sp/>caught<sp/>by<sp/>other<sp/>object<sp/>classifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">classify_object&lt;T,<sp/>typename<sp/>std::enable_if&lt;is_mutable_container&lt;T&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>object_category<sp/>value{object_category::container_value};</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>name<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::char_value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CHAR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::integral_value<sp/>||</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::integer_constructible,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;INT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::unsigned_integral,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UINT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::floating_point<sp/>||</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::number_constructible<sp/>||</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::double_constructible,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FLOAT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::enumeration,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ENUM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::boolean_value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;BOOLEAN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::complex_number,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;COMPLEX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>&gt;=<sp/>object_category::string_assignable<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>&lt;=<sp/>object_category::other,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_name()<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;TEXT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::tuple_value<sp/>&amp;&amp;<sp/>type_count_base&lt;T&gt;::value<sp/>&gt;=<sp/>2,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">std::string<sp/>type_name();<sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::container_value<sp/>||</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::wrapper_value,</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">std::string<sp/>type_name();<sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::tuple_value<sp/>&amp;&amp;<sp/>type_count_base&lt;T&gt;::value<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>type_name()<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_name&lt;typename<sp/>std::decay&lt;typename<sp/>std::tuple_element&lt;0,<sp/>T&gt;::type&gt;::type&gt;();</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;I<sp/>==<sp/>type_count_base&lt;T&gt;::value,<sp/>std::string&gt;::type<sp/>tuple_name()<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(I<sp/>&lt;<sp/>type_count_base&lt;T&gt;::value),<sp/>std::string&gt;::type<sp/>tuple_name()<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>std::string{type_name&lt;typename<sp/>std::decay&lt;typename<sp/>std::tuple_element&lt;I,<sp/>T&gt;::type&gt;::type&gt;()}<sp/>+<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tuple_name&lt;T,<sp/>I<sp/>+<sp/>1&gt;();</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.pop_back();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::tuple_value<sp/>&amp;&amp;<sp/>type_count_base&lt;T&gt;::value<sp/>&gt;=<sp/>2,</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;&gt;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>type_name()<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tname<sp/>=<sp/>std::string(1,<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>+<sp/>tuple_name&lt;T,<sp/>0&gt;();</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>tname.push_back(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tname;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::container_value<sp/>||</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::wrapper_value,</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;&gt;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>type_name()<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_name&lt;typename<sp/>T::value_type&gt;();</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lexical<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_unsigned&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>integral_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>output_ll<sp/>=<sp/>std::strtoull(input.c_str(),<sp/>&amp;val,<sp/>0);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(output_ll);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>(input.c_str()<sp/>+<sp/>input.size())<sp/>&amp;&amp;<sp/>static_cast&lt;std::uint64_t&gt;(output)<sp/>==<sp/>output_ll)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int64_t<sp/>output_sll<sp/>=<sp/>std::strtoll(input.c_str(),<sp/>&amp;val,<sp/>0);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>(input.c_str()<sp/>+<sp/>input.size()))<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(output_sll<sp/>&lt;<sp/>0)<sp/>?<sp/>static_cast&lt;T&gt;(0)<sp/>:<sp/>static_cast&lt;T&gt;(output_sll);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;std::int64_t&gt;(output)<sp/>==<sp/>output_sll);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_signed&lt;T&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>integral_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int64_t<sp/>output_ll<sp/>=<sp/>std::strtoll(input.c_str(),<sp/>&amp;val,<sp/>0);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(output_ll);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>(input.c_str()<sp/>+<sp/>input.size())<sp/>&amp;&amp;<sp/>static_cast&lt;std::int64_t&gt;(output)<sp/>==<sp/>output_ll)<sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>to<sp/>deal<sp/>with<sp/>a<sp/>few<sp/>oddities<sp/>with<sp/>flags<sp/>and<sp/>wrapper<sp/>int<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(1);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::int64_t<sp/>to_flag_value(std::string<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>trueString(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>falseString(</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>trueString)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>falseString)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>detail::to_lower(val);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int64_t<sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>val[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;std::int64_t&gt;(val[0])<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(val[0])<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;unrecognized<sp/>character&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>trueString<sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal"><sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>==<sp/>falseString<sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal"><sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal"><sp/>||<sp/>val<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;disable&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>std::stoll(val);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::integral_value<sp/>||</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::unsigned_integral,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integral_conversion(input,<sp/>output);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::char_value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(input[0]);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integral_conversion(input,<sp/>output);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::boolean_value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>to_flag_value(input);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(out<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>number<sp/>is<sp/>out<sp/>of<sp/>the<sp/>range<sp/>of<sp/>a<sp/>64<sp/>bit<sp/>value<sp/>then<sp/>it<sp/>is<sp/>still<sp/>a<sp/>number<sp/>and<sp/>for<sp/>this<sp/>purpose<sp/>is<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>valid<sp/>all<sp/>we<sp/>care<sp/>about<sp/>the<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(input[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::floating_point,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_ld<sp/>=<sp/>std::strtold(input.c_str(),<sp/>&amp;val);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(output_ld);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>==<sp/>(input.c_str()<sp/>+<sp/>input.size());</highlight></codeline>
<codeline lineno="1879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::complex_number,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>XC<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>wrapped_type&lt;T,<sp/>double&gt;::type;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>XC<sp/>x{0.0},<sp/>y{0.0};</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str1<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>worked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nloc<sp/>=<sp/>str1.find_last_of(</highlight><highlight class="stringliteral">&quot;+-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nloc<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>nloc<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worked<sp/>=<sp/>detail::lexical_cast(str1.substr(0,<sp/>nloc),<sp/>x);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1<sp/>=<sp/>str1.substr(nloc);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal"><sp/>||<sp/>str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1.pop_back();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worked<sp/>=<sp/>worked<sp/>&amp;&amp;<sp/>detail::lexical_cast(str1,<sp/>y);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal"><sp/>||<sp/>str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1.pop_back();</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worked<sp/>=<sp/>detail::lexical_cast(str1,<sp/>y);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>XC{0};</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worked<sp/>=<sp/>detail::lexical_cast(str1,<sp/>x);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>XC{0};</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(worked)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T{x,<sp/>y};</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>worked;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::string_assignable,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::string_constructible,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T(input);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::enumeration,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;T&gt;::type<sp/>val;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!integral_conversion(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>static_cast&lt;T&gt;(val);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_assignable&lt;T<sp/>&amp;,<sp/>typename<sp/>T::value_type&gt;::value,</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type<sp/>val;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_cast(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/>typename<sp/>T::value_type&gt;::value<sp/>&amp;&amp;<sp/>std::is_assignable&lt;T<sp/>&amp;,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type<sp/>val;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_cast(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T{val};</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::number_constructible,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(integral_conversion(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T(val);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dval<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_cast(input,<sp/>dval))<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T{dval};</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::integer_constructible,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(integral_conversion(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T(val);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::double_constructible,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_cast(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>T{val};</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::other<sp/>&amp;&amp;<sp/>std::is_assignable&lt;T<sp/>&amp;,<sp/>int&gt;::value,</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(integral_conversion(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>Atomic&lt;XX&gt;<sp/>this<sp/>could<sp/>produce<sp/>a<sp/>warning<sp/>due<sp/>to<sp/>the<sp/>conversion<sp/>but<sp/>if<sp/>atomic<sp/>gets<sp/>here<sp/>it<sp/>is<sp/>an<sp/>old<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>will<sp/>most<sp/>likely<sp/>still<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>version<sp/>of<sp/>cast<sp/>is<sp/>only<sp/>used<sp/>for<sp/>odd<sp/>cases<sp/>in<sp/>an<sp/>older<sp/>compilers<sp/>the<sp/>fail<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from_stream<sp/>is<sp/>tested<sp/>elsewhere<sp/>an<sp/>not<sp/>relevant<sp/>for<sp/>coverage<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;T&gt;::value<sp/>==<sp/>object_category::other<sp/>&amp;&amp;<sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/>int&gt;::value,</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_cast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>T<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(is_istreamable&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;option<sp/>object<sp/>type<sp/>must<sp/>have<sp/>a<sp/>lexical<sp/>cast<sp/>overload<sp/>or<sp/>streaming<sp/>input<sp/>operator(&gt;&gt;)<sp/>defined,<sp/>if<sp/>it<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>convertible<sp/>from<sp/>another<sp/>type<sp/>use<sp/>the<sp/>add_option&lt;T,<sp/>XC&gt;(...)<sp/>with<sp/>XC<sp/>being<sp/>the<sp/>known<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_stream(input,<sp/>output);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(classify_object&lt;AssignTo&gt;::value<sp/>==<sp/>object_category::string_assignable<sp/>||</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>==<sp/>object_category::string_constructible),</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexical_cast(input,<sp/>output);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>AssignTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>!=<sp/>object_category::string_assignable<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>!=<sp/>object_category::string_constructible,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>AssignTo{};</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexical_cast(input,<sp/>output);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>!std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>AssignTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>==<sp/>object_category::wrapper_value,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo::value_type<sp/>emptyVal{};</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>emptyVal;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexical_cast(input,<sp/>output);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>!std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>AssignTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>!=<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>int&gt;::value,</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_cast(input,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>ConvertTo<sp/>&amp;&gt;::value,</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTo<sp/>val{};</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse_result<sp/>=<sp/>(!input.empty())<sp/>?<sp/>lexical_cast&lt;ConvertTo&gt;(input,<sp/>val)<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parse_result)<sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_result;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_same&lt;AssignTo,<sp/>ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>!std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>ConvertTo<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_move_assignable&lt;AssignTo&gt;::value,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTo<sp/>val{};</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse_result<sp/>=<sp/>input.empty()<sp/>?<sp/>true<sp/>:<sp/>lexical_cast&lt;ConvertTo&gt;(input,<sp/>val);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parse_result)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>AssignTo(val);<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>()<sp/>form<sp/>of<sp/>constructor<sp/>to<sp/>allow<sp/>some<sp/>implicit<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_result;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;ConvertTo&gt;::value<sp/>&lt;=<sp/>object_category::other<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;AssignTo&gt;::value<sp/>&lt;=<sp/>object_category::wrapper_value,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexical_assign&lt;AssignTo,<sp/>ConvertTo&gt;(strings[0],<sp/>output);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;(type_count&lt;AssignTo&gt;::value<sp/>&lt;=<sp/>2)<sp/>&amp;&amp;<sp/>expected_count&lt;AssignTo&gt;::value<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_tuple_like&lt;ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>type_count_base&lt;ConvertTo&gt;::value<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>remove<sp/>const<sp/>is<sp/>to<sp/>handle<sp/>pair<sp/>types<sp/>coming<sp/>from<sp/>a<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;typename<sp/>std::tuple_element&lt;0,<sp/>ConvertTo&gt;::type&gt;::type<sp/>v1;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;1,<sp/>ConvertTo&gt;::type<sp/>v2;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_assign&lt;decltype(v1),<sp/>decltype(v1)&gt;(strings[0],<sp/>v1);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;<sp/>lexical_assign&lt;decltype(v2),<sp/>decltype(v2)&gt;(strings[1],<sp/>v2);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>AssignTo{v1,<sp/>v2};</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count&lt;ConvertTo&gt;::value<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>output.erase(output.begin(),<sp/>output.end());</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>strings[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip_remaining<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.size()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>strings[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>is_separator(strings[1]))<sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_remaining<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>strings)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo::value_type<sp/>out;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_assign&lt;typename<sp/>AssignTo::value_type,<sp/>typename<sp/>ConvertTo::value_type&gt;(elem,<sp/>out);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!retval)<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.insert(output.end(),<sp/>std::move(out));</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skip_remaining)<sp/>{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!output.empty());</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal">template<sp/>&lt;class<sp/>AssignTo,<sp/>class<sp/>ConvertTo,<sp/>enable_if_t&lt;is_complex&lt;ConvertTo&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>!strings[1].empty())<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>XC2<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>wrapped_type&lt;ConvertTo,<sp/>double&gt;::type;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XC2<sp/>x{0.0},<sp/>y{0.0};</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str1<sp/>=<sp/>strings[1];</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal"><sp/>||<sp/>str1.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str1.pop_back();</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>worked<sp/>=<sp/>detail::lexical_cast(strings[0],<sp/>x)<sp/>&amp;&amp;<sp/>detail::lexical_cast(str1,<sp/>y);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(worked)<sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>ConvertTo{x,<sp/>y};</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>worked;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexical_assign&lt;AssignTo,<sp/>ConvertTo&gt;(strings[0],<sp/>output);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>(expected_count&lt;ConvertTo&gt;::value<sp/>==<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_count&lt;ConvertTo&gt;::value<sp/>==<sp/>1),</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>output.reserve(strings.size());</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>strings)<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;<sp/>lexical_assign&lt;typename<sp/>AssignTo::value_type,<sp/>ConvertTo&gt;(elem,<sp/>output.back());</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!output.empty())<sp/>&amp;&amp;<sp/>retval;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count_base&lt;ConvertTo&gt;::value<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(std::vector&lt;std::string&gt;<sp/>strings,<sp/>AssignTo<sp/>&amp;output);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count_base&lt;ConvertTo&gt;::value<sp/>!=<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>2)<sp/>||</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>type_count_base&lt;ConvertTo&gt;::value)),</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_tuple_like&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_tuple_like&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_count_base&lt;ConvertTo&gt;::value<sp/>!=<sp/>type_count&lt;ConvertTo&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>2),</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output);<sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo,</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!is_tuple_like&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>!is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_object&lt;ConvertTo&gt;::value<sp/>!=<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(is_mutable_container&lt;ConvertTo&gt;::value<sp/>||<sp/>type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>2),</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.size()<sp/>&gt;<sp/>1<sp/>||<sp/>(!strings.empty()<sp/>&amp;&amp;<sp/>!(strings.front().empty())))<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConvertTo<sp/>val;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_conversion&lt;ConvertTo,<sp/>ConvertTo&gt;(strings,<sp/>val);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>AssignTo{val};</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>AssignTo{};</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AssignTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConvertTo,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(I<sp/>&gt;=<sp/>type_count_base&lt;AssignTo&gt;::value),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2296"><highlight class="normal">tuple_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;,<sp/>AssignTo<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AssignTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConvertTo&gt;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>type_count&lt;ConvertTo&gt;::value<sp/>==<sp/>1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">tuple_type_conversion(std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_assign&lt;AssignTo,<sp/>ConvertTo&gt;(strings[0],<sp/>output);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>strings.erase(strings.begin());</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AssignTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConvertTo&gt;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>(type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count&lt;ConvertTo&gt;::value<sp/>==<sp/>type_count_min&lt;ConvertTo&gt;::value,</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">tuple_type_conversion(std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_conversion&lt;AssignTo,<sp/>ConvertTo&gt;(strings,<sp/>output);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>strings.erase(strings.begin(),<sp/>strings.begin()<sp/>+<sp/>type_count&lt;ConvertTo&gt;::value);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AssignTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConvertTo&gt;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;is_mutable_container&lt;ConvertTo&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count&lt;ConvertTo&gt;::value<sp/>!=<sp/>type_count_min&lt;ConvertTo&gt;::value,</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">tuple_type_conversion(std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>index{subtype_count_min&lt;ConvertTo&gt;::value};</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>mx_count{subtype_count&lt;ConvertTo&gt;::value};</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>mx{(std::max)(mx_count,<sp/>strings.size())};</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(index<sp/>&lt;<sp/>mx)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_separator(strings[index]))<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>lexical_conversion&lt;AssignTo,<sp/>ConvertTo&gt;(</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;(strings.begin(),<sp/>strings.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(index)),<sp/>output);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>strings.erase(strings.begin(),<sp/>strings.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(index)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AssignTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ConvertTo,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;(I<sp/>&lt;<sp/>type_count_base&lt;AssignTo&gt;::value),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">tuple_conversion(std::vector&lt;std::string&gt;<sp/>strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConvertToElement<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conditional&lt;is_tuple_like&lt;ConvertTo&gt;::value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;I,<sp/>ConvertTo&gt;::type,<sp/>ConvertTo&gt;::type;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strings.empty())<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;<sp/>tuple_type_conversion&lt;typename<sp/>std::tuple_element&lt;I,<sp/>AssignTo&gt;::type,<sp/>ConvertToElement&gt;(</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strings,<sp/>std::get&lt;I&gt;(output));</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;<sp/>tuple_conversion&lt;AssignTo,<sp/>ConvertTo,<sp/>I<sp/>+<sp/>1&gt;(std::move(strings),<sp/>output);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count_base&lt;ConvertTo&gt;::value<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;&gt;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(std::vector&lt;std::string&gt;<sp/>strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!strings.empty())<sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;typename<sp/>std::tuple_element&lt;0,<sp/>typename<sp/>ConvertTo::value_type&gt;::type&gt;::type<sp/>v1;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;1,<sp/>typename<sp/>ConvertTo::value_type&gt;::type<sp/>v2;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>tuple_type_conversion&lt;decltype(v1),<sp/>decltype(v1)&gt;(strings,<sp/>v1);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strings.empty())<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;<sp/>tuple_type_conversion&lt;decltype(v2),<sp/>decltype(v2)&gt;(strings,<sp/>v2);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.insert(output.end(),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo::value_type{v1,<sp/>v2});</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!output.empty());</highlight></codeline>
<codeline lineno="2381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_tuple_like&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_tuple_like&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_count_base&lt;ConvertTo&gt;::value<sp/>!=<sp/>type_count&lt;ConvertTo&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>2),</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;&gt;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_tuple_like&lt;ConvertTo&gt;::value<sp/>||<sp/>type_count_base&lt;AssignTo&gt;::value<sp/>==<sp/>type_count_base&lt;ConvertTo&gt;::value,</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if<sp/>the<sp/>conversion<sp/>type<sp/>is<sp/>defined<sp/>as<sp/>a<sp/>tuple<sp/>it<sp/>must<sp/>be<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the<sp/>type<sp/>you<sp/>are<sp/>converting<sp/>to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple_conversion&lt;AssignTo,<sp/>ConvertTo,<sp/>0&gt;(strings,<sp/>output);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssignTo,</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_mutable_container&lt;AssignTo&gt;::value<sp/>&amp;&amp;<sp/>is_mutable_container&lt;ConvertTo&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_count_base&lt;ConvertTo&gt;::value<sp/>!=<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>2)<sp/>||</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type_count&lt;ConvertTo&gt;::value<sp/>&gt;<sp/>type_count_base&lt;ConvertTo&gt;::value)),</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;&gt;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std<sp/>::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>output.clear();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>ii{0};</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>icount{0};</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>xcm{type_count&lt;ConvertTo&gt;::value};</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ii_max<sp/>=<sp/>strings.size();</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ii<sp/>&lt;<sp/>ii_max)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.push_back(strings[ii]);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ii;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++icount;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(icount<sp/>==<sp/>xcm<sp/>||<sp/>is_separator(temp.back())<sp/>||<sp/>ii<sp/>==<sp/>ii_max)<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(static_cast&lt;int&gt;(xcm)<sp/>&gt;<sp/>type_count_min&lt;ConvertTo&gt;::value<sp/>&amp;&amp;<sp/>is_separator(temp.back()))<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.pop_back();</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo::value_type<sp/>temp_out;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>retval<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexical_conversion&lt;typename<sp/>AssignTo::value_type,<sp/>typename<sp/>ConvertTo::value_type&gt;(temp,<sp/>temp_out);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.clear();</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!retval)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.insert(output.end(),<sp/>std::move(temp_out));</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;ConvertTo&gt;::value<sp/>==<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_assignable&lt;ConvertTo<sp/>&amp;,<sp/>ConvertTo&gt;::value,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.empty()<sp/>||<sp/>strings.front().empty())<sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>ConvertTo{};</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo::value_type<sp/>val;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_conversion&lt;typename<sp/>ConvertTo::value_type,<sp/>typename<sp/>ConvertTo::value_type&gt;(strings,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>ConvertTo{val};</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConvertTo,</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;classify_object&lt;ConvertTo&gt;::value<sp/>==<sp/>object_category::wrapper_value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;AssignTo<sp/>&amp;,<sp/>ConvertTo&gt;::value,</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lexical_conversion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;strings,<sp/>AssignTo<sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConvertType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo::value_type;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strings.empty()<sp/>||<sp/>strings.front().empty())<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>ConvertType{};</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertType<sp/>val;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lexical_conversion&lt;typename<sp/>ConvertTo::value_type,<sp/>typename<sp/>ConvertTo::value_type&gt;(strings,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>sum_string_vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;values)<sp/>{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val{0.0};</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fail{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tv{0.0};</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/>detail::lexical_cast&lt;double&gt;(arg,<sp/>tv);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!comp)<sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tv<sp/>=<sp/>static_cast&lt;double&gt;(detail::to_flag_value(arg));</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>tv;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fail)<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(arg);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;=<sp/>static_cast&lt;double&gt;((std::numeric_limits&lt;std::int64_t&gt;::min)())<sp/>||</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>&gt;=<sp/>static_cast&lt;double&gt;((std::numeric_limits&lt;std::int64_t&gt;::max)())<sp/>||</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(clang-diagnostic-float-equal,bugprone-narrowing-conversions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>==<sp/>static_cast&lt;std::int64_t&gt;(val))<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>detail::value_string(static_cast&lt;int64_t&gt;(val));</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>detail::value_string(val);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>not<sp/>a<sp/>short<sp/>option.<sp/>Otherwise,<sp/>sets<sp/>opt<sp/>name<sp/>and<sp/>rest<sp/>and<sp/>returns<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_short(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;rest);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>not<sp/>a<sp/>long<sp/>option.<sp/>Otherwise,<sp/>sets<sp/>opt<sp/>name<sp/>and<sp/>other<sp/>side<sp/>of<sp/>=<sp/>and<sp/>returns<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_long(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>not<sp/>a<sp/>windows<sp/>style<sp/>option.<sp/>Otherwise,<sp/>sets<sp/>opt<sp/>name<sp/>and<sp/>value<sp/>and<sp/>returns<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_windows_style(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>a<sp/>string<sp/>into<sp/>multiple<sp/>long<sp/>and<sp/>short<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split_names(std::string<sp/>current);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>get_default_flag_values(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal">CLI11_INLINE<sp/>std::tuple&lt;std::vector&lt;std::string&gt;,<sp/>std::vector&lt;std::string&gt;,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal">get_names(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;input);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_short(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;rest)<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>current[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>valid_first_char(current[1]))<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>current.substr(1,<sp/>1);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/>=<sp/>current.substr(2);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_long(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current.size()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>current.substr(0,<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>valid_first_char(current[2]))<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>current.find_first_of(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(loc<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>current.substr(2,<sp/>loc<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current.substr(loc<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>current.substr(2);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>split_windows_style(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>current[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>valid_first_char(current[1]))<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>current.find_first_of(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(loc<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>current.substr(1,<sp/>loc<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current.substr(loc<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>current.substr(1);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/>split_names(std::string<sp/>current)<sp/>{</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>output;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((val<sp/>=<sp/>current.find(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(trim_copy(current.substr(0,<sp/>val)));</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current.substr(val<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(trim_copy(current));</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>get_default_flag_values(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>flags<sp/>=<sp/>split_names(str);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>flags.erase(std::remove_if(flags.begin(),</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags.end(),</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((name.empty())<sp/>||<sp/>(!(((name.find_first_of(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>||</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags.end());</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>output;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>output.reserve(flags.size());</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flag<sp/>:<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>def_start<sp/>=<sp/>flag.find_first_of(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>defval<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((def_start<sp/>!=<sp/>std::string::npos)<sp/>&amp;&amp;<sp/>(flag.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defval<sp/>=<sp/>flag.substr(def_start<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defval.pop_back();</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag.erase(def_start,<sp/>std::string::npos);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(readability-suspicious-call-argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag.erase(0,<sp/>flag.find_first_not_of(</highlight><highlight class="stringliteral">&quot;-!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back(flag,<sp/>defval);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal">CLI11_INLINE<sp/>std::tuple&lt;std::vector&lt;std::string&gt;,<sp/>std::vector&lt;std::string&gt;,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">get_names(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>short_names;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>long_names;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pos_name;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>name<sp/>:<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>valid_first_char(name[1]))</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_names.emplace_back(1,<sp/>name[1]);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadNameString::OneCharName(name);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>name.substr(0,<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>name.substr(2);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(valid_name_string(name))</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long_names.push_back(name);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadNameString::BadLongName(name);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadNameString::DashesOnly(name);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos_name.length()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadNameString::MultiPositionalNames(name);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(short_names,<sp/>long_names,<sp/>pos_name);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">App;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657" refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref><sp/>{</highlight></codeline>
<codeline lineno="2659" refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1abfe3b8493d67c464840d46e57e624f35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parents{};</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662" refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name{};</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2665" refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>inputs{};</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668" refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tmp<sp/>=<sp/>parents;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.emplace_back(name);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::join(tmp,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref><sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ConfigItem&gt;<sp/>items{};</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>to_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::string)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;ConfigItem&gt;<sp/>from_config(std::istream<sp/>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_1a349cdd2c788d04b2622aa92684fc7f6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_1a349cdd2c788d04b2622aa92684fc7f6b" kindref="member">to_flag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref><sp/>&amp;item)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.at(0);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConversionError::TooManyInputsFlag(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_1acb65d998c2d9f242c2ac9f721a0ea404" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::vector&lt;ConfigItem&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_1acb65d998c2d9f242c2ac9f721a0ea404" kindref="member">from_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>input{name};</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!input.good())</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>FileError::Missing(name);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_config(input);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref><sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2715" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a32fee0528b065ec8a17773f54b861b06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>commentChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2717" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayStart<sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2719" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a56eaf0de3392849b4b85e7fa191bf54d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayEnd<sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2721" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a360531fdf0529252ca32fe16010bab62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arraySeparator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a8ec511c53144b5b018f54731b848a0a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>valueDelimiter<sp/>=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2725" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a09c4bad7bea1c7e375578549516290d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stringQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2727" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af45bfe80a0bc1056d4ad8dea158cbcc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>characterQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2729" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ae1c67a53ed3001f295015cd67a1fc2d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>maximumLayers{255};</highlight></codeline>
<codeline lineno="2731" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>parentSeparatorChar{</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2733" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a7fe2b0d58bb559eb374bc2ae45037d53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>configIndex{-1};</highlight></codeline>
<codeline lineno="2735" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af6f95790111f7b908e19486613bbd3cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>configSection{};</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>to_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<sp/></highlight><highlight class="comment">/*app*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_also,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_description,<sp/>std::string<sp/>prefix)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ConfigItem&gt;<sp/>from_config(std::istream<sp/>&amp;input)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2743" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a47d2894014f584682180dbcc8ff084a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a47d2894014f584682180dbcc8ff084a6" kindref="member">comment</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cchar)<sp/>{</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commentChar<sp/>=<sp/>cchar;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a608fee7482f7975a4a4968b224375742" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a608fee7482f7975a4a4968b224375742" kindref="member">arrayBounds</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aStart,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aEnd)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayStart<sp/>=<sp/>aStart;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayEnd<sp/>=<sp/>aEnd;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1abe7f4f0fd42a2252fe370be8d8510260" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1abe7f4f0fd42a2252fe370be8d8510260" kindref="member">arrayDelimiter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aSep)<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arraySeparator<sp/>=<sp/>aSep;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ab3b2f065ed2cab7114096938d339e0a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ab3b2f065ed2cab7114096938d339e0a2" kindref="member">valueSeparator</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vSep)<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueDelimiter<sp/>=<sp/>vSep;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af4df40996b95ed0e542aaff5a2d24306" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af4df40996b95ed0e542aaff5a2d24306" kindref="member">quoteCharacter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qString,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qChar)<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringQuote<sp/>=<sp/>qString;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characterQuote<sp/>=<sp/>qChar;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac9f571eb38875d9dab5d9e6ffc2eeb68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac9f571eb38875d9dab5d9e6ffc2eeb68" kindref="member">maxLayers</ref>(uint8_t<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maximumLayers<sp/>=<sp/>layers;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2775" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a23417fbb46e9ba5fb4aba4df1f0279f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a23417fbb46e9ba5fb4aba4df1f0279f9" kindref="member">parentSeparator</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sep)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentSeparatorChar<sp/>=<sp/>sep;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2780" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0fbb14c49708f901cb2593982c96cd7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0fbb14c49708f901cb2593982c96cd7e" kindref="member">sectionRef</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>configSection;<sp/>}</highlight></codeline>
<codeline lineno="2782" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a3d6e885af4c46f01fd2d3238713588cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a3d6e885af4c46f01fd2d3238713588cd" kindref="member">section</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>configSection;<sp/>}</highlight></codeline>
<codeline lineno="2784" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ab0698c545cb5c794e9f73e96d7adfed6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ab0698c545cb5c794e9f73e96d7adfed6" kindref="member">section</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sectionName)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configSection<sp/>=<sp/>sectionName;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a270698d13598673909cced8762bd6865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a270698d13598673909cced8762bd6865" kindref="member">indexRef</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>configIndex;<sp/>}</highlight></codeline>
<codeline lineno="2792" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1abc1edb8388dbe006f1f86b21f43d7973" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>int16_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1abc1edb8388dbe006f1f86b21f43d7973" kindref="member">index</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>configIndex;<sp/>}</highlight></codeline>
<codeline lineno="2794" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a47a9148b9fd0a7077e5c85321f125046" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a47a9148b9fd0a7077e5c85321f125046" kindref="member">index</ref>(int16_t<sp/>sectionIndex)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configIndex<sp/>=<sp/>sectionIndex;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConfigTOML<sp/>=<sp/>ConfigBase;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_i_n_i" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_i_n_i" kindref="compound">ConfigINI</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigTOML</ref><sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_i_n_i" kindref="compound">ConfigINI</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commentChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayStart<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayEnd<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arraySeparator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueDelimiter<sp/>=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Option;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"></codeline>
<codeline lineno="2828"></codeline>
<codeline lineno="2830" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2833" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>desc_function_{[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};<sp/>}};</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>func_{[](std::string<sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};<sp/>}};</highlight></codeline>
<codeline lineno="2839" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4d739cc5d335052eb9f5b2ca559b81d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name_{};</highlight></codeline>
<codeline lineno="2841" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>application_index_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2843" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2845" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a89808c34844c1d619b852dd623a43754" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_modifying_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>(std::string<sp/>validator_desc,<sp/>std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>func)</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>desc_function_([validator_desc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validator_desc;<sp/>}),<sp/>func_(std::move(func))<sp/>{}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2853" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac51bc3c98f71adff397385f3cb921ec2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac51bc3c98f71adff397385f3cb921ec2" kindref="member">Validator</ref>(std::string<sp/>validator_desc)<sp/>:<sp/>desc_function_([validator_desc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validator_desc;<sp/>})<sp/>{}</highlight></codeline>
<codeline lineno="2855" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1acc314da6d2d63533aeaecedd7cbcbb44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1acc314da6d2d63533aeaecedd7cbcbb44" kindref="member">Validator</ref>(std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>op,<sp/>std::string<sp/>validator_desc,<sp/>std::string<sp/>validator_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>desc_function_([validator_desc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validator_desc;<sp/>}),<sp/>func_(std::move(op)),</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_(std::move(validator_name))<sp/>{}</highlight></codeline>
<codeline lineno="2859" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a44cb29261ef1348ab7140228b3df27e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a44cb29261ef1348ab7140228b3df27e4" kindref="member">operation</ref>(std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>std::move(op);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>operator()(std::string<sp/>&amp;str)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a7673ff599f7529e870530cee9b164e5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a7673ff599f7529e870530cee9b164e5e" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(active_)<sp/>?<sp/>func_(value)<sp/>:<sp/>std::string{};</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" kindref="member">description</ref>(std::string<sp/>validator_desc)<sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_function_<sp/>=<sp/>[validator_desc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validator_desc;<sp/>};</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>description(std::string<sp/>validator_desc)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa43f0c7a4e89fe58211f6a80396bdfe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa43f0c7a4e89fe58211f6a80396bdfe7" kindref="member">get_description</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active_)<sp/>{</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desc_function_();</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2890" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a2aa59c0eb632faf44e1ce50033fc1d41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a2aa59c0eb632faf44e1ce50033fc1d41" kindref="member">name</ref>(std::string<sp/>validator_name)<sp/>{</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_<sp/>=<sp/>std::move(validator_name);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2895" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4ec8ab874e50204d9e09d9149acbeaac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4ec8ab874e50204d9e09d9149acbeaac" kindref="member">name</ref>(std::string<sp/>validator_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>std::move(validator_name);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa4a97b6bebd73191da444e2510ff4f41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_;<sp/>}</highlight></codeline>
<codeline lineno="2903" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3699b7f0acfbd6b8d6c9f183d26673ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3699b7f0acfbd6b8d6c9f183d26673ef" kindref="member">active</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_val<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_<sp/>=<sp/>active_val;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3aff5a5bd26eecade38af43f2f80f36b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3aff5a5bd26eecade38af43f2f80f36b" kindref="member">active</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_val<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref><sp/>=<sp/>active_val;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a72d61730533c7279743738fac58d2228" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a72d61730533c7279743738fac58d2228" kindref="member">non_modifying</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_modify<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non_modifying_<sp/>=<sp/>no_modify;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2920" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a5daabd87cef336cb83dc93b8f82682a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a5daabd87cef336cb83dc93b8f82682a9" kindref="member">application_index</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>app_index)<sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>application_index_<sp/>=<sp/>app_index;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aade9442b5d914e52d2c19d2a43263575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aade9442b5d914e52d2c19d2a43263575" kindref="member">application_index</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>app_index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" kindref="member">application_index_</ref><sp/>=<sp/>app_index;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2931" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6a7c617d26d8fab970d8b58609bce7e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6a7c617d26d8fab970d8b58609bce7e4" kindref="member">get_application_index</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>application_index_;<sp/>}</highlight></codeline>
<codeline lineno="2933" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a95a0482a2e973bda0cb04bb80ecb169f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a95a0482a2e973bda0cb04bb80ecb169f" kindref="member">get_active</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_;<sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1adcc3fc37b851a487125e5ca94d36042b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1adcc3fc37b851a487125e5ca94d36042b" kindref="member">get_modifying</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!non_modifying_;<sp/>}</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>operator&amp;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>operator|(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>operator!()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_merge_description(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;val2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;merger);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954" refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator" kindref="compound">CustomValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2956"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>implementation<sp/>of<sp/>the<sp/>built<sp/>in<sp/>validators<sp/>is<sp/>using<sp/>the<sp/>Validator<sp/>class;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>is<sp/>only<sp/>expected<sp/>to<sp/>use<sp/>the<sp/>const<sp/>(static)<sp/>versions<sp/>(since<sp/>there&apos;s<sp/>no<sp/>setup).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Therefore,<sp/>this<sp/>is<sp/>in<sp/>detail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>path_type<sp/>{<sp/>nonexistent,<sp/>file,<sp/>directory<sp/>};</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal">CLI11_INLINE<sp/>path_type<sp/>check_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)<sp/>noexcept;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" kindref="compound">ExistingFileValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" kindref="compound">ExistingFileValidator</ref>();</highlight></codeline>
<codeline lineno="2972"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" kindref="compound">ExistingDirectoryValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" kindref="compound">ExistingDirectoryValidator</ref>();</highlight></codeline>
<codeline lineno="2978"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" kindref="compound">ExistingPathValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" kindref="compound">ExistingPathValidator</ref>();</highlight></codeline>
<codeline lineno="2984"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" kindref="compound">NonexistentPathValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" kindref="compound">NonexistentPathValidator</ref>();</highlight></codeline>
<codeline lineno="2990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993" refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" kindref="compound">IPV4Validator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" kindref="compound">IPV4Validator</ref>();</highlight></codeline>
<codeline lineno="2996"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>is<sp/>not<sp/>needed<sp/>here,<sp/>because<sp/>global<sp/>const<sp/>implies<sp/>static.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" kindref="compound">detail::ExistingFileValidator</ref><sp/>ExistingFile;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" kindref="compound">detail::ExistingDirectoryValidator</ref><sp/>ExistingDirectory;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" kindref="compound">detail::ExistingPathValidator</ref><sp/>ExistingPath;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" kindref="compound">detail::NonexistentPathValidator</ref><sp/>NonexistentPath;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" kindref="compound">detail::IPV4Validator</ref><sp/>ValidIPV4;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018" refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DesiredType&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;validator_name)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>(validator_name,<sp/>[](std::string<sp/>&amp;input_string)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>DesiredType();</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::lexical_cast(input_string,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>parsing<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>input_string<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>a<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::type_name&lt;DesiredType&gt;();</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator</ref>()<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator</ref>(detail::type_name&lt;DesiredType&gt;())<sp/>{}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator&lt;double&gt;</ref><sp/>Number(</highlight><highlight class="stringliteral">&quot;NUMBER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036" refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" kindref="compound">FileOnDefaultPath</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" kindref="compound">FileOnDefaultPath</ref>(std::string<sp/>default_path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableErrorReturn<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042" refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" kindref="compound">Range</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3049" refid="classpxr___c_l_i_1_1_c_l_i_1_1_range_1a094e1b11ae6358f8e3c6fb802cf55187" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range_1a094e1b11ae6358f8e3c6fb802cf55187" kindref="member">Range</ref>(T<sp/>min_val,<sp/>T<sp/>max_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;validator_name<sp/>=<sp/>std::string{})<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>(validator_name)<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(validator_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>detail::type_name&lt;T&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description(out.str());</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[min_val,<sp/>max_val](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/>detail::lexical_cast(input,<sp/>val);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!converted)<sp/>||<sp/>(val<sp/>&lt;<sp/>min_val<sp/>||<sp/>val<sp/>&gt;<sp/>max_val))<sp/>{</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>in<sp/>range<sp/>[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>min_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3071" refid="classpxr___c_l_i_1_1_c_l_i_1_1_range_1a2b3d9aeffec5c6b53db28f557d428165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range_1a2b3d9aeffec5c6b53db28f557d428165" kindref="member">Range</ref>(T<sp/>max_val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;validator_name<sp/>=<sp/>std::string{})</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" kindref="compound">Range</ref>(static_cast&lt;T&gt;(0),<sp/>max_val,<sp/>validator_name)<sp/>{}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>NonNegativeNumber((std::numeric_limits&lt;double&gt;::max)(),<sp/></highlight><highlight class="stringliteral">&quot;NONNEGATIVE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>PositiveNumber((std::numeric_limits&lt;double&gt;::min)(),<sp/>(std::numeric_limits&lt;double&gt;::max)(),<sp/></highlight><highlight class="stringliteral">&quot;POSITIVE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082" refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" kindref="compound">Bound</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3088" refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound_1aed746e9b0b8565dbf6fe8f5e9c5fb226" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound_1aed746e9b0b8565dbf6fe8f5e9c5fb226" kindref="member">Bound</ref>(T<sp/>min_val,<sp/>T<sp/>max_val)<sp/>{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>detail::type_name&lt;T&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bounded<sp/>to<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description(out.str());</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[min_val,<sp/>max_val](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/>detail::lexical_cast(input,<sp/>val);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!converted)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Value<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>could<sp/>not<sp/>be<sp/>converted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>min_val)</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::to_string(min_val);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&gt;<sp/>max_val)</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::to_string(max_val);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109" refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound_1af4dc841376bbc3512463fe9f6f71d2ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound_1af4dc841376bbc3512463fe9f6f71d2ad" kindref="member">Bound</ref>(T<sp/>max_val)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" kindref="compound">Bound</ref>(static_cast&lt;T&gt;(0),<sp/>max_val)<sp/>{}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_copyable_ptr&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>smart_deref(T<sp/>value)<sp/>-&gt;<sp/>decltype(*value)<sp/>{</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;!is_copyable_ptr&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type<sp/>&amp;smart_deref(T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3126"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>generate_set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;set)<sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::value_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>of<sp/>the<sp/>object<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>out(1,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(detail::join(</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::smart_deref(set),</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" kindref="member">detail::pair_adaptor&lt;element_t&gt;::first</ref>(v);<sp/>},</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>generate_map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;map,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_only<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::value_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>of<sp/>the<sp/>object<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>out(1,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/>out.append(detail::join(</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::smart_deref(map),</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[key_only](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>res{detail::to_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" kindref="member">detail::pair_adaptor&lt;element_t&gt;::first</ref>(v))};</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_only)<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.append(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>detail::to_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1a31bb3a16383913744f1753da815e5cb4" kindref="member">detail::pair_adaptor&lt;element_t&gt;::second</ref>(v));</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_find<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CC,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VV&gt;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::declval&lt;CC&gt;().find(std::declval&lt;VV&gt;()),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>decltype(std::false_type());</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>decltype(test&lt;C,<sp/>V&gt;(0))::value;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::integral_constant&lt;bool,<sp/>value&gt;;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>V,<sp/>enable_if_t&lt;!has_find&lt;T,<sp/>V&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;set,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;val)<sp/>-&gt;<sp/>std::pair&lt;bool,<sp/>decltype(std::begin(detail::smart_deref(set)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;setref<sp/>=<sp/>detail::smart_deref(set);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(std::begin(setref),<sp/>std::end(setref),<sp/>[&amp;val](decltype(*std::begin(setref))<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" kindref="member">detail::pair_adaptor&lt;element_t&gt;::first</ref>(v)<sp/>==<sp/>val);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{(it<sp/>!=<sp/>std::end(setref)),<sp/>it};</highlight></codeline>
<codeline lineno="3177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>V,<sp/>enable_if_t&lt;has_find&lt;T,<sp/>V&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;set,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;val)<sp/>-&gt;<sp/>std::pair&lt;bool,<sp/>decltype(std::begin(detail::smart_deref(set)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;setref<sp/>=<sp/>detail::smart_deref(set);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>setref.find(val);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{(it<sp/>!=<sp/>std::end(setref)),<sp/>it};</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;set,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;V(V)&gt;<sp/>&amp;filter_function)</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::pair&lt;bool,<sp/>decltype(std::begin(detail::smart_deref(set)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>potentially<sp/>faster<sp/>first<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>search(set,<sp/>val);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((res.first)<sp/>||<sp/>(!(filter_function)))<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>haven&apos;t<sp/>found<sp/>it<sp/>do<sp/>the<sp/>longer<sp/>linear<sp/>search<sp/>with<sp/>all<sp/>the<sp/>element<sp/>translations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;setref<sp/>=<sp/>detail::smart_deref(set);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(std::begin(setref),<sp/>std::end(setref),<sp/>[&amp;](decltype(*std::begin(setref))<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>a{<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_1ab0629958fc5069cb83d8f69c33682257" kindref="member">detail::pair_adaptor&lt;element_t&gt;::first</ref>(v)};</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>filter_function(a);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>val);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{(it<sp/>!=<sp/>std::end(setref)),<sp/>it};</highlight></codeline>
<codeline lineno="3205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>suggestion<sp/>was<sp/>made<sp/>by<sp/>Nikita<sp/>Ofitserov(@himikof)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>done<sp/>in<sp/>templates<sp/>to<sp/>prevent<sp/>compiler<sp/>warnings<sp/>on<sp/>negation<sp/>of<sp/>unsigned<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_signed&lt;T&gt;::value,<sp/>T&gt;::type<sp/>overflowCheck(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((a<sp/>&gt;<sp/>0)<sp/>==<sp/>(b<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((std::numeric_limits&lt;T&gt;::max)()<sp/>/<sp/>(std::abs)(a)<sp/>&lt;<sp/>(std::abs)(b));</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((std::numeric_limits&lt;T&gt;::min)()<sp/>/<sp/>(std::abs)(a)<sp/>&gt;<sp/>-(std::abs)(b));</highlight></codeline>
<codeline lineno="3217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3219"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_signed&lt;T&gt;::value,<sp/>T&gt;::type<sp/>overflowCheck(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((std::numeric_limits&lt;T&gt;::max)()<sp/>/<sp/>a<sp/>&lt;<sp/>b);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type<sp/>checked_multiply(T<sp/>&amp;a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>0<sp/>||<sp/>b<sp/>==<sp/>0<sp/>||<sp/>a<sp/>==<sp/>1<sp/>||<sp/>b<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>*=<sp/>b;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>(std::numeric_limits&lt;T&gt;::min)()<sp/>||<sp/>b<sp/>==<sp/>(std::numeric_limits&lt;T&gt;::min)())<sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overflowCheck(a,<sp/>b))<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>*=<sp/>b;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type<sp/>checked_multiply(T<sp/>&amp;a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>c<sp/>=<sp/>a<sp/>*<sp/>b;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::isinf(c)<sp/>&amp;&amp;<sp/>!std::isinf(a)<sp/>&amp;&amp;<sp/>!std::isinf(b))<sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight></codeline>
<codeline lineno="3253" refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>filter_fn_t<sp/>=<sp/>std::function&lt;std::string(std::string)&gt;;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3259" refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1a5c078a4b7c24bbdedc6eda7450ac9fd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1a5c078a4b7c24bbdedc6eda7450ac9fd2" kindref="member">IsMember</ref>(std::initializer_list&lt;T&gt;<sp/>values,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref>(std::vector&lt;T&gt;(values),<sp/>std::forward&lt;Args&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263" refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1a5ec147e26bdd95990bbd0597cd2667c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1a5ec147e26bdd95990bbd0597cd2667c8" kindref="member">IsMember</ref>(T<sp/>&amp;&amp;set)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref>(std::forward&lt;T&gt;(set),<sp/>nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267" refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1aadbc0119e08d32f90fea996e9abe66b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1aadbc0119e08d32f90fea996e9abe66b7" kindref="member">IsMember</ref>(T<sp/>set,<sp/>F<sp/>filter_function)<sp/>{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>contained<sp/>item<sp/>-<sp/>requires<sp/>a<sp/>container<sp/>have<sp/>::value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>type<sp/>does<sp/>not<sp/>have<sp/>first_type<sp/>and<sp/>second_type,<sp/>these<sp/>are<sp/>both<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>(smart)<sp/>pointers<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::first_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>value_type<sp/>if<sp/>not<sp/>a<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>local_item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IsMemberType&lt;item_t&gt;::type;<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>convert<sp/>bad<sp/>types<sp/>to<sp/>good<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(const<sp/>char<sp/>*<sp/>to<sp/>std::string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>local<sp/>copy<sp/>of<sp/>the<sp/>filter<sp/>function,<sp/>using<sp/>a<sp/>std::function<sp/>if<sp/>not<sp/>one<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;local_item_t(local_item_t)&gt;<sp/>filter_fn<sp/>=<sp/>filter_function;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>type<sp/>name<sp/>for<sp/>help,<sp/>it<sp/>will<sp/>take<sp/>the<sp/>current<sp/>version<sp/>of<sp/>the<sp/>set<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_function_<sp/>=<sp/>[set]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::generate_set(detail::smart_deref(set));<sp/>};</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>function<sp/>that<sp/>validates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>stores<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>set<sp/>pointer-like,<sp/>so<sp/>shared_ptr<sp/>will<sp/>stay<sp/>alive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[set,<sp/>filter_fn](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_item_t<sp/>b;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::lexical_cast(input,<sp/>b))<sp/>{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" kindref="compound">ValidationError</ref>(input);<sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>added<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter_fn)<sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>filter_fn(b);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>detail::search(set,<sp/>b,<sp/>filter_fn);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res.first)<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>version<sp/>in<sp/>the<sp/>input<sp/>string<sp/>is<sp/>identical<sp/>to<sp/>the<sp/>one<sp/>in<sp/>the<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter_fn)<sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::value_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor&lt;element_t&gt;::first</ref>(*(res.second)));</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>empty<sp/>error<sp/>string<sp/>(success)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>reach<sp/>this<sp/>point,<sp/>the<sp/>result<sp/>was<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::generate_set(detail::smart_deref(set));</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3311" refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1acfc07470dce1590043a0821cdcef8809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member_1acfc07470dce1590043a0821cdcef8809" kindref="member">IsMember</ref>(T<sp/>&amp;&amp;set,<sp/>filter_fn_t<sp/>filter_fn_1,<sp/>filter_fn_t<sp/>filter_fn_2,<sp/>Args<sp/>&amp;&amp;...other)</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref>(</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;T&gt;(set),</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[filter_fn_1,<sp/>filter_fn_2](std::string<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter_fn_2(filter_fn_1(a));<sp/>},</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other...)<sp/>{}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TransformPairs<sp/>=<sp/>std::vector&lt;std::pair&lt;std::string,<sp/>T&gt;&gt;;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322" refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" kindref="compound">Transformer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>filter_fn_t<sp/>=<sp/>std::function&lt;std::string(std::string)&gt;;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3328" refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a85cfa5c5c066aba160b38a6c43417760" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a85cfa5c5c066aba160b38a6c43417760" kindref="member">Transformer</ref>(std::initializer_list&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>values,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" kindref="compound">Transformer</ref>(TransformPairs&lt;std::string&gt;(values),<sp/>std::forward&lt;Args&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3332" refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a30ce6969c0d2f3bd2ec248e96087ec1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a30ce6969c0d2f3bd2ec248e96087ec1c" kindref="member">Transformer</ref>(T<sp/>&amp;&amp;mapping)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" kindref="compound">Transformer</ref>(std::forward&lt;T&gt;(mapping),<sp/>nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336" refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1add5926f0fcbf2b4b7e8ebd985cb43d6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1add5926f0fcbf2b4b7e8ebd985cb43d6d" kindref="member">Transformer</ref>(T<sp/>mapping,<sp/>F<sp/>filter_function)<sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type&gt;::value,</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mapping<sp/>must<sp/>produce<sp/>value<sp/>pairs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>contained<sp/>item<sp/>-<sp/>requires<sp/>a<sp/>container<sp/>have<sp/>::value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>type<sp/>does<sp/>not<sp/>have<sp/>first_type<sp/>and<sp/>second_type,<sp/>these<sp/>are<sp/>both<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>(smart)<sp/>pointers<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::first_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>value_type<sp/>if<sp/>not<sp/>a<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>local_item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IsMemberType&lt;item_t&gt;::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>convert<sp/>bad<sp/>types<sp/>to<sp/>good<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(const<sp/>char<sp/>*<sp/>to<sp/>std::string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>local<sp/>copy<sp/>of<sp/>the<sp/>filter<sp/>function,<sp/>using<sp/>a<sp/>std::function<sp/>if<sp/>not<sp/>one<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;local_item_t(local_item_t)&gt;<sp/>filter_fn<sp/>=<sp/>filter_function;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>type<sp/>name<sp/>for<sp/>help,<sp/>it<sp/>will<sp/>take<sp/>the<sp/>current<sp/>version<sp/>of<sp/>the<sp/>set<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_function_<sp/>=<sp/>[mapping]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::generate_map(detail::smart_deref(mapping));<sp/>};</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[mapping,<sp/>filter_fn](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_item_t<sp/>b;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::lexical_cast(input,<sp/>b))<sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>possible<sp/>way<sp/>we<sp/>can<sp/>match<sp/>anything<sp/>in<sp/>the<sp/>mapping<sp/>if<sp/>we<sp/>can&apos;t<sp/>convert<sp/>so<sp/>just<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter_fn)<sp/>{</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>filter_fn(b);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>detail::search(mapping,<sp/>b,<sp/>filter_fn);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res.first)<sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::value_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor&lt;element_t&gt;::second</ref>(*res.second));</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3372" refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a441f7e3b03a5b5f8592f71fb79c93903" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer_1a441f7e3b03a5b5f8592f71fb79c93903" kindref="member">Transformer</ref>(T<sp/>&amp;&amp;mapping,<sp/>filter_fn_t<sp/>filter_fn_1,<sp/>filter_fn_t<sp/>filter_fn_2,<sp/>Args<sp/>&amp;&amp;...other)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" kindref="compound">Transformer</ref>(</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;T&gt;(mapping),</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[filter_fn_1,<sp/>filter_fn_2](std::string<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter_fn_2(filter_fn_1(a));<sp/>},</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other...)<sp/>{}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3380" refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" kindref="compound">CheckedTransformer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>filter_fn_t<sp/>=<sp/>std::function&lt;std::string(std::string)&gt;;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3386" refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1ada32598cf21869fe5d84e193476c807e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1ada32598cf21869fe5d84e193476c807e" kindref="member">CheckedTransformer</ref>(std::initializer_list&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>values,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" kindref="compound">CheckedTransformer</ref>(TransformPairs&lt;std::string&gt;(values),<sp/>std::forward&lt;Args&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390" refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1a04c9a38a0352a888e780d13acb34ba06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1a04c9a38a0352a888e780d13acb34ba06" kindref="member">CheckedTransformer</ref>(T<sp/>mapping)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" kindref="compound">CheckedTransformer</ref>(std::move(mapping),<sp/>nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394" refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1a1bea926f3a913200939aef8b2f36e6f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1a1bea926f3a913200939aef8b2f36e6f5" kindref="member">CheckedTransformer</ref>(T<sp/>mapping,<sp/>F<sp/>filter_function)<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type&gt;::value,</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mapping<sp/>must<sp/>produce<sp/>value<sp/>pairs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>contained<sp/>item<sp/>-<sp/>requires<sp/>a<sp/>container<sp/>have<sp/>::value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>type<sp/>does<sp/>not<sp/>have<sp/>first_type<sp/>and<sp/>second_type,<sp/>these<sp/>are<sp/>both<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>element_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::element_type&lt;T&gt;::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>(smart)<sp/>pointers<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::first_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>value_type<sp/>if<sp/>not<sp/>a<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>local_item_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IsMemberType&lt;item_t&gt;::type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>convert<sp/>bad<sp/>types<sp/>to<sp/>good<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(const<sp/>char<sp/>*<sp/>to<sp/>std::string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::pair_adaptor&lt;element_t&gt;::value_type;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>of<sp/>the<sp/>object<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>local<sp/>copy<sp/>of<sp/>the<sp/>filter<sp/>function,<sp/>using<sp/>a<sp/>std::function<sp/>if<sp/>not<sp/>one<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;local_item_t(local_item_t)&gt;<sp/>filter_fn<sp/>=<sp/>filter_function;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tfunc<sp/>=<sp/>[mapping]()<sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>out(</highlight><highlight class="stringliteral">&quot;value<sp/>in<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>detail::generate_map(detail::smart_deref(mapping))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>OR<sp/>{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>detail::join(</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::smart_deref(mapping),</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iteration_type_t<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor&lt;element_t&gt;::second</ref>(v));<sp/>},</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_function_<sp/>=<sp/>tfunc;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[mapping,<sp/>tfunc,<sp/>filter_fn](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_item_t<sp/>b;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/>detail::lexical_cast(input,<sp/>b);</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(converted)<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter_fn)<sp/>{</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>filter_fn(b);</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>detail::search(mapping,<sp/>b,<sp/>filter_fn);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res.first)<sp/>{</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::value_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor&lt;element_t&gt;::second</ref>(*res.second));</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/>detail::smart_deref(mapping))<sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_string<sp/>=<sp/>detail::value_string(<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor" kindref="compound">detail::pair_adaptor&lt;element_t&gt;::second</ref>(v));</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(output_string<sp/>==<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tfunc()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3448" refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1ad6fd35098bc235ad9e477427a99f0a58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer_1ad6fd35098bc235ad9e477427a99f0a58" kindref="member">CheckedTransformer</ref>(T<sp/>&amp;&amp;mapping,<sp/>filter_fn_t<sp/>filter_fn_1,<sp/>filter_fn_t<sp/>filter_fn_2,<sp/>Args<sp/>&amp;&amp;...other)</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" kindref="compound">CheckedTransformer</ref>(</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;T&gt;(mapping),</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[filter_fn_1,<sp/>filter_fn_2](std::string<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter_fn_2(filter_fn_1(a));<sp/>},</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other...)<sp/>{}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>ignore_case(std::string<sp/>item)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_lower(item);<sp/>}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>ignore_underscore(std::string<sp/>item)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::remove_underscore(item);<sp/>}</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>ignore_space(std::string<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>item.erase(std::remove(std::begin(item),<sp/>std::end(item),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>std::end(item));</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/>item.erase(std::remove(std::begin(item),<sp/>std::end(item),<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">),<sp/>std::end(item));</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479" refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" kindref="compound">AsNumberWithUnit</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3485" refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">Options</ref><sp/>{</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_SENSITIVE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_INSENSITIVE<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNIT_OPTIONAL<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNIT_REQUIRED<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEFAULT<sp/>=<sp/>CASE_INSENSITIVE<sp/>|<sp/>UNIT_OPTIONAL</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Number&gt;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" kindref="compound">AsNumberWithUnit</ref>(std::map&lt;std::string,<sp/>Number&gt;<sp/>mapping,</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Options<sp/>opts<sp/>=<sp/>DEFAULT,</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;unit_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UNIT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description(generate_description&lt;Number&gt;(unit_name,<sp/>opts));</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validate_mapping(mapping,<sp/>opts);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_<sp/>=<sp/>[mapping,<sp/>opts](std::string<sp/>&amp;input)<sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>num{};</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::rtrim(input);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.empty())<sp/>{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(</highlight><highlight class="stringliteral">&quot;Input<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>split<sp/>position<sp/>between<sp/>number<sp/>and<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unit_begin<sp/>=<sp/>input.end();</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(unit_begin<sp/>&gt;<sp/>input.begin()<sp/>&amp;&amp;<sp/>std::isalpha(*(unit_begin<sp/>-<sp/>1),<sp/>std::locale()))<sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--unit_begin;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>unit{unit_begin,<sp/>input.end()};</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.resize(static_cast&lt;std::size_t&gt;(std::distance(input.begin(),<sp/>unit_begin)));</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(input);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts<sp/>&amp;<sp/>UNIT_REQUIRED<sp/>&amp;&amp;<sp/>unit.empty())<sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(</highlight><highlight class="stringliteral">&quot;Missing<sp/>mandatory<sp/>unit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts<sp/>&amp;<sp/>CASE_INSENSITIVE)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit<sp/>=<sp/>detail::to_lower(unit);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unit.empty())<sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::lexical_cast(input,<sp/>num))<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(std::string(</highlight><highlight class="stringliteral">&quot;Value<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>could<sp/>not<sp/>be<sp/>converted<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::type_name&lt;Number&gt;());</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>modify<sp/>input<sp/>if<sp/>no<sp/>unit<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>corresponding<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>mapping.find(unit);</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>mapping.end())<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(unit<sp/>+</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>unit<sp/>not<sp/>recognized.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Allowed<sp/>values:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::generate_map(mapping,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!input.empty())<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/>detail::lexical_cast(input,<sp/>num);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!converted)<sp/>{</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(std::string(</highlight><highlight class="stringliteral">&quot;Value<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>could<sp/>not<sp/>be<sp/>converted<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::type_name&lt;Number&gt;());</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>perform<sp/>safe<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>detail::checked_multiply(num,<sp/>it-&gt;second);</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ok)<sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(detail::to_string(num)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>multiplied<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>unit<sp/>+</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>factor<sp/>would<sp/>cause<sp/>number<sp/>overflow.<sp/>Use<sp/>smaller<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>static_cast&lt;Number&gt;(it-&gt;second);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>detail::to_string(num);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Number&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>validate_mapping(std::map&lt;std::string,<sp/>Number&gt;<sp/>&amp;mapping,<sp/>Options<sp/>opts)<sp/>{</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>mapping)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kv.first.empty())<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(</highlight><highlight class="stringliteral">&quot;Unit<sp/>must<sp/>not<sp/>be<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::isalpha(kv.first))<sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(</highlight><highlight class="stringliteral">&quot;Unit<sp/>must<sp/>contain<sp/>only<sp/>letters.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>all<sp/>units<sp/>lowercase<sp/>if<sp/>CASE_INSENSITIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts<sp/>&amp;<sp/>CASE_INSENSITIVE)<sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>Number&gt;<sp/>lower_mapping;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>mapping)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>detail::to_lower(kv.first);</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lower_mapping.count(s))<sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(std::string(</highlight><highlight class="stringliteral">&quot;Several<sp/>matching<sp/>lowercase<sp/>unit<sp/>representations<sp/>are<sp/>found:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s);</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_mapping[detail::to_lower(kv.first)]<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>std::move(lower_mapping);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Number&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>generate_description(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>Options<sp/>opts)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>detail::type_name&lt;Number&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts<sp/>&amp;<sp/>UNIT_REQUIRED)<sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref><sp/>operator|(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;AsNumberWithUnit::Options&gt;(static_cast&lt;int&gt;(a)<sp/>|<sp/>static_cast&lt;int&gt;(b));</highlight></codeline>
<codeline lineno="3608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621" refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value" kindref="compound">AsSizeValue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" kindref="compound">AsNumberWithUnit</ref><sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>result_t<sp/>=<sp/>std::uint64_t;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value" kindref="compound">AsSizeValue</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>result_t&gt;<sp/>init_mapping(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000);</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>result_t&gt;<sp/>get_mapping(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3647"><highlight class="normal">CLI11_INLINE<sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>split_program_name(std::string<sp/>commandline);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight></codeline>
<codeline lineno="3651"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a37ea965e41027b32328d32d2b4e03302" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a37ea965e41027b32328d32d2b4e03302" kindref="member">Validator::operator()</ref>(std::string<sp/>&amp;str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>retstring;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active_)<sp/>{</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(non_modifying_)<sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retstring<sp/>=<sp/>func_(value);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retstring<sp/>=<sp/>func_(str);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retstring;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ae36330914504c99ba03c2d893d0332d8" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" kindref="member">Validator::description</ref>(std::string<sp/>validator_desc)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" kindref="member">desc_function_</ref><sp/>=<sp/>[validator_desc]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validator_desc;<sp/>};</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4711dbd6c7077f6fdf2bbfb647d5494f" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4711dbd6c7077f6fdf2bbfb647d5494f" kindref="member">Validator::operator&amp;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>newval._merge_description(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>AND<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>references<sp/>(will<sp/>make<sp/>a<sp/>copy<sp/>in<sp/>lambda<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string<sp/>&amp;<sp/>filename)&gt;<sp/>&amp;f1<sp/>=<sp/>func_;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string<sp/>&amp;<sp/>filename)&gt;<sp/>&amp;f2<sp/>=<sp/>other.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref>;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[f1,<sp/>f2](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s1<sp/>=<sp/>f1(input);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s2<sp/>=<sp/>f2(input);</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!s1.empty()<sp/>&amp;&amp;<sp/>!s2.empty())</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>s1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>AND<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>s2<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s1<sp/>+<sp/>s2;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref><sp/>=<sp/>active_<sp/>&amp;&amp;<sp/>other.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref>;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" kindref="member">application_index_</ref><sp/>=<sp/>application_index_;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="3694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight></codeline>
<codeline lineno="3696" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6b2143a8658130e0e8a5c6fc49ba026a" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6b2143a8658130e0e8a5c6fc49ba026a" kindref="member">Validator::operator|</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/>newval._merge_description(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>OR<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>references<sp/>(will<sp/>make<sp/>a<sp/>copy<sp/>in<sp/>lambda<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>&amp;f1<sp/>=<sp/>func_;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string<sp/>&amp;)&gt;<sp/>&amp;f2<sp/>=<sp/>other.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref>;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[f1,<sp/>f2](std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s1<sp/>=<sp/>f1(input);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s2<sp/>=<sp/>f2(input);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s1.empty()<sp/>||<sp/>s2.empty())</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>s1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>OR<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>s2<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref><sp/>=<sp/>active_<sp/>&amp;&amp;<sp/>other.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref>;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" kindref="member">application_index_</ref><sp/>=<sp/>application_index_;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718" refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a91c3e9e1491efac8686b37594459d81f" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a91c3e9e1491efac8686b37594459d81f" kindref="member">Validator::operator!</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>newval;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string()&gt;<sp/>&amp;dfunc1<sp/>=<sp/>desc_function_;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" kindref="member">desc_function_</ref><sp/>=<sp/>[dfunc1]()<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>dfunc1();</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!str.empty())<sp/>?<sp/>std::string(</highlight><highlight class="stringliteral">&quot;NOT<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>str<sp/>:<sp/>std::string{};</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>references<sp/>(will<sp/>make<sp/>a<sp/>copy<sp/>in<sp/>lambda<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string<sp/>&amp;<sp/>res)&gt;<sp/>&amp;f1<sp/>=<sp/>func_;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[f1,<sp/>dfunc1](std::string<sp/>&amp;test)<sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s1<sp/>=<sp/>f1(test);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s1.empty())<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;check<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>dfunc1()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>succeeded<sp/>improperly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" kindref="member">active_</ref><sp/>=<sp/>active_;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>newval.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" kindref="member">application_index_</ref><sp/>=<sp/>application_index_;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal">Validator::_merge_description(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref><sp/>&amp;val2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;merger)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string()&gt;<sp/>&amp;dfunc1<sp/>=<sp/>val1.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" kindref="member">desc_function_</ref>;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string()&gt;<sp/>&amp;dfunc2<sp/>=<sp/>val2.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" kindref="member">desc_function_</ref>;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>desc_function_<sp/>=<sp/>[=]()<sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>f1<sp/>=<sp/>dfunc1();</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>f2<sp/>=<sp/>dfunc2();</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((f1.empty())<sp/>||<sp/>(f2.empty()))<sp/>{</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f1<sp/>+<sp/>f2;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>+<sp/>f1<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>+<sp/>merger<sp/>+<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>f2<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CLI11_HAS_FILESYSTEM<sp/>&amp;&amp;<sp/>CLI11_HAS_FILESYSTEM<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal">CLI11_INLINE<sp/>path_type<sp/>check_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/>std::error_code<sp/>ec;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stat<sp/>=<sp/>std::filesystem::status(file,<sp/>ec);</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ec)<sp/>{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_type::nonexistent;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(stat.type())<sp/>{</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::none:<sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::not_found:</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_type::nonexistent;</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::directory:</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_type::directory;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::symlink:</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::block:</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::character:</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::fifo:</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::socket:</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::regular:</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::filesystem::file_type::unknown:</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_type::file;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal">CLI11_INLINE<sp/>path_type<sp/>check_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__stat64<sp/>buffer;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_stat64(file,<sp/>&amp;buffer)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((buffer.st_mode<sp/>&amp;<sp/>S_IFDIR)<sp/>!=<sp/>0)<sp/>?<sp/>path_type::directory<sp/>:<sp/>path_type::file;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>buffer;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stat(file,<sp/>&amp;buffer)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((buffer.st_mode<sp/>&amp;<sp/>S_IFDIR)<sp/>!=<sp/>0)<sp/>?<sp/>path_type::directory<sp/>:<sp/>path_type::file;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_type::nonexistent;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal">CLI11_INLINE<sp/>ExistingFileValidator::ExistingFileValidator()<sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;FILE&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[](std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>check_path(filename.c_str());</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>path_type::nonexistent)<sp/>{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>does<sp/>not<sp/>exist:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>path_type::directory)<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>is<sp/>actually<sp/>a<sp/>directory:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal">CLI11_INLINE<sp/>ExistingDirectoryValidator::ExistingDirectoryValidator()<sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;DIR&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[](std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>check_path(filename.c_str());</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>path_type::nonexistent)<sp/>{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Directory<sp/>does<sp/>not<sp/>exist:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>path_type::file)<sp/>{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Directory<sp/>is<sp/>actually<sp/>a<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal">CLI11_INLINE<sp/>ExistingPathValidator::ExistingPathValidator()<sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;PATH(existing)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[](std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>check_path(filename.c_str());</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>path_type::nonexistent)<sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>does<sp/>not<sp/>exist:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal">CLI11_INLINE<sp/>NonexistentPathValidator::NonexistentPathValidator()<sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;PATH(non-existing)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[](std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>check_path(filename.c_str());</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>!=<sp/>path_type::nonexistent)<sp/>{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>already<sp/>exists:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal">CLI11_INLINE<sp/>IPV4Validator::IPV4Validator()<sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;IPV4&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[](std::string<sp/>&amp;ip_addr)<sp/>{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CLI::detail::split(ip_addr,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result.size()<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>IPV4<sp/>address<sp/>must<sp/>have<sp/>four<sp/>parts<sp/>(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>ip_addr<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>detail::lexical_cast(var,<sp/>num);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!retval)<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>parsing<sp/>number<sp/>(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>var<sp/>+<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&lt;<sp/>0<sp/>||<sp/>num<sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;Each<sp/>IP<sp/>number<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>255<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>var;</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal">CLI11_INLINE<sp/>FileOnDefaultPath::FileOnDefaultPath(std::string<sp/>default_path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableErrorReturn)</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Validator(</highlight><highlight class="stringliteral">&quot;FILE&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" kindref="member">func_</ref><sp/>=<sp/>[default_path,<sp/>enableErrorReturn](std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>detail::check_path(filename.c_str());</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>detail::path_type::nonexistent)<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>test_file_path<sp/>=<sp/>default_path;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(default_path.back()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>default_path.back()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>folder<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_file_path<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_file_path.append(filename);</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_result<sp/>=<sp/>detail::check_path(test_file_path.c_str());</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>detail::path_type::file)<sp/>{</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>test_file_path;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enableErrorReturn)<sp/>{</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;File<sp/>does<sp/>not<sp/>exist:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename;</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight></codeline>
<codeline lineno="3891" refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value_1a70feae09d1ce1c3dbf7c0201743c7209" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value_1a70feae09d1ce1c3dbf7c0201743c7209" kindref="member">AsSizeValue::AsSizeValue</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000)<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" kindref="compound">AsNumberWithUnit</ref>(get_mapping(kb_is_1000))<sp/>{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kb_is_1000)<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" kindref="member">description</ref>(</highlight><highlight class="stringliteral">&quot;SIZE<sp/>[b,<sp/>kb(=1000b),<sp/>kib(=1024b),<sp/>...]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" kindref="member">description</ref>(</highlight><highlight class="stringliteral">&quot;SIZE<sp/>[b,<sp/>kb(=1024b),<sp/>...]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal">CLI11_INLINE<sp/>std::map&lt;std::string,<sp/>AsSizeValue::result_t&gt;<sp/>AsSizeValue::init_mapping(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000)<sp/>{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>result_t&gt;<sp/>m;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/>result_t<sp/>k_factor<sp/>=<sp/>kb_is_1000<sp/>?<sp/>1000<sp/>:<sp/>1024;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>result_t<sp/>ki_factor<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/>result_t<sp/>k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>result_t<sp/>ki<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>m[</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>p<sp/>:<sp/>{</highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>*=<sp/>k_factor;</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ki<sp/>*=<sp/>ki_factor;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[p]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[p<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[p<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">]<sp/>=<sp/>ki;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[p<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ib&quot;</highlight><highlight class="normal">]<sp/>=<sp/>ki;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal">CLI11_INLINE<sp/>std::map&lt;std::string,<sp/>AsSizeValue::result_t&gt;<sp/>AsSizeValue::get_mapping(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kb_is_1000)<sp/>{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kb_is_1000)<sp/>{</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>init_mapping(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>init_mapping(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal">CLI11_INLINE<sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>split_program_name(std::string<sp/>commandline)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>determine<sp/>the<sp/>programName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>vals;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/>trim(commandline);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>esp<sp/>=<sp/>commandline.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(detail::check_path(commandline.substr(0,<sp/>esp).c_str())<sp/>!=<sp/>path_type::file)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp<sp/>=<sp/>commandline.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>esp<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(esp<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>reached<sp/>the<sp/>end<sp/>and<sp/>haven&apos;t<sp/>found<sp/>a<sp/>valid<sp/>file<sp/>just<sp/>assume<sp/>the<sp/>first<sp/>argument<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(commandline[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>commandline[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>||<sp/>commandline[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>embeddedQuote<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keyChar<sp/>=<sp/>commandline[0];</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>commandline.find_first_of(keyChar,<sp/>1);</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((end<sp/>!=<sp/>std::string::npos)<sp/>&amp;&amp;<sp/>(commandline[end<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>escaped<sp/>quotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>commandline.find_first_of(keyChar,<sp/>end<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>embeddedQuote<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals.first<sp/>=<sp/>commandline.substr(1,<sp/>end<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp<sp/>=<sp/>end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(embeddedQuote)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals.first<sp/>=<sp/>find_and_replace(vals.first,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">)<sp/>+<sp/>keyChar,<sp/>std::string(1,<sp/>keyChar));</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp<sp/>=<sp/>commandline.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp<sp/>=<sp/>commandline.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vals.first.empty())<sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals.first<sp/>=<sp/>commandline.substr(0,<sp/>esp);</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtrim(vals.first);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>the<sp/>program<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>vals.second<sp/>=<sp/>(esp<sp/>&lt;<sp/>commandline.length()<sp/>-<sp/>1)<sp/>?<sp/>commandline.substr(esp<sp/>+<sp/>1)<sp/>:<sp/>std::string{};</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>ltrim(vals.second);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight></codeline>
<codeline lineno="3975"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Option;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">App;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>AppFormatMode<sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/>Normal,<sp/><sp/></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/>All,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/>Sub,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3991"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3997" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4001"></codeline>
<codeline lineno="4003" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref>{30};</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" kindref="member">labels_</ref>{};</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;operator=(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a55011f5b55ffaa71d04d05df2ea0e8e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a55011f5b55ffaa71d04d05df2ea0e8e2" kindref="member">~FormatterBase</ref>()<sp/>noexcept<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-equals-default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a3c3a2300178ed17ecf98b0e04313a604" kindref="member">make_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/>std::string,<sp/>AppFormatMode)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"></codeline>
<codeline lineno="4031" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a413bff586d9480543b25e5b05b5f279a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a413bff586d9480543b25e5b05b5f279a" kindref="member">label</ref>(std::string<sp/>key,<sp/>std::string<sp/>val)<sp/>{<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" kindref="member">labels_</ref>[key]<sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight></codeline>
<codeline lineno="4034" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a9d49f5969dc6e08c8cfc7fd1f4a884e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a9d49f5969dc6e08c8cfc7fd1f4a884e3" kindref="member">column_width</ref>(std::size_t<sp/>val)<sp/>{<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"></codeline>
<codeline lineno="4041" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(std::string<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" kindref="member">labels_</ref>.find(key)<sp/>==<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" kindref="member">labels_</ref>.end())</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" kindref="member">labels_</ref>.at(key);</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4048" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a0a00ae86f1d2262a981ec52aa3580f62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a0a00ae86f1d2262a981ec52aa3580f62" kindref="member">get_column_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" kindref="compound">FormatterLambda</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>funct_t<sp/>=<sp/>std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/>std::string,<sp/>AppFormatMode)&gt;;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>funct_t<sp/>lambda_;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4062" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1afcc46be22ce4f196583ef32954b0d2bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1afcc46be22ce4f196583ef32954b0d2bf" kindref="member">FormatterLambda</ref>(funct_t<sp/>funct)<sp/>:<sp/>lambda_(std::move(funct))<sp/>{}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1aadde7587188a11294aec276b4200a18c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1aadde7587188a11294aec276b4200a18c" kindref="member">~FormatterLambda</ref>()<sp/>noexcept</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-equals-default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a87e41ec34986642e4e9900bedacdf2ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a87e41ec34986642e4e9900bedacdf2ac" kindref="member">make_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>std::string<sp/>name,<sp/>AppFormatMode<sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lambda_(app,<sp/>name,<sp/>mode);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4075" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;operator=(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" kindref="member">make_group</ref>(std::string<sp/>group,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_positional,<sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>opts)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" kindref="member">make_positionals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" kindref="member">make_groups</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>AppFormatMode<sp/>mode)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" kindref="member">make_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>AppFormatMode<sp/>mode)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" kindref="member">make_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" kindref="member">make_expanded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" kindref="member">make_footer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" kindref="member">make_description</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" kindref="member">make_usage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>std::string<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a188cdf33618c577f1266a78a39f11abd" kindref="member">make_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<sp/></highlight><highlight class="comment">/*app*/</highlight><highlight class="normal">,<sp/>std::string,<sp/>AppFormatMode)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"></codeline>
<codeline lineno="4123" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a91e523f9b87c5dece0dd92c17d8105b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a91e523f9b87c5dece0dd92c17d8105b8" kindref="member">make_option</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_positional)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::format_help(</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" kindref="member">make_option_name</ref>(opt,<sp/>is_positional)<sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" kindref="member">make_option_opts</ref>(opt),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" kindref="member">make_option_desc</ref>(opt),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref>);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" kindref="member">make_option_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" kindref="member">make_option_opts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" kindref="member">make_option_desc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" kindref="member">make_option_usage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>results_t<sp/>=<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="4150"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>callback_t<sp/>=<sp/>std::function&lt;bool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;)&gt;;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Option;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">App;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Option_p<sp/>=<sp/>std::unique_ptr&lt;Option&gt;;</highlight></codeline>
<codeline lineno="4157"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>MultiOptionPolicy<sp/>:<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>Throw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/>TakeLast,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>TakeFirst,<sp/><sp/></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/>Join,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/>TakeAll,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>Sum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CRTP&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" kindref="compound">OptionBase</ref><sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4173" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref><sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight></codeline>
<codeline lineno="4188" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" kindref="member">disable_flag_override_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" kindref="member">delimiter_</ref>{</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" kindref="member">always_capture_default_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiOptionPolicy<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" kindref="member">multi_option_policy_</ref>{MultiOptionPolicy::Throw};</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" kindref="member">copy_to</ref>(T<sp/>*other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4206" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adba1b313a5a0035d1254a2404c23a69a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adba1b313a5a0035d1254a2404c23a69a" kindref="member">group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::valid_alias_name_string(name))<sp/>{</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;Group<sp/>names<sp/>may<sp/>not<sp/>contain<sp/>newlines<sp/>or<sp/>null<sp/>characters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" kindref="member">required</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4221" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1add863d957d8a11f803fbbb1154f56f7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1add863d957d8a11f803fbbb1154f56f7a" kindref="member">mandatory</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" kindref="member">required</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*always_capture_default(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" kindref="member">always_capture_default_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Getters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4231" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1afca7b35622137979783814ce756839ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adb854d8a9944e306e11497510854e240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adb854d8a9944e306e11497510854e240" kindref="member">get_required</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8b541e6f3cb51a57d01b59d700a465e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8b541e6f3cb51a57d01b59d700a465e1" kindref="member">get_ignore_case</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3d0bed939c8c3062b440bf5a38df8516" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3d0bed939c8c3062b440bf5a38df8516" kindref="member">get_ignore_underscore</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8a16a63a10270e0fff7d240ed4822cfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8a16a63a10270e0fff7d240ed4822cfd" kindref="member">get_configurable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad295f98654896912ebdb4a32ab19b618" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad295f98654896912ebdb4a32ab19b618" kindref="member">get_disable_flag_override</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" kindref="member">disable_flag_override_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4249" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a2e1fcf873470e161bd71f18b74e84e81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a2e1fcf873470e161bd71f18b74e84e81" kindref="member">get_delimiter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" kindref="member">delimiter_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight></codeline>
<codeline lineno="4252" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a7e67b84b58f3a1be85ba806e7b7185a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a7e67b84b58f3a1be85ba806e7b7185a2" kindref="member">get_always_capture_default</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" kindref="member">always_capture_default_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae7881d0e3de032e25eff87c5e0d15169" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>MultiOptionPolicy<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae7881d0e3de032e25eff87c5e0d15169" kindref="member">get_multi_option_policy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" kindref="member">multi_option_policy_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shortcuts<sp/>for<sp/>multi<sp/>option<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a25f7524ba13846aceaa7012ab2ef6142" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a25f7524ba13846aceaa7012ab2ef6142" kindref="member">take_last</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;multi_option_policy(MultiOptionPolicy::TakeLast);</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad3ac1a211f1ab1ba3a8233b9b3c7788a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad3ac1a211f1ab1ba3a8233b9b3c7788a" kindref="member">take_first</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;multi_option_policy(MultiOptionPolicy::TakeFirst);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ab1bfc69b6a0d8f3ca5cc633373514309" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ab1bfc69b6a0d8f3ca5cc633373514309" kindref="member">take_all</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;multi_option_policy(MultiOptionPolicy::TakeAll);</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae60a98016eb4fa4f52b35c1e04c4af57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae60a98016eb4fa4f52b35c1e04c4af57" kindref="member">join</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;multi_option_policy(MultiOptionPolicy::Join);</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4288" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a9ddef37d6c61f1f918934ad9028d1e1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a9ddef37d6c61f1f918934ad9028d1e1d" kindref="member">join</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim)<sp/>{</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;delimiter_<sp/>=<sp/>delim;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;multi_option_policy(MultiOptionPolicy::Join);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4296" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3491d409f5efa790921d43ef33ea3e3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3491d409f5efa790921d43ef33ea3e3f" kindref="member">configurable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a33af294b57ec5fc59cc1b098f7d7e510" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CRTP<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a33af294b57ec5fc59cc1b098f7d7e510" kindref="member">delimiter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" kindref="member">delimiter_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>static_cast&lt;CRTP<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" kindref="compound">OptionBase</ref>&lt;OptionDefaults&gt;<sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Methods<sp/>here<sp/>need<sp/>a<sp/>different<sp/>implementation<sp/>if<sp/>they<sp/>are<sp/>Option<sp/>vs.<sp/>OptionDefault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4317" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a9248b88651b653015c90ed27341e4a2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a9248b88651b653015c90ed27341e4a2d" kindref="member">multi_option_policy</ref>(MultiOptionPolicy<sp/>value<sp/>=<sp/>MultiOptionPolicy::Throw)<sp/>{</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" kindref="member">multi_option_policy_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a827af7339c3a182bae015df762af5d75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a827af7339c3a182bae015df762af5d75" kindref="member">ignore_case</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4329" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a05f59d789c6e25a492a0da2c77c77acb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a05f59d789c6e25a492a0da2c77c77acb" kindref="member">ignore_underscore</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a10c3b15cbf17c8754a164e157c035f89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a10c3b15cbf17c8754a164e157c035f89" kindref="member">disable_flag_override</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" kindref="member">disable_flag_override_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a374693e16b9250feef80fd14820f9a4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults_1a374693e16b9250feef80fd14820f9a4b" kindref="member">delimiter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" kindref="member">delimiter_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Option<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>OptionBase&lt;Option&gt;<sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>App;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4353"></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>snames_{};</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>lnames_{};</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>default_flag_values_{};</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>fnames_{};</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pname_{};</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>envname_{};</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>description_{};</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>default_str_{};</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>option_text_{};</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>type_name_{[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();<sp/>}};</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>default_function_{};</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_size_max_{1};</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_size_min_{1};</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_min_{1};</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_max_{1};</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Validator&gt;<sp/>validators_{};</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;Option<sp/>*&gt;<sp/>needs_{};</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;Option<sp/>*&gt;<sp/>excludes_{};</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/>*parent_{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/>callback_t<sp/>callback_{};</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/>results_t<sp/>results_{};</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/>results_t<sp/>proc_results_{};</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>option_state<sp/>:<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsing<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validated<sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reduced<sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback_run<sp/>=<sp/>6,<sp/><sp/></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>option_state<sp/>current_option_state_{option_state::parsing};</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_extra_args_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag_like_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>run_callback_for_default_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inject_separator_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger_on_result_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_callback_{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4458"></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>Option(std::string<sp/>option_name,<sp/>std::string<sp/>option_description,<sp/>callback_t<sp/>callback,<sp/>App<sp/>*parent)</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>description_(std::move(option_description)),<sp/>parent_(parent),<sp/>callback_(std::move(callback))<sp/>{</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(snames_,<sp/>lnames_,<sp/>pname_)<sp/>=<sp/>detail::get_names(detail::split_names(option_name));</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/>Option(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/>count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results_.size();<sp/>}</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results_.empty();<sp/>}</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!empty()<sp/>||<sp/>force_callback_;<sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_.clear();</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*expected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*expected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_max);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*allow_extra_args(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allow_extra_args_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_allow_extra_args()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow_extra_args_;<sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*trigger_on_parse(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_on_result_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_trigger_on_parse()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trigger_on_result_;<sp/>}</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*force_callback(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_callback_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_force_callback()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>force_callback_;<sp/>}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*run_callback_for_default(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_callback_for_default_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_run_callback_for_default()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>run_callback_for_default_;<sp/>}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*check(Validator<sp/>validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;validator_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*check(std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;)&gt;<sp/>Validator,</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Validator_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Validator_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*transform(Validator<sp/>Validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Validator_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string)&gt;<sp/>&amp;func,</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>transform_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>transform_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*each(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::string)&gt;<sp/>&amp;func);</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator<sp/>*get_validator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Validator_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator<sp/>*get_validator(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*needs(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_.insert(opt);</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>App&gt;<sp/>Option<sp/>*needs(std::string<sp/>opt_name)<sp/>{</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt<sp/>=<sp/>static_cast&lt;T<sp/>*&gt;(parent_)-&gt;get_option_no_throw(opt_name);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>IncorrectConstruction::MissingOption(opt_name);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needs(opt);</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ARG&gt;<sp/>Option<sp/>*needs(A<sp/>opt,<sp/>B<sp/>opt1,<sp/>ARG...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs(opt);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needs(opt1,<sp/>args...);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(readability-suspicious-call-argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remove_needs(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*excludes(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>App&gt;<sp/>Option<sp/>*excludes(std::string<sp/>opt_name)<sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opt<sp/>=<sp/>static_cast&lt;T<sp/>*&gt;(parent_)-&gt;get_option_no_throw(opt_name);</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>IncorrectConstruction::MissingOption(opt_name);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>excludes(opt);</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ARG&gt;<sp/>Option<sp/>*excludes(A<sp/>opt,<sp/>B<sp/>opt1,<sp/>ARG...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excludes(opt);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>excludes(opt1,<sp/>args...);</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remove_excludes(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*envname(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>envname_<sp/>=<sp/>std::move(name);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>App&gt;<sp/>Option<sp/>*ignore_case(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>App&gt;<sp/>Option<sp/>*ignore_underscore(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*multi_option_policy(MultiOptionPolicy<sp/>value<sp/>=<sp/>MultiOptionPolicy::Throw);</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*disable_flag_override(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" kindref="member">disable_flag_override_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4631"></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_size_min_;<sp/>}</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type_size_min()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_size_min_;<sp/>}</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type_size_max()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_size_max_;<sp/>}</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_inject_separator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inject_separator_;<sp/>}</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_envname()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>envname_;<sp/>}</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::set&lt;Option<sp/>*&gt;<sp/>get_needs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needs_;<sp/>}</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::set&lt;Option<sp/>*&gt;<sp/>get_excludes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>excludes_;<sp/>}</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_default_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_str_;<sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>callback_t<sp/>get_callback()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callback_;<sp/>}</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;get_lnames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lnames_;<sp/>}</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;get_snames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snames_;<sp/>}</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;get_fnames()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fnames_;<sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;get_single_name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lnames_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lnames_[0];</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!pname_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pname_;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!snames_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snames_[0];</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>envname_;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_expected()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expected_min_;<sp/>}</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_expected_min()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expected_min_;<sp/>}</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_expected_max()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expected_max_;<sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_items_expected_min()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_size_min_<sp/>*<sp/>expected_min_;<sp/>}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_items_expected_max()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>type_size_max_;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::checked_multiply(t,<sp/>expected_max_)<sp/>?<sp/>t<sp/>:<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_items_expected()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_items_expected_min();<sp/>}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_positional()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pname_.length()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nonpositional()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(snames_.size()<sp/>+<sp/>lnames_.size())<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_description()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description_.length()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;get_description()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description_;<sp/>}</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*description(std::string<sp/>option_description)<sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description_<sp/>=<sp/>std::move(option_description);</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*option_text(std::string<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_text_<sp/>=<sp/>std::move(text);</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;get_option_text()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>option_text_;<sp/>}</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_name(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>positional<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_options<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_callback();</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;matching_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dictionary_8h_1af7cc7d48287d0ccfc216ed68b60c0b78" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!matching_name(other).empty();<sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_sname(std::string<sp/>name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(detail::find_member(std::move(name),<sp/>snames_,<sp/>ignore_case_)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_lname(std::string<sp/>name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(detail::find_member(std::move(name),<sp/>lnames_,<sp/>ignore_case_,<sp/>ignore_underscore_)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_fname(std::string<sp/>name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnames_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(detail::find_member(std::move(name),<sp/>fnames_,<sp/>ignore_case_,<sp/>ignore_underscore_)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_flag_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>std::string<sp/>input_value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*add_result(std::string<sp/>s);</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*add_result(std::string<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;results_added);</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*add_result(std::vector&lt;std::string&gt;<sp/>s);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;results()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results_;<sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>results_t<sp/>reduced_results()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>results(T<sp/>&amp;output)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>&gt;=<sp/>option_state::reduced<sp/>||<sp/>(results_.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>validators_.empty()))<sp/>{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;res<sp/>=<sp/>(proc_results_.empty())<sp/>?<sp/>results_<sp/>:<sp/>proc_results_;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>detail::lexical_conversion&lt;T,<sp/>T&gt;(res,<sp/>output);</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_t<sp/>res;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(results_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!default_str_.empty())<sp/>{</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_add_results<sp/>takes<sp/>an<sp/>rvalue<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_add_result(std::string(default_str_),<sp/>res);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_validate_results(res);</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_t<sp/>extra;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_reduce_results(extra,<sp/>res);</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!extra.empty())<sp/>{</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>std::move(extra);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.emplace_back();</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>reduced_results();</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>detail::lexical_conversion&lt;T,<sp/>T&gt;(res,<sp/>output);</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!retval)<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConversionError(get_name(),<sp/>results_);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>CLI11_NODISCARD<sp/>T<sp/>as()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>output;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results(output);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_callback_run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(current_option_state_<sp/>==<sp/>option_state::callback_run);<sp/>}</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*type_name_fn(std::function&lt;std::string()&gt;<sp/>typefun)<sp/>{</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name_<sp/>=<sp/>std::move(typefun);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*type_name(std::string<sp/>typeval)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name_fn([typeval]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typeval;<sp/>});</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*type_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size);</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*type_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size_max);</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inject_separator(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/>inject_separator_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*default_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string()&gt;<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_function_<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*capture_default_str()<sp/>{</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(default_function_)<sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_str_<sp/>=<sp/>default_function_();</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*default_str(std::string<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_str_<sp/>=<sp/>std::move(val);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;<sp/>Option<sp/>*default_val(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X<sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>val_str<sp/>=<sp/>detail::to_string(val);</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_option_state<sp/>=<sp/>current_option_state_;</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_t<sp/>old_results{std::move(results_)};</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_.clear();</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_result(val_str);</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>trigger_on_result_<sp/>is<sp/>set<sp/>the<sp/>callback<sp/>already<sp/>ran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(run_callback_for_default_<sp/>&amp;&amp;<sp/>!trigger_on_result_)<sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_callback();<sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>callback<sp/>sets<sp/>the<sp/>state,<sp/>we<sp/>need<sp/>to<sp/>reset<sp/>it<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_validate_results(results_);</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>old_option_state;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::Error<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_<sp/>=<sp/>std::move(old_results);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>old_option_state;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_<sp/>=<sp/>std::move(old_results);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_str_<sp/>=<sp/>std::move(val_str);</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/>get_type_name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_validate_results(results_t<sp/>&amp;res)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_reduce_results(results_t<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;original)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>a<sp/>result<sp/>through<sp/>the<sp/>Validators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_validate(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_add_result(std::string<sp/>&amp;&amp;result,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;res)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CRTP&gt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" kindref="member">OptionBase&lt;CRTP&gt;::copy_to</ref>(T<sp/>*other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;group(group_);</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;required(required_);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;ignore_case(ignore_case_);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;ignore_underscore(ignore_underscore_);</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;configurable(configurable_);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;disable_flag_override(disable_flag_override_);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;delimiter(delimiter_);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;always_capture_default(always_capture_default_);</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/>other-&gt;multi_option_policy(multi_option_policy_);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::expected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expected_max_<sp/>&lt;<sp/>expected_min_)<sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>expected_min_;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allow_extra_args_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_like_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>==<sp/>detail::expected_max_vector_size)<sp/>{</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allow_extra_args_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_like_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_like_<sp/>=<sp/>(expected_min_<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::expected(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_max)<sp/>{</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value_min<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_min<sp/>=<sp/>-value_min;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value_max<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_max<sp/>=<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value_max<sp/>&lt;<sp/>value_min)<sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>=<sp/>value_max;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>value_min;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>value_max;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>=<sp/>value_min;</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::check(Validator<sp/>validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;validator_name)<sp/>{</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/>validator.non_modifying();</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.push_back(std::move(validator));</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!validator_name.empty())</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validators_.back().name(validator_name);</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::check(std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;)&gt;<sp/>Validator,</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Validator_description,</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Validator_name)<sp/>{</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.emplace_back(Validator,<sp/>std::move(Validator_description),<sp/>std::move(Validator_name));</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.back().non_modifying();</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::transform(Validator<sp/>Validator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Validator_name)<sp/>{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.insert(validators_.begin(),<sp/>std::move(Validator));</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!Validator_name.empty())</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validators_.front().name(Validator_name);</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;std::string(std::string)&gt;<sp/>&amp;func,</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>transform_description,</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>transform_name)<sp/>{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.insert(validators_.begin(),</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Validator(</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[func](std::string<sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>func(val);</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(transform_description),</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(transform_name)));</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::each(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::string)&gt;<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>validators_.emplace_back(</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[func](std::string<sp/>&amp;inout)<sp/>{</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(inout);</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{});</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal">CLI11_INLINE<sp/>Validator<sp/>*Option::get_validator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Validator_name)<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;Validator<sp/>:<sp/>validators_)<sp/>{</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Validator_name<sp/>==<sp/>Validator.get_name())<sp/>{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;Validator;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((Validator_name.empty())<sp/>&amp;&amp;<sp/>(!validators_.empty()))<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(validators_.front());</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionNotFound(std::string{</highlight><highlight class="stringliteral">&quot;Validator<sp/>&quot;</highlight><highlight class="normal">}<sp/>+<sp/>Validator_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Not<sp/>Found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal">CLI11_INLINE<sp/>Validator<sp/>*Option::get_validator(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>signed<sp/>int<sp/>so<sp/>that<sp/>it<sp/>is<sp/>not<sp/>equivalent<sp/>to<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>static_cast&lt;int&gt;(validators_.size()))<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(validators_[static_cast&lt;decltype(validators_)::size_type&gt;(index)]);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionNotFound(</highlight><highlight class="stringliteral">&quot;Validator<sp/>index<sp/>is<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Option::remove_needs(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(needs_),<sp/>std::end(needs_),<sp/>opt);</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(needs_))<sp/>{</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_.erase(iterator);</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::excludes(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(IncorrectConstruction(</highlight><highlight class="stringliteral">&quot;and<sp/>option<sp/>cannot<sp/>exclude<sp/>itself&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>excludes_.insert(opt);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Help<sp/>text<sp/>should<sp/>be<sp/>symmetric<sp/>-<sp/>excluding<sp/>a<sp/>should<sp/>exclude<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;excludes_.insert(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignoring<sp/>the<sp/>insert<sp/>return<sp/>value,<sp/>excluding<sp/>twice<sp/>is<sp/>now<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Mostly<sp/>to<sp/>allow<sp/>both<sp/>directions<sp/>to<sp/>be<sp/>excluded<sp/>by<sp/>user,<sp/>even<sp/>though<sp/>the<sp/>library<sp/>does<sp/>it<sp/>for<sp/>you.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Option::remove_excludes(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(excludes_),<sp/>std::end(excludes_),<sp/>opt);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(excludes_))<sp/>{</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>excludes_.erase(iterator);</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>Option<sp/>*Option::ignore_case(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ignore_case_<sp/>&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_case_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*parent<sp/>=<sp/>static_cast&lt;T<sp/>*&gt;(parent_);</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/>parent-&gt;options_)<sp/>{</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.get()<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;omatch<sp/>=<sp/>opt-&gt;matching_name(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!omatch.empty())<sp/>{</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_case_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionAlreadyAdded(</highlight><highlight class="stringliteral">&quot;adding<sp/>ignore<sp/>case<sp/>caused<sp/>a<sp/>name<sp/>conflict<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>omatch);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_case_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>Option<sp/>*Option::ignore_underscore(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ignore_underscore_<sp/>&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_underscore_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*parent<sp/>=<sp/>static_cast&lt;T<sp/>*&gt;(parent_);</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/>parent-&gt;options_)<sp/>{</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.get()<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;omatch<sp/>=<sp/>opt-&gt;matching_name(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!omatch.empty())<sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_underscore_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionAlreadyAdded(</highlight><highlight class="stringliteral">&quot;adding<sp/>ignore<sp/>underscore<sp/>caused<sp/>a<sp/>name<sp/>conflict<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>omatch);</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_underscore_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::multi_option_policy(MultiOptionPolicy<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>!=<sp/>multi_option_policy_)<sp/>{</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multi_option_policy_<sp/>==<sp/>MultiOptionPolicy::Throw<sp/>&amp;&amp;<sp/>expected_max_<sp/>==<sp/>detail::expected_max_vector_size<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_min_<sp/>&gt;<sp/>1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>bizarre<sp/>condition<sp/>is<sp/>to<sp/>maintain<sp/>backwards<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>previous<sp/>behavior<sp/>of<sp/>expected_<sp/>with<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>expected_min_;</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_option_policy_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/>Option::get_name(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>positional,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_options)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_group().empty())</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>Hidden</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(all_options)<sp/>{</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>name_list;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((positional<sp/>&amp;&amp;<sp/>(!pname_.empty()))<sp/>||<sp/>(snames_.empty()<sp/>&amp;&amp;<sp/>lnames_.empty()))<sp/>{</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.push_back(pname_);</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((get_items_expected()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(!fnames_.empty()))<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sname<sp/>:<sp/>snames_)<sp/>{</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>sname);</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(check_fname(sname))<sp/>{</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.back()<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>+<sp/>get_flag_value(sname,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"></highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;lname<sp/>:<sp/>lnames_)<sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.push_back(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>lname);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(check_fname(lname))<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.back()<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>+<sp/>get_flag_value(lname,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sname<sp/>:<sp/>snames_)</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>sname);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;lname<sp/>:<sp/>lnames_)</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_list.push_back(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>lname);</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::join(name_list);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>returns<sp/>the<sp/>positional<sp/>name<sp/>no<sp/>matter<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(positional)</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pname_;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prefer<sp/>long<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lnames_.empty())</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(2,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>+<sp/>lnames_[0];</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>short<sp/>name<sp/>if<sp/>no<sp/>long<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!snames_.empty())</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>+<sp/>snames_[0];</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>positional<sp/>is<sp/>the<sp/>only<sp/>name,<sp/>it&apos;s<sp/>okay<sp/>to<sp/>use<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pname_;</highlight></codeline>
<codeline lineno="5184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Option::run_callback()<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(force_callback_<sp/>&amp;&amp;<sp/>results_.empty())<sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_result(default_str_);</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>==<sp/>option_state::parsing)<sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_validate_results(results_);</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::validated;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>&lt;<sp/>option_state::reduced)<sp/>{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_reduce_results(proc_results_,<sp/>results_);</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::reduced;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>&gt;=<sp/>option_state::reduced)<sp/>{</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::callback_run;</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(callback_))<sp/>{</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;send_results<sp/>=<sp/>proc_results_.empty()<sp/>?<sp/>results_<sp/>:<sp/>proc_results_;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local_result<sp/>=<sp/>callback_(send_results);</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!local_result)</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConversionError(get_name(),<sp/>results_);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Option::matching_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>estring;</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sname<sp/>:<sp/>snames_)</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.check_sname(sname))</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sname;</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;lname<sp/>:<sp/>lnames_)</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.check_lname(lname))</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lname;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_case_<sp/>||</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore_underscore_)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>do<sp/>the<sp/>inverse,<sp/>in<sp/>case<sp/>we<sp/>are<sp/>ignore_case<sp/>or<sp/>ignore<sp/>underscore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sname<sp/>:<sp/>other.snames_)</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(check_sname(sname))</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sname;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;lname<sp/>:<sp/>other.lnames_)</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(check_lname(lname))</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lname;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estring;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Option::check_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check_lname(name.substr(2));</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.length()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>name.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check_sname(name.substr(1));</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!pname_.empty())<sp/>{</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>local_pname<sp/>=<sp/>pname_;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>local_name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_underscore_)<sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_pname<sp/>=<sp/>detail::remove_underscore(local_pname);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_name<sp/>=<sp/>detail::remove_underscore(local_name);</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ignore_case_)<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_pname<sp/>=<sp/>detail::to_lower(local_pname);</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_name<sp/>=<sp/>detail::to_lower(local_name);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(local_name<sp/>==<sp/>local_pname)<sp/>{</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!envname_.empty())<sp/>{</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>the<sp/>original<sp/>since<sp/>envname_<sp/>shouldn&apos;t<sp/>match<sp/>on<sp/>case<sp/>insensitivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>envname_);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/>Option::get_flag_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>input_value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>trueString{</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>falseString{</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>emptyString{</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>disable<sp/>flag<sp/>override_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(disable_flag_override_)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!((input_value.empty())<sp/>||<sp/>(input_value<sp/>==<sp/>emptyString)))<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>default_ind<sp/>=<sp/>detail::find_member(name,<sp/>fnames_,<sp/>ignore_case_,<sp/>ignore_underscore_);</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(default_ind<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>static<sp/>cast<sp/>this<sp/>to<sp/>std::size_t<sp/>because<sp/>it<sp/>is<sp/>more<sp/>than<sp/>0<sp/>in<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(default_flag_values_[static_cast&lt;std::size_t&gt;(default_ind)].second<sp/>!=<sp/>input_value)<sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArgumentMismatch::FlagOverride(name));</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input_value<sp/>!=<sp/>trueString)<sp/>{</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArgumentMismatch::FlagOverride(name));</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>detail::find_member(name,<sp/>fnames_,<sp/>ignore_case_,<sp/>ignore_underscore_);</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((input_value.empty())<sp/>||<sp/>(input_value<sp/>==<sp/>emptyString))<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flag_like_)<sp/>{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ind<sp/>&lt;<sp/>0)<sp/>?<sp/>trueString<sp/>:<sp/>default_flag_values_[static_cast&lt;std::size_t&gt;(ind)].second;</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ind<sp/>&lt;<sp/>0)<sp/>?<sp/>default_str_<sp/>:<sp/>default_flag_values_[static_cast&lt;std::size_t&gt;(ind)].second;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ind<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_value;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(default_flag_values_[static_cast&lt;std::size_t&gt;(ind)].second<sp/>==<sp/>falseString)<sp/>{</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>detail::to_flag_value(input_value);</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>1)<sp/>?<sp/>falseString<sp/>:<sp/>(val<sp/>==<sp/>(-1)<sp/>?<sp/>trueString<sp/>:<sp/>std::to_string(-val));</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_value;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_value;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::add_result(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/>_add_result(std::move(s),<sp/>results_);</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::add_result(std::string<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;results_added)<sp/>{</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>results_added<sp/>=<sp/>_add_result(std::move(s),<sp/>results_);</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::add_result(std::vector&lt;std::string&gt;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/>current_option_state_<sp/>=<sp/>option_state::parsing;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;str<sp/>:<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_add_result(std::move(str),<sp/>results_);</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>results_t<sp/>Option::reduced_results()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/>results_t<sp/>res<sp/>=<sp/>proc_results_.empty()<sp/>?<sp/>results_<sp/>:<sp/>proc_results_;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>&lt;<sp/>option_state::reduced)<sp/>{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_option_state_<sp/>==<sp/>option_state::parsing)<sp/>{</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>results_;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_validate_results(res);</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!res.empty())<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results_t<sp/>extra;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_reduce_results(extra,<sp/>res);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!extra.empty())<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>std::move(extra);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::type_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size)<sp/>{</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(option_type_size<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>section<sp/>is<sp/>included<sp/>for<sp/>backwards<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_max_<sp/>=<sp/>-option_type_size;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_min_<sp/>=<sp/>-option_type_size;</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_max_<sp/>=<sp/>option_type_size;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type_size_max_<sp/>&lt;<sp/>detail::expected_max_vector_size)<sp/>{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_min_<sp/>=<sp/>option_type_size;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inject_separator_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type_size_max_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*Option::type_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option_type_size_max)<sp/>{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(option_type_size_min<sp/>&lt;<sp/>0<sp/>||<sp/>option_type_size_max<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>section<sp/>is<sp/>included<sp/>for<sp/>backwards<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_max_<sp/>=<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_type_size_min<sp/>=<sp/>(std::abs)(option_type_size_min);</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_type_size_max<sp/>=<sp/>(std::abs)(option_type_size_max);</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(option_type_size_min<sp/>&gt;<sp/>option_type_size_max)<sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_max_<sp/>=<sp/>option_type_size_min;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_min_<sp/>=<sp/>option_type_size_max;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_min_<sp/>=<sp/>option_type_size_min;</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_size_max_<sp/>=<sp/>option_type_size_max;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type_size_max_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type_size_max_<sp/>&gt;=<sp/>detail::expected_max_vector_size)<sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inject_separator_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/>Option::get_type_name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>full_type_name<sp/>=<sp/>type_name_();</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!validators_.empty())<sp/>{</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;Validator<sp/>:<sp/>validators_)<sp/>{</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>vtype<sp/>=<sp/>Validator.get_description();</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!vtype.empty())<sp/>{</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_type_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>vtype;</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full_type_name;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Option::_validate_results(results_t<sp/>&amp;res)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>Validators<sp/>(can<sp/>change<sp/>the<sp/>string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!validators_.empty())<sp/>{</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type_size_max_<sp/>&gt;<sp/>1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>context<sp/>index<sp/>refers<sp/>to<sp/>the<sp/>index<sp/>in<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_items_expected_max()<sp/>&lt;<sp/>static_cast&lt;int&gt;(res.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_option_policy_<sp/>==<sp/>CLI::MultiOptionPolicy::TakeLast)<sp/>{</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>negative<sp/>index<sp/>for<sp/>the<sp/>earliest<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>get_items_expected_max()<sp/>-<sp/>static_cast&lt;int&gt;(res.size());</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>&amp;result<sp/>:<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::is_separator(result)<sp/>&amp;&amp;<sp/>type_size_max_<sp/>!=<sp/>type_size_min_<sp/>&amp;&amp;<sp/>index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>index<sp/>for<sp/>variable<sp/>size<sp/>chunks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_msg<sp/>=<sp/>_validate(result,<sp/>(index<sp/>&gt;=<sp/>0)<sp/>?<sp/>(index<sp/>%<sp/>type_size_max_)<sp/>:<sp/>index);</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!err_msg.empty())</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(get_name(),<sp/>err_msg);</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expected_max_<sp/>&lt;<sp/>static_cast&lt;int&gt;(res.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_option_policy_<sp/>==<sp/>CLI::MultiOptionPolicy::TakeLast)<sp/>{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>negative<sp/>index<sp/>for<sp/>the<sp/>earliest<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>expected_max_<sp/>-<sp/>static_cast&lt;int&gt;(res.size());</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>&amp;result<sp/>:<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_msg<sp/>=<sp/>_validate(result,<sp/>index);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!err_msg.empty())</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ValidationError(get_name(),<sp/>err_msg);</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Option::_reduce_results(results_t<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results_t<sp/>&amp;original)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>num<sp/>items<sp/>expected<sp/>or<sp/>length<sp/>of<sp/>vector,<sp/>always<sp/>at<sp/>least<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>valid<sp/>for<sp/>a<sp/>trimming<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/>out.clear();</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operation<sp/>depends<sp/>on<sp/>the<sp/>policy<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(multi_option_policy_)<sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::TakeAll:</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::TakeLast:<sp/>{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>multi-option<sp/>sizes<sp/>(including<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>trim_size<sp/>=<sp/>std::min&lt;std::size_t&gt;(</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;std::size_t&gt;(std::max&lt;int&gt;(get_items_expected_max(),<sp/>1)),<sp/>original.size());</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(original.size()<sp/>!=<sp/>trim_size)<sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.assign(original.end()<sp/>-<sp/>static_cast&lt;results_t::difference_type&gt;(trim_size),<sp/>original.end());</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::TakeFirst:<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>trim_size<sp/>=<sp/>std::min&lt;std::size_t&gt;(</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;std::size_t&gt;(std::max&lt;int&gt;(get_items_expected_max(),<sp/>1)),<sp/>original.size());</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(original.size()<sp/>!=<sp/>trim_size)<sp/>{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.assign(original.begin(),<sp/>original.begin()<sp/>+<sp/>static_cast&lt;results_t::difference_type&gt;(trim_size));</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::Join:</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(results_.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(detail::join(original,<sp/>std::string(1,<sp/>(delimiter_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>:<sp/>delimiter_)));</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::Sum:</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(detail::sum_string_vector(original));</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MultiOptionPolicy::Throw:</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_min<sp/>=<sp/>static_cast&lt;std::size_t&gt;(get_items_expected_min());</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_max<sp/>=<sp/>static_cast&lt;std::size_t&gt;(get_items_expected_max());</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_min<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_min<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_max<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_max<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(original.size()<sp/>&lt;<sp/>num_min)<sp/>{</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArgumentMismatch::AtLeast(get_name(),<sp/>static_cast&lt;int&gt;(num_min),<sp/>original.size());</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(original.size()<sp/>&gt;<sp/>num_max)<sp/>{</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArgumentMismatch::AtMost(get_name(),<sp/>static_cast&lt;int&gt;(num_max),<sp/>original.size());</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>check<sp/>is<sp/>to<sp/>allow<sp/>an<sp/>empty<sp/>vector<sp/>in<sp/>certain<sp/>circumstances<sp/>but<sp/>not<sp/>if<sp/>expected<sp/>is<sp/>not<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{}<sp/>is<sp/>the<sp/>indicator<sp/>for<sp/>an<sp/>empty<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out.empty())<sp/>{</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(original.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>original[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>get_items_expected_min()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>out[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>get_items_expected_min()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(</highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"></highlight></codeline>
<codeline lineno="5501"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>Option::_validate(std::string<sp/>&amp;result,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>err_msg;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result.empty()<sp/>&amp;&amp;<sp/>expected_min_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>empty<sp/>with<sp/>nothing<sp/>expected<sp/>is<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err_msg;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vali<sp/>:<sp/>validators_)<sp/>{</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>vali.get_application_index();</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v<sp/>==<sp/>-1<sp/>||<sp/>v<sp/>==<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_msg<sp/>=<sp/>vali(result);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValidationError<sp/>&amp;err)<sp/>{</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_msg<sp/>=<sp/>err.what();</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!err_msg.empty())</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err_msg;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Option::_add_result(std::string<sp/>&amp;&amp;result,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;res)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allow_extra_args_<sp/>&amp;&amp;<sp/>!result.empty()<sp/>&amp;&amp;<sp/>result.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>now<sp/>a<sp/>vector<sp/>string<sp/>likely<sp/>from<sp/>the<sp/>default<sp/>or<sp/>user<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.pop_back();</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>CLI::detail::split(result.substr(1),<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!var.empty())<sp/>{</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_count<sp/>+=<sp/>_add_result(std::move(var),<sp/>res);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_count;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delimiter_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(std::move(result));</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++result_count;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((result.find_first_of(delimiter_)<sp/>!=<sp/>std::string::npos))<sp/>{</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>CLI::detail::split(result,<sp/>delimiter_))<sp/>{</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!var.empty())<sp/>{</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(var);</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++result_count;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(std::move(result));</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++result_count;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_count;</highlight></codeline>
<codeline lineno="5553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLI11_PARSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLI11_PARSE(app,<sp/>argc,<sp/>argv)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(app).parse((argc),<sp/>(argv));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>catch(const<sp/>CLI::ParseError<sp/>&amp;e)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(app).exit(e);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Classifier<sp/>{<sp/>NONE,<sp/>POSITIONAL_MARK,<sp/>SHORT,<sp/>LONG,<sp/>WINDOWS_STYLE,<sp/>SUBCOMMAND,<sp/>SUBCOMMAND_TERMINATOR<sp/>};</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AppFriend;</highlight></codeline>
<codeline lineno="5569"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">FailureMessage<sp/>{</highlight></codeline>
<codeline lineno="5572"><highlight class="normal">std::string<sp/>simple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal">std::string<sp/>help(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>FailureMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal"></highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>config_extras_mode<sp/>:<sp/>char<sp/>{<sp/>error<sp/>=<sp/>0,<sp/>ignore,<sp/>ignore_all,<sp/>capture<sp/>};</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">App;</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"></highlight></codeline>
<codeline lineno="5582"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>App_p<sp/>=<sp/>std::shared_ptr&lt;App&gt;;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"></highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;!std::is_integral&lt;T&gt;::value<sp/>||<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&lt;=<sp/>1U),<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="5588"><highlight class="normal">Option<sp/>*default_flag_modifiers(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;always_capture_default();</highlight></codeline>
<codeline lineno="5590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight></codeline>
<codeline lineno="5593"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>enable_if_t&lt;std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>&gt;<sp/>1U),<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="5594"><highlight class="normal">Option<sp/>*default_flag_modifiers(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;multi_option_policy(MultiOptionPolicy::Sum)-&gt;default_str(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)-&gt;force_callback();</highlight></codeline>
<codeline lineno="5596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight></codeline>
<codeline lineno="5598"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Option_group;</highlight></codeline>
<codeline lineno="5602"></codeline>
<codeline lineno="5605" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>{</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>Option;</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend" kindref="compound">detail::AppFriend</ref>;</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>library<sp/>follows<sp/>the<sp/>Google<sp/>style<sp/>guide<sp/>for<sp/>member<sp/>names<sp/>ending<sp/>in<sp/>underscores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5611"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"></codeline>
<codeline lineno="5616" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>{};</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight></codeline>
<codeline lineno="5619" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" kindref="member">description_</ref>{};</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5622" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"></highlight></codeline>
<codeline lineno="5626" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>config_extras_mode<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref>{config_extras_mode::ignore};</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"></highlight></codeline>
<codeline lineno="5632" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"></highlight></codeline>
<codeline lineno="5635" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight></codeline>
<codeline lineno="5638" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight></codeline>
<codeline lineno="5641" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" kindref="member">pre_parse_called_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight></codeline>
<codeline lineno="5645" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5648" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void(std::size_t)&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" kindref="member">pre_parse_callback_</ref>{};</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5651" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>{};</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight></codeline>
<codeline lineno="5654" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref>{};</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"></codeline>
<codeline lineno="5661" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" kindref="member">option_defaults_</ref>{};</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Option_p&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>{};</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"></codeline>
<codeline lineno="5671" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref>{};</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"></highlight></codeline>
<codeline lineno="5674" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" kindref="member">footer_callback_</ref>{};</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"></highlight></codeline>
<codeline lineno="5677" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"></highlight></codeline>
<codeline lineno="5680" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight></codeline>
<codeline lineno="5683" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5686" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;FormatterBase&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref>()};</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"></highlight></codeline>
<codeline lineno="5689" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>&amp;e)&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref>{FailureMessage::simple};</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>missing_t<sp/>=<sp/>std::vector&lt;std::pair&lt;detail::Classifier,<sp/>std::string&gt;&gt;;</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"></highlight></codeline>
<codeline lineno="5700" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>missing_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>{};</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"></highlight></codeline>
<codeline lineno="5703" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>{};</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"></highlight></codeline>
<codeline lineno="5706" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>{};</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"></highlight></codeline>
<codeline lineno="5709" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>{};</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"></highlight></codeline>
<codeline lineno="5713" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>{};</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"></highlight></codeline>
<codeline lineno="5717" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>{};</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"></highlight></codeline>
<codeline lineno="5721" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>{};</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"></codeline>
<codeline lineno="5728" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;App_p&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>{};</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight></codeline>
<codeline lineno="5734" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight></codeline>
<codeline lineno="5740" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref>{</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5748" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>startup_mode<sp/>:<sp/>char<sp/>{<sp/>stable,<sp/>enabled,<sp/>disabled<sp/>};</highlight></codeline>
<codeline lineno="5753" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>startup_mode<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref>{startup_mode::stable};</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight></codeline>
<codeline lineno="5756" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"></highlight></codeline>
<codeline lineno="5759" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"></highlight></codeline>
<codeline lineno="5762" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight></codeline>
<codeline lineno="5766" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" kindref="member">silent_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight></codeline>
<codeline lineno="5769" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref>{0U};</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"></highlight></codeline>
<codeline lineno="5772" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref>{0};</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"></highlight></codeline>
<codeline lineno="5775" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref>{0};</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5778" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref>{0};</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"></highlight></codeline>
<codeline lineno="5781" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref>{0};</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"></highlight></codeline>
<codeline lineno="5784" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"></highlight></codeline>
<codeline lineno="5787" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref>{</highlight><highlight class="stringliteral">&quot;Subcommands&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight></codeline>
<codeline lineno="5790" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>{};</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"></codeline>
<codeline lineno="5797" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"></highlight></codeline>
<codeline lineno="5800" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Config&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigTOML</ref>()};</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref>(std::string<sp/>app_description,<sp/>std::string<sp/>app_name,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*parent);</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5810"></codeline>
<codeline lineno="5812" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a02ccff5126753b4ffcab4e389ed58956" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a02ccff5126753b4ffcab4e389ed58956" kindref="member">App</ref>(std::string<sp/>app_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/>app_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>(app_description,<sp/>app_name,<sp/>nullptr)<sp/>{</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" kindref="member">set_help_flag</ref>(</highlight><highlight class="stringliteral">&quot;-h,--help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>this<sp/>help<sp/>message<sp/>and<sp/>exit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bbf259b886b9746e86466e57148c892" kindref="member">~App</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"></highlight></codeline>
<codeline lineno="5829" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9c1c691769ad7a23ec03880444fa0e2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9c1c691769ad7a23ec03880444fa0e2b" kindref="member">callback</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>app_callback)<sp/>{</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref><sp/>=<sp/>std::move(app_callback);</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref><sp/>=<sp/>std::move(app_callback);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight></codeline>
<codeline lineno="5840" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a60f297d7fa084079895748a644e03c33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a60f297d7fa084079895748a644e03c33" kindref="member">final_callback</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>app_callback)<sp/>{</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref><sp/>=<sp/>std::move(app_callback);</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"></highlight></codeline>
<codeline lineno="5847" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0dc0d9d96c02f6e1dac5acc867c91c0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0dc0d9d96c02f6e1dac5acc867c91c0a" kindref="member">parse_complete_callback</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>pc_callback)<sp/>{</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref><sp/>=<sp/>std::move(pc_callback);</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight></codeline>
<codeline lineno="5854" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68f0feab1c657383b1c1e21b35d1c779" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68f0feab1c657383b1c1e21b35d1c779" kindref="member">preparse_callback</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::size_t)&gt;<sp/>pp_callback)<sp/>{</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" kindref="member">pre_parse_callback_</ref><sp/>=<sp/>std::move(pp_callback);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"></highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8d1f0de783c1d733da0520cad084a80" kindref="member">name</ref>(std::string<sp/>app_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6404244a5f76ae7c407b1c29f6cc7fd7" kindref="member">alias</ref>(std::string<sp/>app_name);</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"></highlight></codeline>
<codeline lineno="5866" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4e54d234368404393b1ce7cecdbb37cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4e54d234368404393b1ce7cecdbb37cc" kindref="member">allow_extras</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>=<sp/>allow;</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"></highlight></codeline>
<codeline lineno="5872" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0b7a03be2977022e1273c72c617aed00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0b7a03be2977022e1273c72c617aed00" kindref="member">required</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>require<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref><sp/>=<sp/>require;</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight></codeline>
<codeline lineno="5878" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab7f3149ed992c3f85500af05e782da2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab7f3149ed992c3f85500af05e782da2c" kindref="member">disabled</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref><sp/>=<sp/>disable;</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"></highlight></codeline>
<codeline lineno="5884" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeb76062af8973d6048b3d3beb7559844" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeb76062af8973d6048b3d3beb7559844" kindref="member">silent</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>silence<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" kindref="member">silent_</ref><sp/>=<sp/>silence;</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"></highlight></codeline>
<codeline lineno="5890" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab2d6a69ab64b222cc723cefce4c92493" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab2d6a69ab64b222cc723cefce4c92493" kindref="member">disabled_by_default</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>disable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(disable)<sp/>{</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>=<sp/>startup_mode::disabled;</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::enabled)<sp/>?<sp/>startup_mode::enabled<sp/>:<sp/>startup_mode::stable;</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight></codeline>
<codeline lineno="5901" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a998cc0b044ff3921c23acf073ef251d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a998cc0b044ff3921c23acf073ef251d3" kindref="member">enabled_by_default</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enable)<sp/>{</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>=<sp/>startup_mode::enabled;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>=</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::disabled)<sp/>?<sp/>startup_mode::disabled<sp/>:<sp/>startup_mode::stable;</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adfe1830c87c5e05a68bc4f97a195b674" kindref="member">immediate_callback</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>immediate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight></codeline>
<codeline lineno="5915" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe07f600f0c293d6e0d74b48b5c67ce3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe07f600f0c293d6e0d74b48b5c67ce3" kindref="member">validate_positionals</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref><sp/>=<sp/>validate;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"></highlight></codeline>
<codeline lineno="5921" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af8f8937c68ab7dfdc665271d287db368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af8f8937c68ab7dfdc665271d287db368" kindref="member">validate_optional_arguments</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref><sp/>=<sp/>validate;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight></codeline>
<codeline lineno="5927" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c0b4c95c2246c64ac915b0471958a1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c0b4c95c2246c64ac915b0471958a1a" kindref="member">allow_config_extras</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allow)<sp/>{</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref><sp/>=<sp/>config_extras_mode::capture;</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref><sp/>=<sp/>config_extras_mode::error;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"></highlight></codeline>
<codeline lineno="5938" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a860ba3afc9f4ce2e9c888864b1872ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a860ba3afc9f4ce2e9c888864b1872ee3" kindref="member">allow_config_extras</ref>(config_extras_mode<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref><sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"></highlight></codeline>
<codeline lineno="5944" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb802d9960b5aefac40ee64851f48813" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acb802d9960b5aefac40ee64851f48813" kindref="member">prefix_command</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref><sp/>=<sp/>allow;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"></highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a228cf7aa0656d0046b3cb352de935951" kindref="member">ignore_case</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"></highlight></codeline>
<codeline lineno="5954" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe9d597d34b973b211cd36d6ad767dcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe9d597d34b973b211cd36d6ad767dcb" kindref="member">allow_windows_style_options</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"></highlight></codeline>
<codeline lineno="5960" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa7dde3e7d08e4ee12665568f68fdd865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa7dde3e7d08e4ee12665568f68fdd865" kindref="member">positionals_at_end</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"></highlight></codeline>
<codeline lineno="5966" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a436c94f3e4f33ecc56fe8e06946b81b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a436c94f3e4f33ecc56fe8e06946b81b4" kindref="member">configurable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"></highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2533a70e2fdb56fb72b0230583f3ea0d" kindref="member">ignore_underscore</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"></highlight></codeline>
<codeline lineno="5975" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80f45622cc976c313bb69f6446c581da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80f45622cc976c313bb69f6446c581da" kindref="member">formatter</ref>(std::shared_ptr&lt;FormatterBase&gt;<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref><sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"></highlight></codeline>
<codeline lineno="5981" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2215484bb3c1d34ca1b4e2114e990e75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2215484bb3c1d34ca1b4e2114e990e75" kindref="member">formatter_fn</ref>(std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/>std::string,<sp/>AppFormatMode)&gt;<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref><sp/>=<sp/>std::make_shared&lt;FormatterLambda&gt;(fmt);</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"></highlight></codeline>
<codeline lineno="5987" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6c3ea90b92c629563f35d35b73fac0b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6c3ea90b92c629563f35d35b73fac0b9" kindref="member">config_formatter</ref>(std::shared_ptr&lt;Config&gt;<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref><sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight></codeline>
<codeline lineno="5993" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a85ddfe0dfa512e92b4f1da02abc67cbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a85ddfe0dfa512e92b4f1da02abc67cbc" kindref="member">parsed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight></codeline>
<codeline lineno="5996" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab1438513a1d763814634737986617c85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab1438513a1d763814634737986617c85" kindref="member">option_defaults</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" kindref="member">option_defaults_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"></highlight></codeline>
<codeline lineno="6001"></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback_t<sp/>option_callback,</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>option_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaulted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>func<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"></highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AssignTo,</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ConvertTo<sp/>=<sp/>AssignTo,</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_const&lt;ConvertTo&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6026" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa8d0cfc48f11bdfed94349ee2fcf8b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa8d0cfc48f11bdfed94349ee2fcf8b7" kindref="member">add_option</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignTo<sp/>&amp;variable,<sp/><sp/></highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>option_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fun<sp/>=<sp/>[&amp;variable](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>comment<sp/>for<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::lexical_conversion&lt;AssignTo,<sp/>ConvertTo&gt;(res,<sp/>variable);</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"></highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>*opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>fun,<sp/>option_description,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>[&amp;variable]()<sp/>{</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLI::detail::checked_to_string&lt;AssignTo,<sp/>ConvertTo&gt;(variable);</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_name(detail::type_name&lt;ConvertTo&gt;());</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>must<sp/>be<sp/>actual<sp/>lvalues<sp/>since<sp/>(std::max)<sp/>sometimes<sp/>is<sp/>defined<sp/>in<sp/>terms<sp/>of<sp/>references<sp/>and<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>structs<sp/>used<sp/>in<sp/>the<sp/>evaluation<sp/>can<sp/>be<sp/>temporary<sp/>so<sp/>that<sp/>would<sp/>cause<sp/>issues.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Tcount<sp/>=<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">detail::type_count&lt;AssignTo&gt;::value</ref>;</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>XCcount<sp/>=<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">detail::type_count&lt;ConvertTo&gt;::value</ref>;</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_size(detail::type_count_min&lt;ConvertTo&gt;::value,<sp/>(std::max)(Tcount,<sp/>XCcount));</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;expected(detail::expected_count&lt;ConvertTo&gt;::value);</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;run_callback_for_default();</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>AssignTo,<sp/>enable_if_t&lt;!std::is_const&lt;AssignTo&gt;::value,<sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6050" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad4b29d41ca534bf9c65ea34aa08a3fda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad4b29d41ca534bf9c65ea34aa08a3fda" kindref="member">add_option_no_stream</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignTo<sp/>&amp;variable,<sp/><sp/></highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>option_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fun<sp/>=<sp/>[&amp;variable](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>comment<sp/>for<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::lexical_conversion&lt;AssignTo,<sp/>AssignTo&gt;(res,<sp/>variable);</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>*opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>fun,<sp/>option_description,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};<sp/>});</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_name(detail::type_name&lt;AssignTo&gt;());</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_size(detail::type_count_min&lt;AssignTo&gt;::value,<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">detail::type_count&lt;AssignTo&gt;::value</ref>);</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;expected(detail::expected_count&lt;AssignTo&gt;::value);</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;run_callback_for_default();</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"></highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgType&gt;</highlight></codeline>
<codeline lineno="6068" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40342cbe1ff0d626be6d0332f8221c10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40342cbe1ff0d626be6d0332f8221c10" kindref="member">add_option_function</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgType<sp/>&amp;)&gt;<sp/>&amp;func,<sp/><sp/></highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>option_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"></highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fun<sp/>=<sp/>[func](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgType<sp/>variable;</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>detail::lexical_conversion&lt;ArgType,<sp/>ArgType&gt;(res,<sp/>variable);</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>{</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(variable);</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>*opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>std::move(fun),<sp/>option_description,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_name(detail::type_name&lt;ArgType&gt;());</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;type_size(detail::type_count_min&lt;ArgType&gt;::value,<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1type__count" kindref="compound">detail::type_count&lt;ArgType&gt;::value</ref>);</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;expected(detail::expected_count&lt;ArgType&gt;::value);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight></codeline>
<codeline lineno="6089" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab39730ca5e5df9cefbf9740b8ca8a318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab39730ca5e5df9cefbf9740b8ca8a318" kindref="member">add_option</ref>(std::string<sp/>option_name)<sp/>{</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>CLI::callback_t{},<sp/>std::string{},<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"></highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_const&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_constructible&lt;std::string,<sp/>T&gt;::value,<sp/>detail::enabler&gt;<sp/>=</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6097" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b29a9179fe3da2f2ccfefa06279082c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b29a9179fe3da2f2ccfefa06279082c" kindref="member">add_option</ref>(std::string<sp/>option_name,<sp/>T<sp/>&amp;option_description)<sp/>{</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>CLI::callback_t(),<sp/>option_description,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" kindref="member">set_help_flag</ref>(std::string<sp/>flag_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" kindref="member">set_help_all_flag</ref>(std::string<sp/>help_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" kindref="member">set_version_flag</ref>(std::string<sp/>flag_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;versionString<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;version_help<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Display<sp/>program<sp/>version<sp/>information<sp/>and<sp/>exit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" kindref="member">set_version_flag</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>vfunc,</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;version_help<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Display<sp/>program<sp/>version<sp/>information<sp/>and<sp/>exit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*_add_flag_internal(std::string<sp/>flag_name,<sp/>CLI::callback_t<sp/>fun,<sp/>std::string<sp/>flag_description);</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"></highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6123" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" kindref="member">add_flag</ref>(std::string<sp/>flag_name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_flag_internal(flag_name,<sp/>CLI::callback_t(),<sp/>std::string{});<sp/>}</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_const&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_constructible&lt;std::string,<sp/>T&gt;::value,<sp/>detail::enabler&gt;<sp/>=</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6131" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3cc14aa547ff5ac8885b11127ad03f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3cc14aa547ff5ac8885b11127ad03f8" kindref="member">add_flag</ref>(std::string<sp/>flag_name,<sp/>T<sp/>&amp;flag_description)<sp/>{</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_flag_internal(flag_name,<sp/>CLI::callback_t(),<sp/>flag_description);</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!detail::is_mutable_container&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_const&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;std::function&lt;void(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::enabler&gt;<sp/>=<sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6141" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae567e17d569d36bff8924329aea72a44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae567e17d569d36bff8924329aea72a44" kindref="member">add_flag</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;flag_result,<sp/><sp/></highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLI::callback_t<sp/>fun<sp/>=<sp/>[&amp;flag_result](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CLI::detail::lexical_cast(res[0],<sp/>flag_result);</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>_add_flag_internal(flag_name,<sp/>std::move(fun),<sp/>std::move(flag_description));</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::default_flag_modifiers&lt;T&gt;(opt);</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"></highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!std::is_assignable&lt;std::function&lt;void(std::int64_t)&gt;<sp/>&amp;,<sp/>T&gt;::value,<sp/>detail::enabler&gt;<sp/>=</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::dummy&gt;</highlight></codeline>
<codeline lineno="6156" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abb07ee7fa4e542b5cd72cd4895065df2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abb07ee7fa4e542b5cd72cd4895065df2" kindref="member">add_flag</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>&amp;flag_results,<sp/><sp/></highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLI::callback_t<sp/>fun<sp/>=<sp/>[&amp;flag_results](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_results.emplace_back();</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>&amp;=<sp/>detail::lexical_cast(elem,<sp/>flag_results.back());</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_flag_internal(flag_name,<sp/>std::move(fun),<sp/>std::move(flag_description))</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;multi_option_policy(MultiOptionPolicy::TakeAll)</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;run_callback_for_default();</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" kindref="member">add_flag_callback</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" kindref="member">add_flag_function</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::int64_t)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"></highlight></codeline>
<codeline lineno="6182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLI11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" kindref="member">add_flag</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::int64_t)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" kindref="member">add_flag_function</ref>(std::move(flag_name),<sp/>std::move(</highlight><highlight class="keyword">function</highlight><highlight class="normal">),<sp/>std::move(flag_description));</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"></highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a12ef5b8d5509c0bdf6d488f649427d42" kindref="member">set_config</ref>(std::string<sp/>option_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>default_filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>an<sp/>ini<sp/>file&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>config_required<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>Option_group&gt;</highlight></codeline>
<codeline lineno="6202" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1497276c3d2be458a9f57b6f9f65c3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1497276c3d2be458a9f57b6f9f65c3e" kindref="member">add_option_group</ref>(std::string<sp/>group_name,<sp/>std::string<sp/>group_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::valid_alias_name_string(group_name))<sp/>{</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;option<sp/>group<sp/>names<sp/>may<sp/>not<sp/>contain<sp/>newlines<sp/>or<sp/>null<sp/>characters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>option_group<sp/>=<sp/>std::make_shared&lt;T&gt;(std::move(group_description),<sp/>group_name,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>option_group.get();</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>App_p<sp/>for<sp/>overload<sp/>resolution<sp/>on<sp/>older<sp/>gcc<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>App_p<sp/>app_ptr<sp/>=<sp/>std::dynamic_pointer_cast&lt;App&gt;(option_group);</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">add_subcommand</ref>(std::move(app_ptr));</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">add_subcommand</ref>(std::string<sp/>subcommand_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/>subcommand_description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">add_subcommand</ref>(CLI::App_p<sp/>subcom);</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8942d46c22ff948571addc12b19046c0" kindref="member">remove_subcommand</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom);</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"></highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(std::string<sp/>subcom)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"></highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">get_subcommand_ptr</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"></highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">get_subcommand_ptr</ref>(std::string<sp/>subcom)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">get_subcommand_ptr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6245"><highlight class="normal"></highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa64469441e8b15077a781710a1e98871" kindref="member">get_option_group</ref>(std::string<sp/>group_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"></highlight></codeline>
<codeline lineno="6252" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac2ca386068235802660cc62c460ca8ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac2ca386068235802660cc62c460ca8ff" kindref="member">count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"></highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" kindref="member">count_all</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"></highlight></codeline>
<codeline lineno="6259" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa87fcb3a7a564b563a1f2525e748b8e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa87fcb3a7a564b563a1f2525e748b8e4" kindref="member">group</ref>(std::string<sp/>group_name)<sp/>{</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref><sp/>=<sp/>group_name;</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight></codeline>
<codeline lineno="6265" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0f5a053f7e47b9c6f5d96aafb8656575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0f5a053f7e47b9c6f5d96aafb8656575" kindref="member">require_subcommand</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6274" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28ff6ea733a811cf87c68f7a42a10254" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28ff6ea733a811cf87c68f7a42a10254" kindref="member">require_subcommand</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(-value);</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(value);</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(value);</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"></highlight></codeline>
<codeline lineno="6287" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae08daff7ea3e3b08a4b7292a4407f1af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae08daff7ea3e3b08a4b7292a4407f1af" kindref="member">require_subcommand</ref>(std::size_t<sp/>min,<sp/>std::size_t<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"></highlight></codeline>
<codeline lineno="6294" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7575a99103cdeced539d3b82bb1e85fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7575a99103cdeced539d3b82bb1e85fe" kindref="member">require_option</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"></highlight></codeline>
<codeline lineno="6303" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af5767ab7c438e80a5199f01b1ffdec25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af5767ab7c438e80a5199f01b1ffdec25" kindref="member">require_option</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(-value);</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(value);</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>=<sp/>static_cast&lt;std::size_t&gt;(value);</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"></highlight></codeline>
<codeline lineno="6316" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4dae8efca9fb592375211a6e05204bdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4dae8efca9fb592375211a6e05204bdf" kindref="member">require_option</ref>(std::size_t<sp/>min,<sp/>std::size_t<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight></codeline>
<codeline lineno="6324" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04196aeaf97226205f8853fe056945b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04196aeaf97226205f8853fe056945b4" kindref="member">fallthrough</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight></codeline>
<codeline lineno="6331" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a67b76affb3b5d35fa419ac234144038b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"></highlight></codeline>
<codeline lineno="6336"></codeline>
<codeline lineno="6340" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a22e79d21d2fbf77c5c27ff047875600e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a22e79d21d2fbf77c5c27ff047875600e" kindref="member">pre_callback</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="6347"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"></highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*argv);</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(std::string<sp/>commandline,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>program_name_included<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args);</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;&amp;args);</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_from_stream(std::istream<sp/>&amp;input);</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight></codeline>
<codeline lineno="6369" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac3ead65ee88595674c7818dc312e3d65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac3ead65ee88595674c7818dc312e3d65" kindref="member">failure_message</ref>(std::function&lt;std::string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>&amp;e)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref><sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"></highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" kindref="member">exit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>&amp;e,<sp/>std::ostream<sp/>&amp;out<sp/>=<sp/>std::cout,<sp/>std::ostream<sp/>&amp;err<sp/>=<sp/>std::cerr)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight></codeline>
<codeline lineno="6379"></codeline>
<codeline lineno="6381" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae05f185842264e39e18609bf0892c24e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae05f185842264e39e18609bf0892c24e" kindref="member">count</ref>(std::string<sp/>option_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" kindref="member">get_option</ref>(option_name)-&gt;count();<sp/>}</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"></highlight></codeline>
<codeline lineno="6385" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::vector&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"></highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*)&gt;<sp/>&amp;filter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"></highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*)&gt;<sp/>&amp;filter);</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"></highlight></codeline>
<codeline lineno="6396" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91e12fbe8e73dacf3f07fa3e0336ef5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91e12fbe8e73dacf3f07fa3e0336ef5" kindref="member">got_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>subcom<sp/>needed<sp/>to<sp/>verify<sp/>that<sp/>this<sp/>was<sp/>a<sp/>real<sp/>subcommand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(subcom)-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"></highlight></codeline>
<codeline lineno="6402" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4366841156555cabcc744672edcc4217" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4366841156555cabcc744672edcc4217" kindref="member">got_subcommand</ref>(std::string<sp/>subcommand_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(subcommand_name)-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"></highlight></codeline>
<codeline lineno="6407" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa2b9497984b47074bf1908867a8bb22e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa2b9497984b47074bf1908867a8bb22e" kindref="member">excludes</ref>(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>.insert(opt);</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"></highlight></codeline>
<codeline lineno="6416" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a584154000428c699513a8d5fcd8d06f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a584154000428c699513a8d5fcd8d06f8" kindref="member">excludes</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;cannot<sp/>self<sp/>reference<sp/>in<sp/>needs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>.insert(app);</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subcommand<sp/>exclusion<sp/>should<sp/>be<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res.second)<sp/>{</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>.insert(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*needs(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>.insert(opt);</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref><sp/>*needs(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionNotFound(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>OptionNotFound(</highlight><highlight class="stringliteral">&quot;cannot<sp/>self<sp/>reference<sp/>in<sp/>needs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>.insert(app);</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" kindref="member">remove_excludes</ref>(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" kindref="member">remove_excludes</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref><sp/>*app);</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" kindref="member">remove_needs</ref>(Option<sp/>*opt);</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" kindref="member">remove_needs</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref><sp/>*app);</highlight></codeline>
<codeline lineno="6464"></codeline>
<codeline lineno="6466" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a30b11d4452413990fba2ec8fc0172efc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a30b11d4452413990fba2ec8fc0172efc" kindref="member">footer</ref>(std::string<sp/>footer_string)<sp/>{</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref><sp/>=<sp/>std::move(footer_string);</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6471" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d1bcef92a847020b411b2585067dd16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d1bcef92a847020b411b2585067dd16" kindref="member">footer</ref>(std::function&lt;std::string()&gt;<sp/>footer_function)<sp/>{</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" kindref="member">footer_callback_</ref><sp/>=<sp/>std::move(footer_function);</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6477" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae4e8a61c46c7b9a47fb7442f93e4c2ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae4e8a61c46c7b9a47fb7442f93e4c2ab" kindref="member">config_to_str</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_also<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_description<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>-&gt;to_config(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>default_also,<sp/>write_description,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" kindref="member">help</ref>(std::string<sp/>prev<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>AppFormatMode<sp/>mode<sp/>=<sp/>AppFormatMode::Normal)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"></highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" kindref="member">version</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6490"></codeline>
<codeline lineno="6492" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af26c608fed12cfaeee0a6e2465ac1035" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::shared_ptr&lt;FormatterBase&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af26c608fed12cfaeee0a6e2465ac1035" kindref="member">get_formatter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"></highlight></codeline>
<codeline lineno="6495" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac5c01ff9b053f1e7a8501c01cf056ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::shared_ptr&lt;Config&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac5c01ff9b053f1e7a8501c01cf056ba7" kindref="member">get_config_formatter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight></codeline>
<codeline lineno="6498" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a979d7f4c7407afe7be9aa08d7a34662b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::shared_ptr&lt;ConfigBase&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a979d7f4c7407afe7be9aa08d7a34662b" kindref="member">get_config_formatter_base</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>safer<sp/>as<sp/>a<sp/>dynamic_cast<sp/>if<sp/>we<sp/>have<sp/>RTTI,<sp/>as<sp/>Config<sp/>-&gt;<sp/>ConfigBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6500"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CLI11_USE_STATIC_RTTI<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::dynamic_pointer_cast&lt;ConfigBase&gt;(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>);</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::static_pointer_cast&lt;ConfigBase&gt;(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>);</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight></codeline>
<codeline lineno="6508" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" kindref="member">get_description</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" kindref="member">description_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"></highlight></codeline>
<codeline lineno="6511" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab81b4e3cdef7552b3f7257b0ddf0ef71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab81b4e3cdef7552b3f7257b0ddf0ef71" kindref="member">description</ref>(std::string<sp/>app_description)<sp/>{</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae841a0f62292d2d5f1a1747b0ef8f9fc" kindref="member">description_</ref><sp/>=<sp/>std::move(app_description);</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*)&gt;<sp/>filter<sp/>=<sp/>{})<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"></highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Option<sp/>*)&gt;<sp/>filter<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"></highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(std::string<sp/>option_name)<sp/>noexcept;</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"></highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(std::string<sp/>option_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept;</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" kindref="member">get_option</ref>(std::string<sp/>option_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(option_name);</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(option_name);</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a478eee852d6be1b41a3d996bd6e4b72c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a478eee852d6be1b41a3d996bd6e4b72c" kindref="member">get_option</ref>(std::string<sp/>option_name)<sp/>{</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(option_name);</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(option_name);</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"></highlight></codeline>
<codeline lineno="6547" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a65bbcc369b1dce94207058aec8fc147b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a65bbcc369b1dce94207058aec8fc147b" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" kindref="member">get_option</ref>(option_name);<sp/>}</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6550" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7a6d5ba67168a1d4928482e90679f4d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7a6d5ba67168a1d4928482e90679f4d5" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*option_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39291b0b7cebec11a79c9379c39c2475" kindref="member">get_option</ref>(option_name);<sp/>}</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"></highlight></codeline>
<codeline lineno="6553" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8b541e6f3cb51a57d01b59d700a465e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8b541e6f3cb51a57d01b59d700a465e1" kindref="member">get_ignore_case</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"></highlight></codeline>
<codeline lineno="6556" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3d0bed939c8c3062b440bf5a38df8516" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3d0bed939c8c3062b440bf5a38df8516" kindref="member">get_ignore_underscore</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight></codeline>
<codeline lineno="6559" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a609427ae740364127e3d720d3379dbae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a609427ae740364127e3d720d3379dbae" kindref="member">get_fallthrough</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"></highlight></codeline>
<codeline lineno="6562" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaef9e902d1c898a260c6b3d893e00b55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaef9e902d1c898a260c6b3d893e00b55" kindref="member">get_allow_windows_style_options</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"></highlight></codeline>
<codeline lineno="6565" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0a45b6ebd9b11005cf7e73ba5bf97298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0a45b6ebd9b11005cf7e73ba5bf97298" kindref="member">get_positionals_at_end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"></highlight></codeline>
<codeline lineno="6568" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8a16a63a10270e0fff7d240ed4822cfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8a16a63a10270e0fff7d240ed4822cfd" kindref="member">get_configurable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"></highlight></codeline>
<codeline lineno="6571" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight></codeline>
<codeline lineno="6574" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8da8669cd42e33a2121fb59fb2f0eee5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8da8669cd42e33a2121fb59fb2f0eee5" kindref="member">get_footer</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" kindref="member">footer_callback_</ref>)<sp/>?<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a457a94de6e8f7909f6477e6786490e26" kindref="member">footer_callback_</ref>()<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref>;</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"></highlight></codeline>
<codeline lineno="6579" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" kindref="member">get_require_subcommand_min</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"></highlight></codeline>
<codeline lineno="6582" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afad381247df12373537f6c6d0c008127" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afad381247df12373537f6c6d0c008127" kindref="member">get_require_subcommand_max</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"></highlight></codeline>
<codeline lineno="6585" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82883969eedd7f205421c80ea948396a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82883969eedd7f205421c80ea948396a" kindref="member">get_require_option_min</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"></highlight></codeline>
<codeline lineno="6588" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a077197f834d0a9781992882c7a775a4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a077197f834d0a9781992882c7a775a4b" kindref="member">get_require_option_max</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight></codeline>
<codeline lineno="6591" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad70da29928003f25de5d6737be340db6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad70da29928003f25de5d6737be340db6" kindref="member">get_prefix_command</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"></highlight></codeline>
<codeline lineno="6594" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68255849687b80db424d2f2496a9848d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68255849687b80db424d2f2496a9848d" kindref="member">get_allow_extras</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"></highlight></codeline>
<codeline lineno="6597" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adb854d8a9944e306e11497510854e240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adb854d8a9944e306e11497510854e240" kindref="member">get_required</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04d6b51cee22d95cad88e5d2f6d77f47" kindref="member">required_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight></codeline>
<codeline lineno="6600" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac168a4ba1dd08d74cf9d648170980eb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac168a4ba1dd08d74cf9d648170980eb6" kindref="member">get_disabled</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"></highlight></codeline>
<codeline lineno="6603" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae8b9aa3494d0012ea516d5df28132437" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae8b9aa3494d0012ea516d5df28132437" kindref="member">get_silent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a19d7c83ea47f616b387ed458d472fb53" kindref="member">silent_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"></highlight></codeline>
<codeline lineno="6606" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a37d471ba32260b027335e087c478e3ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a37d471ba32260b027335e087c478e3ee" kindref="member">get_immediate_callback</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"></highlight></codeline>
<codeline lineno="6609" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2abe129d2c30054dba9f4b6054ce9ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2abe129d2c30054dba9f4b6054ce9ade" kindref="member">get_disabled_by_default</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::disabled);<sp/>}</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"></highlight></codeline>
<codeline lineno="6612" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af1227eccfef8b760598df067460e325b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af1227eccfef8b760598df067460e325b" kindref="member">get_enabled_by_default</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::enabled);<sp/>}</highlight></codeline>
<codeline lineno="6614" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a593613ff40dd5c55e1174c38b3d0586c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a593613ff40dd5c55e1174c38b3d0586c" kindref="member">get_validate_positionals</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6616" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a45542f67bcb5a84a7cb3f6000c43ca74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a45542f67bcb5a84a7cb3f6000c43ca74" kindref="member">get_validate_optional_arguments</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"></highlight></codeline>
<codeline lineno="6619" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>config_extras_mode<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" kindref="member">get_allow_config_extras</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"></highlight></codeline>
<codeline lineno="6622" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" kindref="member">get_help_ptr</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"></highlight></codeline>
<codeline lineno="6625" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa9248d418370c61bf9442db2f73aa5a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa9248d418370c61bf9442db2f73aa5a9" kindref="member">get_help_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight></codeline>
<codeline lineno="6628" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" kindref="member">get_help_all_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"></highlight></codeline>
<codeline lineno="6631" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39c66f4dfbe352d606965941f19c750e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39c66f4dfbe352d606965941f19c750e" kindref="member">get_config_ptr</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"></highlight></codeline>
<codeline lineno="6634" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5021ac2170d25f2d9192cf7c1b19600b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5021ac2170d25f2d9192cf7c1b19600b" kindref="member">get_config_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"></highlight></codeline>
<codeline lineno="6637" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a167974308bb56d52c33bbb358eca434d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a167974308bb56d52c33bbb358eca434d" kindref="member">get_version_ptr</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"></highlight></codeline>
<codeline lineno="6640" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa466134b451b3f5a8c071b498d740153" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa466134b451b3f5a8c071b498d740153" kindref="member">get_version_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"></highlight></codeline>
<codeline lineno="6643" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"></highlight></codeline>
<codeline lineno="6646" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a125d7fa604a639e80957f801dc839aed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a125d7fa604a639e80957f801dc839aed" kindref="member">get_parent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"></highlight></codeline>
<codeline lineno="6649" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"></highlight></codeline>
<codeline lineno="6652" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" kindref="member">get_aliases</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"></highlight></codeline>
<codeline lineno="6655" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0429ce7817da4d23222db14febd25850" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0429ce7817da4d23222db14febd25850" kindref="member">clear_aliases</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>.clear();</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_aliases<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"></highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" kindref="member">check_name</ref>(std::string<sp/>name_to_check)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" kindref="member">get_groups</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"></highlight></codeline>
<codeline lineno="6670" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afc3b4b130504111494d844e36cd4140e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Option<sp/>*&gt;<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afc3b4b130504111494d844e36cd4140e" kindref="member">parse_order</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"></highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" kindref="member">remaining</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" kindref="member">remaining_for_passthrough</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" kindref="member">remaining_size</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" kindref="member">_validate</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" kindref="member">_configure</ref>();</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>final_mode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppress_final_callback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" kindref="member">_valid_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>detail::Classifier<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" kindref="member">_recognize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used_subcommands<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"></highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parse<sp/>function<sp/>is<sp/>now<sp/>broken<sp/>into<sp/>several<sp/>parts,<sp/>and<sp/>part<sp/>of<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6706"><highlight class="normal"></highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" kindref="member">_process_config_file</ref>();</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"></highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" kindref="member">_process_env</ref>();</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">_process_callbacks</ref>();</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"></highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" kindref="member">_process_help_flags</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger_help<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger_all_help<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"></highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" kindref="member">_process_requirements</ref>();</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"></highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" kindref="member">_process</ref>();</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"></highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">_process_extras</ref>();</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">_process_extras</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args);</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"></highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">increment_parsed</ref>();</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">_parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args);</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"></highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">_parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;&amp;args);</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"></highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" kindref="member">_parse_stream</ref>(std::istream<sp/>&amp;input);</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"></highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" kindref="member">_parse_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ConfigItem&gt;<sp/>&amp;args);</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"></highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" kindref="member">_parse_single_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref><sp/>&amp;item,<sp/>std::size_t<sp/>level<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"></highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" kindref="member">_parse_single</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;positional_only);</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"></highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" kindref="member">_count_remaining_positionals</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required_only<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"></highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" kindref="member">_has_remaining_positionals</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" kindref="member">_parse_positional</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haltOnSubcommand);</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;subc_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_disabled,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept;</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">_parse_subcommand</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args);</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"></highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">_parse_arg</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/>detail::Classifier<sp/>current_type);</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">_trigger_pre_parse</ref>(std::size_t<sp/>remaining_args);</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>();</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI11_NODISCARD<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;subcom,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;base)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"></highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">_move_to_missing</ref>(detail::Classifier<sp/>val_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;val);</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" kindref="member">_move_option</ref>(Option<sp/>*opt,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app);</highlight></codeline>
<codeline lineno="6800"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CLI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6801"><highlight class="normal"></highlight></codeline>
<codeline lineno="6803" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" kindref="compound">Option_group</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>{</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" kindref="compound">Option_group</ref>(std::string<sp/>group_description,<sp/>std::string<sp/>group_name,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*parent)</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref>(std::move(group_description),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa87fcb3a7a564b563a1f2525e748b8e4" kindref="member">group</ref>(group_name);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>option<sp/>groups<sp/>should<sp/>have<sp/>automatic<sp/>fallthrough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">App::add_option</ref>;</highlight></codeline>
<codeline lineno="6812" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a6d172da921a43338c6f3f34515221699" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a6d172da921a43338c6f3f34515221699" kindref="member">add_option</ref>(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>locate<sp/>the<sp/>specified<sp/>option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" kindref="member">_move_option</ref>(opt,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6820" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a7f564803ccfffdf3f4ee4a187d9e5ab4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a7f564803ccfffdf3f4ee4a187d9e5ab4" kindref="member">add_options</ref>(Option<sp/>*opt)<sp/>{<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a6d172da921a43338c6f3f34515221699" kindref="member">add_option</ref>(opt);<sp/>}</highlight></codeline>
<codeline lineno="6822" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a4aec08d36c26e80f32b068b45c4e8af3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a4aec08d36c26e80f32b068b45c4e8af3" kindref="member">add_options</ref>(Option<sp/>*opt,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a6d172da921a43338c6f3f34515221699" kindref="member">add_option</ref>(opt);</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a7f564803ccfffdf3f4ee4a187d9e5ab4" kindref="member">add_options</ref>(args...);</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">App::add_subcommand</ref>;</highlight></codeline>
<codeline lineno="6828" refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a4457506780f7424788f1c7ea8cc99755" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a4457506780f7424788f1c7ea8cc99755" kindref="member">add_subcommand</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)<sp/>{</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>App_p<sp/>subc<sp/>=<sp/>subcom-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">get_subcommand_ptr</ref>(subcom);</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;get_parent()-&gt;remove_subcommand(subcom);</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group_1a4457506780f7424788f1c7ea8cc99755" kindref="member">add_subcommand</ref>(std::move(subc));</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcom;</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6834"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"></highlight></codeline>
<codeline lineno="6837"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOn(App<sp/>*trigger_app,<sp/>App<sp/>*app_to_enable);</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOn(App<sp/>*trigger_app,<sp/>std::vector&lt;App<sp/>*&gt;<sp/>apps_to_enable);</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"></highlight></codeline>
<codeline lineno="6843"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOff(App<sp/>*trigger_app,<sp/>App<sp/>*app_to_enable);</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"></highlight></codeline>
<codeline lineno="6846"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOff(App<sp/>*trigger_app,<sp/>std::vector&lt;App<sp/>*&gt;<sp/>apps_to_enable);</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"></highlight></codeline>
<codeline lineno="6849"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deprecate_option(Option<sp/>*opt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;replacement<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deprecate_option(App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;replacement<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>app-&gt;get_option(option_name);</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>deprecate_option(opt,<sp/>replacement);</highlight></codeline>
<codeline lineno="6855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight></codeline>
<codeline lineno="6858"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deprecate_option(App<sp/>&amp;app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;replacement<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>app.get_option(option_name);</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/>deprecate_option(opt,<sp/>replacement);</highlight></codeline>
<codeline lineno="6861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"></highlight></codeline>
<codeline lineno="6864"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>*app,<sp/>Option<sp/>*opt);</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"></highlight></codeline>
<codeline lineno="6867"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>&amp;app,<sp/>Option<sp/>*opt);</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"></highlight></codeline>
<codeline lineno="6870"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name);</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"></highlight></codeline>
<codeline lineno="6873"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>&amp;app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name);</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"></highlight></codeline>
<codeline lineno="6875"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">FailureMessage<sp/>{</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"></highlight></codeline>
<codeline lineno="6878"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>simple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e);</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"></highlight></codeline>
<codeline lineno="6881"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>help(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e);</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"></highlight></codeline>
<codeline lineno="6883"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>FailureMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"></highlight></codeline>
<codeline lineno="6885"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="6887" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend" kindref="compound">AppFriend</ref><sp/>{</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLI11_CPP14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a8c97859e25d9f7a3f8778418a15ab511" kindref="member">parse_arg</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">_parse_arg</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a4f44c4eca4552a2aa1bc69935c85703d" kindref="member">parse_subcommand</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">_parse_subcommand</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6902" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a8c97859e25d9f7a3f8778418a15ab511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a8c97859e25d9f7a3f8778418a15ab511" kindref="member">parse_arg</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>Args<sp/>&amp;&amp;...args)<sp/>-&gt;</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::result_of&lt;decltype<sp/>(&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">App::_parse_arg</ref>)(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>,<sp/>Args...)&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">_parse_arg</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6909" refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a4f44c4eca4552a2aa1bc69935c85703d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a4f44c4eca4552a2aa1bc69935c85703d" kindref="member">parse_subcommand</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>Args<sp/>&amp;&amp;...args)<sp/>-&gt;</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::result_of&lt;decltype<sp/>(&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">App::_parse_subcommand</ref>)(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>,<sp/>Args...)&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">_parse_subcommand</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_app_friend_1a18dffad8c7110ca26398b6637e04a8cb" kindref="member">get_fallthrough_parent</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>();<sp/>}</highlight></codeline>
<codeline lineno="6916"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6917"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"></highlight></codeline>
<codeline lineno="6919"><highlight class="normal"></highlight></codeline>
<codeline lineno="6920"><highlight class="normal"></highlight></codeline>
<codeline lineno="6921"><highlight class="normal"></highlight></codeline>
<codeline lineno="6922" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App::App</ref>(std::string<sp/>app_description,<sp/>std::string<sp/>app_name,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*parent)</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>name_(std::move(app_name)),<sp/>description_(std::move(app_description)),<sp/>parent_(parent)<sp/>{</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inherit<sp/>if<sp/>not<sp/>from<sp/>a<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" kindref="member">set_help_flag</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>-&gt;get_description());</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" kindref="member">set_help_all_flag</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>-&gt;get_description());</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"></highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" kindref="member">option_defaults_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" kindref="member">option_defaults_</ref>;</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INHERITABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref>;</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref>;</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref>;</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>;</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>;</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>;</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>;</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref>;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref>;</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref>;</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>;</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref>;</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e4ef2b6a6b637530cebef95956e174b" kindref="member">group_</ref>;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab866bfa29a8ff26b70d3cb329e21f318" kindref="member">footer_</ref>;</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref>;</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>;</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref>;</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"></highlight></codeline>
<codeline lineno="6955" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8d1f0de783c1d733da0520cad084a80" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8d1f0de783c1d733da0520cad084a80" kindref="member">App::name</ref>(std::string<sp/>app_name)<sp/>{</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oname<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>app_name;</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;res<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>());</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!res.empty())<sp/>{</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>oname;</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(app_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>conflicts<sp/>with<sp/>existing<sp/>subcommand<sp/>names&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>app_name;</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"></highlight></codeline>
<codeline lineno="6972" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6404244a5f76ae7c407b1c29f6cc7fd7" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6404244a5f76ae7c407b1c29f6cc7fd7" kindref="member">App::alias</ref>(std::string<sp/>app_name)<sp/>{</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app_name.empty()<sp/>||<sp/>!detail::valid_alias_name_string(app_name))<sp/>{</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;Aliases<sp/>may<sp/>not<sp/>be<sp/>empty<sp/>or<sp/>contain<sp/>newlines<sp/>or<sp/>null<sp/>characters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>.push_back(app_name);</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;res<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>());</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!res.empty())<sp/>{</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>.pop_back();</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;alias<sp/>already<sp/>matches<sp/>an<sp/>existing<sp/>subcommand:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>app_name));</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>.push_back(app_name);</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"></highlight></codeline>
<codeline lineno="6990" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adfe1830c87c5e05a68bc4f97a195b674" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adfe1830c87c5e05a68bc4f97a195b674" kindref="member">App::immediate_callback</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>immediate)<sp/>{</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref><sp/>=<sp/>immediate;</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref><sp/>&amp;&amp;<sp/>!(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stage_load_rules_8h_1a507a6dfc9b510edf13d4ad9c4f3fa343" kindref="member">std::swap</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>);</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref>)<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stage_load_rules_8h_1a507a6dfc9b510edf13d4ad9c4f3fa343" kindref="member">std::swap</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>);</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"></highlight></codeline>
<codeline lineno="7002" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a228cf7aa0656d0046b3cb352de935951" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a228cf7aa0656d0046b3cb352de935951" kindref="member">App::ignore_case</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&amp;&amp;<sp/>!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;match<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*p);</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!match.empty())<sp/>{</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>throwing<sp/>so<sp/>need<sp/>to<sp/>be<sp/>exception<sp/>invariant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;ignore<sp/>case<sp/>would<sp/>cause<sp/>subcommand<sp/>name<sp/>conflicts:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>match);</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"></highlight></codeline>
<codeline lineno="7016" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2533a70e2fdb56fb72b0230583f3ea0d" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2533a70e2fdb56fb72b0230583f3ea0d" kindref="member">App::ignore_underscore</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&amp;&amp;<sp/>!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;match<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*p);</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!match.empty())<sp/>{</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;ignore<sp/>underscore<sp/>would<sp/>cause<sp/>subcommand<sp/>name<sp/>conflicts:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>match);</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"></highlight></codeline>
<codeline lineno="7030" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">App::add_option</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback_t<sp/>option_callback,</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>option_description,</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaulted,</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;std::string()&gt;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>myopt{option_name,<sp/>option_description,<sp/>option_callback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[&amp;myopt](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*v<sp/>==<sp/>myopt;<sp/>})<sp/>==</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.emplace_back();</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option_p<sp/>&amp;option<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.back();</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Option(option_name,<sp/>option_description,<sp/>option_callback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>default<sp/>string<sp/>capture<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option-&gt;default_function(func);</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"></highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>compatibility<sp/>with<sp/>CLI11<sp/>1.7<sp/>and<sp/>before,<sp/>capture<sp/>the<sp/>default<sp/>string<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(defaulted)</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option-&gt;capture_default_str();</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"></highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transfer<sp/>defaults<sp/>to<sp/>the<sp/>new<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0cdda02200fa3f41541bd3e856a38e6" kindref="member">option_defaults_</ref>.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" kindref="member">copy_to</ref>(option.get());</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"></highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>bother<sp/>to<sp/>capture<sp/>if<sp/>we<sp/>already<sp/>did</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!defaulted<sp/>&amp;&amp;<sp/>option-&gt;get_always_capture_default())</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option-&gt;capture_default_str();</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>option.get();</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>know<sp/>something<sp/>matches<sp/>now<sp/>find<sp/>what<sp/>it<sp/>is<sp/>so<sp/>we<sp/>can<sp/>produce<sp/>more<sp/>error<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;matchname<sp/>=<sp/>opt-&gt;matching_name(myopt);</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!matchname.empty())<sp/>{</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;added<sp/>option<sp/>matched<sp/>existing<sp/>option<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>matchname));</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>line<sp/>should<sp/>not<sp/>be<sp/>reached<sp/>the<sp/>above<sp/>loop<sp/>should<sp/>trigger<sp/>the<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;added<sp/>option<sp/>matched<sp/>existing<sp/>option<sp/>name&quot;</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"></highlight></codeline>
<codeline lineno="7070" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39757e60af24cf033408286be5041877" kindref="member">App::set_help_flag</ref>(std::string<sp/>flag_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_description)<sp/>{</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>flag_description<sp/>by<sp/>const<sp/>reference<sp/>otherwise<sp/>add_flag<sp/>tries<sp/>to<sp/>assign<sp/>to<sp/>help_description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>);</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>name<sp/>will<sp/>simply<sp/>remove<sp/>the<sp/>help<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!flag_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" kindref="member">add_flag</ref>(flag_name,<sp/>help_description);</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>-&gt;configurable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref>;</highlight></codeline>
<codeline lineno="7084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"></highlight></codeline>
<codeline lineno="7086" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a245813556d41e9a1dc56671b9898860c" kindref="member">App::set_help_all_flag</ref>(std::string<sp/>help_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_description)<sp/>{</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>flag_description<sp/>by<sp/>const<sp/>reference<sp/>otherwise<sp/>add_flag<sp/>tries<sp/>to<sp/>assign<sp/>to<sp/>flag_description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>);</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"></highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>name<sp/>will<sp/>simply<sp/>remove<sp/>the<sp/>help<sp/>all<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!help_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27f3db0f387329400c028a190839ad4a" kindref="member">add_flag</ref>(help_name,<sp/>help_description);</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>-&gt;configurable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>;</highlight></codeline>
<codeline lineno="7100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*</highlight></codeline>
<codeline lineno="7103" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" kindref="member">App::set_version_flag</ref>(std::string<sp/>flag_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;versionString,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;version_help)<sp/>{</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>flag_description<sp/>by<sp/>const<sp/>reference<sp/>otherwise<sp/>add_flag<sp/>tries<sp/>to<sp/>assign<sp/>to<sp/>version_description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>);</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"></highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>name<sp/>will<sp/>simply<sp/>remove<sp/>the<sp/>version<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!flag_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" kindref="member">add_flag_callback</ref>(</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_name,<sp/>[versionString]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CLI::CallForVersion</ref>(versionString,<sp/>0));<sp/>},<sp/>version_help);</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;configurable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"></highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>;</highlight></codeline>
<codeline lineno="7118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"></highlight></codeline>
<codeline lineno="7120"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*</highlight></codeline>
<codeline lineno="7121" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a27318e507ec2d03076797ea771c35b0b" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae80f4397b58120b0ea8a2bb3a7c82c22" kindref="member">App::set_version_flag</ref>(std::string<sp/>flag_name,<sp/>std::function&lt;std::string()&gt;<sp/>vfunc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;version_help)<sp/>{</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>);</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"></highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>name<sp/>will<sp/>simply<sp/>remove<sp/>the<sp/>version<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!flag_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" kindref="member">add_flag_callback</ref>(</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_name,<sp/>[vfunc]()<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CLI::CallForVersion</ref>(vfunc(),<sp/>0));<sp/>},<sp/>version_help);</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;configurable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"></highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>;</highlight></codeline>
<codeline lineno="7135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"></highlight></codeline>
<codeline lineno="7137"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*App::_add_flag_internal(std::string<sp/>flag_name,<sp/>CLI::callback_t<sp/>fun,<sp/>std::string<sp/>flag_description)<sp/>{</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*opt<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::has_default_flag_values(flag_name))<sp/>{</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>default<sp/>values<sp/>and<sp/>if<sp/>it<sp/>has<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>flag_defaults<sp/>=<sp/>detail::get_default_flag_values(flag_name);</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_default_flag_values(flag_name);</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(std::move(flag_name),<sp/>std::move(fun),<sp/>std::move(flag_description),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;fname<sp/>:<sp/>flag_defaults)</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;fnames_.push_back(fname.first);</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;default_flag_values_<sp/>=<sp/>std::move(flag_defaults);</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(std::move(flag_name),<sp/>std::move(fun),<sp/>std::move(flag_description),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flags<sp/>cannot<sp/>have<sp/>positional<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_positional())<sp/>{</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_name<sp/>=<sp/>opt-&gt;get_name(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(opt);</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>IncorrectConstruction::PositionalFlag(pos_name);</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;multi_option_policy(MultiOptionPolicy::TakeLast);</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;expected(0);</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;required(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="7160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"></highlight></codeline>
<codeline lineno="7162" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c060e3677a1b03d4103b289f83035d0" kindref="member">App::add_flag_callback</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description)<sp/>{</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"></highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI::callback_t<sp/>fun<sp/>=<sp/>[</highlight><highlight class="keyword">function</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CLI::detail::lexical_cast(res[0],<sp/>trigger);</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result<sp/>&amp;&amp;<sp/>trigger)<sp/>{</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_flag_internal(flag_name,<sp/>std::move(fun),<sp/>std::move(flag_description));</highlight></codeline>
<codeline lineno="7175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"></highlight></codeline>
<codeline lineno="7177"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*</highlight></codeline>
<codeline lineno="7178" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a46ff88167ab0eddf68a5142fe2d1b2" kindref="member">App::add_flag_function</ref>(std::string<sp/>flag_name,</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::int64_t)&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><sp/></highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>flag_description)<sp/>{</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI::callback_t<sp/>fun<sp/>=<sp/>[</highlight><highlight class="keyword">function</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLI::results_t<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::int64_t<sp/>flag_count{0};</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLI::detail::lexical_cast(res[0],<sp/>flag_count);</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(flag_count);</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_add_flag_internal(flag_name,<sp/>std::move(fun),<sp/>std::move(flag_description))</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;multi_option_policy(MultiOptionPolicy::Sum);</highlight></codeline>
<codeline lineno="7190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"></highlight></codeline>
<codeline lineno="7192" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a12ef5b8d5509c0bdf6d488f649427d42" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a12ef5b8d5509c0bdf6d488f649427d42" kindref="member">App::set_config</ref>(std::string<sp/>option_name,</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>default_filename,</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;help_message,</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>config_required)<sp/>{</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"></highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>existing<sp/>config<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">remove_option</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>);</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>remove<sp/>the<sp/>config_ptr<sp/>completely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"></highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>add<sp/>config<sp/>if<sp/>option<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!option_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref><sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa565c5e6d3a03d4ab5cb56c0d26ca7f5" kindref="member">add_option</ref>(option_name,<sp/>help_message);</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config_required)<sp/>{</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;required();</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!default_filename.empty())<sp/>{</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;default_str(std::move(default_filename));</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;configurable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"></highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>;</highlight></codeline>
<codeline lineno="7216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"></highlight></codeline>
<codeline lineno="7218" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a40c62da0dc52e435057afe5ac639dde4" kindref="member">App::remove_option</ref>(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>no<sp/>links<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Option_p<sp/>&amp;op<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;remove_needs(opt);</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;remove_excludes(opt);</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"></highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>==<sp/>opt)</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>==<sp/>opt)</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"></highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[opt](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.get()<sp/>==<sp/>opt;<sp/>});</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>!=<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight></codeline>
<codeline lineno="7239" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">App::add_subcommand</ref>(std::string<sp/>subcommand_name,<sp/>std::string<sp/>subcommand_description)<sp/>{</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subcommand_name.empty()<sp/>&amp;&amp;<sp/>!detail::valid_name_string(subcommand_name))<sp/>{</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::valid_first_char(subcommand_name[0]))<sp/>{</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;Subcommand<sp/>name<sp/>starts<sp/>with<sp/>invalid<sp/>character,<sp/>&apos;!&apos;<sp/>and<sp/>&apos;-&apos;<sp/>are<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>subcommand_name)<sp/>{</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::valid_later_char(c))<sp/>{</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Subcommand<sp/>name<sp/>contains<sp/>invalid<sp/>character<sp/>(&apos;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>c<sp/>+</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;),<sp/>all<sp/>characters<sp/>are<sp/>allowed<sp/>except&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;=&apos;,&apos;:&apos;,&apos;{&apos;,&apos;}&apos;,<sp/>and<sp/>&apos;<sp/>&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/>CLI::App_p<sp/>subcom<sp/>=<sp/>std::shared_ptr&lt;App&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a26c1b268dec84793ece2318402b05577" kindref="member">App</ref>(std::move(subcommand_description),<sp/>subcommand_name,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">add_subcommand</ref>(std::move(subcom));</highlight></codeline>
<codeline lineno="7254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"></highlight></codeline>
<codeline lineno="7256" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2e086b84f545436d7f570eab581c27ba" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad3d758e8f75500fdb3647e2823a9a0e4" kindref="member">App::add_subcommand</ref>(CLI::App_p<sp/>subcom)<sp/>{</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subcom)</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" kindref="compound">IncorrectConstruction</ref>(</highlight><highlight class="stringliteral">&quot;passed<sp/>App<sp/>is<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*ckapp<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty()<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mstrg<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*subcom,<sp/>*ckapp);</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!mstrg.empty())<sp/>{</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;subcommand<sp/>name<sp/>or<sp/>alias<sp/>matches<sp/>existing<sp/>subcommand:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>mstrg));</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/>subcom-&gt;parent_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.push_back(std::move(subcom));</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.back().get();</highlight></codeline>
<codeline lineno="7267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"></highlight></codeline>
<codeline lineno="7269" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8942d46c22ff948571addc12b19046c0" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8942d46c22ff948571addc12b19046c0" kindref="member">App::remove_subcommand</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)<sp/>{</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>no<sp/>links<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;remove_excludes(subcom);</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;remove_needs(subcom);</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"></highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find_if(</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>[subcom](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.get()<sp/>==<sp/>subcom;<sp/>});</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>!=<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"></highlight></codeline>
<codeline lineno="7285" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">App::get_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;subcomptr<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcomptr.get()<sp/>==<sp/>subcom)</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcomptr.get();</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(subcom-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>());</highlight></codeline>
<codeline lineno="7292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"></highlight></codeline>
<codeline lineno="7294" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aaecb71029b5eb048714ac9b628a9f110" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">App::get_subcommand</ref>(std::string<sp/>subcom)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*subc<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(subcom,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(subcom);</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subc;</highlight></codeline>
<codeline lineno="7299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"></highlight></codeline>
<codeline lineno="7301" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8146b29b69f5f615f2a3b36b2c84f00d" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">App::get_subcommand</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uindex<sp/>=<sp/>static_cast&lt;unsigned&gt;(index);</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uindex<sp/>&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.size())</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>[uindex].get();</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(std::to_string(index));</highlight></codeline>
<codeline lineno="7308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight></codeline>
<codeline lineno="7310" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">App::get_subcommand_ptr</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;nullptr<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;subcomptr<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcomptr.get()<sp/>==<sp/>subcom)</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcomptr;</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(subcom-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>());</highlight></codeline>
<codeline lineno="7317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"></highlight></codeline>
<codeline lineno="7319" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff814e6a6a22ec8373cbb6c51370431f" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">App::get_subcommand_ptr</ref>(std::string<sp/>subcom)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;subcomptr<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcomptr-&gt;check_name(subcom))</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcomptr;</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(subcom);</highlight></codeline>
<codeline lineno="7324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"></highlight></codeline>
<codeline lineno="7326" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4c32b388e78dce87f7a2ec83dbdbf0bc" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>CLI::App_p<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7c5e89f228fbef9f250e9ab1701a0580" kindref="member">App::get_subcommand_ptr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uindex<sp/>=<sp/>static_cast&lt;unsigned&gt;(index);</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uindex<sp/>&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.size())</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>[uindex];</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(std::to_string(index));</highlight></codeline>
<codeline lineno="7333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"></highlight></codeline>
<codeline lineno="7335" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa64469441e8b15077a781710a1e98871" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">CLI::App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa64469441e8b15077a781710a1e98871" kindref="member">App::get_option_group</ref>(std::string<sp/>group_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;app<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;name_.empty()<sp/>&amp;&amp;<sp/>app-&gt;group_<sp/>==<sp/>group_name)<sp/>{</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app.get();</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(group_name);</highlight></codeline>
<codeline lineno="7342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"></highlight></codeline>
<codeline lineno="7344" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" kindref="member">App::count_all</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>cnt{0};</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>+=<sp/>opt-&gt;count();</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>+=<sp/>sub-&gt;count_all();</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>named<sp/>subcommands<sp/>add<sp/>the<sp/>number<sp/>of<sp/>times<sp/>the<sp/>subcommand<sp/>was<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>+=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref>;</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="7356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"></highlight></codeline>
<codeline lineno="7358" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">App::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"></highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" kindref="member">pre_parse_called_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"></highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>.clear();</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.clear();</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;clear();</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;clear();</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"></highlight></codeline>
<codeline lineno="7373" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">App::parse</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*argv)<sp/>{</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>name<sp/>is<sp/>not<sp/>set,<sp/>read<sp/>from<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty()<sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7379"><highlight class="normal"></highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args;</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/>args.reserve(static_cast&lt;std::size_t&gt;(argc)<sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>static_cast&lt;std::size_t&gt;(argc)<sp/>-<sp/>1U;<sp/>i<sp/>&gt;<sp/>0U;<sp/>--i)</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.emplace_back(argv[i]);</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(std::move(args));</highlight></codeline>
<codeline lineno="7385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"></highlight></codeline>
<codeline lineno="7387" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa8f967543ae089d679078517ef937bb2" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">App::parse</ref>(std::string<sp/>commandline,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>program_name_included)<sp/>{</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"></highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(program_name_included)<sp/>{</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nstr<sp/>=<sp/>detail::split_program_name(commandline);</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty())<sp/>||<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91b68390027e0f2bfcc15beba2204f5" kindref="member">has_automatic_name_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref><sp/>=<sp/>nstr.first;</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandline<sp/>=<sp/>std::move(nstr.second);</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(commandline);</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>section<sp/>of<sp/>code<sp/>is<sp/>to<sp/>deal<sp/>with<sp/>quoted<sp/>arguments<sp/>after<sp/>an<sp/>&apos;=&apos;<sp/>or<sp/>&apos;:&apos;<sp/>for<sp/>windows<sp/>like<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!commandline.empty())<sp/>{</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandline<sp/>=<sp/>detail::find_and_modify(commandline,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>detail::escape_detect);</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref>)</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandline<sp/>=<sp/>detail::find_and_modify(commandline,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/>detail::escape_detect);</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"></highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args<sp/>=<sp/>detail::split_up(std::move(commandline));</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>empty<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/>args.erase(std::remove(args.begin(),<sp/>args.end(),<sp/>std::string{}),<sp/>args.end());</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse(args.begin(),<sp/>args.end());</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">parse</ref>(std::move(args));</highlight></codeline>
<codeline lineno="7412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"></highlight></codeline>
<codeline lineno="7414" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adde7905bad5a6390e40f437d9796dd77" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">App::parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>if<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parsed_<sp/>is<sp/>incremented<sp/>in<sp/>commands/subcommands,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>placed<sp/>here<sp/>to<sp/>make<sp/>sure<sp/>this<sp/>is<sp/>cleared<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>parse<sp/>after<sp/>an<sp/>error<sp/>is<sp/>thrown,<sp/>even<sp/>by<sp/>_validate<sp/>or<sp/>_configure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" kindref="member">_validate</ref>();</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" kindref="member">_configure</ref>();</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>parent<sp/>as<sp/>nullptr<sp/>as<sp/>this<sp/>object<sp/>should<sp/>be<sp/>the<sp/>top<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"></highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">_parse</ref>(args);</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>();</highlight></codeline>
<codeline lineno="7431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"></highlight></codeline>
<codeline lineno="7433" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a950cfe0525e2b72cd0e7d86d0f961f39" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af12a97748e5ca94558fe614821ee0b23" kindref="member">App::parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>if<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"></highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parsed_<sp/>is<sp/>incremented<sp/>in<sp/>commands/subcommands,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>placed<sp/>here<sp/>to<sp/>make<sp/>sure<sp/>this<sp/>is<sp/>cleared<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>parse<sp/>after<sp/>an<sp/>error<sp/>is<sp/>thrown,<sp/>even<sp/>by<sp/>_validate<sp/>or<sp/>_configure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" kindref="member">_validate</ref>();</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" kindref="member">_configure</ref>();</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>parent<sp/>as<sp/>nullptr<sp/>as<sp/>this<sp/>object<sp/>should<sp/>be<sp/>the<sp/>top<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"></highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">_parse</ref>(std::move(args));</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>();</highlight></codeline>
<codeline lineno="7450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"></highlight></codeline>
<codeline lineno="7452"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>App::parse_from_stream(std::istream<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" kindref="member">_validate</ref>();</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" kindref="member">_configure</ref>();</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>parent<sp/>as<sp/>nullptr<sp/>as<sp/>this<sp/>object<sp/>should<sp/>be<sp/>the<sp/>top<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"></highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" kindref="member">_parse_stream</ref>(input);</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>();</highlight></codeline>
<codeline lineno="7461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"></highlight></codeline>
<codeline lineno="7463" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82f22ce06106fb4d8e7b0c6e4859a0a6" kindref="member">App::exit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" kindref="compound">Error</ref><sp/>&amp;e,<sp/>std::ostream<sp/>&amp;out,<sp/>std::ostream<sp/>&amp;err)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"></highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.get_name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;RuntimeError&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.get_exit_code();</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.get_name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CallForHelp&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" kindref="member">help</ref>();</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.get_exit_code();</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"></highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.get_name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CallForAllHelp&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" kindref="member">help</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>AppFormatMode::All);</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.get_exit_code();</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"></highlight></codeline>
<codeline lineno="7479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.get_name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CallForVersion&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.get_exit_code();</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.get_exit_code()<sp/>!=<sp/>static_cast&lt;int&gt;(ExitCodes::Success))<sp/>{</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref>)</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab82e3a6fa3babcecc796dc10ade22885" kindref="member">failure_message_</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e)<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.get_exit_code();</highlight></codeline>
<codeline lineno="7490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"></highlight></codeline>
<codeline lineno="7492" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b8aa435a7824989959657c95a07ecfd" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;const<sp/>App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">App::get_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*)&gt;<sp/>&amp;filter)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>App<sp/>*&gt;<sp/>subcomms(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.size());</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>std::begin(subcomms),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.get();<sp/>});</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"></highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter)<sp/>{</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcomms.erase(std::remove_if(std::begin(subcomms),</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(subcomms),</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;filter](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!filter(app);<sp/>}),</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(subcomms));</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"></highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcomms;</highlight></codeline>
<codeline lineno="7505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"></highlight></codeline>
<codeline lineno="7507" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5e4369ae7837b55b7625514e3d8d6946" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;App<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">App::get_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*)&gt;<sp/>&amp;filter)<sp/>{</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;App<sp/>*&gt;<sp/>subcomms(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.size());</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>),<sp/>std::begin(subcomms),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.get();<sp/>});</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"></highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter)<sp/>{</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcomms.erase(</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if(std::begin(subcomms),<sp/>std::end(subcomms),<sp/>[&amp;filter](<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!filter(app);<sp/>}),</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(subcomms));</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"></highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcomms;</highlight></codeline>
<codeline lineno="7519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"></highlight></codeline>
<codeline lineno="7521" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" kindref="member">App::remove_excludes</ref>(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>),<sp/>opt);</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"></highlight></codeline>
<codeline lineno="7530" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8808949155ba78731522d5c45e7f8916" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a83b03f774350787f6ecc34bdff8e3313" kindref="member">App::remove_excludes</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>),<sp/>app);</highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*other_app<sp/>=<sp/>*iterator;</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/>other_app-&gt;remove_excludes(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"></highlight></codeline>
<codeline lineno="7541" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" kindref="member">App::remove_needs</ref>(Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>),<sp/>opt);</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"></highlight></codeline>
<codeline lineno="7550" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aec0be3a58d09023dbd0da58e8e5d1fe9" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a0cb2a23bd82af1567a372dbe23c27614" kindref="member">App::remove_needs</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>std::find(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>),<sp/>app);</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>==<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"></highlight></codeline>
<codeline lineno="7559" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa58eae8434401be8f41fb06cf725f77d" kindref="member">App::help</ref>(std::string<sp/>prev,<sp/>AppFormatMode<sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prev.empty())</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>();</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>();</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"></highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegate<sp/>to<sp/>subcommand<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selected_subcommands<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>();</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!selected_subcommands.empty())<sp/>{</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selected_subcommands.at(0)-&gt;help(prev,<sp/>mode);</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab0de05f3207d74576fc344caaab40dd0" kindref="member">formatter_</ref>-&gt;make_help(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>prev,<sp/>mode);</highlight></codeline>
<codeline lineno="7571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"></highlight></codeline>
<codeline lineno="7573" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae6f904e2fbbd46468e6b0c61388fac6c" kindref="member">App::version</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>val;</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;results();</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;clear();</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;add_result(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;run_callback();</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" kindref="compound">CLI::CallForVersion</ref><sp/>&amp;cfv)<sp/>{</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>cfv.what();</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;clear();</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad1a062c606d809ecd1a16d530d7f181a" kindref="member">version_ptr_</ref>-&gt;add_result(rv);</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="7588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"></highlight></codeline>
<codeline lineno="7590" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">App::get_options</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*)&gt;<sp/>filter)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>options(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.size());</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::begin(options),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val.get();<sp/>});</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"></highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter)<sp/>{</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.erase(std::remove_if(std::begin(options),</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(options),</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;filter](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!filter(opt);<sp/>}),</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(options));</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"></highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options;</highlight></codeline>
<codeline lineno="7603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"></highlight></codeline>
<codeline lineno="7605" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6180da32436acf9caa8bcd74fbecb8be" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;Option<sp/>*&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">App::get_options</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(Option<sp/>*)&gt;<sp/>filter)<sp/>{</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Option<sp/>*&gt;<sp/>options(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.size());</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::begin(options),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val.get();<sp/>});</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"></highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filter)<sp/>{</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.erase(</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if(std::begin(options),<sp/>std::end(options),<sp/>[&amp;filter](Option<sp/>*opt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!filter(opt);<sp/>}),</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(options));</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"></highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options;</highlight></codeline>
<codeline lineno="7617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"></highlight></codeline>
<codeline lineno="7619" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">App::get_option_no_throw</ref>(std::string<sp/>option_name)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Option_p<sp/>&amp;opt<sp/>:<sp/>options_)<sp/>{</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;check_name(option_name))<sp/>{</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt.get();</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/>subcommands_)<sp/>{</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>check<sp/>down<sp/>into<sp/>nameless<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>subc-&gt;get_option_no_throw(option_name);</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"></highlight></codeline>
<codeline lineno="7637" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa983690ef8499db22af04291e9b5ed00" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">App::get_option_no_throw</ref>(std::string<sp/>option_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/>options_)<sp/>{</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;check_name(option_name))<sp/>{</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt.get();</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/>subcommands_)<sp/>{</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>check<sp/>down<sp/>into<sp/>nameless<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>subc-&gt;get_option_no_throw(option_name);</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"></highlight></codeline>
<codeline lineno="7655" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">App::get_display_name</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_aliases)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;[Option<sp/>Group:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>.empty()<sp/>||<sp/>!with_aliases)<sp/>{</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dispname<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;lalias<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispname.push_back(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispname.push_back(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispname.append(lalias);</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dispname;</highlight></codeline>
<codeline lineno="7669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"></highlight></codeline>
<codeline lineno="7671" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" kindref="member">App::check_name</ref>(std::string<sp/>name_to_check)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>local_name<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_name<sp/>=<sp/>detail::remove_underscore(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>);</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_to_check<sp/>=<sp/>detail::remove_underscore(name_to_check);</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_name<sp/>=<sp/>detail::to_lower(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>);</highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_to_check<sp/>=<sp/>detail::to_lower(name_to_check);</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(local_name<sp/>==<sp/>name_to_check)<sp/>{</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>les<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(performance-for-range-copy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a28fcf32f4384b1f95110a88b0c5145e0" kindref="member">ignore_underscore_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>les<sp/>=<sp/>detail::remove_underscore(les);</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a07fd60f1c284e28d83e09093221644cc" kindref="member">ignore_case_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>les<sp/>=<sp/>detail::to_lower(les);</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(les<sp/>==<sp/>name_to_check)<sp/>{</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"></highlight></codeline>
<codeline lineno="7699" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" kindref="member">App::get_groups</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>groups;</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>group<sp/>if<sp/>it<sp/>is<sp/>not<sp/>already<sp/>in<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(groups.begin(),<sp/>groups.end(),<sp/>opt-&gt;get_group())<sp/>==<sp/>groups.end())<sp/>{</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groups.push_back(opt-&gt;get_group());</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"></highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>groups;</highlight></codeline>
<codeline lineno="7710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"></highlight></codeline>
<codeline lineno="7712" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" kindref="member">App::remaining</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>miss_list;</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;detail::Classifier,<sp/>std::string&gt;<sp/>&amp;miss<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miss_list.push_back(std::get&lt;1&gt;(miss));</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>from<sp/>a<sp/>subcommand<sp/>that<sp/>may<sp/>allow<sp/>extras</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(recurse)<sp/>{</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;name_.empty()<sp/>&amp;&amp;<sp/>!sub-&gt;missing_.empty())<sp/>{</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;detail::Classifier,<sp/>std::string&gt;<sp/>&amp;miss<sp/>:<sp/>sub-&gt;missing_)<sp/>{</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miss_list.push_back(std::get&lt;1&gt;(miss));</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7729"><highlight class="normal"></highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>output<sp/>=<sp/>sub-&gt;remaining(recurse);</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(std::begin(output),<sp/>std::end(output),<sp/>std::back_inserter(miss_list));</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>miss_list;</highlight></codeline>
<codeline lineno="7736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"></highlight></codeline>
<codeline lineno="7738" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" kindref="member">App::remaining_for_passthrough</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>miss_list<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" kindref="member">remaining</ref>(recurse);</highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse(std::begin(miss_list),<sp/>std::end(miss_list));</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>miss_list;</highlight></codeline>
<codeline lineno="7742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"></highlight></codeline>
<codeline lineno="7744" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" kindref="member">App::remaining_size</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recurse)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remaining_options<sp/>=<sp/>static_cast&lt;std::size_t&gt;(std::count_if(</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;detail::Classifier,<sp/>std::string&gt;<sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val.first<sp/>!=<sp/>detail::Classifier::POSITIONAL_MARK;</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"></highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(recurse)<sp/>{</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_options<sp/>+=<sp/>sub-&gt;remaining_size(recurse);</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>remaining_options;</highlight></codeline>
<codeline lineno="7756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"></highlight></codeline>
<codeline lineno="7758" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6615c6104062e14c250add57d8d50113" kindref="member">App::_validate</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>the<sp/>number<sp/>of<sp/>positional<sp/>only<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pcount<sp/>=<sp/>std::count_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt)<sp/>{</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_items_expected_max()<sp/>&gt;=<sp/>detail::expected_max_vector_size<sp/>&amp;&amp;<sp/>!opt-&gt;nonpositional();</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pcount<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pcount_req<sp/>=<sp/>std::count_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt)<sp/>{</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_items_expected_max()<sp/>&gt;=<sp/>detail::expected_max_vector_size<sp/>&amp;&amp;<sp/>!opt-&gt;nonpositional()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;get_required();</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pcount<sp/>-<sp/>pcount_req<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>);</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"></highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nameless_subs{0};</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;app<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;_validate();</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;get_name().empty())</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nameless_subs;</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"></highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>(</highlight><highlight class="stringliteral">&quot;Required<sp/>min<sp/>options<sp/>greater<sp/>than<sp/>required<sp/>max<sp/>options&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::InvalidError));</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>&gt;<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.size()<sp/>+<sp/>nameless_subs))<sp/>{</highlight></codeline>
<codeline lineno="7787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" kindref="compound">InvalidError</ref>(</highlight><highlight class="stringliteral">&quot;Required<sp/>min<sp/>options<sp/>greater<sp/>than<sp/>number<sp/>of<sp/>available<sp/>options&quot;</highlight><highlight class="normal">,<sp/>ExitCodes::InvalidError));</highlight></codeline>
<codeline lineno="7789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"></highlight></codeline>
<codeline lineno="7793" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8c55f0597d6e85320be22545d482451c" kindref="member">App::_configure</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::enabled)<sp/>{</highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae0f59bfb95e42008d04bbe6f3ec3c0da" kindref="member">default_startup</ref><sp/>==<sp/>startup_mode::disabled)<sp/>{</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;app<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;has_automatic_name_)<sp/>{</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;name_.clear();</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;name_.empty())<sp/>{</highlight></codeline>
<codeline lineno="7804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;fallthrough_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>fallthrough_<sp/>is<sp/>false<sp/>to<sp/>prevent<sp/>infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;prefix_command_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>parent<sp/>is<sp/>set<sp/>to<sp/>be<sp/>this<sp/>object<sp/>in<sp/>preparation<sp/>for<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;parent_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;_configure();</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"></highlight></codeline>
<codeline lineno="7813" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">App::run_callback</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>final_mode,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppress_final_callback)<sp/>{</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a22e79d21d2fbf77c5c27ff047875600e" kindref="member">pre_callback</ref>();</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>app<sp/>if<sp/>immediate_callback_<sp/>is<sp/>set<sp/>it<sp/>runs<sp/>the<sp/>main<sp/>callback<sp/>before<sp/>the<sp/>used<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!final_mode<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>();</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>callbacks<sp/>for<sp/>the<sp/>received<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>())<sp/>{</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;parent_<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;run_callback(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>suppress_final_callback);</highlight></codeline>
<codeline lineno="7823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>run<sp/>callbacks<sp/>for<sp/>option_groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;name_.empty()<sp/>&amp;&amp;<sp/>subc-&gt;count_all()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;run_callback(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>suppress_final_callback);</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"></highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>run<sp/>the<sp/>main<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref><sp/>&amp;&amp;<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(!suppress_final_callback))<sp/>{</highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty()<sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" kindref="member">count_all</ref>()<sp/>&gt;<sp/>0<sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8d83795eb397cce4b894f29c8fe15ffd" kindref="member">final_callback_</ref>();</highlight></codeline>
<codeline lineno="7836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7839"><highlight class="normal"></highlight></codeline>
<codeline lineno="7840" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" kindref="member">App::_valid_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>match<sp/>if<sp/>max<sp/>has<sp/>been<sp/>reached<sp/>-<sp/>but<sp/>still<sp/>check<sp/>parents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.size()<sp/>&gt;=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" kindref="member">_valid_subcommand</ref>(current,<sp/>ignore_used);</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*com<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(current,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ignore_used);</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>parent<sp/>if<sp/>exists,<sp/>else<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" kindref="member">_valid_subcommand</ref>(current,<sp/>ignore_used);</highlight></codeline>
<codeline lineno="7851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7852"><highlight class="normal"></highlight></codeline>
<codeline lineno="7853" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>detail::Classifier<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" kindref="member">App::_recognize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;current,</highlight></codeline>
<codeline lineno="7854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used_subcommands)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7855"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dummy1,<sp/>dummy2;</highlight></codeline>
<codeline lineno="7856"><highlight class="normal"></highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::POSITIONAL_MARK;</highlight></codeline>
<codeline lineno="7859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1a7340396e849da50bfff1918e27fb5c" kindref="member">_valid_subcommand</ref>(current,<sp/>ignore_used_subcommands))</highlight></codeline>
<codeline lineno="7860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND;</highlight></codeline>
<codeline lineno="7861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::split_long(current,<sp/>dummy1,<sp/>dummy2))</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::LONG;</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::split_short(current,<sp/>dummy1,<sp/>dummy2))<sp/>{</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dummy1[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dummy1[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(std::string{</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/>dummy1[0]})<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::NONE;</highlight></codeline>
<codeline lineno="7867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::SHORT;</highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a317a2977a83a7921f85e0fbe31c23157" kindref="member">allow_windows_style_options_</ref>)<sp/>&amp;&amp;<sp/>(detail::split_windows_style(current,<sp/>dummy1,<sp/>dummy2)))</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::WINDOWS_STYLE;</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((current<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty()<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND_TERMINATOR;</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Classifier::NONE;</highlight></codeline>
<codeline lineno="7876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"></highlight></codeline>
<codeline lineno="7878" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" kindref="member">App::_process_config_file</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>config_required<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;get_required();</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file_given<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;count()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>config_files<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;as&lt;std::vector&lt;std::string&gt;&gt;();</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config_files.empty()<sp/>||<sp/>config_files.front().empty())<sp/>{</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config_required)<sp/>{</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>FileError::Missing(</highlight><highlight class="stringliteral">&quot;no<sp/>specified<sp/>config<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rit<sp/>=<sp/>config_files.rbegin();<sp/>rit<sp/>!=<sp/>config_files.rend();<sp/>++rit)<sp/>{</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;config_file<sp/>=<sp/>*rit;</highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path_result<sp/>=<sp/>detail::check_path(config_file.c_str());</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_result<sp/>==<sp/>detail::path_type::file)<sp/>{</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ConfigItem&gt;<sp/>values<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>-&gt;from_file(config_file);</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" kindref="member">_parse_config</ref>(values);</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file_given)<sp/>{</highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref>-&gt;add_result(config_file);</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">FileError</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config_required<sp/>||<sp/>file_given)</highlight></codeline>
<codeline lineno="7901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config_required<sp/>||<sp/>file_given)<sp/>{</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>FileError::Missing(config_file);</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"></highlight></codeline>
<codeline lineno="7910" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" kindref="member">App::_process_env</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!opt-&gt;envname_.empty())<sp/>{</highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ename_string;</highlight></codeline>
<codeline lineno="7915"><highlight class="normal"></highlight></codeline>
<codeline lineno="7916"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>sz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_dupenv_s(&amp;buffer,<sp/>&amp;sz,<sp/>opt-&gt;envname_.c_str())<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>buffer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ename_string<sp/>=<sp/>std::string(buffer);</highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>works<sp/>on<sp/>Windows,<sp/>but<sp/>gives<sp/>a<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>std::getenv(opt-&gt;envname_.c_str());</highlight></codeline>
<codeline lineno="7926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ename_string<sp/>=<sp/>std::string(buffer);</highlight></codeline>
<codeline lineno="7928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7929"><highlight class="normal"></highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ename_string.empty())<sp/>{</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;add_result(ename_string);</highlight></codeline>
<codeline lineno="7932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7935"><highlight class="normal"></highlight></codeline>
<codeline lineno="7936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;get_name().empty()<sp/>||<sp/>!sub-&gt;parse_complete_callback_)</highlight></codeline>
<codeline lineno="7938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_env();</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7941"><highlight class="normal"></highlight></codeline>
<codeline lineno="7942" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">App::_process_callbacks</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7943"><highlight class="normal"></highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>priority<sp/>option_groups<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;get_name().empty()<sp/>&amp;&amp;<sp/>sub-&gt;parse_complete_callback_)<sp/>{</highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;count_all()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_callbacks();</highlight></codeline>
<codeline lineno="7949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;run_callback();</highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"></highlight></codeline>
<codeline lineno="7954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*opt)<sp/>&amp;&amp;<sp/>!opt-&gt;get_callback_run())<sp/>{</highlight></codeline>
<codeline lineno="7956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;run_callback();</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!sub-&gt;parse_complete_callback_)<sp/>{</highlight></codeline>
<codeline lineno="7961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_callbacks();</highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"></highlight></codeline>
<codeline lineno="7966" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" kindref="member">App::_process_help_flags</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger_help,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger_all_help)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*help_ptr<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" kindref="member">get_help_ptr</ref>();</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*help_all_ptr<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" kindref="member">get_help_all_ptr</ref>();</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"></highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(help_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>help_ptr-&gt;count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_help<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(help_all_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>help_all_ptr-&gt;count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_all_help<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"></highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>were<sp/>parsed<sp/>subcommands,<sp/>call<sp/>those.<sp/>First<sp/>subcommand<sp/>wins<sp/>if<sp/>there<sp/>are<sp/>multiple<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="7977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>)</highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_help_flags(trigger_help,<sp/>trigger_all_help);</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"></highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>final<sp/>subcommand<sp/>should<sp/>call<sp/>for<sp/>help.<sp/>All<sp/>help<sp/>wins<sp/>over<sp/>help.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trigger_all_help)<sp/>{</highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" kindref="compound">CallForAllHelp</ref>();</highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trigger_help)<sp/>{</highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" kindref="compound">CallForHelp</ref>();</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"></highlight></codeline>
<codeline lineno="7988" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" kindref="member">App::_process_requirements</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>excludes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>excluded{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>excluder;</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1d011c38c7c8c73b47497e63d6b0610" kindref="member">exclude_options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excluded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excluder<sp/>=<sp/>opt-&gt;get_name();</highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7732c7836bf5197f3e77832af3129c8c" kindref="member">exclude_subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;count_all()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excluded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excluder<sp/>=<sp/>subc-&gt;get_display_name();</highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(excluded)<sp/>{</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" kindref="member">count_all</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>(),<sp/>excluder);</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>excluded<sp/>but<sp/>didn&apos;t<sp/>receive<sp/>anything,<sp/>just<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8011"><highlight class="normal"></highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>excludes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>missing_needed{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>missing_need;</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5821e7abe27a032f52b3f4fec3f577fe" kindref="member">need_options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missing_needed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missing_need<sp/>=<sp/>opt-&gt;get_name();</highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3aca8f16ec68ba216dd65ef24287456" kindref="member">need_subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;count_all()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missing_needed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missing_need<sp/>=<sp/>subc-&gt;get_display_name();</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(missing_needed)<sp/>{</highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a51b769e916186070becd9e6c63eb19f9" kindref="member">count_all</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>(),<sp/>missing_need);</highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>missing<sp/>something<sp/>but<sp/>didn&apos;t<sp/>have<sp/>any<sp/>options,<sp/>just<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"></highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>used_options<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"></highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++used_options;</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>but<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_required()<sp/>&amp;&amp;<sp/>opt-&gt;count()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">RequiredError</ref>(opt-&gt;get_name());</highlight></codeline>
<codeline lineno="8044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt_req<sp/>:<sp/>opt-&gt;needs_)</highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>opt_req-&gt;count()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="8048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" kindref="compound">RequiresError</ref>(opt-&gt;get_name(),<sp/>opt_req-&gt;get_name());</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Excludes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt_ex<sp/>:<sp/>opt-&gt;excludes_)</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;count()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>opt_ex-&gt;count()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" kindref="compound">ExcludesError</ref>(opt-&gt;get_name(),<sp/>opt_ex-&gt;get_name());</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>the<sp/>required<sp/>number<sp/>of<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selected_subcommands<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>();</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref><sp/>&gt;<sp/>selected_subcommands.size())</highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>RequiredError::Subcommand(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae21c26a0534b6a517e84cffba593932b" kindref="member">require_subcommand_min_</ref>);</highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"></highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>error<sp/>cannot<sp/>occur,<sp/>the<sp/>extra<sp/>subcommand<sp/>will<sp/>parse<sp/>as<sp/>an<sp/>ExtrasError<sp/>or<sp/>a<sp/>remaining<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8062"><highlight class="normal"></highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>this<sp/>loop<sp/>to<sp/>check<sp/>how<sp/>many<sp/>unnamed<sp/>subcommands<sp/>were<sp/>actually<sp/>used<sp/>since<sp/>they<sp/>are<sp/>considered<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>perspective<sp/>of<sp/>an<sp/>App</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;disabled_)</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;name_.empty()<sp/>&amp;&amp;<sp/>sub-&gt;count_all()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++used_options;</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"></highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>&gt;<sp/>used_options<sp/>||<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>&lt;<sp/>used_options))<sp/>{</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>option_list<sp/>=<sp/>detail::join(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;ptr)<sp/>{</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr.get()<sp/>==<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>||<sp/>ptr.get()<sp/>==<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"></highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subc_list<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>([](<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty())<sp/>&amp;&amp;<sp/>(!app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref>));<sp/>});</highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subc_list.empty())<sp/>{</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_list<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::join(subc_list,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>();<sp/>});</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>RequiredError::Option(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref>,<sp/>used_options,<sp/>option_list);</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"></highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>process<sp/>the<sp/>requirements<sp/>for<sp/>subcommands<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;disabled_)</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;name_.empty()<sp/>&amp;&amp;<sp/>sub-&gt;required_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;count_all()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref><sp/>&lt;=<sp/>used_options)<sp/>{</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>met<sp/>the<sp/>requirement<sp/>and<sp/>there<sp/>is<sp/>nothing<sp/>in<sp/>this<sp/>option<sp/>group<sp/>skip<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>requirements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6788eb1c6af94c27510aa7cce55882e8" kindref="member">require_option_max_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>used_options<sp/>&gt;=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afa0b5f58d1217702276b7108b9e5f5e7" kindref="member">require_option_min_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>met<sp/>the<sp/>requirement<sp/>and<sp/>there<sp/>is<sp/>nothing<sp/>in<sp/>this<sp/>option<sp/>group<sp/>skip<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>requirements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;count()<sp/>&gt;<sp/>0<sp/>||<sp/>sub-&gt;name_.empty())<sp/>{</highlight></codeline>
<codeline lineno="8107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_requirements();</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8109"><highlight class="normal"></highlight></codeline>
<codeline lineno="8110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;required_<sp/>&amp;&amp;<sp/>sub-&gt;count_all()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" kindref="compound">CLI::RequiredError</ref>(sub-&gt;get_display_name()));</highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8115"><highlight class="normal"></highlight></codeline>
<codeline lineno="8116" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" kindref="member">App::_process</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>config<sp/>file<sp/>might<sp/>generate<sp/>a<sp/>FileError<sp/>but<sp/>that<sp/>should<sp/>not<sp/>be<sp/>processed<sp/>until<sp/>later<sp/>in<sp/>the<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>allow<sp/>for<sp/>help,<sp/>version<sp/>and<sp/>other<sp/>errors<sp/>to<sp/>generate<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8e696b8ed9d557a4b8803f1682919576" kindref="member">_process_config_file</ref>();</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"></highlight></codeline>
<codeline lineno="8122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>env<sp/>shouldn&apos;t<sp/>throw<sp/>but<sp/>no<sp/>reason<sp/>to<sp/>process<sp/>it<sp/>if<sp/>config<sp/>generated<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" kindref="member">_process_env</ref>();</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" kindref="compound">CLI::FileError</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callbacks<sp/>and<sp/>help_flags<sp/>can<sp/>generate<sp/>exceptions<sp/>which<sp/>should<sp/>take<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>over<sp/>the<sp/>config<sp/>file<sp/>error<sp/>if<sp/>one<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">_process_callbacks</ref>();</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" kindref="member">_process_help_flags</ref>();</highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8131"><highlight class="normal"></highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">_process_callbacks</ref>();</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" kindref="member">_process_help_flags</ref>();</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"></highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" kindref="member">_process_requirements</ref>();</highlight></codeline>
<codeline lineno="8136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"></highlight></codeline>
<codeline lineno="8138" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">App::_process_extras</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>num_left_over<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" kindref="member">remaining_size</ref>();</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_left_over<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" kindref="member">remaining</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"></highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_extras();</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"></highlight></codeline>
<codeline lineno="8152" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a191738ec58e0f00abc81326aa955be3e" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">App::_process_extras</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>num_left_over<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abc316c8d095fd2d9966a9391e4f9daf6" kindref="member">remaining_size</ref>();</highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_left_over<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab28c99e31d58a07ee8893d8d6665c20e" kindref="member">remaining</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">ExtrasError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>,<sp/>args);</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8160"><highlight class="normal"></highlight></codeline>
<codeline lineno="8161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="8163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;_process_extras(args);</highlight></codeline>
<codeline lineno="8164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"></highlight></codeline>
<codeline lineno="8167" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">App::increment_parsed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref>;</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(App_p<sp/>&amp;sub<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;get_name().empty())</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-&gt;increment_parsed();</highlight></codeline>
<codeline lineno="8172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8174"><highlight class="normal"></highlight></codeline>
<codeline lineno="8175" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">App::_parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="8176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">increment_parsed</ref>();</highlight></codeline>
<codeline lineno="8177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">_trigger_pre_parse</ref>(args.size());</highlight></codeline>
<codeline lineno="8178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>positional_only<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8179"><highlight class="normal"></highlight></codeline>
<codeline lineno="8180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!args.empty())<sp/>{</highlight></codeline>
<codeline lineno="8181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" kindref="member">_parse_single</ref>(args,<sp/>positional_only))<sp/>{</highlight></codeline>
<codeline lineno="8182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8185"><highlight class="normal"></highlight></codeline>
<codeline lineno="8186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" kindref="member">_process</ref>();</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"></highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>error<sp/>if<sp/>any<sp/>items<sp/>are<sp/>left<sp/>over<sp/>(depending<sp/>on<sp/>settings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">_process_extras</ref>(args);</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"></highlight></codeline>
<codeline lineno="8192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>missing<sp/>(pairs)<sp/>to<sp/>extras<sp/>(string<sp/>only)<sp/>ready<sp/>for<sp/>processing<sp/>in<sp/>another<sp/>app</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af0a33fb84faa4e268d869cd3977eacb9" kindref="member">remaining_for_passthrough</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9b05e80543dd48b8d235058effa7d3ff" kindref="member">_process_env</ref>();</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">_process_callbacks</ref>();</highlight></codeline>
<codeline lineno="8197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1acd84d76e8a03784a7206f46bb9365cde" kindref="member">_process_help_flags</ref>();</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" kindref="member">_process_requirements</ref>();</highlight></codeline>
<codeline lineno="8199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"></highlight></codeline>
<codeline lineno="8203" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa1227ec2d01c5168b93cb547f4367e02" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa239f7ba0e3cd3461bd38ed39a02f266" kindref="member">App::_parse</ref>(std::vector&lt;std::string&gt;<sp/>&amp;&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>only<sp/>be<sp/>called<sp/>by<sp/>the<sp/>top<sp/>level<sp/>in<sp/>which<sp/>case<sp/>parent<sp/>==<sp/>nullptr<sp/>by<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operation<sp/>is<sp/>simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">increment_parsed</ref>();</highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">_trigger_pre_parse</ref>(args.size());</highlight></codeline>
<codeline lineno="8208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>positional_only<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"></highlight></codeline>
<codeline lineno="8210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!args.empty())<sp/>{</highlight></codeline>
<codeline lineno="8211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" kindref="member">_parse_single</ref>(args,<sp/>positional_only);</highlight></codeline>
<codeline lineno="8212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" kindref="member">_process</ref>();</highlight></codeline>
<codeline lineno="8214"><highlight class="normal"></highlight></codeline>
<codeline lineno="8215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>error<sp/>if<sp/>any<sp/>items<sp/>are<sp/>left<sp/>over<sp/>(depending<sp/>on<sp/>settings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">_process_extras</ref>();</highlight></codeline>
<codeline lineno="8217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"></highlight></codeline>
<codeline lineno="8219" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae463c9a12e704db780df81d10cd40d24" kindref="member">App::_parse_stream</ref>(std::istream<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>values<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>-&gt;from_config(input);</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" kindref="member">_parse_config</ref>(values);</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">increment_parsed</ref>();</highlight></codeline>
<codeline lineno="8223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">_trigger_pre_parse</ref>(values.size());</highlight></codeline>
<codeline lineno="8224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a42c16eeabbdb71fc0310fff7de56317a" kindref="member">_process</ref>();</highlight></codeline>
<codeline lineno="8225"><highlight class="normal"></highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>error<sp/>if<sp/>any<sp/>items<sp/>are<sp/>left<sp/>over<sp/>(depending<sp/>on<sp/>settings)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1bce7b944ad495b65dd36fef2fd1e57a" kindref="member">_process_extras</ref>();</highlight></codeline>
<codeline lineno="8228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"></highlight></codeline>
<codeline lineno="8230" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adc07bc17d18d3fd2956823bbb6ed8464" kindref="member">App::_parse_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ConfigItem&gt;<sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="8231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref><sp/>&amp;item<sp/>:<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="8232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" kindref="member">_parse_single_config</ref>(item)<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad8519ac2a6e174505ec041648cdda09a" kindref="member">allow_config_extras_</ref><sp/>==<sp/>config_extras_mode::error)</highlight></codeline>
<codeline lineno="8233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConfigError::Extras(item.fullname());</highlight></codeline>
<codeline lineno="8234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8236"><highlight class="normal"></highlight></codeline>
<codeline lineno="8237" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" kindref="member">App::_parse_single_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" kindref="compound">ConfigItem</ref><sp/>&amp;item,<sp/>std::size_t<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>&lt;<sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1abfe3b8493d67c464840d46e57e624f35" kindref="member">parents</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*subcom<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a04b2cfd332f89be932e13e855c4d400e" kindref="member">get_subcommand</ref>(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1abfe3b8493d67c464840d46e57e624f35" kindref="member">parents</ref>.at(level));</highlight></codeline>
<codeline lineno="8241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>subcom-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2db304f3bb9e425f37bee1ece7d6ddf4" kindref="member">_parse_single_config</ref>(item,<sp/>level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="8242"><highlight class="normal"></highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>section<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3c8776944da02f675bcd3156a2c15280" kindref="member">increment_parsed</ref>();</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">_trigger_pre_parse</ref>(2);</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.push_back(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>section<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1abe958697e9f37ea3369020d9efab40fd" kindref="member">configurable_</ref><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a763ad752750b9aaaa858521ace41d5e7" kindref="member">_process_callbacks</ref>();</highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a683342fbe7b7ea127a26e7de12451c03" kindref="member">_process_requirements</ref>();</highlight></codeline>
<codeline lineno="8264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13b7326efb2b8f570bd910f27b0de486" kindref="member">run_callback</ref>();</highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8268"><highlight class="normal"><sp/><sp/><sp/><sp/>Option<sp/>*op<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>+<sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="8269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a273b18fd169cfd03cfe695f494746501" kindref="member">get_option_no_throw</ref>(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="8276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>option<sp/>was<sp/>not<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" kindref="member">get_allow_config_extras</ref>()<sp/>==<sp/>config_extras_mode::capture)</highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>we<sp/>worry<sp/>about<sp/>classifying<sp/>the<sp/>extras<sp/>properly?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>.emplace_back(detail::Classifier::NONE,<sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>());</highlight></codeline>
<codeline lineno="8282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8284"><highlight class="normal"></highlight></codeline>
<codeline lineno="8285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!op-&gt;get_configurable())<sp/>{</highlight></codeline>
<codeline lineno="8286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a96c6b65655115c2f152919fc8a2b03ff" kindref="member">get_allow_config_extras</ref>()<sp/>==<sp/>config_extras_mode::ignore_all)<sp/>{</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConfigError::NotConfigurable(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>());</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8291"><highlight class="normal"></highlight></codeline>
<codeline lineno="8292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="8293"><highlight class="normal"></highlight></codeline>
<codeline lineno="8294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_expected_min()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.size()<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flag<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad306eb2bb71b64fa56bd3e176f65c5f4" kindref="member">config_formatter_</ref>-&gt;to_flag(item);</highlight></codeline>
<codeline lineno="8298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>op-&gt;get_flag_value(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>,<sp/>res);</highlight></codeline>
<codeline lineno="8299"><highlight class="normal"></highlight></codeline>
<codeline lineno="8300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(res);</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(static_cast&lt;int&gt;(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.size())<sp/>&gt;<sp/>op-&gt;get_items_expected_max())<sp/>{</highlight></codeline>
<codeline lineno="8304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_items_expected_max()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArgumentMismatch::AtMost(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>(),<sp/>op-&gt;get_items_expected_max(),<sp/>item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>.size());</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ConversionError::TooManyInputsFlag(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1ae1ab2cdb3830e81243c17f93417ac27d" kindref="member">fullname</ref>());</highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(item.<ref refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item_1a1da0a422b2a77c7743a5e04f40d0b7e1" kindref="member">inputs</ref>);</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;run_callback();</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"></highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8316"><highlight class="normal"></highlight></codeline>
<codeline lineno="8317" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad2ee4d8ee30f52a0afd379f62e22e5a4" kindref="member">App::_parse_single</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;positional_only)<sp/>{</highlight></codeline>
<codeline lineno="8318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8319"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::Classifier<sp/>classifier<sp/>=<sp/>positional_only<sp/>?<sp/>detail::Classifier::NONE<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" kindref="member">_recognize</ref>(args.back());</highlight></codeline>
<codeline lineno="8320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(classifier)<sp/>{</highlight></codeline>
<codeline lineno="8321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::POSITIONAL_MARK:</highlight></codeline>
<codeline lineno="8322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positional_only<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" kindref="member">_has_remaining_positionals</ref>())<sp/>&amp;&amp;<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">_move_to_missing</ref>(classifier,<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND_TERMINATOR:</highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>this<sp/>like<sp/>a<sp/>positional<sp/>mark<sp/>if<sp/>in<sp/>the<sp/>parent<sp/>app</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND:</highlight></codeline>
<codeline lineno="8336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">_parse_subcommand</ref>(args);</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::LONG:</highlight></codeline>
<codeline lineno="8339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SHORT:</highlight></codeline>
<codeline lineno="8340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::WINDOWS_STYLE:</highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>already<sp/>parsed<sp/>a<sp/>subcommand,<sp/>don&apos;t<sp/>accept<sp/>options_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">_parse_arg</ref>(args,<sp/>classifier);</highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::NONE:</highlight></codeline>
<codeline lineno="8345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>a<sp/>positional<sp/>or<sp/>something<sp/>for<sp/>a<sp/>parent<sp/>(sub)command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" kindref="member">_parse_positional</ref>(args,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positional_only<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;unrecognized<sp/>classifier<sp/>(you<sp/>should<sp/>not<sp/>see<sp/>this!)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="8357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8358"><highlight class="normal"></highlight></codeline>
<codeline lineno="8359" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/>std::size_t<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" kindref="member">App::_count_remaining_positionals</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required_only)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8360"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>retval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_positional()<sp/>&amp;&amp;<sp/>(!required_only<sp/>||<sp/>opt-&gt;get_required()))<sp/>{</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_items_expected_min()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>static_cast&lt;int&gt;(opt-&gt;count())<sp/>&lt;<sp/>opt-&gt;get_items_expected_min())<sp/>{</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>+=<sp/>static_cast&lt;std::size_t&gt;(opt-&gt;get_items_expected_min())<sp/>-<sp/>opt-&gt;count();</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="8369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8370"><highlight class="normal"></highlight></codeline>
<codeline lineno="8371" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fee1640d7a4d2a760463cc92f01fe7d" kindref="member">App::_has_remaining_positionals</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_positional()<sp/>&amp;&amp;<sp/>((static_cast&lt;int&gt;(opt-&gt;count())<sp/>&lt;<sp/>opt-&gt;get_items_expected_min())))<sp/>{</highlight></codeline>
<codeline lineno="8374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8377"><highlight class="normal"></highlight></codeline>
<codeline lineno="8378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8380"><highlight class="normal"></highlight></codeline>
<codeline lineno="8381" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" kindref="member">App::_parse_positional</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haltOnSubcommand)<sp/>{</highlight></codeline>
<codeline lineno="8382"><highlight class="normal"></highlight></codeline>
<codeline lineno="8383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;positional<sp/>=<sp/>args.back();</highlight></codeline>
<codeline lineno="8384"><highlight class="normal"></highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>the<sp/>case<sp/>of<sp/>required<sp/>arguments<sp/>at<sp/>the<sp/>end<sp/>which<sp/>should<sp/>take<sp/>precedence<sp/>over<sp/>other<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg_rem<sp/>=<sp/>args.size();</highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remreq<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" kindref="member">_count_remaining_positionals</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg_rem<sp/>&lt;=<sp/>remreq)<sp/>{</highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_positional()<sp/>&amp;&amp;<sp/>opt-&gt;required_)<sp/>{</highlight></codeline>
<codeline lineno="8392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(static_cast&lt;int&gt;(opt-&gt;count())<sp/>&lt;<sp/>opt-&gt;get_items_expected_min())<sp/>{</highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pos<sp/>=<sp/>positional;</highlight></codeline>
<codeline lineno="8395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>opt-&gt;_validate(pos,<sp/>0);</highlight></codeline>
<codeline lineno="8396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!pos.empty())<sp/>{</highlight></codeline>
<codeline lineno="8397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8400"><highlight class="normal"></highlight></codeline>
<codeline lineno="8401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(opt.get());</highlight></codeline>
<codeline lineno="8403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_inject_separator())<sp/>{</highlight></codeline>
<codeline lineno="8404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;results().empty()<sp/>&amp;&amp;<sp/>!opt-&gt;results().back().empty())<sp/>{</highlight></codeline>
<codeline lineno="8405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;add_result(std::string{});</highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_trigger_on_parse()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;current_option_state_<sp/>==<sp/>Option::option_state::callback_run)<sp/>{</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;clear();</highlight></codeline>
<codeline lineno="8411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;add_result(positional);</highlight></codeline>
<codeline lineno="8413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_trigger_on_parse())<sp/>{</highlight></codeline>
<codeline lineno="8414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;run_callback();</highlight></codeline>
<codeline lineno="8415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eat<sp/>options,<sp/>one<sp/>by<sp/>one,<sp/>until<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_positional()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(static_cast&lt;int&gt;(opt-&gt;count())<sp/>&lt;<sp/>opt-&gt;get_items_expected_min()<sp/>||<sp/>opt-&gt;get_allow_extra_args()))<sp/>{</highlight></codeline>
<codeline lineno="8427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ad64e93ae198a2dfee0d9c27656c9f1fb" kindref="member">validate_positionals_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pos<sp/>=<sp/>positional;</highlight></codeline>
<codeline lineno="8429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>opt-&gt;_validate(pos,<sp/>0);</highlight></codeline>
<codeline lineno="8430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!pos.empty())<sp/>{</highlight></codeline>
<codeline lineno="8431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_inject_separator())<sp/>{</highlight></codeline>
<codeline lineno="8435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;results().empty()<sp/>&amp;&amp;<sp/>!opt-&gt;results().back().empty())<sp/>{</highlight></codeline>
<codeline lineno="8436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;add_result(std::string{});</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_trigger_on_parse()<sp/>&amp;&amp;<sp/>opt-&gt;current_option_state_<sp/>==<sp/>Option::option_state::callback_run)<sp/>{</highlight></codeline>
<codeline lineno="8440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;clear();</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;add_result(positional);</highlight></codeline>
<codeline lineno="8443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_trigger_on_parse())<sp/>{</highlight></codeline>
<codeline lineno="8444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;run_callback();</highlight></codeline>
<codeline lineno="8445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(opt.get());</highlight></codeline>
<codeline lineno="8447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8451"><highlight class="normal"></highlight></codeline>
<codeline lineno="8452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((subc-&gt;name_.empty())<sp/>&amp;&amp;<sp/>(!subc-&gt;disabled_))<sp/>{</highlight></codeline>
<codeline lineno="8454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;_parse_positional(args,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="8455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subc-&gt;pre_parse_called_)<sp/>{</highlight></codeline>
<codeline lineno="8456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;_trigger_pre_parse(args.size());</highlight></codeline>
<codeline lineno="8457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>parent<sp/>deal<sp/>with<sp/>it<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref>)</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" kindref="member">_parse_positional</ref>(args,<sp/>static_cast&lt;bool&gt;(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1e3a19db40f80e01b5aa5eb5b8cf5294" kindref="member">parse_complete_callback_</ref>));</highlight></codeline>
<codeline lineno="8465"><highlight class="normal"></highlight></codeline>
<codeline lineno="8467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*com<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(args.back(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>==<sp/>0<sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a955cb044e3901495a7391f7d4c90941b" kindref="member">require_subcommand_max_</ref><sp/>&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.size()))<sp/>{</highlight></codeline>
<codeline lineno="8469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(haltOnSubcommand)<sp/>{</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com-&gt;_parse(args);</highlight></codeline>
<codeline lineno="8474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*parent_app<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"><sp/><sp/><sp/><sp/>com<sp/>=<sp/>parent_app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(args.back(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(com-&gt;parent_-&gt;require_subcommand_max_<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com-&gt;parent_-&gt;require_subcommand_max_<sp/>&gt;<sp/>com-&gt;parent_-&gt;parsed_subcommands_.size()))<sp/>{</highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8484"><highlight class="normal"></highlight></codeline>
<codeline lineno="8485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a3da89fca2ffd13bb0ce2ab1f8df4a953" kindref="member">positionals_at_end_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" kindref="compound">CLI::ExtrasError</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>,<sp/>args);</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="8490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">_move_to_missing</ref>(detail::Classifier::NONE,<sp/>positional);</highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a917437505a72a705d514ab9b557ee1f6" kindref="member">prefix_command_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!args.empty())<sp/>{</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">_move_to_missing</ref>(detail::Classifier::NONE,<sp/>args.back());</highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"></highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8504"><highlight class="normal"></highlight></codeline>
<codeline lineno="8505"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*</highlight></codeline>
<codeline lineno="8506" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">App::_find_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;subc_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_disabled,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_used)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App_p<sp/>&amp;com<sp/>:<sp/>subcommands_)<sp/>{</highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com-&gt;disabled_<sp/>&amp;&amp;<sp/>ignore_disabled)</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*subc<sp/>=<sp/>com-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(subc_name,<sp/>ignore_disabled,<sp/>ignore_used);</highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subc;</highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com-&gt;check_name(subc_name))<sp/>{</highlight></codeline>
<codeline lineno="8517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!*com)<sp/>||<sp/>!ignore_used)</highlight></codeline>
<codeline lineno="8518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>com.get();</highlight></codeline>
<codeline lineno="8519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8523"><highlight class="normal"></highlight></codeline>
<codeline lineno="8524" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2504492912bdfa73fef917c670858bba" kindref="member">App::_parse_subcommand</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="8525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" kindref="member">_count_remaining_positionals</ref>(</highlight><highlight class="comment">/*<sp/>required<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6a18dfdf4a7bc021a4e27d570162dbb7" kindref="member">_parse_positional</ref>(args,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*com<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92255a43812889b4d0cb6c1df759c179" kindref="member">_find_subcommand</ref>(args.back(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!com-&gt;silent_)<sp/>{</highlight></codeline>
<codeline lineno="8533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a6f0524755d31b362d84fe457e5c909f6" kindref="member">parsed_subcommands_</ref>.push_back(com);</highlight></codeline>
<codeline lineno="8534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com-&gt;_parse(args);</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*parent_app<sp/>=<sp/>com-&gt;parent_;</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(parent_app<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_app-&gt;_trigger_pre_parse(args.size());</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!com-&gt;silent_)<sp/>{</highlight></codeline>
<codeline lineno="8540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_app-&gt;parsed_subcommands_.push_back(com);</highlight></codeline>
<codeline lineno="8541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_app<sp/>=<sp/>parent_app-&gt;parent_;</highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8546"><highlight class="normal"></highlight></codeline>
<codeline lineno="8547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;Subcommand<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>args.back()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>missing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"></highlight></codeline>
<codeline lineno="8552" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">App::_parse_arg</ref>(std::vector&lt;std::string&gt;<sp/>&amp;args,<sp/>detail::Classifier<sp/>current_type)<sp/>{</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"></highlight></codeline>
<codeline lineno="8554"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>current<sp/>=<sp/>args.back();</highlight></codeline>
<codeline lineno="8555"><highlight class="normal"></highlight></codeline>
<codeline lineno="8556"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>arg_name;</highlight></codeline>
<codeline lineno="8557"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>value;</highlight></codeline>
<codeline lineno="8558"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rest;</highlight></codeline>
<codeline lineno="8559"><highlight class="normal"></highlight></codeline>
<codeline lineno="8560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(current_type)<sp/>{</highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::LONG:</highlight></codeline>
<codeline lineno="8562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::split_long(current,<sp/>arg_name,<sp/>value))</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;Long<sp/>parsed<sp/>but<sp/>missing<sp/>(you<sp/>should<sp/>not<sp/>see<sp/>this):&quot;</highlight><highlight class="normal"><sp/>+<sp/>args.back());</highlight></codeline>
<codeline lineno="8564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SHORT:</highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::split_short(current,<sp/>arg_name,<sp/>rest))</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;Short<sp/>parsed<sp/>but<sp/>missing!<sp/>You<sp/>should<sp/>not<sp/>see<sp/>this&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::WINDOWS_STYLE:</highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!detail::split_windows_style(current,<sp/>arg_name,<sp/>value))</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;windows<sp/>option<sp/>parsed<sp/>but<sp/>missing!<sp/>You<sp/>should<sp/>not<sp/>see<sp/>this&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND:</highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::SUBCOMMAND_TERMINATOR:</highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::POSITIONAL_MARK:</highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::Classifier::NONE:</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;parsing<sp/>got<sp/>called<sp/>with<sp/>invalid<sp/>option!<sp/>You<sp/>should<sp/>not<sp/>see<sp/>this&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8580"><highlight class="normal"></highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>op_ptr<sp/>=<sp/>std::find_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[arg_name,<sp/>current_type](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;opt)<sp/>{</highlight></codeline>
<codeline lineno="8582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_type<sp/>==<sp/>detail::Classifier::LONG)</highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;check_lname(arg_name);</highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_type<sp/>==<sp/>detail::Classifier::SHORT)</highlight></codeline>
<codeline lineno="8585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;check_sname(arg_name);</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>only<sp/>get<sp/>called<sp/>for<sp/>detail::Classifier::WINDOWS_STYLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;check_lname(arg_name)<sp/>||<sp/>opt-&gt;check_sname(arg_name);</highlight></codeline>
<codeline lineno="8588"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="8589"><highlight class="normal"></highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Option<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op_ptr<sp/>==<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;name_.empty()<sp/>&amp;&amp;<sp/>!subc-&gt;disabled_)<sp/>{</highlight></codeline>
<codeline lineno="8594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;_parse_arg(args,<sp/>current_type))<sp/>{</highlight></codeline>
<codeline lineno="8595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subc-&gt;pre_parse_called_)<sp/>{</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;_trigger_pre_parse(args.size());</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8602"><highlight class="normal"></highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>capture<sp/>missing<sp/>if<sp/>this<sp/>is<sp/>a<sp/>nameless<sp/>subcommand<sp/>and<sp/>nameless<sp/>subcommands<sp/>can&apos;t<sp/>fallthrough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"></highlight></codeline>
<codeline lineno="8608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>subcommand,<sp/>try<sp/>the<sp/>main<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a00bbeedb08e016f5da0b8fe27c7ee9ef" kindref="member">fallthrough_</ref>)</highlight></codeline>
<codeline lineno="8610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">_get_fallthrough_parent</ref>()-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af6eae4c2847bda8e097b91004d74a1e8" kindref="member">_parse_arg</ref>(args,<sp/>current_type);</highlight></codeline>
<codeline lineno="8611"><highlight class="normal"></highlight></codeline>
<codeline lineno="8612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>add<sp/>to<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">_move_to_missing</ref>(current_type,<sp/>current);</highlight></codeline>
<codeline lineno="8615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"></highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"></highlight></codeline>
<codeline lineno="8620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>pointer<sp/>to<sp/>make<sp/>syntax<sp/>bearable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8621"><highlight class="normal"><sp/><sp/><sp/><sp/>Option_p<sp/>&amp;op<sp/>=<sp/>*op_ptr;</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_inject_separator())<sp/>{</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!op-&gt;results().empty()<sp/>&amp;&amp;<sp/>!op-&gt;results().back().empty())<sp/>{</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(std::string{});</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_trigger_on_parse()<sp/>&amp;&amp;<sp/>op-&gt;current_option_state_<sp/>==<sp/>Option::option_state::callback_run)<sp/>{</highlight></codeline>
<codeline lineno="8629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;clear();</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_num<sp/>=<sp/>(std::min)(op-&gt;get_type_size_min(),<sp/>op-&gt;get_items_expected_min());</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_num<sp/>=<sp/>op-&gt;get_items_expected_max();</highlight></codeline>
<codeline lineno="8633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>container<sp/>like<sp/>options<sp/>to<sp/>limit<sp/>the<sp/>argument<sp/>size<sp/>to<sp/>a<sp/>single<sp/>type<sp/>if<sp/>the<sp/>allow_extra_flags<sp/>argument<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set.<sp/>16<sp/>is<sp/>somewhat<sp/>arbitrary<sp/>(needs<sp/>to<sp/>be<sp/>at<sp/>least<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_num<sp/>&gt;=<sp/>detail::expected_max_vector_size<sp/>/<sp/>16<sp/>&amp;&amp;<sp/>!op-&gt;get_allow_extra_args())<sp/>{</highlight></codeline>
<codeline lineno="8636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmax<sp/>=<sp/>op-&gt;get_type_size_max();</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num<sp/>=<sp/>detail::checked_multiply(tmax,<sp/>op-&gt;get_expected_min())<sp/>?<sp/>tmax<sp/>:<sp/>detail::expected_max_vector_size;</highlight></codeline>
<codeline lineno="8638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>always<sp/>eat<sp/>the<sp/>minimum<sp/>for<sp/>unlimited<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>collected<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>number<sp/>of<sp/>arguments<sp/>collected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result_count<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>variable<sp/>for<sp/>number<sp/>of<sp/>results<sp/>in<sp/>a<sp/>single<sp/>arg<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>purely<sp/>flag<sp/>like<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_num<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>op-&gt;get_flag_value(arg_name,<sp/>value);</highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(res);</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!value.empty())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>--this=value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(value,<sp/>result_count);</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collected<sp/>+=<sp/>result_count;</highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-Trest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8652"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rest.empty())<sp/>{</highlight></codeline>
<codeline lineno="8653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(rest,<sp/>result_count);</highlight></codeline>
<codeline lineno="8654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collected<sp/>+=<sp/>result_count;</highlight></codeline>
<codeline lineno="8657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8658"><highlight class="normal"></highlight></codeline>
<codeline lineno="8659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(min_num<sp/>&gt;<sp/>collected<sp/>&amp;&amp;<sp/>!args.empty())<sp/>{</highlight></codeline>
<codeline lineno="8661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>current_<sp/>=<sp/>args.back();</highlight></codeline>
<codeline lineno="8662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(current_,<sp/>result_count);</highlight></codeline>
<codeline lineno="8664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collected<sp/>+=<sp/>result_count;</highlight></codeline>
<codeline lineno="8666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8667"><highlight class="normal"></highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_num<sp/>&gt;<sp/>collected)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>run<sp/>out<sp/>of<sp/>arguments<sp/>and<sp/>the<sp/>minimum<sp/>was<sp/>not<sp/>met</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArgumentMismatch::TypedAtLeast(op-&gt;get_name(),<sp/>min_num,<sp/>op-&gt;get_type_name());</highlight></codeline>
<codeline lineno="8670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"></highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>check<sp/>for<sp/>optional<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_num<sp/>&gt;<sp/>collected<sp/>||<sp/>op-&gt;get_allow_extra_args())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>allow<sp/>optional<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remreqpos<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a700c8cbfaae70606739306bb20da82fd" kindref="member">_count_remaining_positionals</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>met<sp/>the<sp/>minimum<sp/>now<sp/>optionally<sp/>check<sp/>up<sp/>to<sp/>the<sp/>maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((collected<sp/>&lt;<sp/>max_num<sp/>||<sp/>op-&gt;get_allow_extra_args())<sp/>&amp;&amp;<sp/>!args.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" kindref="member">_recognize</ref>(args.back(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>detail::Classifier::NONE)<sp/>{</highlight></codeline>
<codeline lineno="8678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>required<sp/>positionals<sp/>remain,<sp/>don&apos;t<sp/>keep<sp/>eating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(remreqpos<sp/>&gt;=<sp/>args.size())<sp/>{</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a9d57d439abbeba97053e03494a8182bc" kindref="member">validate_optional_arguments_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>arg<sp/>=<sp/>args.back();</highlight></codeline>
<codeline lineno="8684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>op-&gt;_validate(arg,<sp/>0);</highlight></codeline>
<codeline lineno="8685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!arg.empty())<sp/>{</highlight></codeline>
<codeline lineno="8686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(args.back(),<sp/>result_count);</highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collected<sp/>+=<sp/>result_count;</highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8694"><highlight class="normal"></highlight></codeline>
<codeline lineno="8695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>--<sp/>to<sp/>end<sp/>an<sp/>unlimited<sp/>list<sp/>and<sp/>&quot;eat&quot;<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!args.empty()<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a92cf64ea5f2b6dc294d46fd93cd37ad1" kindref="member">_recognize</ref>(args.back())<sp/>==<sp/>detail::Classifier::POSITIONAL_MARK)</highlight></codeline>
<codeline lineno="8697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.pop_back();</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optional<sp/>flag<sp/>that<sp/>didn&apos;t<sp/>receive<sp/>anything<sp/>now<sp/>get<sp/>the<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_num<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>max_num<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>collected<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>op-&gt;get_flag_value(arg_name,<sp/>std::string{});</highlight></codeline>
<codeline lineno="8701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(res);</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a13120d6e51b1aeb506fa292a131fe4d5" kindref="member">parse_order_</ref>.push_back(op.get());</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>only<sp/>partially<sp/>completed<sp/>a<sp/>type<sp/>then<sp/>add<sp/>an<sp/>empty<sp/>string<sp/>if<sp/>allowed<sp/>for<sp/>later<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_num<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(collected<sp/>%<sp/>op-&gt;get_type_size_max())<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_type_size_max()<sp/>!=<sp/>op-&gt;get_type_size_min())<sp/>{</highlight></codeline>
<codeline lineno="8708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;add_result(std::string{});</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArgumentMismatch::PartialType(op-&gt;get_name(),<sp/>op-&gt;get_type_size_min(),<sp/>op-&gt;get_type_name());</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op-&gt;get_trigger_on_parse())<sp/>{</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;run_callback();</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rest.empty())<sp/>{</highlight></codeline>
<codeline lineno="8717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>rest;</highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.push_back(rest);</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8722"><highlight class="normal"></highlight></codeline>
<codeline lineno="8723" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adaf552824238b564e385d3acf1473984" kindref="member">App::_trigger_pre_parse</ref>(std::size_t<sp/>remaining_args)<sp/>{</highlight></codeline>
<codeline lineno="8724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" kindref="member">pre_parse_called_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" kindref="member">pre_parse_called_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" kindref="member">pre_parse_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a881fc51afc1112ab10a17e838f3fbbd8" kindref="member">pre_parse_callback_</ref>(remaining_args);</highlight></codeline>
<codeline lineno="8728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a39ce0692f580fef726e7f712a68c7f2b" kindref="member">immediate_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a4d739cc5d335052eb9f5b2ca559b81d1" kindref="member">name_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="8731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pcnt<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref>;</highlight></codeline>
<codeline lineno="8732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>extras<sp/>=<sp/>std::move(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>);</highlight></codeline>
<codeline lineno="8733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa3f6ca4ad5394c43f8e03c3285091507" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="8734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a110a8970bfc7c3d98d6af547c8155736" kindref="member">parsed_</ref><sp/>=<sp/>pcnt;</highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ae2ed4d0628ff1274797f448f7432c63f" kindref="member">pre_parse_called_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref><sp/>=<sp/>std::move(extras);</highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8740"><highlight class="normal"></highlight></codeline>
<codeline lineno="8741" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" refkind="member"><highlight class="normal">CLI11_INLINE<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a496d88dd5e7048950f3b83d20a49addc" kindref="member">App::_get_fallthrough_parent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" kindref="compound">HorribleError</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>Valid<sp/>parent&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*fallthrough_parent<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>;</highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((fallthrough_parent-&gt;parent_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(fallthrough_parent-&gt;get_name().empty()))<sp/>{</highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fallthrough_parent<sp/>=<sp/>fallthrough_parent-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a80d98ce72f07f1660562be6cb2ed9ebe" kindref="member">parent_</ref>;</highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fallthrough_parent;</highlight></codeline>
<codeline lineno="8750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8751"><highlight class="normal"></highlight></codeline>
<codeline lineno="8752" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" refkind="member"><highlight class="normal">CLI11_NODISCARD<sp/>CLI11_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">App::_compare_subcommand_names</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;subcom,</highlight></codeline>
<codeline lineno="8753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>&amp;base)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>estring;</highlight></codeline>
<codeline lineno="8755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a99314e5a65a40c5f4397b3438373fc69" kindref="member">disabled_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estring;</highlight></codeline>
<codeline lineno="8757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/>base.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc.get()<sp/>!=<sp/>&amp;subcom)<sp/>{</highlight></codeline>
<codeline lineno="8760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;disabled_)<sp/>{</highlight></codeline>
<codeline lineno="8761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;check_name(subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="8765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>();</highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subc-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" kindref="member">check_name</ref>(subc-&gt;get_name()))<sp/>{</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subc-&gt;get_name();</highlight></codeline>
<codeline lineno="8771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;les<sp/>:<sp/>subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab9eaf29a867a8f5a925bee2455ed6a48" kindref="member">aliases_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;check_name(les))<sp/>{</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>les;</highlight></codeline>
<codeline lineno="8776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>loop<sp/>is<sp/>needed<sp/>in<sp/>case<sp/>of<sp/>ignore_underscore<sp/>or<sp/>ignore_case<sp/>on<sp/>one<sp/>but<sp/>not<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;les<sp/>:<sp/>subc-&gt;aliases_)<sp/>{</highlight></codeline>
<codeline lineno="8780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac98b0dd4c9f86211fc75a4f5e56a003b" kindref="member">check_name</ref>(les))<sp/>{</highlight></codeline>
<codeline lineno="8781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>les;</highlight></codeline>
<codeline lineno="8782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>subcommand<sp/>is<sp/>an<sp/>option<sp/>group<sp/>we<sp/>need<sp/>to<sp/>check<sp/>deeper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="8786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cmpres<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(subcom,<sp/>*subc);</highlight></codeline>
<codeline lineno="8787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!cmpres.empty())<sp/>{</highlight></codeline>
<codeline lineno="8788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmpres;</highlight></codeline>
<codeline lineno="8789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>test<sp/>subcommand<sp/>is<sp/>an<sp/>option<sp/>group<sp/>we<sp/>need<sp/>to<sp/>check<sp/>deeper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom.<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="8793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cmpres<sp/>=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a494962df3e841a5c4099a6bd3f3c97e6" kindref="member">_compare_subcommand_names</ref>(*subc,<sp/>subcom);</highlight></codeline>
<codeline lineno="8794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!cmpres.empty())<sp/>{</highlight></codeline>
<codeline lineno="8795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmpres;</highlight></codeline>
<codeline lineno="8796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estring;</highlight></codeline>
<codeline lineno="8801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8802"><highlight class="normal"></highlight></codeline>
<codeline lineno="8803" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af3426a99585be70b394d06050ec03682" kindref="member">App::_move_to_missing</ref>(detail::Classifier<sp/>val_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="8804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aeee1d0ef7a9d596e22c9ac1d18fac7ec" kindref="member">allow_extras_</ref><sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="8805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>.emplace_back(val_type,<sp/>val);</highlight></codeline>
<codeline lineno="8806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>extra<sp/>arguments<sp/>to<sp/>be<sp/>places<sp/>in<sp/>an<sp/>option<sp/>group<sp/>if<sp/>it<sp/>is<sp/>allowed<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subc-&gt;name_.empty()<sp/>&amp;&amp;<sp/>subc-&gt;allow_extras_)<sp/>{</highlight></codeline>
<codeline lineno="8811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subc-&gt;missing_.emplace_back(val_type,<sp/>val);</highlight></codeline>
<codeline lineno="8812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>haven&apos;t<sp/>found<sp/>any<sp/>place<sp/>to<sp/>put<sp/>them<sp/>yet<sp/>put<sp/>them<sp/>in<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8fecc10860f2447333baf56575a8eaae" kindref="member">missing_</ref>.emplace_back(val_type,<sp/>val);</highlight></codeline>
<codeline lineno="8817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"></highlight></codeline>
<codeline lineno="8819" refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" refkind="member"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aab5983bc69b8b47ff057f34073bc1351" kindref="member">App::_move_option</ref>(Option<sp/>*opt,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;the<sp/>option<sp/>is<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>that<sp/>the<sp/>give<sp/>app<sp/>is<sp/>actually<sp/>a<sp/>subcommand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;subc<sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aae1b7307a6db9206d24a26bfe2877398" kindref="member">subcommands_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app<sp/>==<sp/>subc.get())<sp/>{</highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!found)<sp/>{</highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>Given<sp/>app<sp/>is<sp/>not<sp/>a<sp/>subcommand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8833"><highlight class="normal"></highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a886b01a2c0ca0e980bbfb726a30ca75a" kindref="member">help_ptr_</ref><sp/>==<sp/>opt)<sp/>||<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a2fdae2dfdb0b525eb1e1306e32903552" kindref="member">help_all_ptr_</ref><sp/>==<sp/>opt))</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;cannot<sp/>move<sp/>help<sp/>options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8836"><highlight class="normal"></highlight></codeline>
<codeline lineno="8837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aff78d3a5f9f1ae70ccad1b54536cb825" kindref="member">config_ptr_</ref><sp/>==<sp/>opt)</highlight></codeline>
<codeline lineno="8838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;cannot<sp/>move<sp/>config<sp/>file<sp/>options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8839"><highlight class="normal"></highlight></codeline>
<codeline lineno="8840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iterator<sp/>=</highlight></codeline>
<codeline lineno="8841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(std::begin(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[opt](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.get()<sp/>==<sp/>opt;<sp/>});</highlight></codeline>
<codeline lineno="8842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator<sp/>!=<sp/>std::end(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="8843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;opt_p<sp/>=<sp/>*iterator;</highlight></codeline>
<codeline lineno="8844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find_if(std::begin(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>std::end(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>),<sp/>[&amp;opt_p](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option_p<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(*v<sp/>==<sp/>*opt_p);</highlight></codeline>
<codeline lineno="8846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>==<sp/>std::end(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="8847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>erase<sp/>after<sp/>the<sp/>insertion<sp/>was<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.push_back(std::move(*iterator));</highlight></codeline>
<codeline lineno="8849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a25093d3bb984f31cea8aa91e5c70eb89" kindref="member">options_</ref>.erase(iterator);</highlight></codeline>
<codeline lineno="8850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" kindref="compound">OptionAlreadyAdded</ref>(</highlight><highlight class="stringliteral">&quot;option<sp/>was<sp/>not<sp/>located:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>opt-&gt;get_name());</highlight></codeline>
<codeline lineno="8852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8853"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" kindref="compound">OptionNotFound</ref>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>locate<sp/>the<sp/>given<sp/>Option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8857"><highlight class="normal"></highlight></codeline>
<codeline lineno="8858"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOn(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*trigger_app,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8859"><highlight class="normal"><sp/><sp/><sp/><sp/>app_to_enable-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a998cc0b044ff3921c23acf073ef251d3" kindref="member">enabled_by_default</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8860"><highlight class="normal"><sp/><sp/><sp/><sp/>app_to_enable-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab2d6a69ab64b222cc723cefce4c92493" kindref="member">disabled_by_default</ref>();</highlight></codeline>
<codeline lineno="8861"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a68f0feab1c657383b1c1e21b35d1c779" kindref="member">preparse_callback</ref>([app_to_enable](std::size_t)<sp/>{<sp/>app_to_enable-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ab7f3149ed992c3f85500af05e782da2c" kindref="member">disabled</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="8862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8863"><highlight class="normal"></highlight></codeline>
<codeline lineno="8864"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOn(App<sp/>*trigger_app,<sp/>std::vector&lt;App<sp/>*&gt;<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;app<sp/>:<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;enabled_by_default(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;disabled_by_default();</highlight></codeline>
<codeline lineno="8868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8869"><highlight class="normal"></highlight></codeline>
<codeline lineno="8870"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_app-&gt;preparse_callback([apps_to_enable](std::size_t)<sp/>{</highlight></codeline>
<codeline lineno="8871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;app<sp/>:<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;disabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8874"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="8875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8876"><highlight class="normal"></highlight></codeline>
<codeline lineno="8877"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOff(App<sp/>*trigger_app,<sp/>App<sp/>*app_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8878"><highlight class="normal"><sp/><sp/><sp/><sp/>app_to_enable-&gt;disabled_by_default(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8879"><highlight class="normal"><sp/><sp/><sp/><sp/>app_to_enable-&gt;enabled_by_default();</highlight></codeline>
<codeline lineno="8880"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_app-&gt;preparse_callback([app_to_enable](std::size_t)<sp/>{<sp/>app_to_enable-&gt;disabled();<sp/>});</highlight></codeline>
<codeline lineno="8881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"></highlight></codeline>
<codeline lineno="8883"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerOff(App<sp/>*trigger_app,<sp/>std::vector&lt;App<sp/>*&gt;<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;app<sp/>:<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;disabled_by_default(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;enabled_by_default();</highlight></codeline>
<codeline lineno="8887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8888"><highlight class="normal"></highlight></codeline>
<codeline lineno="8889"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_app-&gt;preparse_callback([apps_to_enable](std::size_t)<sp/>{</highlight></codeline>
<codeline lineno="8890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;app<sp/>:<sp/>apps_to_enable)<sp/>{</highlight></codeline>
<codeline lineno="8891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;disabled();</highlight></codeline>
<codeline lineno="8892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8893"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="8894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8895"><highlight class="normal"></highlight></codeline>
<codeline lineno="8896"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deprecate_option(Option<sp/>*opt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;replacement)<sp/>{</highlight></codeline>
<codeline lineno="8897"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator<sp/>deprecate_warning{[opt,<sp/>replacement](std::string<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="8898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>opt-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>deprecated<sp/>please<sp/>use<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>replacement</highlight></codeline>
<codeline lineno="8899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>instead\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="8901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DEPRECATED&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/>deprecate_warning.application_index(0);</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;check(deprecate_warning);</highlight></codeline>
<codeline lineno="8905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!replacement.empty())<sp/>{</highlight></codeline>
<codeline lineno="8906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;description(opt-&gt;get_description()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>DEPRECATED:<sp/>please<sp/>use<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>replacement<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8909"><highlight class="normal"></highlight></codeline>
<codeline lineno="8910"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>*app,<sp/>Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/>temp;</highlight></codeline>
<codeline lineno="8912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*option_copy<sp/>=<sp/>temp.add_option(opt-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;type_size(opt-&gt;get_type_size_min(),<sp/>opt-&gt;get_type_size_max())</highlight></codeline>
<codeline lineno="8914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;expected(opt-&gt;get_expected_min(),<sp/>opt-&gt;get_expected_max())</highlight></codeline>
<codeline lineno="8915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;allow_extra_args(opt-&gt;get_allow_extra_args());</highlight></codeline>
<codeline lineno="8916"><highlight class="normal"></highlight></codeline>
<codeline lineno="8917"><highlight class="normal"><sp/><sp/><sp/><sp/>app-&gt;remove_option(opt);</highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt2<sp/>=<sp/>app-&gt;add_option(option_copy-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;option<sp/>has<sp/>been<sp/>retired<sp/>and<sp/>has<sp/>no<sp/>effect&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;type_name(</highlight><highlight class="stringliteral">&quot;RETIRED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;default_str(</highlight><highlight class="stringliteral">&quot;RETIRED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;type_size(option_copy-&gt;get_type_size_min(),<sp/>option_copy-&gt;get_type_size_max())</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;expected(option_copy-&gt;get_expected_min(),<sp/>option_copy-&gt;get_expected_max())</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;allow_extra_args(option_copy-&gt;get_allow_extra_args());</highlight></codeline>
<codeline lineno="8924"><highlight class="normal"></highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator<sp/>retired_warning{[opt2](std::string<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="8926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt2-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>retired<sp/>and<sp/>has<sp/>no<sp/>effect\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="8928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="8929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8930"><highlight class="normal"><sp/><sp/><sp/><sp/>retired_warning.application_index(0);</highlight></codeline>
<codeline lineno="8931"><highlight class="normal"><sp/><sp/><sp/><sp/>opt2-&gt;check(retired_warning);</highlight></codeline>
<codeline lineno="8932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8933"><highlight class="normal"></highlight></codeline>
<codeline lineno="8934"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>&amp;app,<sp/>Option<sp/>*opt)<sp/>{<sp/>retire_option(&amp;app,<sp/>opt);<sp/>}</highlight></codeline>
<codeline lineno="8935"><highlight class="normal"></highlight></codeline>
<codeline lineno="8936"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name)<sp/>{</highlight></codeline>
<codeline lineno="8937"><highlight class="normal"></highlight></codeline>
<codeline lineno="8938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt<sp/>=<sp/>app-&gt;get_option_no_throw(option_name);</highlight></codeline>
<codeline lineno="8939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retire_option(app,<sp/>opt);</highlight></codeline>
<codeline lineno="8941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*opt2<sp/>=<sp/>app-&gt;add_option(option_name,<sp/></highlight><highlight class="stringliteral">&quot;option<sp/>has<sp/>been<sp/>retired<sp/>and<sp/>has<sp/>no<sp/>effect&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;type_name(</highlight><highlight class="stringliteral">&quot;RETIRED&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;expected(0,<sp/>1)</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;default_str(</highlight><highlight class="stringliteral">&quot;RETIRED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8947"><highlight class="normal"><sp/><sp/><sp/><sp/>Validator<sp/>retired_warning{[opt2](std::string<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="8948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt2-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>retired<sp/>and<sp/>has<sp/>no<sp/>effect\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="8950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="8951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8952"><highlight class="normal"><sp/><sp/><sp/><sp/>retired_warning.application_index(0);</highlight></codeline>
<codeline lineno="8953"><highlight class="normal"><sp/><sp/><sp/><sp/>opt2-&gt;check(retired_warning);</highlight></codeline>
<codeline lineno="8954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"></highlight></codeline>
<codeline lineno="8956"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>retire_option(App<sp/>&amp;app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;option_name)<sp/>{<sp/>retire_option(&amp;app,<sp/>option_name);<sp/>}</highlight></codeline>
<codeline lineno="8957"><highlight class="normal"></highlight></codeline>
<codeline lineno="8958"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">FailureMessage<sp/>{</highlight></codeline>
<codeline lineno="8959"><highlight class="normal"></highlight></codeline>
<codeline lineno="8960"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>simple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>header<sp/>=<sp/>std::string(e.what())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"></highlight></codeline>
<codeline lineno="8964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;get_help_ptr()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(app-&gt;get_help_ptr()-&gt;get_name());</highlight></codeline>
<codeline lineno="8967"><highlight class="normal"></highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;get_help_all_ptr()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(app-&gt;get_help_all_ptr()-&gt;get_name());</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"></highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>names<sp/>found,<sp/>suggest<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!names.empty())</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>with<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>detail::join(names,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>more<sp/>information.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8974"><highlight class="normal"></highlight></codeline>
<codeline lineno="8975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header;</highlight></codeline>
<codeline lineno="8976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"></highlight></codeline>
<codeline lineno="8978"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>help(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>App<sp/>*app,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Error<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>header<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;ERROR:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>e.get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>e.what()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/><sp/><sp/>header<sp/>+=<sp/>app-&gt;help();</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header;</highlight></codeline>
<codeline lineno="8982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8983"><highlight class="normal"></highlight></codeline>
<codeline lineno="8984"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>FailureMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8985"><highlight class="normal"></highlight></codeline>
<codeline lineno="8986"><highlight class="normal"></highlight></codeline>
<codeline lineno="8987"><highlight class="normal"></highlight></codeline>
<codeline lineno="8988"><highlight class="normal"></highlight></codeline>
<codeline lineno="8989"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="8990"><highlight class="normal"></highlight></codeline>
<codeline lineno="8991"><highlight class="normal">std::string<sp/>convert_arg_for_ini(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stringQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>characterQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"></highlight></codeline>
<codeline lineno="8994"><highlight class="normal">std::string<sp/>ini_join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;args,</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sepChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayStart<sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayEnd<sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stringQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>characterQuote<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9000"><highlight class="normal"></highlight></codeline>
<codeline lineno="9001"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>generate_parents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;section,<sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>parentSeparator);</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"></highlight></codeline>
<codeline lineno="9004"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkParentSegments(std::vector&lt;ConfigItem&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;currentSection,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>parentSeparator);</highlight></codeline>
<codeline lineno="9005"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9006"><highlight class="normal"></highlight></codeline>
<codeline lineno="9007"><highlight class="normal"></highlight></codeline>
<codeline lineno="9008"><highlight class="normal"></highlight></codeline>
<codeline lineno="9009"><highlight class="normal"></highlight></codeline>
<codeline lineno="9010"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="9011"><highlight class="normal"></highlight></codeline>
<codeline lineno="9012"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>convert_arg_for_ini(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stringQuote,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>characterQuote)<sp/>{</highlight></codeline>
<codeline lineno="9013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.empty())<sp/>{</highlight></codeline>
<codeline lineno="9014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(2,<sp/>stringQuote);</highlight></codeline>
<codeline lineno="9015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>specifically<sp/>supported<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nan&quot;</highlight><highlight class="normal"><sp/>||<sp/>arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="9019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>floating<sp/>point<sp/>conversion<sp/>can<sp/>convert<sp/>some<sp/>hex<sp/>codes,<sp/>but<sp/>don&apos;t<sp/>try<sp/>that<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.compare(0,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>arg.compare(0,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;0X&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="9023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::lexical_cast(arg,<sp/>val))<sp/>{</highlight></codeline>
<codeline lineno="9024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>quote<sp/>a<sp/>single<sp/>non<sp/>numeric<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/>characterQuote)<sp/>+<sp/>arg<sp/>+<sp/>characterQuote;</highlight></codeline>
<codeline lineno="9030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>hex,<sp/>binary<sp/>or<sp/>octal<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::all_of(arg.begin()<sp/>+<sp/>2,<sp/>arg.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(x<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(x<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="9038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::all_of(arg.begin()<sp/>+<sp/>2,<sp/>arg.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">);<sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="9041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="9042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::all_of(arg.begin()<sp/>+<sp/>2,<sp/>arg.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>x<sp/>==<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">);<sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="9046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.find_first_of(stringQuote)<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/>stringQuote)<sp/>+<sp/>arg<sp/>+<sp/>stringQuote;</highlight></codeline>
<codeline lineno="9051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>characterQuote<sp/>+<sp/>arg<sp/>+<sp/>characterQuote;</highlight></codeline>
<codeline lineno="9053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9054"><highlight class="normal"></highlight></codeline>
<codeline lineno="9055"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/>ini_join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;args,</highlight></codeline>
<codeline lineno="9056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sepChar,</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayStart,</highlight></codeline>
<codeline lineno="9058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>arrayEnd,</highlight></codeline>
<codeline lineno="9059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stringQuote,</highlight></codeline>
<codeline lineno="9060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>characterQuote)<sp/>{</highlight></codeline>
<codeline lineno="9061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>joined;</highlight></codeline>
<codeline lineno="9062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>arrayStart<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joined.push_back(arrayStart);</highlight></codeline>
<codeline lineno="9064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9065"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="9067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(start++<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joined.push_back(sepChar);</highlight></codeline>
<codeline lineno="9069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!std::isspace&lt;char&gt;(sepChar,<sp/>std::locale()))<sp/>{</highlight></codeline>
<codeline lineno="9070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joined.push_back(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joined.append(convert_arg_for_ini(arg,<sp/>stringQuote,<sp/>characterQuote));</highlight></codeline>
<codeline lineno="9074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>arrayEnd<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joined.push_back(arrayEnd);</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>joined;</highlight></codeline>
<codeline lineno="9079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9080"><highlight class="normal"></highlight></codeline>
<codeline lineno="9081"><highlight class="normal">CLI11_INLINE<sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="9082"><highlight class="normal">generate_parents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;section,<sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>parentSeparator)<sp/>{</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parents;</highlight></codeline>
<codeline lineno="9084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::to_lower(section)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(section.find(parentSeparator)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parents<sp/>=<sp/>detail::split(section,<sp/>parentSeparator);</highlight></codeline>
<codeline lineno="9087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parents<sp/>=<sp/>{section};</highlight></codeline>
<codeline lineno="9089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.find(parentSeparator)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>plist<sp/>=<sp/>detail::split(name,<sp/>parentSeparator);</highlight></codeline>
<codeline lineno="9093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>plist.back();</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_quotes(name);</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plist.pop_back();</highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parents.insert(parents.end(),<sp/>plist.begin(),<sp/>plist.end());</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9098"><highlight class="normal"></highlight></codeline>
<codeline lineno="9099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>quotes<sp/>on<sp/>the<sp/>parents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;parent<sp/>:<sp/>parents)<sp/>{</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_quotes(parent);</highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parents;</highlight></codeline>
<codeline lineno="9104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"></highlight></codeline>
<codeline lineno="9106"><highlight class="normal">CLI11_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9107"><highlight class="normal">checkParentSegments(std::vector&lt;ConfigItem&gt;<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;currentSection,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>parentSeparator)<sp/>{</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"></highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>estring;</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parents<sp/>=<sp/>detail::generate_parents(currentSection,<sp/>estring,<sp/>parentSeparator);</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!output.empty()<sp/>&amp;&amp;<sp/>output.back().name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>msize<sp/>=<sp/>(parents.size()<sp/>&gt;<sp/>1U)<sp/>?<sp/>parents.size()<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(output.back().parents.size()<sp/>&gt;=<sp/>msize)<sp/>{</highlight></codeline>
<codeline lineno="9114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(output.back());</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents.pop_back();</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9117"><highlight class="normal"></highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parents.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>common<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mpair<sp/>=<sp/>(std::min)(output.back().parents.size(),<sp/>parents.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="9121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>mpair;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(output.back().parents[ii]<sp/>!=<sp/>parents[ii])<sp/>{</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++common;</highlight></codeline>
<codeline lineno="9126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(common<sp/>==<sp/>mpair)<sp/>{</highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.pop_back();</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(output.back().parents.size()<sp/>&gt;<sp/>common<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(output.back());</highlight></codeline>
<codeline lineno="9132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents.pop_back();</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ii<sp/>=<sp/>common;<sp/>ii<sp/>&lt;<sp/>parents.size()<sp/>-<sp/>1;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents.assign(parents.begin(),<sp/>parents.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(ii)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="9138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parents.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>parents.size()<sp/>-<sp/>1;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents.assign(parents.begin(),<sp/>parents.begin()<sp/>+<sp/>static_cast&lt;std::ptrdiff_t&gt;(ii)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9148"><highlight class="normal"></highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>a<sp/>section<sp/>end<sp/>which<sp/>is<sp/>just<sp/>an<sp/>empty<sp/>items_buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9150"><highlight class="normal"><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"><sp/><sp/><sp/><sp/>output.back().parents<sp/>=<sp/>std::move(parents);</highlight></codeline>
<codeline lineno="9152"><highlight class="normal"><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9154"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9155"><highlight class="normal"></highlight></codeline>
<codeline lineno="9156" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1acf1889b875cdb9fad67171a49d9f2b7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;ConfigItem&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1acf1889b875cdb9fad67171a49d9f2b7c" kindref="member">ConfigBase::from_config</ref>(std::istream<sp/>&amp;input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>currentSection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>previousSection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ConfigItem&gt;<sp/>output;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDefaultArray<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a56eaf0de3392849b4b85e7fa191bf54d" kindref="member">arrayEnd</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a360531fdf0529252ca32fe16010bab62" kindref="member">arraySeparator</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isINIArray<sp/>=<sp/>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref><sp/>==<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a56eaf0de3392849b4b85e7fa191bf54d" kindref="member">arrayEnd</ref>;</highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSection{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aStart<sp/>=<sp/>(isINIArray)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref>;</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aEnd<sp/>=<sp/>(isINIArray)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a56eaf0de3392849b4b85e7fa191bf54d" kindref="member">arrayEnd</ref>;</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>aSep<sp/>=<sp/>(isINIArray<sp/>&amp;&amp;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a360531fdf0529252ca32fe16010bab62" kindref="member">arraySeparator</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a360531fdf0529252ca32fe16010bab62" kindref="member">arraySeparator</ref>;</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentSectionIndex{0};</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(input,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>items_buffer;</highlight></codeline>
<codeline lineno="9170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="9171"><highlight class="normal"></highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(line);</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>len<sp/>=<sp/>line.length();</highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lines<sp/>have<sp/>to<sp/>be<sp/>at<sp/>least<sp/>3<sp/>characters<sp/>to<sp/>have<sp/>any<sp/>meaning<sp/>to<sp/>CLI<sp/>just<sp/>skip<sp/>the<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(line.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>line.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSection<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>a<sp/>section<sp/>end<sp/>which<sp/>is<sp/>just<sp/>an<sp/>empty<sp/>items_buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents<sp/>=<sp/>detail::generate_parents(currentSection,<sp/>name,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>);</highlight></codeline>
<codeline lineno="9183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSection<sp/>=<sp/>line.substr(1,<sp/>len<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>double<sp/>brackets<sp/>for<sp/>TOML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSection.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>currentSection.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>currentSection.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSection<sp/>=<sp/>currentSection.substr(1,<sp/>currentSection.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detail::to_lower(currentSection)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::checkParentSegments(output,<sp/>currentSection,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>);</highlight></codeline>
<codeline lineno="9194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inSection<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSection<sp/>==<sp/>previousSection)<sp/>{</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++currentSectionIndex;</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSectionIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousSection<sp/>=<sp/>currentSection;</highlight></codeline>
<codeline lineno="9201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9204"><highlight class="normal"></highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comment<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(line.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>||<sp/>line.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>||<sp/>line.front()<sp/>==<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a32fee0528b065ec8a17773f54b861b06" kindref="member">commentChar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9209"><highlight class="normal"></highlight></codeline>
<codeline lineno="9210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>=<sp/>in<sp/>string,<sp/>split<sp/>and<sp/>recombine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>line.find(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a8ec511c53144b5b018f54731b848a0a8" kindref="member">valueDelimiter</ref>);</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>detail::trim_copy(line.substr(0,<sp/>pos));</highlight></codeline>
<codeline lineno="9214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>item<sp/>=<sp/>detail::trim_copy(line.substr(pos<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cloc<sp/>=<sp/>item.find(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a32fee0528b065ec8a17773f54b861b06" kindref="member">commentChar</ref>);</highlight></codeline>
<codeline lineno="9216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cloc<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.erase(cloc,<sp/>std::string::npos);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(readability-suspicious-call-argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(item);</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>item.front()<sp/>==<sp/>aStart)<sp/>{</highlight></codeline>
<codeline lineno="9221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>multiline;<sp/>item.back()<sp/>!=<sp/>aEnd<sp/>&amp;&amp;<sp/>std::getline(input,<sp/>multiline);)<sp/>{</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(multiline);</highlight></codeline>
<codeline lineno="9223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>+=<sp/>multiline;</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items_buffer<sp/>=<sp/>detail::split_up(item.substr(1,<sp/>item.length()<sp/>-<sp/>2),<sp/>aSep);</highlight></codeline>
<codeline lineno="9226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((isDefaultArray<sp/>||<sp/>isINIArray)<sp/>&amp;&amp;<sp/>item.find_first_of(aSep)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items_buffer<sp/>=<sp/>detail::split_up(item,<sp/>aSep);</highlight></codeline>
<codeline lineno="9228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((isDefaultArray<sp/>||<sp/>isINIArray)<sp/>&amp;&amp;<sp/>item.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items_buffer<sp/>=<sp/>detail::split_up(item);</highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items_buffer<sp/>=<sp/>{item};</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>detail::trim_copy(line);</highlight></codeline>
<codeline lineno="9235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cloc<sp/>=<sp/>name.find(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a32fee0528b065ec8a17773f54b861b06" kindref="member">commentChar</ref>);</highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cloc<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.erase(cloc,<sp/>std::string::npos);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(readability-suspicious-call-argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::trim(name);</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"></highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items_buffer<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name.find(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>)<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_quotes(name);</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>quotes<sp/>on<sp/>the<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;it<sp/>:<sp/>items_buffer)<sp/>{</highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_quotes(it);</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"></highlight></codeline>
<codeline lineno="9251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parents<sp/>=<sp/>detail::generate_parents(currentSection,<sp/>name,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>);</highlight></codeline>
<codeline lineno="9252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parents.size()<sp/>&gt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ae1c67a53ed3001f295015cd67a1fc2d9" kindref="member">maximumLayers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af6f95790111f7b908e19486613bbd3cf" kindref="member">configSection</ref>.empty()<sp/>&amp;&amp;<sp/>!inSection)<sp/>{</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parents.empty()<sp/>||<sp/>parents.front()<sp/>!=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af6f95790111f7b908e19486613bbd3cf" kindref="member">configSection</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a7fe2b0d58bb559eb374bc2ae45037d53" kindref="member">configIndex</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>currentSectionIndex<sp/>!=<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a7fe2b0d58bb559eb374bc2ae45037d53" kindref="member">configIndex</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parents.erase(parents.begin());</highlight></codeline>
<codeline lineno="9263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inSection<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!output.empty()<sp/>&amp;&amp;<sp/>name<sp/>==<sp/>output.back().name<sp/>&amp;&amp;<sp/>parents<sp/>==<sp/>output.back().parents)<sp/>{</highlight></codeline>
<codeline lineno="9266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().inputs.insert(output.back().inputs.end(),<sp/>items_buffer.begin(),<sp/>items_buffer.end());</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents<sp/>=<sp/>std::move(parents);</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/>std::move(name);</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().inputs<sp/>=<sp/>std::move(items_buffer);</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSection<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>a<sp/>section<sp/>end<sp/>which<sp/>is<sp/>just<sp/>an<sp/>empty<sp/>items_buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ename;</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back();</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents<sp/>=<sp/>detail::generate_parents(currentSection,<sp/>ename,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>);</highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(output.back().parents.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(output.back());</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.back().parents.pop_back();</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="9286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9287"><highlight class="normal"></highlight></codeline>
<codeline lineno="9288"><highlight class="normal">CLI11_INLINE<sp/>std::string</highlight></codeline>
<codeline lineno="9289" refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a68e8309bd884ec5c3f5d6b3aef9f45d0" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a68e8309bd884ec5c3f5d6b3aef9f45d0" kindref="member">ConfigBase::to_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_also,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_description,<sp/>std::string<sp/>prefix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>commentLead;</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"><sp/><sp/><sp/><sp/>commentLead.push_back(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a32fee0528b065ec8a17773f54b861b06" kindref="member">commentChar</ref>);</highlight></codeline>
<codeline lineno="9293"><highlight class="normal"><sp/><sp/><sp/><sp/>commentLead.push_back(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"></highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>groups<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" kindref="member">get_groups</ref>();</highlight></codeline>
<codeline lineno="9296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaultUsed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9297"><highlight class="normal"><sp/><sp/><sp/><sp/>groups.insert(groups.begin(),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(write_description<sp/>&amp;&amp;<sp/>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8a16a63a10270e0fff7d240ed4822cfd" kindref="member">get_configurable</ref>()<sp/>||<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty()))<sp/>{</highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>commentLead<sp/>&lt;&lt;<sp/>detail::fix_newlines(commentLead,<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" kindref="member">get_description</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;group<sp/>:<sp/>groups)<sp/>{</highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(group<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal"><sp/>||<sp/>group.empty())<sp/>{</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(defaultUsed)<sp/>{</highlight></codeline>
<codeline lineno="9304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaultUsed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(write_description<sp/>&amp;&amp;<sp/>group<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!group.empty())<sp/>{</highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commentLead<sp/>&lt;&lt;<sp/>group<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Options\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt<sp/>:<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>({}))<sp/>{</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"></highlight></codeline>
<codeline lineno="9313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>process<sp/>options<sp/>that<sp/>are<sp/>configurable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_configurable())<sp/>{</highlight></codeline>
<codeline lineno="9315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_group()<sp/>!=<sp/>group)<sp/>{</highlight></codeline>
<codeline lineno="9316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(group<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>opt-&gt;get_group().empty()))<sp/>{</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>prefix<sp/>+<sp/>opt-&gt;get_single_name();</highlight></codeline>
<codeline lineno="9321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>detail::ini_join(</highlight></codeline>
<codeline lineno="9322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt-&gt;reduced_results(),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a360531fdf0529252ca32fe16010bab62" kindref="member">arraySeparator</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a0730bd934921aaf3b925bc04a6a7df7b" kindref="member">arrayStart</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a56eaf0de3392849b4b85e7fa191bf54d" kindref="member">arrayEnd</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a09c4bad7bea1c7e375578549516290d2" kindref="member">stringQuote</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af45bfe80a0bc1056d4ad8dea158cbcc0" kindref="member">characterQuote</ref>);</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"></highlight></codeline>
<codeline lineno="9324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value.empty()<sp/>&amp;&amp;<sp/>default_also)<sp/>{</highlight></codeline>
<codeline lineno="9325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_default_str().empty())<sp/>{</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::convert_arg_for_ini(opt-&gt;get_default_str(),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a09c4bad7bea1c7e375578549516290d2" kindref="member">stringQuote</ref>,<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1af45bfe80a0bc1056d4ad8dea158cbcc0" kindref="member">characterQuote</ref>);</highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_expected_min()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_run_callback_for_default())<sp/>{</highlight></codeline>
<codeline lineno="9330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\&quot;&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>string<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9333"><highlight class="normal"></highlight></codeline>
<codeline lineno="9334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!value.empty())<sp/>{</highlight></codeline>
<codeline lineno="9335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_fnames().empty())<sp/>{</highlight></codeline>
<codeline lineno="9336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>opt-&gt;get_flag_value(name,<sp/>value);</highlight></codeline>
<codeline lineno="9337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(write_description<sp/>&amp;&amp;<sp/>opt-&gt;has_description())<sp/>{</highlight></codeline>
<codeline lineno="9339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>commentLead<sp/>&lt;&lt;<sp/>detail::fix_newlines(commentLead,<sp/>opt-&gt;get_description())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a8ec511c53144b5b018f54731b848a0a8" kindref="member">valueDelimiter</ref><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subcommands<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>({});</highlight></codeline>
<codeline lineno="9348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom<sp/>:<sp/>subcommands)<sp/>{</highlight></codeline>
<codeline lineno="9349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="9350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(write_description<sp/>&amp;&amp;<sp/>!subcom-&gt;get_group().empty())<sp/>{</highlight></codeline>
<codeline lineno="9351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commentLead<sp/>&lt;&lt;<sp/>subcom-&gt;get_group()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Options\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a68e8309bd884ec5c3f5d6b3aef9f45d0" kindref="member">to_config</ref>(subcom,<sp/>default_also,<sp/>write_description,<sp/>prefix);</highlight></codeline>
<codeline lineno="9354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9356"><highlight class="normal"></highlight></codeline>
<codeline lineno="9357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*subcom<sp/>:<sp/>subcommands)<sp/>{</highlight></codeline>
<codeline lineno="9358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!subcom-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="9359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcom-&gt;get_configurable()<sp/>&amp;&amp;<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1af91e12fbe8e73dacf3f07fa3e0336ef5" kindref="member">got_subcommand</ref>(subcom))<sp/>{</highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!prefix.empty()<sp/>||<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/>subcom-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>subname<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>()<sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref><sp/>+<sp/>subcom-&gt;get_name();</highlight></codeline>
<codeline lineno="9364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>();</highlight></codeline>
<codeline lineno="9365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(p-&gt;get_parent()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subname<sp/>=<sp/>p-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>()<sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref><sp/>+<sp/>subname;</highlight></codeline>
<codeline lineno="9367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p-&gt;get_parent();</highlight></codeline>
<codeline lineno="9368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>subname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a68e8309bd884ec5c3f5d6b3aef9f45d0" kindref="member">to_config</ref>(subcom,<sp/>default_also,<sp/>write_description,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1a68e8309bd884ec5c3f5d6b3aef9f45d0" kindref="member">to_config</ref>(</highlight></codeline>
<codeline lineno="9374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcom,<sp/>default_also,<sp/>write_description,<sp/>prefix<sp/>+<sp/>subcom-&gt;get_name()<sp/>+<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base_1ac36c1192b8a349efc6db0f23e2fc8d08" kindref="member">parentSeparatorChar</ref>);</highlight></codeline>
<codeline lineno="9375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9378"><highlight class="normal"></highlight></codeline>
<codeline lineno="9379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9381"><highlight class="normal"></highlight></codeline>
<codeline lineno="9382"><highlight class="normal"></highlight></codeline>
<codeline lineno="9383"><highlight class="normal"></highlight></codeline>
<codeline lineno="9384"><highlight class="normal"></highlight></codeline>
<codeline lineno="9385"><highlight class="normal"></highlight></codeline>
<codeline lineno="9386"><highlight class="normal"></highlight></codeline>
<codeline lineno="9387"><highlight class="normal">CLI11_INLINE<sp/>std::string</highlight></codeline>
<codeline lineno="9388" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" refkind="member"><highlight class="normal"><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" kindref="member">Formatter::make_group</ref>(std::string<sp/>group,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_positional,<sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>opts)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9389"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9390"><highlight class="normal"></highlight></codeline>
<codeline lineno="9391"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>group<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt<sp/>:<sp/>opts)<sp/>{</highlight></codeline>
<codeline lineno="9393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a91e523f9b87c5dece0dd92c17d8105b8" kindref="member">make_option</ref>(opt,<sp/>is_positional);</highlight></codeline>
<codeline lineno="9394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9395"><highlight class="normal"></highlight></codeline>
<codeline lineno="9396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9398"><highlight class="normal"></highlight></codeline>
<codeline lineno="9399" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" kindref="member">Formatter::make_positionals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>opts<sp/>=</highlight></codeline>
<codeline lineno="9401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!opt-&gt;get_group().empty()<sp/>&amp;&amp;<sp/>opt-&gt;get_positional();<sp/>});</highlight></codeline>
<codeline lineno="9402"><highlight class="normal"></highlight></codeline>
<codeline lineno="9403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts.empty())</highlight></codeline>
<codeline lineno="9404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="9405"><highlight class="normal"></highlight></codeline>
<codeline lineno="9406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" kindref="member">make_group</ref>(<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;Positionals&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>opts);</highlight></codeline>
<codeline lineno="9407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9408"><highlight class="normal"></highlight></codeline>
<codeline lineno="9409" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" kindref="member">Formatter::make_groups</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>AppFormatMode<sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9410"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9411"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>groups<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" kindref="member">get_groups</ref>();</highlight></codeline>
<codeline lineno="9412"><highlight class="normal"></highlight></codeline>
<codeline lineno="9413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;group<sp/>:<sp/>groups)<sp/>{</highlight></codeline>
<codeline lineno="9415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>opts<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>([app,<sp/>mode,<sp/>&amp;group](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="9416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_group()<sp/>==<sp/>group<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>in<sp/>the<sp/>right<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>opt-&gt;nonpositional()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>a<sp/>positional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(mode<sp/>!=<sp/>AppFormatMode::Sub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>mode<sp/>is<sp/>Sub,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ada205a3a579f0fa1b710c54a1f62f070" kindref="member">get_help_ptr</ref>()<sp/>!=<sp/>opt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>help<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a062c29c8dba654a721e60ecf24490ce1" kindref="member">get_help_all_ptr</ref>()<sp/>!=<sp/>opt));<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>help<sp/>all<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!group.empty()<sp/>&amp;&amp;<sp/>!opts.empty())<sp/>{</highlight></codeline>
<codeline lineno="9423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" kindref="member">make_group</ref>(group,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>opts);</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"></highlight></codeline>
<codeline lineno="9425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(group<sp/>!=<sp/>groups.back())</highlight></codeline>
<codeline lineno="9426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9429"><highlight class="normal"></highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"></highlight></codeline>
<codeline lineno="9433" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" kindref="member">Formatter::make_description</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>desc<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" kindref="member">get_description</ref>();</highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_options<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a82883969eedd7f205421c80ea948396a" kindref="member">get_require_option_min</ref>();</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_options<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a077197f834d0a9781992882c7a775a4b" kindref="member">get_require_option_max</ref>();</highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1adb854d8a9944e306e11497510854e240" kindref="member">get_required</ref>())<sp/>{</highlight></codeline>
<codeline lineno="9438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>REQUIRED<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((max_options<sp/>==<sp/>min_options)<sp/>&amp;&amp;<sp/>(min_options<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="9441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_options<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n[Exactly<sp/>1<sp/>of<sp/>the<sp/>following<sp/>options<sp/>is<sp/>required]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n[Exactly<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_options)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;options<sp/>from<sp/>the<sp/>following<sp/>list<sp/>are<sp/>required]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_options<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_options<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n[Between<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_options)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(max_options)<sp/>+</highlight></codeline>
<codeline lineno="9449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>the<sp/>follow<sp/>options<sp/>are<sp/>required]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n[At<sp/>most<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(max_options)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>the<sp/>following<sp/>options<sp/>are<sp/>allowed]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_options<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n[At<sp/>least<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_options)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>the<sp/>following<sp/>options<sp/>are<sp/>required]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!desc.empty())<sp/>?<sp/>desc<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>std::string{};</highlight></codeline>
<codeline lineno="9457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9458"><highlight class="normal"></highlight></codeline>
<codeline lineno="9459" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" kindref="member">Formatter::make_usage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>std::string<sp/>name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9460"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9461"><highlight class="normal"></highlight></codeline>
<codeline lineno="9462"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;Usage&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(name.empty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="9463"><highlight class="normal"></highlight></codeline>
<codeline lineno="9464"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>groups<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a5a4876bbed9c0a2e8dd0c094dc5edb1b" kindref="member">get_groups</ref>();</highlight></codeline>
<codeline lineno="9465"><highlight class="normal"></highlight></codeline>
<codeline lineno="9466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>an<sp/>Options<sp/>badge<sp/>if<sp/>any<sp/>options<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>non_pos_options<sp/>=</highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;nonpositional();<sp/>});</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!non_pos_options.empty())</highlight></codeline>
<codeline lineno="9470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;OPTIONS&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"></highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Positionals<sp/>need<sp/>to<sp/>be<sp/>listed<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>Option<sp/>*&gt;<sp/>positionals<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a1c623dffae079021e4793015a6d9d98b" kindref="member">get_options</ref>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_positional();<sp/>});</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"></highlight></codeline>
<codeline lineno="9475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>positionals<sp/>if<sp/>any<sp/>are<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!positionals.empty())<sp/>{</highlight></codeline>
<codeline lineno="9477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>help<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>positional_names(positionals.size());</highlight></codeline>
<codeline lineno="9479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(positionals.begin(),<sp/>positionals.end(),<sp/>positional_names.begin(),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)<sp/>{</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" kindref="member">make_option_usage</ref>(opt);</highlight></codeline>
<codeline lineno="9481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="9482"><highlight class="normal"></highlight></codeline>
<codeline lineno="9483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>detail::join(positional_names,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9485"><highlight class="normal"></highlight></codeline>
<codeline lineno="9486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>marker<sp/>if<sp/>subcommands<sp/>are<sp/>expected<sp/>or<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>(</highlight></codeline>
<codeline lineno="9488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">CLI::App</ref><sp/>*subc)<sp/>{<sp/>return<sp/>((!subc-&gt;get_disabled())<sp/>&amp;&amp;<sp/>(!subc-&gt;get_name().empty()));<sp/>})</highlight></codeline>
<codeline lineno="9489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.empty())<sp/>{</highlight></codeline>
<codeline lineno="9490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" kindref="member">get_require_subcommand_min</ref>()<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afad381247df12373537f6c6d0c008127" kindref="member">get_require_subcommand_max</ref>()<sp/>&lt;<sp/>2<sp/>||<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" kindref="member">get_require_subcommand_min</ref>()<sp/>&gt;<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;SUBCOMMAND&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;SUBCOMMANDS&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a086729ffc26b596683e19a0816fcd19e" kindref="member">get_require_subcommand_min</ref>()<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9495"><highlight class="normal"></highlight></codeline>
<codeline lineno="9496"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="9497"><highlight class="normal"></highlight></codeline>
<codeline lineno="9498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9500"><highlight class="normal"></highlight></codeline>
<codeline lineno="9501" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" kindref="member">Formatter::make_footer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9502"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>footer<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8da8669cd42e33a2121fb59fb2f0eee5" kindref="member">get_footer</ref>();</highlight></codeline>
<codeline lineno="9503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(footer.empty())<sp/>{</highlight></codeline>
<codeline lineno="9504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string{};</highlight></codeline>
<codeline lineno="9505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>footer<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9508"><highlight class="normal"></highlight></codeline>
<codeline lineno="9509" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a188cdf33618c577f1266a78a39f11abd" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a188cdf33618c577f1266a78a39f11abd" kindref="member">Formatter::make_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>std::string<sp/>name,<sp/>AppFormatMode<sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9510"><highlight class="normal"></highlight></codeline>
<codeline lineno="9511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>immediately<sp/>forwards<sp/>to<sp/>the<sp/>make_expanded<sp/>method.<sp/>This<sp/>is<sp/>done<sp/>this<sp/>way<sp/>so<sp/>that<sp/>subcommands<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>overridden<sp/>formatters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/>AppFormatMode::Sub)</highlight></codeline>
<codeline lineno="9514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" kindref="member">make_expanded</ref>(app);</highlight></codeline>
<codeline lineno="9515"><highlight class="normal"></highlight></codeline>
<codeline lineno="9516"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty())<sp/>&amp;&amp;<sp/>(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aadaa938de63b79e4af3e93545c24d3f8" kindref="member">get_parent</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="9518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Subcommands&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9522"><highlight class="normal"></highlight></codeline>
<codeline lineno="9523"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" kindref="member">make_description</ref>(app);</highlight></codeline>
<codeline lineno="9524"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" kindref="member">make_usage</ref>(app,<sp/>name);</highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" kindref="member">make_positionals</ref>(app);</highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" kindref="member">make_groups</ref>(app,<sp/>mode);</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" kindref="member">make_subcommands</ref>(app,<sp/>mode);</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" kindref="member">make_footer</ref>(app);</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"></highlight></codeline>
<codeline lineno="9530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9532"><highlight class="normal"></highlight></codeline>
<codeline lineno="9533" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" kindref="member">Formatter::make_subcommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*app,<sp/>AppFormatMode<sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9534"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9535"><highlight class="normal"></highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>App<sp/>*&gt;<sp/>subcommands<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>({});</highlight></codeline>
<codeline lineno="9537"><highlight class="normal"></highlight></codeline>
<codeline lineno="9538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>list<sp/>in<sp/>definition<sp/>order<sp/>of<sp/>the<sp/>groups<sp/>seen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9539"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>subcmd_groups_seen;</highlight></codeline>
<codeline lineno="9540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*com<sp/>:<sp/>subcommands)<sp/>{</highlight></codeline>
<codeline lineno="9541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(com-&gt;get_name().empty())<sp/>{</highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!com-&gt;get_group().empty())<sp/>{</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" kindref="member">make_expanded</ref>(com);</highlight></codeline>
<codeline lineno="9544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>group_key<sp/>=<sp/>com-&gt;get_group();</highlight></codeline>
<codeline lineno="9548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!group_key.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(subcmd_groups_seen.begin(),<sp/>subcmd_groups_seen.end(),<sp/>[&amp;group_key](std::string<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="9550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_lower(a)<sp/>==<sp/>detail::to_lower(group_key);</highlight></codeline>
<codeline lineno="9551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>==<sp/>subcmd_groups_seen.end())</highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcmd_groups_seen.push_back(group_key);</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9554"><highlight class="normal"></highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>group,<sp/>filter<sp/>out<sp/>and<sp/>print<sp/>subcommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;group<sp/>:<sp/>subcmd_groups_seen)<sp/>{</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>group<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>App<sp/>*&gt;<sp/>subcommands_group<sp/>=<sp/>app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a8ba3b154285c381e4cf06dba858202c8" kindref="member">get_subcommands</ref>(</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;group](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub_app)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::to_lower(sub_app-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1afca7b35622137979783814ce756839ce" kindref="member">get_group</ref>())<sp/>==<sp/>detail::to_lower(group);<sp/>});</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*new_com<sp/>:<sp/>subcommands_group)<sp/>{</highlight></codeline>
<codeline lineno="9561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_com-&gt;get_name().empty())</highlight></codeline>
<codeline lineno="9562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>!=<sp/>AppFormatMode::All)<sp/>{</highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" kindref="member">make_subcommand</ref>(new_com);</highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>new_com-&gt;help(new_com-&gt;get_name(),<sp/>AppFormatMode::Sub);</highlight></codeline>
<codeline lineno="9567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9571"><highlight class="normal"></highlight></codeline>
<codeline lineno="9572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9574"><highlight class="normal"></highlight></codeline>
<codeline lineno="9575" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" kindref="member">Formatter::make_subcommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9576"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9577"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::format_help(out,<sp/>sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa43f0c7a4e89fe58211f6a80396bdfe7" kindref="member">get_description</ref>(),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref>);</highlight></codeline>
<codeline lineno="9578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9580"><highlight class="normal"></highlight></codeline>
<codeline lineno="9581" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" kindref="member">Formatter::make_expanded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref><sp/>*sub)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1ac66b29cae741e0c3f5c49c47862e6bcb" kindref="member">get_display_name</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"></highlight></codeline>
<codeline lineno="9585"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" kindref="member">make_description</ref>(sub);</highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1aa4a97b6bebd73191da444e2510ff4f41" kindref="member">get_name</ref>().empty()<sp/>&amp;&amp;<sp/>!sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" kindref="member">get_aliases</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::format_aliases(out,<sp/>sub-&gt;<ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app_1a7b24c1ca3954e2b590134c9b07d03b96" kindref="member">get_aliases</ref>(),<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" kindref="member">column_width_</ref><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="9588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9589"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" kindref="member">make_positionals</ref>(sub);</highlight></codeline>
<codeline lineno="9590"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" kindref="member">make_groups</ref>(sub,<sp/>AppFormatMode::Sub);</highlight></codeline>
<codeline lineno="9591"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" kindref="member">make_subcommands</ref>(sub,<sp/>AppFormatMode::Sub);</highlight></codeline>
<codeline lineno="9592"><highlight class="normal"></highlight></codeline>
<codeline lineno="9593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>blank<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9594"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/>detail::find_and_replace(out.str(),<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9595"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp.substr(0,<sp/>tmp.size()<sp/>-<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>final<sp/>&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9596"><highlight class="normal"></highlight></codeline>
<codeline lineno="9597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Indent<sp/>all<sp/>but<sp/>the<sp/>first<sp/>line<sp/>(the<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::find_and_replace(tmp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9600"><highlight class="normal"></highlight></codeline>
<codeline lineno="9601" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" kindref="member">Formatter::make_option_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_positional)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_positional)</highlight></codeline>
<codeline lineno="9603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_name(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9604"><highlight class="normal"></highlight></codeline>
<codeline lineno="9605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_name(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9607"><highlight class="normal"></highlight></codeline>
<codeline lineno="9608" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" kindref="member">Formatter::make_option_opts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9609"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9610"><highlight class="normal"></highlight></codeline>
<codeline lineno="9611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_option_text().empty())<sp/>{</highlight></codeline>
<codeline lineno="9612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt-&gt;get_option_text();</highlight></codeline>
<codeline lineno="9613"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_type_size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_type_name().empty())</highlight></codeline>
<codeline lineno="9616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(opt-&gt;get_type_name());</highlight></codeline>
<codeline lineno="9617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_default_str().empty())</highlight></codeline>
<codeline lineno="9618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt-&gt;get_default_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_expected_max()<sp/>==<sp/>detail::expected_max_vector_size)</highlight></codeline>
<codeline lineno="9620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_expected_min()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="9622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt-&gt;get_expected();</highlight></codeline>
<codeline lineno="9623"><highlight class="normal"></highlight></codeline>
<codeline lineno="9624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_required())</highlight></codeline>
<codeline lineno="9625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;REQUIRED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_envname().empty())</highlight></codeline>
<codeline lineno="9628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;Env&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt-&gt;get_envname()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_needs().empty())<sp/>{</highlight></codeline>
<codeline lineno="9630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;Needs&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*op<sp/>:<sp/>opt-&gt;get_needs())</highlight></codeline>
<codeline lineno="9632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op-&gt;get_name();</highlight></codeline>
<codeline lineno="9633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt-&gt;get_excludes().empty())<sp/>{</highlight></codeline>
<codeline lineno="9635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" kindref="member">get_label</ref>(</highlight><highlight class="stringliteral">&quot;Excludes&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*op<sp/>:<sp/>opt-&gt;get_excludes())</highlight></codeline>
<codeline lineno="9637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op-&gt;get_name();</highlight></codeline>
<codeline lineno="9638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="9641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9642"><highlight class="normal"></highlight></codeline>
<codeline lineno="9643" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" kindref="member">Formatter::make_option_desc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_description();<sp/>}</highlight></codeline>
<codeline lineno="9644"><highlight class="normal"></highlight></codeline>
<codeline lineno="9645" refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" refkind="member"><highlight class="normal">CLI11_INLINE<sp/>std::string<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" kindref="member">Formatter::make_option_usage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Option<sp/>*opt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>these<sp/>are<sp/>positionals<sp/>usages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9647"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="9648"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" kindref="member">make_option_name</ref>(opt,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_expected_max()<sp/>&gt;=<sp/>detail::expected_max_vector_size)</highlight></codeline>
<codeline lineno="9650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt-&gt;get_expected_max()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="9652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt-&gt;get_expected()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9653"><highlight class="normal"></highlight></codeline>
<codeline lineno="9654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;get_required()<sp/>?<sp/>out.str()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>out.str()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9656"><highlight class="normal"></highlight></codeline>
<codeline lineno="9657"><highlight class="normal"></highlight></codeline>
<codeline lineno="9658"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CLI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9659"><highlight class="normal"></highlight></codeline>
<codeline lineno="9660"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pxr_CLI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9661"><highlight class="normal"></highlight></codeline>
<codeline lineno="9662"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h"/>
  </compounddef>
</doxygen>
