<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_imaging_point_instancer_adapter" kind="class" language="C++" prot="public">
    <compoundname>UsdImagingPointInstancerAdapter</compoundname>
    <basecompoundref refid="class_usd_imaging_prim_adapter" prot="public" virt="non-virtual">UsdImagingPrimAdapter</basecompoundref>
    <includes refid="point_instancer_adapter_8h" local="no">pointInstancerAdapter.h</includes>
    <innerclass refid="struct_usd_imaging_point_instancer_adapter_1_1___instancer_data" prot="private">UsdImagingPointInstancerAdapter::_InstancerData</innerclass>
    <innerclass refid="struct_usd_imaging_point_instancer_adapter_1_1___proto_prim" prot="private">UsdImagingPointInstancerAdapter::_ProtoPrim</innerclass>
      <sectiondef kind="user-defined">
      <header>Scene Index Support</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a13f369f91041c8212c97b2835ef6c3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDIMAGING_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USDIMAGING_API TfTokenVector GetImagingSubprims</definition>
        <argsstring>(UsdPrim const &amp;prim) override</argsstring>
        <name>GetImagingSubprims</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a97d810a59c6a92894b3a06c8269813f1">GetImagingSubprims</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ae32bf9ad6dbb4c3a7d727a292ee36622" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDIMAGING_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDIMAGING_API TfToken GetImagingSubprimType</definition>
        <argsstring>(UsdPrim const &amp;prim, TfToken const &amp;subprim) override</argsstring>
        <name>GetImagingSubprimType</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a9c918ff284690b5e1e7a4462505395b2">GetImagingSubprimType</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>subprim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1afa0539852542759f97427556c3908efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDIMAGING_API HdContainerDataSourceHandle</type>
        <definition>USDIMAGING_API HdContainerDataSourceHandle GetImagingSubprimData</definition>
        <argsstring>(UsdPrim const &amp;prim, TfToken const &amp;subprim, const UsdImagingDataSourceStageGlobals &amp;stageGlobals) override</argsstring>
        <name>GetImagingSubprimData</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7d97704fab05ae2bc0113b929d654e60">GetImagingSubprimData</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>subprim</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_data_source_stage_globals" kindref="compound">UsdImagingDataSourceStageGlobals</ref> &amp;</type>
          <declname>stageGlobals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ad20399577931e87fa678b1354b0ccb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDIMAGING_API <ref refid="class_hd_data_source_locator_set" kindref="compound">HdDataSourceLocatorSet</ref></type>
        <definition>USDIMAGING_API HdDataSourceLocatorSet InvalidateImagingSubprim</definition>
        <argsstring>(UsdPrim const &amp;prim, TfToken const &amp;subprim, TfTokenVector const &amp;properties, UsdImagingPropertyInvalidationType invalidationType) override</argsstring>
        <name>InvalidateImagingSubprim</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a3a6ff93d3e73829732dd6bb14306b6ec">InvalidateImagingSubprim</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>subprim</declname>
        </param>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>UsdImagingPropertyInvalidationType</type>
          <declname>invalidationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parallel Setup and Resolve</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1adcc895d453b2f831bac168e5d56da210" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void TrackVariability</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdDirtyBits *timeVaryingBits, UsdImagingInstancerContext const *instancerContext=NULL) const override</argsstring>
        <name>TrackVariability</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a564bb6d6d7410a6ddb531b84ed4acab1">TrackVariability</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>timeVaryingBits</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>For the given <computeroutput>prim</computeroutput>, variability is detected and stored in <computeroutput>timeVaryingBits</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial values are cached into the value cache.</para>
<para>This method is expected to be called from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a81abe807121a4fa33867a79dc469c5c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void UpdateForTime</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, HdDirtyBits requestedBits, UsdImagingInstancerContext const *instancerContext=NULL) const override</argsstring>
        <name>UpdateForTime</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ab8a29444fdb073be8376f740382a292b">UpdateForTime</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>HdDirtyBits</type>
          <declname>requestedBits</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Populates the <computeroutput>cache</computeroutput> for the given <computeroutput>prim</computeroutput>, <computeroutput>time</computeroutput> and <computeroutput>requestedBits</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is expected to be called from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="96" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Change Processing</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a6d596e4e51cfba3e62dbecb034672813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HdDirtyBits</type>
        <definition>virtual HdDirtyBits ProcessPropertyChange</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;propertyName) override</argsstring>
        <name>ProcessPropertyChange</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a032673f9da38a14ae35d8bbda16df9b9">ProcessPropertyChange</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>propertyName</declname>
        </param>
        <briefdescription>
<para>Returns a bit mask of attributes to be updated, or HdChangeTracker::AllDirty if the entire prim must be resynchronized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a7ad92b96e500919268108636de99f22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ProcessPrimResync</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>ProcessPrimResync</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a00e21d912fefbaad864599c7d92aaa0b">ProcessPrimResync</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>When a PrimResync event occurs, the prim may have been deleted entirely, adapter plug-ins should override this method to free any per-prim state that was accumulated in the adapter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab82bf9ff9b978a420044c9fa754abca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ProcessPrimRemoval</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>ProcessPrimRemoval</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a5d4629b8ec9799c383091adc5b58355f">ProcessPrimRemoval</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes all associated Rprims and dependencies from the render index without scheduling them for repopulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a76126633edeb5c4c2410f621b42d6666" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdDirtyBits dirty, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7a1f10e2d4e33fefdd519e29122fbbad">MarkDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdDirtyBits</type>
          <declname>dirty</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aa6f35e8ba6ed501ab63269dc7d51819b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkRefineLevelDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkRefineLevelDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aaf29cda887c2c78eac0de3009b45f732">MarkRefineLevelDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab33f3872d17b1fcb3ff1acede36fb1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkReprDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkReprDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac3badad44051bfbe691511b0755e4993">MarkReprDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a8bd707ddc7ffa48d75b4983bd1d46b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkCullStyleDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkCullStyleDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a6dc902aab72315e6866b051ff730d572">MarkCullStyleDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab64642b87f65a3af272f36b70fc09fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkRenderTagDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkRenderTagDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a4c0720f4006fd3d5ee29f7049f936e33">MarkRenderTagDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aa7ce7e03cc2ecda18b5eb13f2942425e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkTransformDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkTransformDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a88bd811ca89b2b7da3ef723eef09212f">MarkTransformDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1acf03e2e02997b547b63805b83dc47330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkVisibilityDirty</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkVisibilityDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aab5388d7d7073516840f7ab70bf03439">MarkVisibilityDirty</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a52d2bbb7a676b30a40daaf27453dcaab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkLightParamsDirty</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkLightParamsDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7fcc3bc9e33cf6ed87113a26aff381a7">MarkLightParamsDirty</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a16c24df4ee13f1044d5ea7bbc7881ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarkCollectionsDirty</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, UsdImagingIndexProxy *index) override</argsstring>
        <name>MarkCollectionsDirty</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aded37fdba6a4f9b10f6dabb147c65e53">MarkCollectionsDirty</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instancing</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ad025c4dfca7328b5a2ea8715ccd9b0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d GetInstancerTransform</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerPath, UsdTimeCode time) const override</argsstring>
        <name>GetInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a55fd9868660b92f4f47f68d7c6843888">GetInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get the instancer transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a5aab8b5764cea69054ec3299899a87c0" kindref="member">HdSceneDelegate::GetInstancerTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a58f314c30f96fd682afeafa742f4d8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SampleInstancerTransform</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerPath, UsdTimeCode time, size_t maxNumSamples, float *sampleTimes, GfMatrix4d *sampleValues) override</argsstring>
        <name>SampleInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac6327a595c00ab00b7a7769230c190a2">SampleInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Sample the instancer transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1ab1498ca73626e7be29ddc569f0275139" kindref="member">HdSceneDelegate::SampleInstancerTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a5eaea042c619f43c1d4c9820d89a7655" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath GetInstancerId</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath) const override</argsstring>
        <name>GetInstancerId</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad3ef49ded4b9ace510159215eb86b18d">GetInstancerId</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
<para>Return the instancerId for this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1af0b5cfc2ea17352badc26a9662035454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SdfPathVector</type>
        <definition>SdfPathVector GetInstancerPrototypes</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath) const override</argsstring>
        <name>GetInstancerPrototypes</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a53f5a6c348355d522433952567f5a08b">GetInstancerPrototypes</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
<para>Return the list of known prototypes of this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aed6f8d990a3addf199a6c161821bd1bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d GetTransform</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, bool ignoreRootTransform=false) const override</argsstring>
        <name>GetTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a03804796b195bbea3a0c6ad6bc0c2360">GetTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreRootTransform</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fetches the transform for the given prim at the given time from a pre-computed cache of prim transforms. </para>
        </briefdescription>
        <detaileddescription>
<para>Requesting transforms at incoherent times is currently inefficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a9ec40e9e548998240045149472803fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SampleTransform</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time, size_t maxNumSamples, float *sampleTimes, GfMatrix4d *sampleValues) override</argsstring>
        <name>SampleTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a32a6d8299c04a2faed8a3b738d97571f">SampleTransform</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Samples the transform for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a35d67df1f59204464b0249f4241bae59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SamplePrimvar</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, TfToken const &amp;key, UsdTimeCode time, size_t maxNumSamples, float *sampleTimes, VtValue *sampleValues, VtIntArray *sampleIndices) override</argsstring>
        <name>SamplePrimvar</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a1a8cf9a322dd77daae259e9b341532f7">SamplePrimvar</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxNumSamples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>sampleIndices</declname>
        </param>
        <briefdescription>
<para>Sample the primvar for the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If *sampleIndices is not nullptr and the primvar has indices, it will sample the unflattened primvar and set *sampleIndices to the primvar&apos;s sampled indices. <simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" kindref="member">HdSceneDelegate::SamplePrimvar()</ref> and <ref refid="class_hd_scene_delegate_1a0664f6c5132d8c113383e4f7bdc2eb7e" kindref="member">HdSceneDelegate::SampleIndexedPrimvar()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a1d3109b5952413cfea55b41f358786e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_px_osd_subdiv_tags" kindref="compound">PxOsdSubdivTags</ref></type>
        <definition>PxOsdSubdivTags GetSubdivTags</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetSubdivTags</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aba8d3e6328aba30da93752716429e171">GetSubdivTags</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get the subdiv tags for this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a3641720281d94d4dc1a918db6a8ed409" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool GetVisible</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetVisible</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a877656d784ee6ce523e213f1b5ec2cfb">GetVisible</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns true if the given prim is visible, taking into account inherited visibility values. </para>
        </briefdescription>
        <detaileddescription>
<para>Inherited values are strongest, Usd has no notion of &quot;super vis/invis&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a872ff5f5c60036dc01ea88ed26057cd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetPurpose</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, TfToken const &amp;instanceInheritablePurpose) const override</argsstring>
        <name>GetPurpose</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aab0ac7f12f08a58b9ddcdfbcd17052ff">GetPurpose</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>instanceInheritablePurpose</declname>
        </param>
        <briefdescription>
<para>Returns the purpose token for <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a non-empty <computeroutput>instanceInheritablePurpose</computeroutput> is specified and the prim doesn&apos;t have an explicitly authored or inherited purpose, it may inherit the instancer&apos;s purpose if the instance has an explicit purpose. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab6953d8bc3583677afcc79f23a82b287" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetTopology</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetTopology</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a9f4cb1953174726c7783f94d604574d1">GetTopology</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Gets the topology object of a specific Usd prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If the adapter is a mesh it will return an <ref refid="class_hd_mesh_topology" kindref="compound">HdMeshTopology</ref>, if it is of type basis curves, it will return an <ref refid="class_hd_basis_curves_topology" kindref="compound">HdBasisCurvesTopology</ref>. If the adapter does not have a topology, it returns an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a4cbb2c6ca72466c432b42ee037ea3878" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdCullStyle</type>
        <definition>HdCullStyle GetCullStyle</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetCullStyle</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a0508903536e217a3bc4e7a1a5aa4bd6d">GetCullStyle</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Gets the cullstyle of a specific path in the scene graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a220adabe0a9afe20e879f16da86de8ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d GetExtent</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetExtent</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ab030573ca777994e9d3494b2a0a22d19">GetExtent</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reads the extent from the given prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If the extent is not authored, an empty <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> is returned, the extent will not be computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a0d3f5ca3b13877b0dfbe1333d2de1241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool GetDoubleSided</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetDoubleSided</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1add2f0a29b507bb61258c6880b09d0ace">GetDoubleSided</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reads double-sided from the given prim. If not authored, returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a7e3bdd61171532cc3833acf810bff7db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath GetMaterialId</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetMaterialId</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad6db080e66e56d11a4fda944cd094876">GetMaterialId</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a8533ec0ab785fd91a10983c5d2c2218d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetLightParamValue</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, const TfToken &amp;paramName, UsdTimeCode time) const override</argsstring>
        <name>GetLightParamValue</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a02ce9a5aa4feb6412e586f0e2168ec02">GetLightParamValue</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1af90c3ed54e7ab8d6d63bdc1d8723c391" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetMaterialResource</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPath &amp;cachePath, UsdTimeCode time) const override</argsstring>
        <name>GetMaterialResource</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a287e074e3fc5afba11c21c71e32280a2">GetMaterialResource</reimplements>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a89bfd745fc83281d5d0aa86b3e705e71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationInputDescriptorVector</type>
        <definition>HdExtComputationInputDescriptorVector GetExtComputationInputs</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationInputs</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a7887a2a631e90852e31119192a251e43">GetExtComputationInputs</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a6c5f913a5dbc1dffa62d3bddc1bbc57a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationOutputDescriptorVector</type>
        <definition>HdExtComputationOutputDescriptorVector GetExtComputationOutputs</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationOutputs</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a09b590cd10756109c787c30629a04001">GetExtComputationOutputs</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ae84dbd510d992edb3f2463539be3d0f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdExtComputationPrimvarDescriptorVector</type>
        <definition>HdExtComputationPrimvarDescriptorVector GetExtComputationPrimvars</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, HdInterpolation interpolation, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationPrimvars</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a0fd121398cba7fe07b09fcbe26becadb">GetExtComputationPrimvars</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>HdInterpolation</type>
          <declname>interpolation</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ad6c2c55aca084d325bd52f92a95414e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetExtComputationInput</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;name, UsdTimeCode time, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationInput</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aeec2cbd8f3454a6af348ffab21693d8c">GetExtComputationInput</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a2b0adc1187f2d54a953b74363816ab52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string GetExtComputationKernel</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, const UsdImagingInstancerContext *instancerContext) const override</argsstring>
        <name>GetExtComputationKernel</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1acaafa264485326b418baa4cf7d673b84">GetExtComputationKernel</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a21403349c6066e6479d5ca3cb5ef567b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue GetInstanceIndices</definition>
        <argsstring>(UsdPrim const &amp;instancerPrim, SdfPath const &amp;instancerCachePath, SdfPath const &amp;prototypeCachePath, UsdTimeCode time) const override</argsstring>
        <name>GetInstanceIndices</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ae4a1289b2c77df83b10d93c79dfd0098">GetInstanceIndices</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancerPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerCachePath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>prototypeCachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aa4e361794eab684b95e6f4302d5a7375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue Get</definition>
        <argsstring>(UsdPrim const &amp;prim, SdfPath const &amp;cachePath, TfToken const &amp;key, UsdTimeCode time, VtIntArray *outIndices) const override</argsstring>
        <name>Get</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a027f6f1384b2dad97d3ecb09d77722d6">Get</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>outIndices</declname>
        </param>
        <briefdescription>
<para>Gets the value of the parameter named key for the given prim (which has the given cache path) and given time. </para>
        </briefdescription>
        <detaileddescription>
<para>If outIndices is not nullptr and the value has indices, it will return the unflattened value and set outIndices to the value&apos;s associated indices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="285" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Nested instancing support</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a8d2756ad1b8045302c2295234e9a9a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual GfMatrix4d GetRelativeInstancerTransform</definition>
        <argsstring>(SdfPath const &amp;instancerPath, SdfPath const &amp;protoInstancerPath, UsdTimeCode time) const override</argsstring>
        <name>GetRelativeInstancerTransform</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a17e78ca5666d58cf15318316cc337200">GetRelativeInstancerTransform</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>protoInstancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the transform of <computeroutput>protoInstancerPath</computeroutput> relative to <computeroutput>instancerPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instancerPath</computeroutput> must be managed by this adapter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="295" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Picking &amp; selection</header>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ae60bad8e351dcf22e6b0cd438f1e2051" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual SdfPath GetScenePrimPath</definition>
        <argsstring>(SdfPath const &amp;cachePath, int instanceIndex, HdInstancerContext *instancerContext) const override</argsstring>
        <name>GetScenePrimPath</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1afe88b2303da555cb22d4bcb94ea72333">GetScenePrimPath</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instanceIndex</declname>
        </param>
        <param>
          <type>HdInstancerContext *</type>
          <declname>instancerCtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000147"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Call and implement GetScenePrimPaths instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ad4ad7653bfdc1de9c92f8867e8e5320d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SdfPathVector</type>
        <definition>virtual SdfPathVector GetScenePrimPaths</definition>
        <argsstring>(SdfPath const &amp;cachePath, std::vector&lt; int &gt; const &amp;instanceIndices, std::vector&lt; HdInstancerContext &gt; *instancerCtxs) const override</argsstring>
        <name>GetScenePrimPaths</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ae7efe8724b8f44578192f7708a8eeaf2">GetScenePrimPaths</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>instanceIndices</declname>
        </param>
        <param>
          <type>std::vector&lt; HdInstancerContext &gt; *</type>
          <declname>instancerCtxs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a766b5c7fc1015b62eac45cb1f921591c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PopulateSelection</definition>
        <argsstring>(HdSelection::HighlightMode const &amp;highlightMode, SdfPath const &amp;cachePath, UsdPrim const &amp;usdPrim, int const hydraInstanceIndex, VtIntArray const &amp;parentInstanceIndices, HdSelectionSharedPtr const &amp;result) const override</argsstring>
        <name>PopulateSelection</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a64d3d2d6f49ba3cdda8f7b224527b2f3">PopulateSelection</reimplements>
        <param>
          <type><ref refid="class_hd_selection_1a98fbf004fcd9b83c51b34f506ed59a7e" kindref="member">HdSelection::HighlightMode</ref> const &amp;</type>
          <declname>highlightMode</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>hydraInstanceIndex</declname>
        </param>
        <param>
          <type>VtIntArray const &amp;</type>
          <declname>parentInstanceIndices</declname>
        </param>
        <param>
          <type>HdSelectionSharedPtr const &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="314" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Volume field information</header>
      <memberdef kind="typedef" id="class_usd_imaging_point_instancer_adapter_1a1e9afbc8dddcc0f2556b68f21816ea84" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, _ProtoPrim, SdfPath::Hash &gt;</type>
        <definition>typedef std::unordered_map&lt;SdfPath, _ProtoPrim, SdfPath::Hash&gt; _ProtoPrimMap</definition>
        <argsstring></argsstring>
        <name>_ProtoPrimMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="444" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_imaging_point_instancer_adapter_1adeaffcea34626eb2eaf750103a183769" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, _InstancerData, SdfPath::Hash &gt;</type>
        <definition>typedef std::unordered_map&lt;SdfPath , _InstancerData, SdfPath::Hash&gt; _InstancerDataMap</definition>
        <argsstring></argsstring>
        <name>_InstancerDataMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="474" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_imaging_point_instancer_adapter_1a8040b105000cbbbf7d9ee94fbde906a3" prot="private" static="no" mutable="no">
        <type>_InstancerDataMap</type>
        <definition>_InstancerDataMap _instancerData</definition>
        <argsstring></argsstring>
        <name>_instancerData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="475" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab5319a6aaa024c7879484d1fa2f49834" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdVolumeFieldDescriptorVector</type>
        <definition>virtual HdVolumeFieldDescriptorVector GetVolumeFieldDescriptors</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;id, UsdTimeCode time) const override</argsstring>
        <name>GetVolumeFieldDescriptors</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad82a481b63f24cfbd7a3e5243ae24d2b">GetVolumeFieldDescriptors</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1acaff99fffb1485b95eb67bbbd6fe0eb3" prot="protected" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void _RemovePrim</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index) override final</argsstring>
        <name>_RemovePrim</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ac6d7e37fabd76c2275b5e1798b4defae">_RemovePrim</reimplements>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aa347ae46edc5e490aa7783a46c4ef372" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _Populate</definition>
        <argsstring>(UsdPrim const &amp;prim, UsdImagingIndexProxy *index, UsdImagingInstancerContext const *instancerContext)</argsstring>
        <name>_Populate</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aa3d34718e3912c4ca5de6effe62838b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PopulatePrototype</definition>
        <argsstring>(int protoIndex, _InstancerData &amp;instrData, UsdPrim const &amp;protoRootPrim, UsdImagingIndexProxy *index, UsdImagingInstancerContext const *instancerContext)</argsstring>
        <name>_PopulatePrototype</name>
        <param>
          <type>int</type>
          <declname>protoIndex</declname>
        </param>
        <param>
          <type>_InstancerData &amp;</type>
          <declname>instrData</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>protoRootPrim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ab59423c30260637a04ab2256f197daf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ProcessPrimRemoval</definition>
        <argsstring>(SdfPath const &amp;cachePath, UsdImagingIndexProxy *index, SdfPathVector *instancersToReload)</argsstring>
        <name>_ProcessPrimRemoval</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>instancersToReload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ace7f63b77ea827f1e41db09db08e5767" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UnloadInstancer</definition>
        <argsstring>(SdfPath const &amp;instancerPath, UsdImagingIndexProxy *index)</argsstring>
        <name>_UnloadInstancer</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a44db8a7f87098b6c9842fd433be9bce8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdateInstancerVisibility</definition>
        <argsstring>(SdfPath const &amp;instancerPath, _InstancerData const &amp;instrData, UsdTimeCode time) const</argsstring>
        <name>_UpdateInstancerVisibility</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type>_InstancerData const &amp;</type>
          <declname>instrData</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a0489e45c86067b2184cc09f37d047a38" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetInstancerVisible</definition>
        <argsstring>(SdfPath const &amp;instancerPath, UsdTimeCode time) const</argsstring>
        <name>_GetInstancerVisible</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1afd17dee431b8993f5c6a4115383e2c58" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>_ProtoPrim const  &amp;</type>
        <definition>_ProtoPrim const&amp; _GetProtoPrim</definition>
        <argsstring>(SdfPath const &amp;instancerPath, SdfPath const &amp;cachePath) const</argsstring>
        <name>_GetProtoPrim</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a295b0e2e4531ddaf7cf4802f01e10106" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetProtoPrimForChild</definition>
        <argsstring>(UsdPrim const &amp;usdPrim, SdfPath const &amp;cachePath, _ProtoPrim const **proto, UsdImagingInstancerContext *ctx) const</argsstring>
        <name>_GetProtoPrimForChild</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>usdPrim</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>_ProtoPrim const **</type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a967ef936fd2cb5afb53e5881db5f5d19" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>const UsdPrim _GetProtoUsdPrim</definition>
        <argsstring>(_ProtoPrim const &amp;proto) const</argsstring>
        <name>_GetProtoUsdPrim</name>
        <param>
          <type>_ProtoPrim const &amp;</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aeae7c2496d8420c90e31e96c4094a2d5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d _CorrectTransform</definition>
        <argsstring>(UsdPrim const &amp;instancer, UsdPrim const &amp;proto, SdfPath const &amp;cachePath, SdfPathVector const &amp;protoPathChain, GfMatrix4d const &amp;inTransform, UsdTimeCode time) const</argsstring>
        <name>_CorrectTransform</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cachePath</declname>
        </param>
        <param>
          <type>SdfPathVector const &amp;</type>
          <declname>protoPathChain</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
          <declname>inTransform</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1aeb5677594fd558503698e93cf3c7eef4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComputeProtoVisibility</definition>
        <argsstring>(UsdPrim const &amp;protoRoot, UsdPrim const &amp;protoGprim, UsdTimeCode time, bool *vis) const</argsstring>
        <name>_ComputeProtoVisibility</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>protoRoot</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>protoGprim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="399" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usd_imaging_point_instancer_adapter_1a11426b96a15aab5849f0bd20a87e7c84" prot="public" static="no">
        <type><ref refid="class_usd_imaging_prim_adapter" kindref="compound">UsdImagingPrimAdapter</ref></type>
        <definition>using BaseAdapter =  UsdImagingPrimAdapter</definition>
        <argsstring></argsstring>
        <name>BaseAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="45" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ac08356cc6517cdb8401a4b335e281210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdImagingPointInstancerAdapter</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingPointInstancerAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="47" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a4c69640a3f8975a24e55547e60f1e535" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~UsdImagingPointInstancerAdapter</definition>
        <argsstring>()</argsstring>
        <name>~UsdImagingPointInstancerAdapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ac00a7b3d584fd24111a9a5d4b4bff2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual SdfPath Populate</definition>
        <argsstring>(UsdPrim const &amp;prim, UsdImagingIndexProxy *index, UsdImagingInstancerContext const *instancerContext=nullptr) override</argsstring>
        <name>Populate</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1a47890dbd73ea260bc7709f1bdf410a79">Populate</reimplements>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_index_proxy" kindref="compound">UsdImagingIndexProxy</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_usd_imaging_instancer_context" kindref="compound">UsdImagingInstancerContext</ref> const *</type>
          <declname>instancerContext</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Called to populate the RenderIndex for this <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The adapter is expected to create one or more prims in the render index using the given proxy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1a48122c5fafba311add03b6ff90274fcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool ShouldCullChildren</definition>
        <argsstring>() const override</argsstring>
        <name>ShouldCullChildren</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1ad040936f7afba2447770f49c7c6c28b2">ShouldCullChildren</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_imaging_point_instancer_adapter_1ae57ecb128adf0388f4977a2555ed0ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool IsInstancerAdapter</definition>
        <argsstring>() const override</argsstring>
        <name>IsInstancerAdapter</name>
        <reimplements refid="class_usd_imaging_prim_adapter_1aea5091e52d06638c414072478efb1bf9">IsInstancerAdapter</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Delegate support for <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7244">
        <label>UsdImagingPointInstancerAdapter</label>
        <link refid="class_usd_imaging_point_instancer_adapter"/>
        <childnode refid="7245" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7245">
        <label>UsdImagingPrimAdapter</label>
        <link refid="class_usd_imaging_prim_adapter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7246">
        <label>UsdImagingPointInstancerAdapter</label>
        <link refid="class_usd_imaging_point_instancer_adapter"/>
        <childnode refid="7247" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7247">
        <label>UsdImagingPrimAdapter</label>
        <link refid="class_usd_imaging_prim_adapter"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" line="43" column="1" bodyfile="pxr/usdImaging/usdImaging/pointInstancerAdapter.h" bodystart="42" bodyend="476"/>
    <listofallmembers>
      <member refid="class_usd_imaging_prim_adapter_1a3acd62abeb5877876c6fb3187bb5b768" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ComputeAndMergePrimvar</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aeb5677594fd558503698e93cf3c7eef4" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ComputeProtoVisibility</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a2de0e5cdcc41dbb9238933b82e2696ad" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ConvertCachePathToIndexPath</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a15ea1d11cbaf4a977a455dcd26a608ab" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ConvertIndexPathToCachePath</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aeae7c2496d8420c90e31e96c4094a2d5" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_CorrectTransform</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a65141f4159be9e19c82a362855f90b08" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_DoesDelegateSupportCoordSys</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a85e468fc9b3e3be2022693f05c1c14a5" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_Get</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac5dbdbd13022f791e2e4cfe70d13ed17" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a4a6dc0e184f3440bbb259fdc3bd0eff4" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetBlurScaleCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a73278b6161cdd80f42c29eb9e02f78b6" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetCollectionCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ad447349f414e2fb89ee5a1616cfdaff2" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetCoordSysBindings</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aaf638c38cf7cba1408dff12452dd6153" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetCurrentTimeSamplingInterval</name></member>
      <member refid="class_usd_imaging_prim_adapter_1af364ee3f863c71feee279754dc6551a0" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetDisplayPredicate</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a166c993b978c0e3db9278942b3dfd89c" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetDisplayPredicateForPrototypes</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae9865af51540eb195b1886fe2193d32b" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetInheritedPrimvar</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a116a317fc39016f97e01470fd4fc94a2" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetInheritedPrimvars</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a0489e45c86067b2184cc09f37d047a38" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetInstancerVisible</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a83eece817ea0079ea7dcc20f7db351a2" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetMaterialBindingPurpose</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a32f3e8c45035ceca12ac6bee61f94a83" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetMaterialRenderContexts</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a48011ca4f223cae29c3d57f7b8fb770a" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetNonlinearSampleCountCache</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa68e47438cb74938a29953400a17338a" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetPrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae2e4abe6a7402aa004567519eefb8d33" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetPrimAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa7123e837e8f6eea4640e40424c0c84c" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetPrimPathFromInstancerChain</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a43f3131277ab8b4fc36d3c1cacbad7dc" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetPrimvarDescCache</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1afd17dee431b8993f5c6a4115383e2c58" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetProtoPrim</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a295b0e2e4531ddaf7cf4802f01e10106" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetProtoPrimForChild</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a967ef936fd2cb5afb53e5881db5f5d19" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetProtoUsdPrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a542974a9ca4f49b5c19ff19b21169c97" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetPtr</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7c459b18bede439f52ba5438760b1533" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetRenderSettingsNamespaces</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac8519b98a3c896a54ab4cfe1a7752ed1" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetSceneLightsEnabled</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ae0e8c8231d7bdf1104e0da2c97613bba" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetSceneMaterialsEnabled</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa687978f45ad0c4229a7f86267e4c44d" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetShaderSourceTypes</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a5c7dd739b7f935439753d3265de878ff" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetStage</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a2825aa3fa72d5bd449e410402ad50135" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_GetTimeWithOffset</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a8149a5f3eccd74a0f57fabe68253398d" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_HasPrimvarsPrefix</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a8040b105000cbbbf7d9ee94fbde906a3" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_instancerData</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1adeaffcea34626eb2eaf750103a183769" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_InstancerDataMap</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a586ff49ca9dfe35016879b147debcc30" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_IsInInvisedPaths</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a7a2c563d8c6cfa3915c823aeaff218a2" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_IsPrimvarFilteringNeeded</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a958f1a296ddaf054bd82a56b2ad53856" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_IsTransformVarying</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a80079dbd18b49e2870b93f2d78e8cf52" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_IsVarying</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a9df1d3d6df8daf3273562b695a1ca163" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_MergePrimvar</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aa347ae46edc5e490aa7783a46c4ef372" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_Populate</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aa3d34718e3912c4ca5de6effe62838b1" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_PopulatePrototype</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ab3bfd2ee8af3862060a225e884e5636d" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ProcessNonPrefixedPrimvarPropertyChange</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a36d6a9b05886771562a4403123837419" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ProcessPrefixedPrimvarPropertyChange</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab59423c30260637a04ab2256f197daf4" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ProcessPrimRemoval</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a1e9afbc8dddcc0f2556b68f21816ea84" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ProtoPrimMap</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1acaff99fffb1485b95eb67bbbd6fe0eb3" prot="protected" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_RemovePrim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a538e24c3cbcf79a976246260e73114ac" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_RemovePrimvar</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a07f13ae7d84ef3eaa4e068bb7c1faa05" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_ResyncDependents</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ace7f63b77ea827f1e41db09db08e5767" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_UnloadInstancer</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a44db8a7f87098b6c9842fd433be9bce8" prot="private" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>_UpdateInstancerVisibility</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a11426b96a15aab5849f0bd20a87e7c84" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>BaseAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a49e80ece601561d1e995eae94e08c2d4" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>CanPopulateUsdInstance</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aa4e361794eab684b95e6f4302d5a7375" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>Get</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a4cbb2c6ca72466c432b42ee037ea3878" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetCullStyle</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a0d3f5ca3b13877b0dfbe1333d2de1241" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetDoubleSided</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ad6c2c55aca084d325bd52f92a95414e2" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationInput</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a89bfd745fc83281d5d0aa86b3e705e71" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationInputs</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a2b0adc1187f2d54a953b74363816ab52" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationKernel</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a6c5f913a5dbc1dffa62d3bddc1bbc57a" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationOutputs</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ae84dbd510d992edb3f2463539be3d0f2" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationPrimvars</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afd979399c4fba8f6ef13cd29cb9772d2" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtComputationSceneInputNames</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a220adabe0a9afe20e879f16da86de8ad" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetExtent</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0a25f3037820bfb13128772e75a53398" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetFullModelDrawMode</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1afa0539852542759f97427556c3908efd" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetImagingSubprimData</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a13f369f91041c8212c97b2835ef6c3f5" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetImagingSubprims</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ae32bf9ad6dbb4c3a7d727a292ee36622" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetImagingSubprimType</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a5a5dfa57577eb2b2098eeaba659c6791" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInheritablePurpose</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0fa5f7c6b0c0928b0881f68227e13659" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInstanceCategories</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a21403349c6066e6479d5ca3cb5ef567b" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInstanceIndices</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a5eaea042c619f43c1d4c9820d89a7655" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInstancerId</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1af0b5cfc2ea17352badc26a9662035454" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInstancerPrototypes</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ad025c4dfca7328b5a2ea8715ccd9b0fd" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetInstancerTransform</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a8533ec0ab785fd91a10983c5d2c2218d" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetLightParamValue</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a7e3bdd61171532cc3833acf810bff7db" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetMaterialId</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1af90c3ed54e7ab8d6d63bdc1d8723c391" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetMaterialResource</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a010e0778482a42b42ba165166efabc84" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetMaterialUsdPath</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac9e7c449efbe05d779fd800879f5bc6c" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetModelDrawMode</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a4db7b2d4a6c25e03a8c01b9e8bbde42e" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetPerPrototypeIndices</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a29d07ca94ee9e2dc77b7698d213ab8eb" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetPopulationMode</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a872ff5f5c60036dc01ea88ed26057cd2" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetPurpose</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a8d2756ad1b8045302c2295234e9a9a21" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetRelativeInstancerTransform</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa99d4b06c897e99845f200b1f5221d74" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetRootTransform</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ae60bad8e351dcf22e6b0cd438f1e2051" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetScenePrimPath</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ad4ad7653bfdc1de9c92f8867e8e5320d" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetScenePrimPaths</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a1d3109b5952413cfea55b41f358786e7" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetSubdivTags</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab6953d8bc3583677afcc79f23a82b287" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetTopology</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aed6f8d990a3addf199a6c161821bd1bc" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetTransform</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a3641720281d94d4dc1a918db6a8ed409" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetVisible</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab5319a6aaa024c7879484d1fa2f49834" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>GetVolumeFieldDescriptors</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ad20399577931e87fa678b1354b0ccb5d" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>InvalidateImagingSubprim</name></member>
      <member refid="class_usd_imaging_prim_adapter_1acd5f73f97a79bae704bdbe07abc34719" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>InvalidateImagingSubprimFromDescendent</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a10c5e1d377c4f2e82f2c7bc1de56947b" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>InvokeComputation</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a25c765b37e08f2a3b69bd991e78f70d7" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>IsChildPath</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ae57ecb128adf0388f4977a2555ed0ffa" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>IsInstancerAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aaf7a4e61284ae49548aba3d401ee7959" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>IsSupported</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a27b7ddad94c5cbf034f76019217d6b7b" prot="protected" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>Keys</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aab6eddbe0eda35428bc78128ff40cc02" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>LookupLightParamAttribute</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a16c24df4ee13f1044d5ea7bbc7881ad6" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkCollectionsDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a8bd707ddc7ffa48d75b4983bd1d46b20" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkCullStyleDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a76126633edeb5c4c2410f621b42d6666" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a52d2bbb7a676b30a40daaf27453dcaab" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkLightParamsDirty</name></member>
      <member refid="class_usd_imaging_prim_adapter_1acaed74cb6f80f49bab0a64af6c19dbac" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkMaterialDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aa6f35e8ba6ed501ab63269dc7d51819b" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkRefineLevelDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab64642b87f65a3af272f36b70fc09fd7" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkRenderTagDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab33f3872d17b1fcb3ff1acede36fb1ec" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkReprDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1aa7ce7e03cc2ecda18b5eb13f2942425e" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkTransformDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1acf03e2e02997b547b63805b83dc47330" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkVisibilityDirty</name></member>
      <member refid="class_usd_imaging_prim_adapter_1aa843c9a1a329aa7bfe6b8390c9149631" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>MarkWindowPolicyDirty</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ac00a7b3d584fd24111a9a5d4b4bff2c1" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>Populate</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a766b5c7fc1015b62eac45cb1f921591c" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>PopulateSelection</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917bea" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>PopulationMode</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a9d96a026e6d752efad10e7d56ba1ea97" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ProcessPrimChange</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ab82bf9ff9b978a420044c9fa754abca6" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ProcessPrimRemoval</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a7ad92b96e500919268108636de99f22a" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ProcessPrimResync</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a6d596e4e51cfba3e62dbecb034672813" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ProcessPropertyChange</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaaa9b4a5a614848b1570cada05749804b3" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>RepresentedByAncestor</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaab9c0aa7f313e3633b21f8282c5928d0c" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>RepresentsSelf</name></member>
      <member refid="class_usd_imaging_prim_adapter_1afcd92dc44db39ae8bc2279976a917beaa9ecca1ce1365a76ac60bf226b0162503" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>RepresentsSelfAndDescendents</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a1900bbbbb7697bf97616311e7adf489f" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>SampleExtComputationInput</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a58f314c30f96fd682afeafa742f4d8f5" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>SampleInstancerTransform</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a35d67df1f59204464b0249f4241bae59" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>SamplePrimvar</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a9ec40e9e548998240045149472803fc4" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>SampleTransform</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0a99170a4c02337f67756e421333445e" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>SetDelegate</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a48122c5fafba311add03b6ff90274fcd" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ShouldCullChildren</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a0c15fd7ac042f6c64570ad805bdd3922" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ShouldCullSubtree</name></member>
      <member refid="class_usd_imaging_prim_adapter_1af073155cf25e7e85112e10ea00bbcea0" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>ShouldIgnoreNativeInstanceSubtrees</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1adcc895d453b2f831bac168e5d56da210" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>TrackVariability</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a81abe807121a4fa33867a79dc469c5c6" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>UpdateForTime</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1ac08356cc6517cdb8401a4b335e281210" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>UsdImagingPointInstancerAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1ac7642794311da3960e71f8a2994058bb" prot="public" virt="non-virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>UsdImagingPrimAdapter</name></member>
      <member refid="class_usd_imaging_point_instancer_adapter_1a4c69640a3f8975a24e55547e60f1e535" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>~UsdImagingPointInstancerAdapter</name></member>
      <member refid="class_usd_imaging_prim_adapter_1a8cfb397e864d736c7f30e4f4d55b2668" prot="public" virt="virtual"><scope>UsdImagingPointInstancerAdapter</scope><name>~UsdImagingPrimAdapter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
