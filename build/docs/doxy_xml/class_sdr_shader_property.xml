<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdr_shader_property" kind="class" language="C++" prot="public">
    <compoundname>SdrShaderProperty</compoundname>
    <basecompoundref refid="class_ndr_property" prot="public" virt="non-virtual">NdrProperty</basecompoundref>
    <includes refid="shader_property_8h" local="no">shaderProperty.h</includes>
      <sectiondef kind="user-defined">
      <header>Metadata</header>
      <description><para>The metadata returned here is a direct result of what the parser plugin is able to determine about the property.</para>
<para>See the documentation for a specific parser plugin to get help on what the parser is looking for to populate these values. </para>
</description>
      <memberdef kind="function" id="class_sdr_shader_property_1a6ca56a54d82eb3e7c63c0e90b5a6a7eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetLabel</definition>
        <argsstring>() const</argsstring>
        <name>GetLabel</name>
        <briefdescription>
<para>The label assigned to this property, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Distinct from the name returned from <computeroutput><ref refid="class_ndr_property_1adcca7e656f249c40dd0c26621d8cf452" kindref="member">GetName()</ref></computeroutput>. In the context of a UI, the label value might be used as the display name for the property instead of the name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="130" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a78dfac2cc65574c4f8e31136d1a8923d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string GetHelp</definition>
        <argsstring>() const</argsstring>
        <name>GetHelp</name>
        <briefdescription>
<para>The help message assigned to this property, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a17907347a410a7db40cd2a9b1aaf7416" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetPage</definition>
        <argsstring>() const</argsstring>
        <name>GetPage</name>
        <briefdescription>
<para>The page (group), eg &quot;Advanced&quot;, this property appears on, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the page for a shader property can be nested, delimited by &quot;:&quot;, representing the hierarchy of sub-pages a property is defined in. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="140" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a79044a36e85301ccde0f2d7067ce01bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetWidget</definition>
        <argsstring>() const</argsstring>
        <name>GetWidget</name>
        <briefdescription>
<para>The widget &quot;hint&quot; that indicates the widget that can best display the type of data contained in this property, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Examples of this value could include &quot;number&quot;, &quot;slider&quot;, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="146" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a96a5d0a4d98e750b928cc060a3e4cf41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenMap &amp;</type>
        <definition>SDR_API const NdrTokenMap&amp; GetHints</definition>
        <argsstring>() const</argsstring>
        <name>GetHints</name>
        <briefdescription>
<para>Any UI &quot;hints&quot; that are associated with this property. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;Hints&quot; are simple key/value pairs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="151" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a350ba157ad9ed9cc721b7218f38b4317" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrOptionVec &amp;</type>
        <definition>SDR_API const NdrOptionVec&amp; GetOptions</definition>
        <argsstring>() const</argsstring>
        <name>GetOptions</name>
        <briefdescription>
<para>If the property has a set of valid values that are pre-determined, this will return the valid option names and corresponding string values (if the option was specified with a value). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="157" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1aa6091590dd3e86ae4643f24c4b00a250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string GetImplementationName</definition>
        <argsstring>() const</argsstring>
        <name>GetImplementationName</name>
        <briefdescription>
<para>Returns the implementation name of this property. </para>
        </briefdescription>
        <detaileddescription>
<para>The name of the property is how to refer to the property in shader networks. The label is how to present this property to users. The implementation name is the name of the parameter this property represents in the implementation. Any client using the implementation <bold>must</bold> call this method to get the correct name; using <computeroutput>getName()</computeroutput> is not correct. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>VStruct Information</header>
      <memberdef kind="function" id="class_sdr_shader_property_1af2f73e2e348c574b21f9ab33494ef823" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetVStructMemberOf</definition>
        <argsstring>() const</argsstring>
        <name>GetVStructMemberOf</name>
        <briefdescription>
<para>If this field is part of a vstruct, this is the name of the struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="177" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1ab4af24810cb9744fcd98c8d4e1682660" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetVStructMemberName</definition>
        <argsstring>() const</argsstring>
        <name>GetVStructMemberName</name>
        <briefdescription>
<para>If this field is part of a vstruct, this is its name in the struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="183" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1af3aadcffff037b43c42294be09c566ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool IsVStructMember</definition>
        <argsstring>() const</argsstring>
        <name>IsVStructMember</name>
        <briefdescription>
<para>Returns true if this field is part of a vstruct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a01221bd6c341f9846acc02433edd92f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool IsVStruct</definition>
        <argsstring>() const</argsstring>
        <name>IsVStruct</name>
        <briefdescription>
<para>Returns true if the field is the head of a vstruct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a5922aa4d525b65e0500f02589d7fe15b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetVStructConditionalExpr</definition>
        <argsstring>() const</argsstring>
        <name>GetVStructConditionalExpr</name>
        <briefdescription>
<para>If this field is part of a vstruct, this is the conditional expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="198" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="198" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Connection Information</header>
      <memberdef kind="function" id="class_sdr_shader_property_1a2133b1d45d85afaa6769d11469cc374d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool IsConnectable</definition>
        <argsstring>() const override</argsstring>
        <name>IsConnectable</name>
        <reimplements refid="class_ndr_property_1a55ad4a609ccbb167054a1c404ab6da17">IsConnectable</reimplements>
        <briefdescription>
<para>Whether this property can be connected to other properties. </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns <computeroutput>true</computeroutput>, connectability to a specific property can be tested via <computeroutput><ref refid="class_sdr_shader_property_1a299b371d0fe9adc78629f7aa211bf308" kindref="member">CanConnectTo()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="212" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1af3ab91f97c2b40340170f37c8a713e95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenVec &amp;</type>
        <definition>SDR_API const NdrTokenVec&amp; GetValidConnectionTypes</definition>
        <argsstring>() const</argsstring>
        <name>GetValidConnectionTypes</name>
        <briefdescription>
<para>Gets the list of valid connection types for this property. </para>
        </briefdescription>
        <detaileddescription>
<para>This value comes from shader metadata, and may not be specified. The value from <computeroutput><ref refid="class_ndr_property_1ae889bdab396b859efa5d6b0084793112" kindref="member">NdrProperty::GetType()</ref></computeroutput> can be used as a fallback, or you can use the connectability test in <computeroutput><ref refid="class_sdr_shader_property_1a299b371d0fe9adc78629f7aa211bf308" kindref="member">CanConnectTo()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="219" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a299b371d0fe9adc78629f7aa211bf308" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool CanConnectTo</definition>
        <argsstring>(const NdrProperty &amp;other) const override</argsstring>
        <name>CanConnectTo</name>
        <reimplements refid="class_ndr_property_1a617a7ceb0475600f9af0d30472b2ec4e">CanConnectTo</reimplements>
        <param>
          <type>const <ref refid="class_ndr_property" kindref="compound">NdrProperty</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determines if this property can be connected to the specified property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="225" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Utilities</header>
      <memberdef kind="function" id="class_sdr_shader_property_1aa309fc39ada3ee61360607118f4fae65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDR_API const NdrSdfTypeIndicator</type>
        <definition>SDR_API const NdrSdfTypeIndicator GetTypeAsSdfType</definition>
        <argsstring>() const override</argsstring>
        <name>GetTypeAsSdfType</name>
        <reimplements refid="class_ndr_property_1a745131719893cb9b0a0efbf0e97277cb">GetTypeAsSdfType</reimplements>
        <briefdescription>
<para>Converts the property&apos;s type from <computeroutput><ref refid="class_ndr_property_1ae889bdab396b859efa5d6b0084793112" kindref="member">GetType()</ref></computeroutput> into a <computeroutput><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Two scenarios can result: an exact mapping from property type to Sdf type, and an inexact mapping. In the first scenario, the first element in the pair will be the cleanly-mapped Sdf type, and the second element, a <ref refid="class_tf_token" kindref="compound">TfToken</ref>, will be empty. In the second scenario, the Sdf type will be set to <computeroutput>Token</computeroutput> to indicate an unclean mapping, and the second element will be set to the original type returned by <computeroutput><ref refid="class_ndr_property_1ae889bdab396b859efa5d6b0084793112" kindref="member">GetType()</ref></computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_sdr_shader_property_1afaaa146ff9f5bc4f85dfe5be8698ba03" kindref="member">GetDefaultValueAsSdfType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1afaaa146ff9f5bc4f85dfe5be8698ba03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>SDR_API const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>SDR_API const VtValue&amp; GetDefaultValueAsSdfType</definition>
        <argsstring>() const override</argsstring>
        <name>GetDefaultValueAsSdfType</name>
        <reimplements refid="class_ndr_property_1a43445128f92d6e0e80eb02d6d0a9f432">GetDefaultValueAsSdfType</reimplements>
        <briefdescription>
<para>Accessor for default value corresponding to the <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> returned by GetTypeAsSdfType. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this is different than GetDefaultValue which returns the default value associated with the SdrPropertyType and may differ from the <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref>, example when sdrUsdDefinitionType metadata is specified for a sdr property.</para>
<para><simplesect kind="see"><para><ref refid="class_sdr_shader_property_1aa309fc39ada3ee61360607118f4fae65" kindref="member">GetTypeAsSdfType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="254" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a4bbc397e1e5bd07e0a060bb74f05253d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool IsAssetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>IsAssetIdentifier</name>
        <briefdescription>
<para>Determines if the value held by this property is an asset identifier (eg, a file path); the logic for this is left up to the parser. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: The type returned from <computeroutput><ref refid="class_sdr_shader_property_1aa309fc39ada3ee61360607118f4fae65" kindref="member">GetTypeAsSdfType()</ref></computeroutput> will be <computeroutput>Asset</computeroutput> if this method returns <computeroutput>true</computeroutput> (even though its true underlying data type is string). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1adea35f0862026bed4a8bbe5d7f065500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool IsDefaultInput</definition>
        <argsstring>() const</argsstring>
        <name>IsDefaultInput</name>
        <briefdescription>
<para>Determines if the value held by this property is the default input for this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="270" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_sdr_shader_property_1a5e5c1e1d72e1ef7d6ccfe483c173b682" prot="protected" static="no" mutable="no">
        <type>const NdrTokenMap</type>
        <definition>const NdrTokenMap _hints</definition>
        <argsstring></argsstring>
        <name>_hints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="298" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1a7d9153044aa2c3f958fb04f7b1a173fe" prot="protected" static="no" mutable="no">
        <type>const NdrOptionVec</type>
        <definition>const NdrOptionVec _options</definition>
        <argsstring></argsstring>
        <name>_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="299" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1ab846309375aac95268c7d6761c6c6e87" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _validConnectionTypes</definition>
        <argsstring></argsstring>
        <name>_validConnectionTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="302" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1a3b528c71a8fbb84ef57ace6ecb972f61" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _label</definition>
        <argsstring></argsstring>
        <name>_label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="303" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1a31606be34077e29c07080c5a1da08a4e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _page</definition>
        <argsstring></argsstring>
        <name>_page</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="304" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1ab92fa368e96278efd41d25969bc4c28c" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _widget</definition>
        <argsstring></argsstring>
        <name>_widget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="305" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1ab5c9064f04ae8df9f38093d99c7f68fd" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _vstructMemberOf</definition>
        <argsstring></argsstring>
        <name>_vstructMemberOf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="306" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1a75be7e752e9946b198dfbe96ba8f4730" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _vstructMemberName</definition>
        <argsstring></argsstring>
        <name>_vstructMemberName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="307" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1acfeb26d7b11eabb74572394cc2bc71bb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _vstructConditionalExpr</definition>
        <argsstring></argsstring>
        <name>_vstructConditionalExpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="308" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1ae136d790512f78110827a50e76a671d0" prot="protected" static="no" mutable="no">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue _sdfTypeDefaultValue</definition>
        <argsstring></argsstring>
        <name>_sdfTypeDefaultValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="310" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_property_1a40008fafad020cd7ac0b56781119ee76" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int _usdEncodingVersion</definition>
        <argsstring></argsstring>
        <name>_usdEncodingVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="314" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdr_shader_property_1a2f683731fa1f4fe7d10c05bf68ffd8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API</type>
        <definition>SDR_API SdrShaderProperty</definition>
        <argsstring>(const TfToken &amp;name, const TfToken &amp;type, const VtValue &amp;defaultValue, bool isOutput, size_t arraySize, const NdrTokenMap &amp;metadata, const NdrTokenMap &amp;hints, const NdrOptionVec &amp;options)</argsstring>
        <name>SdrShaderProperty</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isOutput</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>hints</declname>
        </param>
        <param>
          <type>const NdrOptionVec &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="108" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdr_shader_property_1a6b005d378b7c81ad6d6b2caed3484d2b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdr_shader_property" kindref="compound">SdrShaderProperty</ref> &amp;</type>
        <definition>SdrShaderProperty&amp; operator=</definition>
        <argsstring>(const SdrShaderProperty &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdr_shader_property" kindref="compound">SdrShaderProperty</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a9a4489feddbc95959dba09eb335b9885" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetUsdEncodingVersion</definition>
        <argsstring>(int usdEncodingVersion)</argsstring>
        <name>_SetUsdEncodingVersion</name>
        <param>
          <type>int</type>
          <declname>usdEncodingVersion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1a330fd89838740b4bc972327b63f3fa4e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ConvertToVStruct</definition>
        <argsstring>()</argsstring>
        <name>_ConvertToVStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_property_1afe125c16a99bd0d5216254225c53834f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _FinalizeProperty</definition>
        <argsstring>()</argsstring>
        <name>_FinalizeProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="294" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdr_shader_property_1a13eb838f2f7ac56639e95a7b557ede2b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void SdrShaderNode::_PostProcessProperties</definition>
        <argsstring>()</argsstring>
        <name>SdrShaderNode::_PostProcessProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderProperty.h" line="280" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A specialized version of <computeroutput><ref refid="class_ndr_property" kindref="compound">NdrProperty</ref></computeroutput> which holds shading information. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5271">
        <label>SdrShaderProperty</label>
        <link refid="class_sdr_shader_property"/>
        <childnode refid="5272" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5272">
        <label>NdrProperty</label>
        <link refid="class_ndr_property"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5275">
        <label>VtValue</label>
        <link refid="class_vt_value"/>
      </node>
      <node id="5276">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
      <node id="5273">
        <label>SdrShaderProperty</label>
        <link refid="class_sdr_shader_property"/>
        <childnode refid="5274" relation="public-inheritance">
        </childnode>
        <childnode refid="5275" relation="usage">
          <edgelabel>_sdfTypeDefaultValue</edgelabel>
        </childnode>
        <childnode refid="5276" relation="usage">
          <edgelabel>_label</edgelabel>
          <edgelabel>_widget</edgelabel>
          <edgelabel>_vstructMemberOf</edgelabel>
          <edgelabel>_page</edgelabel>
          <edgelabel>_vstructConditionalExpr</edgelabel>
          <edgelabel>_vstructMemberName</edgelabel>
        </childnode>
      </node>
      <node id="5274">
        <label>NdrProperty</label>
        <link refid="class_ndr_property"/>
        <childnode refid="5275" relation="usage">
          <edgelabel>_defaultValue</edgelabel>
        </childnode>
        <childnode refid="5276" relation="usage">
          <edgelabel>_type</edgelabel>
          <edgelabel>_name</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdr/shaderProperty.h" line="104" column="1" bodyfile="pxr/usd/sdr/shaderProperty.h" bodystart="103" bodyend="315"/>
    <listofallmembers>
      <member refid="class_ndr_property_1a78298368cd7a3bb4682b59b94f97f0e3" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_arraySize</name></member>
      <member refid="class_sdr_shader_property_1a330fd89838740b4bc972327b63f3fa4e" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_ConvertToVStruct</name></member>
      <member refid="class_ndr_property_1a107f3227cf974400e5b650c2db1e2224" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_defaultValue</name></member>
      <member refid="class_sdr_shader_property_1afe125c16a99bd0d5216254225c53834f" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_FinalizeProperty</name></member>
      <member refid="class_sdr_shader_property_1a5e5c1e1d72e1ef7d6ccfe483c173b682" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_hints</name></member>
      <member refid="class_ndr_property_1af59908923a0b2695a6a47a987d9c6423" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_isConnectable</name></member>
      <member refid="class_ndr_property_1a8fe9bf8d2b1046de5e715a7c6dfa3d67" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_isDynamicArray</name></member>
      <member refid="class_ndr_property_1a6d8686a17ceb19d603d6633abd968c99" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_isOutput</name></member>
      <member refid="class_sdr_shader_property_1a3b528c71a8fbb84ef57ace6ecb972f61" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_label</name></member>
      <member refid="class_ndr_property_1a27c7adcfc5510ce6b0e8962c31aaef5e" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_metadata</name></member>
      <member refid="class_ndr_property_1a073299b165fbc77310a8ada4902f85f8" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_name</name></member>
      <member refid="class_sdr_shader_property_1a7d9153044aa2c3f958fb04f7b1a173fe" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_options</name></member>
      <member refid="class_sdr_shader_property_1a31606be34077e29c07080c5a1da08a4e" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_page</name></member>
      <member refid="class_sdr_shader_property_1ae136d790512f78110827a50e76a671d0" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_sdfTypeDefaultValue</name></member>
      <member refid="class_sdr_shader_property_1a9a4489feddbc95959dba09eb335b9885" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_SetUsdEncodingVersion</name></member>
      <member refid="class_ndr_property_1ace359eebf6de802073494d39d7423580" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_type</name></member>
      <member refid="class_sdr_shader_property_1a40008fafad020cd7ac0b56781119ee76" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_usdEncodingVersion</name></member>
      <member refid="class_sdr_shader_property_1ab846309375aac95268c7d6761c6c6e87" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_validConnectionTypes</name></member>
      <member refid="class_sdr_shader_property_1acfeb26d7b11eabb74572394cc2bc71bb" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_vstructConditionalExpr</name></member>
      <member refid="class_sdr_shader_property_1a75be7e752e9946b198dfbe96ba8f4730" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_vstructMemberName</name></member>
      <member refid="class_sdr_shader_property_1ab5c9064f04ae8df9f38093d99c7f68fd" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_vstructMemberOf</name></member>
      <member refid="class_sdr_shader_property_1ab92fa368e96278efd41d25969bc4c28c" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>_widget</name></member>
      <member refid="class_sdr_shader_property_1a299b371d0fe9adc78629f7aa211bf308" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>CanConnectTo</name></member>
      <member refid="class_ndr_property_1ae22e8bcaf96b1115005bf39e5f5faec5" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetArraySize</name></member>
      <member refid="class_ndr_property_1aa450d3be5b8d50d7a85b94bb71e98924" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetDefaultValue</name></member>
      <member refid="class_sdr_shader_property_1afaaa146ff9f5bc4f85dfe5be8698ba03" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>GetDefaultValueAsSdfType</name></member>
      <member refid="class_sdr_shader_property_1a78dfac2cc65574c4f8e31136d1a8923d" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetHelp</name></member>
      <member refid="class_sdr_shader_property_1a96a5d0a4d98e750b928cc060a3e4cf41" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetHints</name></member>
      <member refid="class_sdr_shader_property_1aa6091590dd3e86ae4643f24c4b00a250" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetImplementationName</name></member>
      <member refid="class_ndr_property_1a81c8a5b9c158bfd6bb2682c469c44fd9" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>GetInfoString</name></member>
      <member refid="class_sdr_shader_property_1a6ca56a54d82eb3e7c63c0e90b5a6a7eb" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetLabel</name></member>
      <member refid="class_ndr_property_1a75e64878834c66af8bdb03e94118b033" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>GetMetadata</name></member>
      <member refid="class_ndr_property_1adcca7e656f249c40dd0c26621d8cf452" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetName</name></member>
      <member refid="class_sdr_shader_property_1a350ba157ad9ed9cc721b7218f38b4317" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetOptions</name></member>
      <member refid="class_sdr_shader_property_1a17907347a410a7db40cd2a9b1aaf7416" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetPage</name></member>
      <member refid="class_ndr_property_1ae889bdab396b859efa5d6b0084793112" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetType</name></member>
      <member refid="class_sdr_shader_property_1aa309fc39ada3ee61360607118f4fae65" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>GetTypeAsSdfType</name></member>
      <member refid="class_sdr_shader_property_1af3ab91f97c2b40340170f37c8a713e95" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetValidConnectionTypes</name></member>
      <member refid="class_sdr_shader_property_1a5922aa4d525b65e0500f02589d7fe15b" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetVStructConditionalExpr</name></member>
      <member refid="class_sdr_shader_property_1ab4af24810cb9744fcd98c8d4e1682660" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetVStructMemberName</name></member>
      <member refid="class_sdr_shader_property_1af2f73e2e348c574b21f9ab33494ef823" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetVStructMemberOf</name></member>
      <member refid="class_sdr_shader_property_1a79044a36e85301ccde0f2d7067ce01bb" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>GetWidget</name></member>
      <member refid="class_ndr_property_1af05a671118e51d26a292ae9b45db3198" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsArray</name></member>
      <member refid="class_sdr_shader_property_1a4bbc397e1e5bd07e0a060bb74f05253d" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsAssetIdentifier</name></member>
      <member refid="class_sdr_shader_property_1a2133b1d45d85afaa6769d11469cc374d" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>IsConnectable</name></member>
      <member refid="class_sdr_shader_property_1adea35f0862026bed4a8bbe5d7f065500" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsDefaultInput</name></member>
      <member refid="class_ndr_property_1aab8cd6b193568f59eea66f2f018725fd" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsDynamicArray</name></member>
      <member refid="class_ndr_property_1a3ffdc73c7885a8d4bd16e86e93233601" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsOutput</name></member>
      <member refid="class_sdr_shader_property_1a01221bd6c341f9846acc02433edd92f4" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsVStruct</name></member>
      <member refid="class_sdr_shader_property_1af3aadcffff037b43c42294be09c566ed" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>IsVStructMember</name></member>
      <member refid="class_ndr_property_1aaad0022460659703706bb6246225ddc3" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>NdrProperty</name></member>
      <member refid="class_sdr_shader_property_1a6b005d378b7c81ad6d6b2caed3484d2b" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>operator=</name></member>
      <member refid="class_ndr_property_1a0f62ad9d8e921e0c14c13ae3a7c9cc6e" prot="protected" virt="non-virtual" ambiguityscope="NdrProperty::"><scope>SdrShaderProperty</scope><name>operator=</name></member>
      <member refid="class_sdr_shader_property_1a13eb838f2f7ac56639e95a7b557ede2b" prot="protected" virt="non-virtual"><scope>SdrShaderProperty</scope><name>SdrShaderNode::_PostProcessProperties</name></member>
      <member refid="class_sdr_shader_property_1a2f683731fa1f4fe7d10c05bf68ffd8e7" prot="public" virt="non-virtual"><scope>SdrShaderProperty</scope><name>SdrShaderProperty</name></member>
      <member refid="class_ndr_property_1a99c3f6a5a2c093b60fb67b3cfa792ab2" prot="public" virt="virtual"><scope>SdrShaderProperty</scope><name>~NdrProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
