<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_embree_render_buffer" kind="class" language="C++" prot="public">
    <compoundname>HdEmbreeRenderBuffer</compoundname>
    <basecompoundref refid="class_hd_render_buffer" prot="public" virt="non-virtual">HdRenderBuffer</basecompoundref>
      <sectiondef kind="user-defined">
      <header>I/O helpers</header>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1ac8435c09234cd6b9bf78d0d9f513b19c" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _width</definition>
        <argsstring></argsstring>
        <name>_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="173" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1ae56087f20883e5dac738adf23c2bfd5b" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _height</definition>
        <argsstring></argsstring>
        <name>_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="175" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1a1c902c739f46d08d675ba55ddcef19fb" prot="private" static="no" mutable="no">
        <type>HdFormat</type>
        <definition>HdFormat _format</definition>
        <argsstring></argsstring>
        <name>_format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="177" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1acafad4e05b22d3bbc21182623ed398d4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _multiSampled</definition>
        <argsstring></argsstring>
        <name>_multiSampled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="179" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1a93740903cf2b90aab1d54c5561c9b5ea" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; _buffer</definition>
        <argsstring></argsstring>
        <name>_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="182" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1ad1949716043e28daa78ff0aa9ea3da0b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; _sampleBuffer</definition>
        <argsstring></argsstring>
        <name>_sampleBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="184" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1ad6d6b43549a885d93763166f3fba7807" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; _sampleCount</definition>
        <argsstring></argsstring>
        <name>_sampleCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="186" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1ac2b18bfc330a262e5b72534f48ce3817" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; _mappers</definition>
        <argsstring></argsstring>
        <name>_mappers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="189" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_buffer_1a625228901633a18b31376c6ca2d257f3" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; _converged</definition>
        <argsstring></argsstring>
        <name>_converged</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="191" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1abec1bb633bceda121643ae5a15d97d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Write</definition>
        <argsstring>(GfVec3i const &amp;pixel, size_t numComponents, float const *value)</argsstring>
        <name>Write</name>
        <param>
          <type><ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numComponents</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write a float, vec2f, vec3f, or vec4f to the renderbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This should only be called on a mapped buffer. Extra components will be silently discarded; if not enough are provided for the buffer, the remainder will be taken as 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>What index to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>The arity of the value to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A float-valued vector to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1ac2509fe9be7e861ab65ea2098138bdf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Write</definition>
        <argsstring>(GfVec3i const &amp;pixel, size_t numComponents, int const *value)</argsstring>
        <name>Write</name>
        <param>
          <type><ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numComponents</declname>
        </param>
        <param>
          <type>int const *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write an int, vec2i, vec3i, or vec4i to the renderbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This should only be called on a mapped buffer. Extra components will be silently discarded; if not enough are provided for the buffer, the remainder will be taken as 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>What index to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>The arity of the value to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>An int-valued vector to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a638b95cc4a858887c3acac0318b8ab90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clear</definition>
        <argsstring>(size_t numComponents, float const *value)</argsstring>
        <name>Clear</name>
        <param>
          <type>size_t</type>
          <declname>numComponents</declname>
        </param>
        <param>
          <type>float const *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Clear the renderbuffer with a float, vec2f, vec3f, or vec4f. </para>
        </briefdescription>
        <detaileddescription>
<para>This should only be called on a mapped buffer. Extra components will be silently discarded; if not enough are provided for the buffer, the remainder will be taken as 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>The arity of the value to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A float-valued vector to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1aa7e33c62208f4fa2fdaa90d7c5c5afa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clear</definition>
        <argsstring>(size_t numComponents, int const *value)</argsstring>
        <name>Clear</name>
        <param>
          <type>size_t</type>
          <declname>numComponents</declname>
        </param>
        <param>
          <type>int const *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Clear the renderbuffer with an int, vec2i, vec3i, or vec4i. </para>
        </briefdescription>
        <detaileddescription>
<para>This should only be called on a mapped buffer. Extra components will be silently discarded; if not enough are provided for the buffer, the remainder will be taken as 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>The arity of the value to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>An int-valued vector to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a267f4f9406a06e3139f8ef4663921a8e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t _GetBufferSize</definition>
        <argsstring>(GfVec2i const &amp;dims, HdFormat format)</argsstring>
        <name>_GetBufferSize</name>
        <param>
          <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>HdFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1ad2584220fd3b639e33c4408eb71d27e6" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdFormat</type>
        <definition>static HdFormat _GetSampleFormat</definition>
        <argsstring>(HdFormat format)</argsstring>
        <name>_GetSampleFormat</name>
        <param>
          <type>HdFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a682f44c1e00d13aaffff4da8bf34295a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Deallocate</definition>
        <argsstring>() override</argsstring>
        <name>_Deallocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a2c96364ccdecfc0bf47d6af98e70c9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdEmbreeRenderBuffer</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>HdEmbreeRenderBuffer</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a322d0274f94bf263bc863df77506dea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HdEmbreeRenderBuffer</definition>
        <argsstring>() override</argsstring>
        <name>~HdEmbreeRenderBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a01d42ddc062aa607ea4c9fe02315189a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Sync</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, HdDirtyBits *dirtyBits) override</argsstring>
        <name>Sync</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
<para>Get allocation information from the scene delegate. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: Embree overrides this only to stop the render thread before potential re-allocation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sceneDelegate</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene delegate backing this render buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderParam</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer-global render param. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirtyBits</parametername>
</parameternamelist>
<parameterdescription>
<para>The invalidation state for this render buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a96f70f13c9750967f0b70db1e2de1403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Finalize</definition>
        <argsstring>(HdRenderParam *renderParam) override</argsstring>
        <name>Finalize</name>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <briefdescription>
<para>Deallocate before deletion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>renderParam</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer-global render param. Note: Embree overrides this only to stop the render thread before potential deallocation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1ab76a11061643294b030a98b0d5e6bab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Allocate</definition>
        <argsstring>(GfVec3i const &amp;dimensions, HdFormat format, bool multiSampled) override</argsstring>
        <name>Allocate</name>
        <param>
          <type><ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
          <declname>dimensions</declname>
        </param>
        <param>
          <type>HdFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>multiSampled</declname>
        </param>
        <briefdescription>
<para>Allocate a new buffer with the given dimensions and format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Width, height, and depth of the desired buffer. (Only depth==1 is supported). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the desired buffer, taken from the HdFormat enum. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multisampled</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the buffer is multisampled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the buffer was successfully allocated, false with a warning otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1aaf0ef9b08e42e9aacc391fe1f957cb78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetWidth</definition>
        <argsstring>() const override</argsstring>
        <name>GetWidth</name>
        <briefdescription>
<para>Accessor for buffer width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The width of the currently allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="68" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a43e07692165237ff5e8360ed362ef7c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetHeight</definition>
        <argsstring>() const override</argsstring>
        <name>GetHeight</name>
        <briefdescription>
<para>Accessor for buffer height. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The height of the currently allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="72" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a5799eb466956605f020d3d69a199851d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetDepth</definition>
        <argsstring>() const override</argsstring>
        <name>GetDepth</name>
        <briefdescription>
<para>Accessor for buffer depth. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The depth of the currently allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="76" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a040ae17239766e8e3c79fb1f41388a71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdFormat</type>
        <definition>HdFormat GetFormat</definition>
        <argsstring>() const override</argsstring>
        <name>GetFormat</name>
        <briefdescription>
<para>Accessor for buffer format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The format of the currently allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="80" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a6d0f5db4213bb470592fa619794f2c05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMultiSampled</definition>
        <argsstring>() const override</argsstring>
        <name>IsMultiSampled</name>
        <briefdescription>
<para>Accessor for the buffer multisample state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the buffer is multisampled or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="84" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a14066c4e7bdc7dd508cf9fce1f676284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* Map</definition>
        <argsstring>() override</argsstring>
        <name>Map</name>
        <briefdescription>
<para>Map the buffer for reading/writing. </para>
        </briefdescription>
        <detaileddescription>
<para>The control flow should be Map(), before any I/O, followed by memory access, followed by Unmap() when done. <simplesect kind="return"><para>The address of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="90" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a88f4b3ea245a0a6ee7053e52dca688db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Unmap</definition>
        <argsstring>() override</argsstring>
        <name>Unmap</name>
        <briefdescription>
<para>Unmap the buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="96" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a3509857a8d5934c953f22cff777d30ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMapped</definition>
        <argsstring>() const override</argsstring>
        <name>IsMapped</name>
        <briefdescription>
<para>Return whether any clients have this buffer mapped currently. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the buffer is currently mapped by someone. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="102" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a8f1c4eb75d4bd31a20404459e5bac005" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsConverged</definition>
        <argsstring>() const override</argsstring>
        <name>IsConverged</name>
        <briefdescription>
<para>Is the buffer converged? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the buffer is converged (not currently being rendered to). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="109" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1aadab710e29b5712d3e59bd0a882d5d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetConverged</definition>
        <argsstring>(bool cv)</argsstring>
        <name>SetConverged</name>
        <param>
          <type>bool</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
<para>Set the convergence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cv</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the buffer should be marked converged or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="115" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_buffer_1a393f2a948f0370cac151756730c20e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Resolve</definition>
        <argsstring>() override</argsstring>
        <name>Resolve</name>
        <briefdescription>
<para>Resolve the sample buffer into final values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="120" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1875">
        <label>HdRenderBuffer</label>
        <link refid="class_hd_render_buffer"/>
        <childnode refid="1876" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1874">
        <label>HdEmbreeRenderBuffer</label>
        <childnode refid="1875" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1876">
        <label>HdBprim</label>
        <link refid="class_hd_bprim"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1878">
        <label>HdRenderBuffer</label>
        <link refid="class_hd_render_buffer"/>
        <childnode refid="1879" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1877">
        <label>HdEmbreeRenderBuffer</label>
        <childnode refid="1878" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1879">
        <label>HdBprim</label>
        <link refid="class_hd_bprim"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdEmbree/renderBuffer.h" line="33" column="1" bodyfile="pxr/imaging/hdEmbree/renderBuffer.h" bodystart="32" bodyend="192"/>
    <listofallmembers>
      <member refid="class_hd_embree_render_buffer_1a93740903cf2b90aab1d54c5561c9b5ea" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_buffer</name></member>
      <member refid="class_hd_embree_render_buffer_1a625228901633a18b31376c6ca2d257f3" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_converged</name></member>
      <member refid="class_hd_embree_render_buffer_1a682f44c1e00d13aaffff4da8bf34295a" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_Deallocate</name></member>
      <member refid="class_hd_embree_render_buffer_1a1c902c739f46d08d675ba55ddcef19fb" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_format</name></member>
      <member refid="class_hd_embree_render_buffer_1a267f4f9406a06e3139f8ef4663921a8e" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_GetBufferSize</name></member>
      <member refid="class_hd_embree_render_buffer_1ad2584220fd3b639e33c4408eb71d27e6" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_GetSampleFormat</name></member>
      <member refid="class_hd_embree_render_buffer_1ae56087f20883e5dac738adf23c2bfd5b" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_height</name></member>
      <member refid="class_hd_embree_render_buffer_1ac2b18bfc330a262e5b72534f48ce3817" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_mappers</name></member>
      <member refid="class_hd_embree_render_buffer_1acafad4e05b22d3bbc21182623ed398d4" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_multiSampled</name></member>
      <member refid="class_hd_embree_render_buffer_1ad1949716043e28daa78ff0aa9ea3da0b" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_sampleBuffer</name></member>
      <member refid="class_hd_embree_render_buffer_1ad6d6b43549a885d93763166f3fba7807" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_sampleCount</name></member>
      <member refid="class_hd_embree_render_buffer_1ac8435c09234cd6b9bf78d0d9f513b19c" prot="private" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>_width</name></member>
      <member refid="class_hd_render_buffer_1a2f2dbbbe47e871395a781c8105398c8fa6f2ec4167b47e7269ed7b56e1928e731" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>AllDirty</name></member>
      <member refid="class_hd_embree_render_buffer_1ab76a11061643294b030a98b0d5e6bab0" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Allocate</name></member>
      <member refid="class_hd_render_buffer_1a2f2dbbbe47e871395a781c8105398c8faccea35f717039c64bc6ea05604ecddc0" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Clean</name></member>
      <member refid="class_hd_embree_render_buffer_1a638b95cc4a858887c3acac0318b8ab90" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Clear</name></member>
      <member refid="class_hd_embree_render_buffer_1aa7e33c62208f4fa2fdaa90d7c5c5afa5" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Clear</name></member>
      <member refid="class_hd_render_buffer_1a2f2dbbbe47e871395a781c8105398c8f" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>DirtyBits</name></member>
      <member refid="class_hd_render_buffer_1a2f2dbbbe47e871395a781c8105398c8fa8e5fc22bc32d32b3da6337b1c7ad2f39" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>DirtyDescription</name></member>
      <member refid="class_hd_embree_render_buffer_1a96f70f13c9750967f0b70db1e2de1403" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Finalize</name></member>
      <member refid="class_hd_embree_render_buffer_1a5799eb466956605f020d3d69a199851d" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetDepth</name></member>
      <member refid="class_hd_embree_render_buffer_1a040ae17239766e8e3c79fb1f41388a71" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetFormat</name></member>
      <member refid="class_hd_embree_render_buffer_1a43e07692165237ff5e8360ed362ef7c3" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetHeight</name></member>
      <member refid="class_hd_bprim_1a9301243d9273afcba6395e86047490ab" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetId</name></member>
      <member refid="class_hd_render_buffer_1ad2a06c7fe9d266e21307307fc7a0dccd" prot="public" virt="virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetInitialDirtyBitsMask</name></member>
      <member refid="class_hd_render_buffer_1ab7c96258e8a452089c5533aaac8232f1" prot="public" virt="virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetResource</name></member>
      <member refid="class_hd_embree_render_buffer_1aaf0ef9b08e42e9aacc391fe1f957cb78" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>GetWidth</name></member>
      <member refid="class_hd_bprim_1aa5ee52b8b01515706d54cf147de7f884" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>HdBprim</name></member>
      <member refid="class_hd_embree_render_buffer_1a2c96364ccdecfc0bf47d6af98e70c9f6" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>HdEmbreeRenderBuffer</name></member>
      <member refid="class_hd_render_buffer_1a95a6a2d6df2376353323e3a5081f0005" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>HdRenderBuffer</name></member>
      <member refid="class_hd_embree_render_buffer_1a8f1c4eb75d4bd31a20404459e5bac005" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>IsConverged</name></member>
      <member refid="class_hd_embree_render_buffer_1a3509857a8d5934c953f22cff777d30ec" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>IsMapped</name></member>
      <member refid="class_hd_embree_render_buffer_1a6d0f5db4213bb470592fa619794f2c05" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>IsMultiSampled</name></member>
      <member refid="class_hd_embree_render_buffer_1a14066c4e7bdc7dd508cf9fce1f676284" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Map</name></member>
      <member refid="class_hd_embree_render_buffer_1a393f2a948f0370cac151756730c20e08" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Resolve</name></member>
      <member refid="class_hd_embree_render_buffer_1aadab710e29b5712d3e59bd0a882d5d33" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>SetConverged</name></member>
      <member refid="class_hd_embree_render_buffer_1a01d42ddc062aa607ea4c9fe02315189a" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Sync</name></member>
      <member refid="class_hd_embree_render_buffer_1a88f4b3ea245a0a6ee7053e52dca688db" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Unmap</name></member>
      <member refid="class_hd_embree_render_buffer_1abec1bb633bceda121643ae5a15d97d35" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Write</name></member>
      <member refid="class_hd_embree_render_buffer_1ac2509fe9be7e861ab65ea2098138bdf7" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>Write</name></member>
      <member refid="class_hd_bprim_1a214b96ab3e11db88364e8b73b8a6940c" prot="public" virt="virtual"><scope>HdEmbreeRenderBuffer</scope><name>~HdBprim</name></member>
      <member refid="class_hd_embree_render_buffer_1a322d0274f94bf263bc863df77506dea2" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>~HdEmbreeRenderBuffer</name></member>
      <member refid="class_hd_render_buffer_1a37df1a3eb10072020e53ce8afc961304" prot="public" virt="non-virtual"><scope>HdEmbreeRenderBuffer</scope><name>~HdRenderBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
