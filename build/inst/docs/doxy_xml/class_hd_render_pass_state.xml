<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_render_pass_state" kind="class" language="C++" prot="public">
    <compoundname>HdRenderPassState</compoundname>
    <derivedcompoundref refid="class_hd_st_render_pass_state" prot="public" virt="non-virtual">HdStRenderPassState</derivedcompoundref>
    <includes refid="render_pass_state_8h" local="no">renderPassState.h</includes>
      <sectiondef kind="user-defined">
      <header>Camera and framing state</header>
      <memberdef kind="typedef" id="class_hd_render_pass_state_1a5acf1e9a6d045d8409a5eb3f716cd057" prot="public" static="no">
        <type>std::vector&lt; <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &gt;</type>
        <definition>using ClipPlanesVector =  std::vector&lt;GfVec4d&gt;</definition>
        <argsstring></argsstring>
        <name>ClipPlanesVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="81" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a48d6f54920c68ea4697ed22aeede7b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetCamera</definition>
        <argsstring>(const HdCamera *camera)</argsstring>
        <name>SetCamera</name>
        <param>
          <type>const <ref refid="class_hd_camera" kindref="compound">HdCamera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
<para>Sets the camera. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a3bed18d1ce53306f52d3cc2d18903a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetOverrideWindowPolicy</definition>
        <argsstring>(const std::optional&lt; CameraUtilConformWindowPolicy &gt; &amp;overrideWindowPolicy)</argsstring>
        <name>SetOverrideWindowPolicy</name>
        <param>
          <type>const std::optional&lt; CameraUtilConformWindowPolicy &gt; &amp;</type>
          <declname>overrideWindowPolicy</declname>
        </param>
        <briefdescription>
<para>Sets whether to override the window policy used to conform the camera if its aspect ratio is not matching the display window/viewport. </para>
        </briefdescription>
        <detaileddescription>
<para>If first value is false, the <ref refid="class_hd_camera" kindref="compound">HdCamera</ref>&apos;s window policy is used.</para>
<para>Note: using std::pair&lt;bool, ...&gt; here instead of std::optional&lt;...&gt; since the latter is only available in C++17 or later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2e5fc14ee45dadd9bf5c3fa0efe60eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetFraming</definition>
        <argsstring>(const CameraUtilFraming &amp;framing)</argsstring>
        <name>SetFraming</name>
        <param>
          <type>const <ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref> &amp;</type>
          <declname>framing</declname>
        </param>
        <briefdescription>
<para>Sets the framing to show the camera. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid framing is set, a viewport set earlier with SetViewport will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a8edb732ea2dab2f735b87c80de4e813e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetViewport</definition>
        <argsstring>(const GfVec4d &amp;viewport)</argsstring>
        <name>SetViewport</name>
        <param>
          <type>const <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
<para>Sets the viewport to show the camera. </para>
        </briefdescription>
        <detaileddescription>
<para>If SetViewport is called, any framing set earlier with SetFraming will be ignored.</para>
<para><xrefsect id="deprecated_1_deprecated000143"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the more expressive SetFraming instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a51a8da742d0d3a39fc18d755cd445e0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_camera" kindref="compound">HdCamera</ref> const  *</type>
        <definition>HdCamera const* GetCamera</definition>
        <argsstring>() const</argsstring>
        <name>GetCamera</name>
        <briefdescription>
<para>Get camera. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="113" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aee5ebe8343a2d6777833cfc461ee98a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref> &amp;</type>
        <definition>const CameraUtilFraming&amp; GetFraming</definition>
        <argsstring>() const</argsstring>
        <name>GetFraming</name>
        <briefdescription>
<para>Get framing information determining how the filmback plane maps to pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="118" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ae9e575786fd5e05e9d6dad9ab5e4a684" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::optional&lt; CameraUtilConformWindowPolicy &gt; &amp;</type>
        <definition>const std::optional&lt;CameraUtilConformWindowPolicy&gt;&amp; GetOverrideWindowPolicy</definition>
        <argsstring>() const</argsstring>
        <name>GetOverrideWindowPolicy</name>
        <briefdescription>
<para>The override value for the window policy to conform the camera frustum that can be specified by the application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="123" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2221d42df6c742935d45b8ccf9853a81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API CameraUtilConformWindowPolicy</type>
        <definition>HD_API CameraUtilConformWindowPolicy GetWindowPolicy</definition>
        <argsstring>() const</argsstring>
        <name>GetWindowPolicy</name>
        <briefdescription>
<para>The resolved window policy to conform the camera frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>This is either the override value specified by the application or the value from the scene delegate&apos;s camera. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aff741205af587bfc3b2b3dca6b8677ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual HD_API GfMatrix4d GetWorldToViewMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetWorldToViewMatrix</name>
        <reimplementedby refid="class_hd_st_render_pass_state_1a556e090ac0716e1ba457e39290b02a45">GetWorldToViewMatrix</reimplementedby>
        <briefdescription>
<para>Camera getter API. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns inverse of <ref refid="class_hd_camera" kindref="compound">HdCamera</ref>&apos;s transform. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a9fbad4830989cbbdcebcf67aede821c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual HD_API GfMatrix4d GetProjectionMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetProjectionMatrix</name>
        <reimplementedby refid="class_hd_st_render_pass_state_1ae9c1b9bbe80104012a33256d04af8f93">GetProjectionMatrix</reimplementedby>
        <briefdescription>
<para>Compute projection matrix using physical attributes of an <ref refid="class_hd_camera" kindref="compound">HdCamera</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1abfd360ca764a960d84a536a509405ecf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const  &amp;</type>
        <definition>GfVec4f const&amp; GetViewport</definition>
        <argsstring>() const</argsstring>
        <name>GetViewport</name>
        <briefdescription>
<para>Only use when clients did not specify a camera framing. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000144"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="147" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a04d3fe288f9d8ab98841643513bebcbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>HD_API GfMatrix4d GetImageToWorldMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetImageToWorldMatrix</name>
        <briefdescription>
<para>Compute a transform from window relative coordinates (x,y,z,1) to homogeneous world coordinates (x,y,z,w), using the <ref refid="class_hd_camera" kindref="compound">HdCamera</ref>&apos;s attributes, framing, and viewport dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a4664ead9f358c19107c2ad636b4f6d33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API ClipPlanesVector const  &amp;</type>
        <definition>virtual HD_API ClipPlanesVector const&amp; GetClipPlanes</definition>
        <argsstring>() const</argsstring>
        <name>GetClipPlanes</name>
        <reimplementedby refid="class_hd_st_render_pass_state_1a03384756cd16ea5443a655e1fa47ef9b">GetClipPlanes</reimplementedby>
        <briefdescription>
<para>Returns <ref refid="class_hd_camera" kindref="compound">HdCamera</ref>&apos;s clip planes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Application rendering state</header>
      <memberdef kind="function" id="class_hd_render_pass_state_1a5a1fd5a03178790ae518872f08376c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetOverrideColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetOverrideColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set an override color for rendering where the R, G and B components are the color and the alpha component is the blend value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad7911679d244a7db7773e74d0ede5c1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetOverrideColor</definition>
        <argsstring>() const</argsstring>
        <name>GetOverrideColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="169" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a949683b9435012d66f2889bfbda62cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetWireframeColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetWireframeColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set a wireframe color for rendering where the R, G and B components are the color and the alpha component is the blend value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1af17942625346b3a8ed135590aefa71c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetWireframeColor</definition>
        <argsstring>() const</argsstring>
        <name>GetWireframeColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="175" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a253c16bb65f4492ab04e854514436ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetMaskColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetMaskColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1acf879fce3cb3d70e721ce90fb8711c90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetMaskColor</definition>
        <argsstring>() const</argsstring>
        <name>GetMaskColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="179" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aebf52cbe505e4ba1e1c30dd8f8b32736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetIndicatorColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetIndicatorColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1abb132fc9b939820b8532154a2805fac0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetIndicatorColor</definition>
        <argsstring>() const</argsstring>
        <name>GetIndicatorColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="183" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a4bbcd289e4d8bc328d62d066d3c0a464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetPointColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetPointColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set a point color for rendering where the R, G and B components are the color and the alpha component is the blend value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad35555f6c6fe0dd761bcdf22e8e52f1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetPointColor</definition>
        <argsstring>() const</argsstring>
        <name>GetPointColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="189" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a8705486b94c5d9eb29bca4cf20121b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetPointSize</definition>
        <argsstring>(float size)</argsstring>
        <name>SetPointSize</name>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the point size for unselected points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a72875608ac645dc20d356a698a296fe9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetPointSize</definition>
        <argsstring>() const</argsstring>
        <name>GetPointSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="194" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a991aaabe20401da951ddeab1abcc2f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetPointSelectedSize</definition>
        <argsstring>(float size)</argsstring>
        <name>SetPointSelectedSize</name>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the point size for selected points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad1c61894de16e8f3f8ceb0c5b8bf3b34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetPointSelectedSize</definition>
        <argsstring>() const</argsstring>
        <name>GetPointSelectedSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="199" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aa3669cb0a5c497b8143be52eff457a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetLightingEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetLightingEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>XXX: Hacky way of disabling lighting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2156ef640385f0302c70d3dbd9b8269b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetLightingEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetLightingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="204" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad859a5202a64e6d1b31e2d4df2b597ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetClippingEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetClippingEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a1bd5030f6492b6dde115c458c0988552" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetClippingEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetClippingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="208" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="208" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Render pipeline state</header>
      <memberdef kind="enum" id="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772" prot="public" static="no" strong="no">
        <type></type>
        <name>ColorMask</name>
        <enumvalue id="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772a9491eaa72dddf718168de4fb435d6061" prot="public">
          <name>ColorMaskNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772aad26941140e324f698937822e31a6ce9" prot="public">
          <name>ColorMaskRGB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772aaa6b7a6a66d468edd8a0c8e03c221a8d" prot="public">
          <name>ColorMaskRGBA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="341" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a6f11b7290df65c5f07b3464ecf5e8d10" prot="protected" static="no" mutable="no">
        <type><ref refid="class_hd_camera" kindref="compound">HdCamera</ref> const  *</type>
        <definition>HdCamera const* _camera</definition>
        <argsstring></argsstring>
        <name>_camera</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="359" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1aa421c060145c803c4dab83d1cc656ddb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _viewport</definition>
        <argsstring></argsstring>
        <name>_viewport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="360" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a45cedb49680fd7fb30cae3e826e3d1ae" prot="protected" static="no" mutable="no">
        <type><ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref></type>
        <definition>CameraUtilFraming _framing</definition>
        <argsstring></argsstring>
        <name>_framing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="361" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1add64581840b0e8fe695d12dc8cae8311" prot="protected" static="no" mutable="no">
        <type>std::optional&lt; CameraUtilConformWindowPolicy &gt;</type>
        <definition>std::optional&lt;CameraUtilConformWindowPolicy&gt; _overrideWindowPolicy</definition>
        <argsstring></argsstring>
        <name>_overrideWindowPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="362" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a374ddd71960bddbe4a01e054cbc33a6a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _overrideColor</definition>
        <argsstring></argsstring>
        <name>_overrideColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="367" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a932508f50243bfdfdf1f5c3812012786" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _wireframeColor</definition>
        <argsstring></argsstring>
        <name>_wireframeColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="368" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a4409bcba68a2e06dbcd00c1e4f6121fb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _pointColor</definition>
        <argsstring></argsstring>
        <name>_pointColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="369" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a82fc15181f91d153acc8106975518ee4" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _pointSize</definition>
        <argsstring></argsstring>
        <name>_pointSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="370" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a313ca9271af1b540d759a21ae2f8b207" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _lightingEnabled</definition>
        <argsstring></argsstring>
        <name>_lightingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="371" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a8fbe0ff2eca3535b4015cf5c8ee2f167" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _clippingEnabled</definition>
        <argsstring></argsstring>
        <name>_clippingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="372" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a81391d9d7775ed5f45d1917db6d20f01" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _maskColor</definition>
        <argsstring></argsstring>
        <name>_maskColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="374" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a4164828105af2307f909cd73ad16c5f4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _indicatorColor</definition>
        <argsstring></argsstring>
        <name>_indicatorColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="375" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a0207ec9e3eb2e7b467d6927c8fe5d9a8" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _pointSelectedSize</definition>
        <argsstring></argsstring>
        <name>_pointSelectedSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="376" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a568ec7fc714141771eab1da5922ab09f" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _alphaThreshold</definition>
        <argsstring></argsstring>
        <name>_alphaThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="381" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1acfa9b19fca5e779da27787396213ea7b" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _tessLevel</definition>
        <argsstring></argsstring>
        <name>_tessLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="382" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1af6fd7f9db39f18ad65f13f2bfee56ede" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f _drawRange</definition>
        <argsstring></argsstring>
        <name>_drawRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="383" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1af204098936f564ab24932f1a33a6462b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _depthBiasUseDefault</definition>
        <argsstring></argsstring>
        <name>_depthBiasUseDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="385" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a58fa95e6e942efbc31def5ed05670c61" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _depthBiasEnabled</definition>
        <argsstring></argsstring>
        <name>_depthBiasEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="386" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a5dccaa4271b7eeb4e67928b8f472a6cf" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _depthBiasConstantFactor</definition>
        <argsstring></argsstring>
        <name>_depthBiasConstantFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="387" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a13a331d77028a2ef88d10edfed1db01b" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _depthBiasSlopeFactor</definition>
        <argsstring></argsstring>
        <name>_depthBiasSlopeFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="388" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a7f9688a0ba63e9543e670368ac8b13bb" prot="protected" static="no" mutable="no">
        <type>HdCompareFunction</type>
        <definition>HdCompareFunction _depthFunc</definition>
        <argsstring></argsstring>
        <name>_depthFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="389" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a26fe825006d6e3c7b70f4d5a4da5cdfb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _depthMaskEnabled</definition>
        <argsstring></argsstring>
        <name>_depthMaskEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="390" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1aac1c5813cf0b64f9809c762466a59c8e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _depthTestEnabled</definition>
        <argsstring></argsstring>
        <name>_depthTestEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="391" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1afe8ee724dc805e5a992114a7e316ed2c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _depthClampEnabled</definition>
        <argsstring></argsstring>
        <name>_depthClampEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="392" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a853bce09c88b24179be3923a6852966e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f _depthRange</definition>
        <argsstring></argsstring>
        <name>_depthRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="393" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a0d10aa0ce3116bd56034c5e4cbcb3c5b" prot="protected" static="no" mutable="no">
        <type>HdCullStyle</type>
        <definition>HdCullStyle _cullStyle</definition>
        <argsstring></argsstring>
        <name>_cullStyle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="395" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a16951fad57e95b5d3a420d0d96ba20a1" prot="protected" static="no" mutable="no">
        <type>HdCompareFunction</type>
        <definition>HdCompareFunction _stencilFunc</definition>
        <argsstring></argsstring>
        <name>_stencilFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="398" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a15922a5cb54ee9d4de4745f8e8bf8b21" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int _stencilRef</definition>
        <argsstring></argsstring>
        <name>_stencilRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="399" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a6a6a961685296d0ea7d81f75800601e0" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int _stencilMask</definition>
        <argsstring></argsstring>
        <name>_stencilMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="400" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a1958c9a24c0c7e18655a8830ae5800ad" prot="protected" static="no" mutable="no">
        <type>HdStencilOp</type>
        <definition>HdStencilOp _stencilFailOp</definition>
        <argsstring></argsstring>
        <name>_stencilFailOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="401" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a944270a788e372ca86ab1133b8903a9e" prot="protected" static="no" mutable="no">
        <type>HdStencilOp</type>
        <definition>HdStencilOp _stencilZFailOp</definition>
        <argsstring></argsstring>
        <name>_stencilZFailOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="402" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1acf191ed916de245ea2195cdd34809290" prot="protected" static="no" mutable="no">
        <type>HdStencilOp</type>
        <definition>HdStencilOp _stencilZPassOp</definition>
        <argsstring></argsstring>
        <name>_stencilZPassOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="403" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a4e18599f390686fd33e8544720e9611d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _stencilEnabled</definition>
        <argsstring></argsstring>
        <name>_stencilEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="404" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a63bb6e1a3863a4ca2f2a5a97aa604330" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _lineWidth</definition>
        <argsstring></argsstring>
        <name>_lineWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="407" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1aba4ac6d7b1287b9ac3f9c549aea31255" prot="protected" static="no" mutable="no">
        <type>HdBlendOp</type>
        <definition>HdBlendOp _blendColorOp</definition>
        <argsstring></argsstring>
        <name>_blendColorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="410" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a395d4dc45e9c3b851c4cfbfd837ef990" prot="protected" static="no" mutable="no">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor _blendColorSrcFactor</definition>
        <argsstring></argsstring>
        <name>_blendColorSrcFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="411" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1ae7d2b0bbbef5801da57fc5a737ec7254" prot="protected" static="no" mutable="no">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor _blendColorDstFactor</definition>
        <argsstring></argsstring>
        <name>_blendColorDstFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="412" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a84b363218378b265200d8eb1d27a3db3" prot="protected" static="no" mutable="no">
        <type>HdBlendOp</type>
        <definition>HdBlendOp _blendAlphaOp</definition>
        <argsstring></argsstring>
        <name>_blendAlphaOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="413" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a0f23bc95405c6bf4f6a9ab543d33b658" prot="protected" static="no" mutable="no">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor _blendAlphaSrcFactor</definition>
        <argsstring></argsstring>
        <name>_blendAlphaSrcFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="414" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1ae4fe293684d493f97a4e81a99dfe86ec" prot="protected" static="no" mutable="no">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor _blendAlphaDstFactor</definition>
        <argsstring></argsstring>
        <name>_blendAlphaDstFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="415" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a2020c7a853f0398111583d69af356aa6" prot="protected" static="no" mutable="no">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f _blendConstantColor</definition>
        <argsstring></argsstring>
        <name>_blendConstantColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="416" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a75e498d75cf1bd554ea72c6a53a898c1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _blendEnabled</definition>
        <argsstring></argsstring>
        <name>_blendEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="417" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1ad9e3bc168e57f93bad964391d5e7976c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _alphaToCoverageEnabled</definition>
        <argsstring></argsstring>
        <name>_alphaToCoverageEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="420" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a9c48418e81bd6c24dd666ccffedcd2a8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _colorMaskUseDefault</definition>
        <argsstring></argsstring>
        <name>_colorMaskUseDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="422" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a1c7efc757b9881d8a0d072b17d31dce5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; ColorMask &gt;</type>
        <definition>std::vector&lt;ColorMask&gt; _colorMasks</definition>
        <argsstring></argsstring>
        <name>_colorMasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="423" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a21cece5f580f5106d1a7783e4a47bccd" prot="protected" static="no" mutable="no">
        <type>HdRenderPassAovBindingVector</type>
        <definition>HdRenderPassAovBindingVector _aovBindings</definition>
        <argsstring></argsstring>
        <name>_aovBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="425" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1af56546f99e6def66c0fb28af514afc2b" prot="protected" static="no" mutable="no">
        <type>HdRenderPassAovBindingVector</type>
        <definition>HdRenderPassAovBindingVector _aovInputBindings</definition>
        <argsstring></argsstring>
        <name>_aovInputBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="426" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a0d22215518ae7f16d78137f21352d37f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _useMultiSampleAov</definition>
        <argsstring></argsstring>
        <name>_useMultiSampleAov</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="427" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a2a3eff397f100559c43d8053e2c48d45" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _conservativeRasterizationEnabled</definition>
        <argsstring></argsstring>
        <name>_conservativeRasterizationEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="429" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1af3786e185fac03ac24432b118e1adad8" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _stepSize</definition>
        <argsstring></argsstring>
        <name>_stepSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="431" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1a0d26b407b582ac064ff781e4125d4f1f" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float _stepSizeLighting</definition>
        <argsstring></argsstring>
        <name>_stepSizeLighting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="432" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_render_pass_state_1af7cee523904a2c58cc8b51367181c669" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _multiSampleEnabled</definition>
        <argsstring></argsstring>
        <name>_multiSampleEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="434" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a454bc752c33d72330d9246b0fb239bb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetAovBindings</definition>
        <argsstring>(HdRenderPassAovBindingVector const &amp;aovBindings)</argsstring>
        <name>SetAovBindings</name>
        <param>
          <type>HdRenderPassAovBindingVector const &amp;</type>
          <declname>aovBindings</declname>
        </param>
        <briefdescription>
<para>Set the attachments for this renderpass to render into. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aaeac4a852b40f026e6dfa209d1f7ff09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdRenderPassAovBindingVector const  &amp;</type>
        <definition>HD_API HdRenderPassAovBindingVector const&amp; GetAovBindings</definition>
        <argsstring>() const</argsstring>
        <name>GetAovBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a3d1ecbb9457516fdda0fa513a3ddcdb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetAovInputBindings</definition>
        <argsstring>(HdRenderPassAovBindingVector const &amp;aovBindings)</argsstring>
        <name>SetAovInputBindings</name>
        <param>
          <type>HdRenderPassAovBindingVector const &amp;</type>
          <declname>aovBindings</declname>
        </param>
        <briefdescription>
<para>Set the AOVs that this renderpass needs to read from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a95d5ec96e7a657e6fb3c44fa2c4ff236" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdRenderPassAovBindingVector const  &amp;</type>
        <definition>HD_API HdRenderPassAovBindingVector const&amp; GetAovInputBindings</definition>
        <argsstring>() const</argsstring>
        <name>GetAovInputBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad54ab3b3ba7642af084ff25210c477cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetUseAovMultiSample</definition>
        <argsstring>(bool state)</argsstring>
        <name>SetUseAovMultiSample</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Returns true if the render pass wants to render into the multi-sample aovs. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false if the render wants to render into the resolve aovs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2669d98188463e5969e46a56c40c22e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool GetUseAovMultiSample</definition>
        <argsstring>() const</argsstring>
        <name>GetUseAovMultiSample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ab2335fda587b688a2f616c12b1d17ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetCullStyle</definition>
        <argsstring>(HdCullStyle cullStyle)</argsstring>
        <name>SetCullStyle</name>
        <param>
          <type>HdCullStyle</type>
          <declname>cullStyle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aaefba23690fe2e32faa0167522caacfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HD_API HdCullStyle</type>
        <definition>HD_API HdCullStyle GetCullStyle</definition>
        <argsstring>() const</argsstring>
        <name>GetCullStyle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="236" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad3ff5c271d17c34d3f330a017fdef56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetAlphaThreshold</definition>
        <argsstring>(float alphaThreshold)</argsstring>
        <name>SetAlphaThreshold</name>
        <param>
          <type>float</type>
          <declname>alphaThreshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ac7af57699233cdd852e9fd66ac07fd7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetAlphaThreshold</definition>
        <argsstring>() const</argsstring>
        <name>GetAlphaThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="240" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a1939992819fa265cb3f3334aa5efa668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetTessLevel</definition>
        <argsstring>(float level)</argsstring>
        <name>SetTessLevel</name>
        <param>
          <type>float</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a71fc91c8a56a2224af76df09089e7472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetTessLevel</definition>
        <argsstring>() const</argsstring>
        <name>GetTessLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="244" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1abe30ffea657b13640a6fbbdbe621b9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDrawingRange</definition>
        <argsstring>(GfVec2f const &amp;drawRange)</argsstring>
        <name>SetDrawingRange</name>
        <param>
          <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> const &amp;</type>
          <declname>drawRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a8227380a7f048764af2c7b98aa8f00a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f GetDrawingRange</definition>
        <argsstring>() const</argsstring>
        <name>GetDrawingRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="248" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a0ad24436d0950525a5403d782ae21a67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>HD_API GfVec2f GetDrawingRangeNDC</definition>
        <argsstring>() const</argsstring>
        <name>GetDrawingRangeNDC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a67862f634f4340db54da503fc07ccbaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDepthBiasUseDefault</definition>
        <argsstring>(bool useDefault)</argsstring>
        <name>SetDepthBiasUseDefault</name>
        <param>
          <type>bool</type>
          <declname>useDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aae2ba2bce16e07abdda4bb6a4b158672" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetDepthBiasUseDefault</definition>
        <argsstring>() const</argsstring>
        <name>GetDepthBiasUseDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="254" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a7c9845f3052dd72c31a12d2f503f35af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDepthBiasEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetDepthBiasEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a9d484ffc9cdef272a678cd57d32b84ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetDepthBiasEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetDepthBiasEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="258" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a10ea0b0fb663833aef4b6b8c1b1b3c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDepthBias</definition>
        <argsstring>(float constantFactor, float slopeFactor)</argsstring>
        <name>SetDepthBias</name>
        <param>
          <type>float</type>
          <declname>constantFactor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slopeFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a71b795fb5eb43af827a0e92a14bc22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDepthFunc</definition>
        <argsstring>(HdCompareFunction depthFunc)</argsstring>
        <name>SetDepthFunc</name>
        <param>
          <type>HdCompareFunction</type>
          <declname>depthFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a5e3efa12ea0a9a95e541f1478e1e6a20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdCompareFunction</type>
        <definition>HdCompareFunction GetDepthFunc</definition>
        <argsstring>() const</argsstring>
        <name>GetDepthFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="265" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ab7e6dc3663d9c5fbd02a14e4377b45af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetEnableDepthMask</definition>
        <argsstring>(bool state)</argsstring>
        <name>SetEnableDepthMask</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ab31fc8b810c715f2bf00735486eb317a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool GetEnableDepthMask</definition>
        <argsstring>() const</argsstring>
        <name>GetEnableDepthMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a38de5fe93cc8fb8324709b9ea22291a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetEnableDepthTest</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetEnableDepthTest</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ad6cee7f8b762a4098365265ae9a6afa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool GetEnableDepthTest</definition>
        <argsstring>() const</argsstring>
        <name>GetEnableDepthTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aecc8512b023abed18b38e5cd1d76e4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetEnableDepthClamp</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetEnableDepthClamp</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1af450c218b4d52376bda97fc3d229250b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool GetEnableDepthClamp</definition>
        <argsstring>() const</argsstring>
        <name>GetEnableDepthClamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a04e8f44672276b0635c714bb5465b9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetDepthRange</definition>
        <argsstring>(GfVec2f const &amp;depthRange)</argsstring>
        <name>SetDepthRange</name>
        <param>
          <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> const &amp;</type>
          <declname>depthRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ac182a7b8860df105444b3edb8a16e62c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
        <definition>HD_API const GfVec2f&amp; GetDepthRange</definition>
        <argsstring>() const</argsstring>
        <name>GetDepthRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a98616b7895638262a8ff5af54d7b1208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetStencil</definition>
        <argsstring>(HdCompareFunction func, int ref, int mask, HdStencilOp fail, HdStencilOp zfail, HdStencilOp zpass)</argsstring>
        <name>SetStencil</name>
        <param>
          <type>HdCompareFunction</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>HdStencilOp</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>HdStencilOp</type>
          <declname>zfail</declname>
        </param>
        <param>
          <type>HdStencilOp</type>
          <declname>zpass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2cd05e836537c2bbc87985097b38aa0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdCompareFunction</type>
        <definition>HdCompareFunction GetStencilFunc</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="290" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a06cd2c12633ed0bb651c3d59df8a5f29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int GetStencilRef</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="291" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a72a93fa083d4862dd7125d12adb187a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int GetStencilMask</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="292" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a21252ac55563b5850b1e708fc5170a05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdStencilOp</type>
        <definition>HdStencilOp GetStencilFailOp</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilFailOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="293" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1ae2a767d696abec5cb0920eaf94886560" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdStencilOp</type>
        <definition>HdStencilOp GetStencilDepthFailOp</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilDepthFailOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="294" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aac5f541aee4575d8a23257264f193515" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdStencilOp</type>
        <definition>HdStencilOp GetStencilDepthPassOp</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilDepthPassOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="295" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a54111469af00d8720b4a04eecf276fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetStencilEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetStencilEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a9762e80ef729c90c970a4984f174483e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool GetStencilEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetStencilEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a7f57bc07c4753bba821b4547cb5f9950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetLineWidth</definition>
        <argsstring>(float width)</argsstring>
        <name>SetLineWidth</name>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a6297630af4c50e67a7da48c8eedf9d66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetLineWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetLineWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="303" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1acf28b9409aa0fd0312470e2e071c4e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetBlend</definition>
        <argsstring>(HdBlendOp colorOp, HdBlendFactor colorSrcFactor, HdBlendFactor colorDstFactor, HdBlendOp alphaOp, HdBlendFactor alphaSrcFactor, HdBlendFactor alphaDstFactor)</argsstring>
        <name>SetBlend</name>
        <param>
          <type>HdBlendOp</type>
          <declname>colorOp</declname>
        </param>
        <param>
          <type>HdBlendFactor</type>
          <declname>colorSrcFactor</declname>
        </param>
        <param>
          <type>HdBlendFactor</type>
          <declname>colorDstFactor</declname>
        </param>
        <param>
          <type>HdBlendOp</type>
          <declname>alphaOp</declname>
        </param>
        <param>
          <type>HdBlendFactor</type>
          <declname>alphaSrcFactor</declname>
        </param>
        <param>
          <type>HdBlendFactor</type>
          <declname>alphaDstFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1afc7b1058e2cf4cc0c9d00c58eae55c86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendOp</type>
        <definition>HdBlendOp GetBlendColorOp</definition>
        <argsstring>()</argsstring>
        <name>GetBlendColorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="312" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a9eb026795fe3c2abe66c093e238eafe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor GetBlendColorSrcFactor</definition>
        <argsstring>()</argsstring>
        <name>GetBlendColorSrcFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="313" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a2add7f8119f2a46a7e98623aec2221c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor GetBlendColorDstFactor</definition>
        <argsstring>()</argsstring>
        <name>GetBlendColorDstFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="314" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aff746f01b47011477020b400674383b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendOp</type>
        <definition>HdBlendOp GetBlendAlphaOp</definition>
        <argsstring>()</argsstring>
        <name>GetBlendAlphaOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="315" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a540a5b285087b51d3cfad33221a1655a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor GetBlendAlphaSrcFactor</definition>
        <argsstring>()</argsstring>
        <name>GetBlendAlphaSrcFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="316" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a482242c488769b7c5e0f54159c6da30b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBlendFactor</type>
        <definition>HdBlendFactor GetBlendAlphaDstFactor</definition>
        <argsstring>()</argsstring>
        <name>GetBlendAlphaDstFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="317" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aeb2d077f08489200dde3341bc6f57a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetBlendConstantColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetBlendConstantColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aa8fad0440107bf9900ddd1bc7c8c42a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        <definition>const GfVec4f&amp; GetBlendConstantColor</definition>
        <argsstring>() const</argsstring>
        <name>GetBlendConstantColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="320" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1abb6eb280b0dc7be96e3124f563ca0399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetBlendEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetBlendEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a48b0da4584d3c4c468ad7e13cc80d481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetAlphaToCoverageEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetAlphaToCoverageEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a06b468c43d052012e2179ea3a2c7269b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetAlphaToCoverageEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetAlphaToCoverageEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="326" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a252761d2ee48cc5377a103533097cac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetColorMaskUseDefault</definition>
        <argsstring>(bool useDefault)</argsstring>
        <name>SetColorMaskUseDefault</name>
        <param>
          <type>bool</type>
          <declname>useDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a66e5b521852e37765eb60acb7d406883" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetColorMaskUseDefault</definition>
        <argsstring>() const</argsstring>
        <name>GetColorMaskUseDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="330" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a8055528cb9c03ccf56ed203e670fe99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetConservativeRasterizationEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetConservativeRasterizationEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aaf697fd5a274c21bfadc45b02a75361d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetConservativeRasterizationEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetConservativeRasterizationEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="334" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1aeb17d04e72043a3164f9bd5b8a179dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetVolumeRenderingConstants</definition>
        <argsstring>(float stepSize, float stepSizeLighting)</argsstring>
        <name>SetVolumeRenderingConstants</name>
        <param>
          <type>float</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stepSizeLighting</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a22386f127cbe8e17806dc8dba3ee67b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetColorMasks</definition>
        <argsstring>(std::vector&lt; ColorMask &gt; const &amp;masks)</argsstring>
        <name>SetColorMasks</name>
        <param>
          <type>std::vector&lt; ColorMask &gt; const &amp;</type>
          <declname>masks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a3affaeec2505ff97df5bc4c88e656249" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; ColorMask &gt; const  &amp;</type>
        <definition>std::vector&lt;ColorMask&gt; const&amp; GetColorMasks</definition>
        <argsstring>() const</argsstring>
        <name>GetColorMasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="349" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a44666e91b13ddbabdd08501772a8ed6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void SetMultiSampleEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetMultiSampleEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a28478f4170a0c9049a883dd1335eb0f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetMultiSampleEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GetMultiSampleEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="353" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="353" bodyend="353"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_render_pass_state_1a84b14dbf0f7bf25ef1965102b9b77559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdRenderPassState</definition>
        <argsstring>()</argsstring>
        <name>HdRenderPassState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1acb7be7bed8a43e41a6621677da1b2f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API</type>
        <definition>virtual HD_API ~HdRenderPassState</definition>
        <argsstring>()</argsstring>
        <name>~HdRenderPassState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_render_pass_state_1a41dc34261da51055856f7a6a3da393c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void Prepare</definition>
        <argsstring>(HdResourceRegistrySharedPtr const &amp;resourceRegistry)</argsstring>
        <name>Prepare</name>
        <reimplementedby refid="class_hd_st_render_pass_state_1a880afdd1f2b726bd60c5d8cf1b34cdaf">Prepare</reimplementedby>
        <param>
          <type>HdResourceRegistrySharedPtr const &amp;</type>
          <declname>resourceRegistry</declname>
        </param>
        <briefdescription>
<para>Schedule to update renderPassState parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>e.g. camera matrix, override color, id blend factor. Prepare, called once per frame after the sync phase, but prior to the commit phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/renderPassState.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A set of rendering parameters used among render passes. </para>
    </briefdescription>
    <detaileddescription>
<para>Parameters are expressed as GL states, uniforms or shaders. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2601">
        <label>HdRenderPassState</label>
        <link refid="class_hd_render_pass_state"/>
      </node>
      <node id="2602">
        <label>HdStRenderPassState</label>
        <link refid="class_hd_st_render_pass_state"/>
        <childnode refid="2601" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2607">
        <label>HdSprim</label>
        <link refid="class_hd_sprim"/>
      </node>
      <node id="2610">
        <label>GfRange1f</label>
        <link refid="class_gf_range1f"/>
      </node>
      <node id="2609">
        <label>GfMatrix4d</label>
        <link refid="class_gf_matrix4d"/>
      </node>
      <node id="2608">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
      <node id="2606">
        <label>HdCamera</label>
        <link refid="class_hd_camera"/>
        <childnode refid="2607" relation="public-inheritance">
        </childnode>
        <childnode refid="2605" relation="usage">
          <edgelabel>_lensDistortionAsym</edgelabel>
          <edgelabel>_lensDistortionCenter</edgelabel>
        </childnode>
        <childnode refid="2608" relation="usage">
          <edgelabel>_lensDistortionType</edgelabel>
        </childnode>
        <childnode refid="2609" relation="usage">
          <edgelabel>_transform</edgelabel>
        </childnode>
        <childnode refid="2610" relation="usage">
          <edgelabel>_clippingRange</edgelabel>
        </childnode>
      </node>
      <node id="2605">
        <label>GfVec2f</label>
        <link refid="class_gf_vec2f"/>
      </node>
      <node id="2604">
        <label>GfVec4f</label>
        <link refid="class_gf_vec4f"/>
      </node>
      <node id="2611">
        <label>CameraUtilFraming</label>
        <link refid="class_camera_util_framing"/>
        <childnode refid="2612" relation="usage">
          <edgelabel>displayWindow</edgelabel>
        </childnode>
        <childnode refid="2613" relation="usage">
          <edgelabel>dataWindow</edgelabel>
        </childnode>
      </node>
      <node id="2603">
        <label>HdRenderPassState</label>
        <link refid="class_hd_render_pass_state"/>
        <childnode refid="2604" relation="usage">
          <edgelabel>_blendConstantColor</edgelabel>
          <edgelabel>_overrideColor</edgelabel>
          <edgelabel>_indicatorColor</edgelabel>
          <edgelabel>_pointColor</edgelabel>
          <edgelabel>_wireframeColor</edgelabel>
          <edgelabel>_maskColor</edgelabel>
          <edgelabel>_viewport</edgelabel>
        </childnode>
        <childnode refid="2605" relation="usage">
          <edgelabel>_depthRange</edgelabel>
          <edgelabel>_drawRange</edgelabel>
        </childnode>
        <childnode refid="2606" relation="usage">
          <edgelabel>_camera</edgelabel>
        </childnode>
        <childnode refid="2611" relation="usage">
          <edgelabel>_framing</edgelabel>
        </childnode>
      </node>
      <node id="2613">
        <label>GfRect2i</label>
        <link refid="class_gf_rect2i"/>
      </node>
      <node id="2612">
        <label>GfRange2f</label>
        <link refid="class_gf_range2f"/>
        <childnode refid="2612" relation="usage">
          <edgelabel>UnitSquare</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hd/renderPassState.h" line="63" column="1" bodyfile="pxr/imaging/hd/renderPassState.h" bodystart="62" bodyend="435"/>
    <listofallmembers>
      <member refid="class_hd_render_pass_state_1a568ec7fc714141771eab1da5922ab09f" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_alphaThreshold</name></member>
      <member refid="class_hd_render_pass_state_1ad9e3bc168e57f93bad964391d5e7976c" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_alphaToCoverageEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a21cece5f580f5106d1a7783e4a47bccd" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_aovBindings</name></member>
      <member refid="class_hd_render_pass_state_1af56546f99e6def66c0fb28af514afc2b" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_aovInputBindings</name></member>
      <member refid="class_hd_render_pass_state_1ae4fe293684d493f97a4e81a99dfe86ec" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendAlphaDstFactor</name></member>
      <member refid="class_hd_render_pass_state_1a84b363218378b265200d8eb1d27a3db3" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendAlphaOp</name></member>
      <member refid="class_hd_render_pass_state_1a0f23bc95405c6bf4f6a9ab543d33b658" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendAlphaSrcFactor</name></member>
      <member refid="class_hd_render_pass_state_1ae7d2b0bbbef5801da57fc5a737ec7254" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendColorDstFactor</name></member>
      <member refid="class_hd_render_pass_state_1aba4ac6d7b1287b9ac3f9c549aea31255" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendColorOp</name></member>
      <member refid="class_hd_render_pass_state_1a395d4dc45e9c3b851c4cfbfd837ef990" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendColorSrcFactor</name></member>
      <member refid="class_hd_render_pass_state_1a2020c7a853f0398111583d69af356aa6" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendConstantColor</name></member>
      <member refid="class_hd_render_pass_state_1a75e498d75cf1bd554ea72c6a53a898c1" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_blendEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a6f11b7290df65c5f07b3464ecf5e8d10" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_camera</name></member>
      <member refid="class_hd_render_pass_state_1a8fbe0ff2eca3535b4015cf5c8ee2f167" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_clippingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a1c7efc757b9881d8a0d072b17d31dce5" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_colorMasks</name></member>
      <member refid="class_hd_render_pass_state_1a9c48418e81bd6c24dd666ccffedcd2a8" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_colorMaskUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1a2a3eff397f100559c43d8053e2c48d45" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_conservativeRasterizationEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a0d10aa0ce3116bd56034c5e4cbcb3c5b" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_cullStyle</name></member>
      <member refid="class_hd_render_pass_state_1a5dccaa4271b7eeb4e67928b8f472a6cf" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthBiasConstantFactor</name></member>
      <member refid="class_hd_render_pass_state_1a58fa95e6e942efbc31def5ed05670c61" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthBiasEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a13a331d77028a2ef88d10edfed1db01b" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthBiasSlopeFactor</name></member>
      <member refid="class_hd_render_pass_state_1af204098936f564ab24932f1a33a6462b" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthBiasUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1afe8ee724dc805e5a992114a7e316ed2c" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthClampEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a7f9688a0ba63e9543e670368ac8b13bb" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthFunc</name></member>
      <member refid="class_hd_render_pass_state_1a26fe825006d6e3c7b70f4d5a4da5cdfb" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthMaskEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a853bce09c88b24179be3923a6852966e" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthRange</name></member>
      <member refid="class_hd_render_pass_state_1aac1c5813cf0b64f9809c762466a59c8e" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_depthTestEnabled</name></member>
      <member refid="class_hd_render_pass_state_1af6fd7f9db39f18ad65f13f2bfee56ede" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_drawRange</name></member>
      <member refid="class_hd_render_pass_state_1a45cedb49680fd7fb30cae3e826e3d1ae" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_framing</name></member>
      <member refid="class_hd_render_pass_state_1a4164828105af2307f909cd73ad16c5f4" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_indicatorColor</name></member>
      <member refid="class_hd_render_pass_state_1a313ca9271af1b540d759a21ae2f8b207" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_lightingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a63bb6e1a3863a4ca2f2a5a97aa604330" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_lineWidth</name></member>
      <member refid="class_hd_render_pass_state_1a81391d9d7775ed5f45d1917db6d20f01" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_maskColor</name></member>
      <member refid="class_hd_render_pass_state_1af7cee523904a2c58cc8b51367181c669" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_multiSampleEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a374ddd71960bddbe4a01e054cbc33a6a" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_overrideColor</name></member>
      <member refid="class_hd_render_pass_state_1add64581840b0e8fe695d12dc8cae8311" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_overrideWindowPolicy</name></member>
      <member refid="class_hd_render_pass_state_1a4409bcba68a2e06dbcd00c1e4f6121fb" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_pointColor</name></member>
      <member refid="class_hd_render_pass_state_1a0207ec9e3eb2e7b467d6927c8fe5d9a8" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_pointSelectedSize</name></member>
      <member refid="class_hd_render_pass_state_1a82fc15181f91d153acc8106975518ee4" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_pointSize</name></member>
      <member refid="class_hd_render_pass_state_1a4e18599f390686fd33e8544720e9611d" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a1958c9a24c0c7e18655a8830ae5800ad" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilFailOp</name></member>
      <member refid="class_hd_render_pass_state_1a16951fad57e95b5d3a420d0d96ba20a1" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilFunc</name></member>
      <member refid="class_hd_render_pass_state_1a6a6a961685296d0ea7d81f75800601e0" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilMask</name></member>
      <member refid="class_hd_render_pass_state_1a15922a5cb54ee9d4de4745f8e8bf8b21" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilRef</name></member>
      <member refid="class_hd_render_pass_state_1a944270a788e372ca86ab1133b8903a9e" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilZFailOp</name></member>
      <member refid="class_hd_render_pass_state_1acf191ed916de245ea2195cdd34809290" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stencilZPassOp</name></member>
      <member refid="class_hd_render_pass_state_1af3786e185fac03ac24432b118e1adad8" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stepSize</name></member>
      <member refid="class_hd_render_pass_state_1a0d26b407b582ac064ff781e4125d4f1f" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_stepSizeLighting</name></member>
      <member refid="class_hd_render_pass_state_1acfa9b19fca5e779da27787396213ea7b" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_tessLevel</name></member>
      <member refid="class_hd_render_pass_state_1a0d22215518ae7f16d78137f21352d37f" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_useMultiSampleAov</name></member>
      <member refid="class_hd_render_pass_state_1aa421c060145c803c4dab83d1cc656ddb" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_viewport</name></member>
      <member refid="class_hd_render_pass_state_1a932508f50243bfdfdf1f5c3812012786" prot="protected" virt="non-virtual"><scope>HdRenderPassState</scope><name>_wireframeColor</name></member>
      <member refid="class_hd_render_pass_state_1a5acf1e9a6d045d8409a5eb3f716cd057" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>ClipPlanesVector</name></member>
      <member refid="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>ColorMask</name></member>
      <member refid="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772a9491eaa72dddf718168de4fb435d6061" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>ColorMaskNone</name></member>
      <member refid="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772aad26941140e324f698937822e31a6ce9" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>ColorMaskRGB</name></member>
      <member refid="class_hd_render_pass_state_1afd791441db232c9a28b5460ae2b18772aaa6b7a6a66d468edd8a0c8e03c221a8d" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>ColorMaskRGBA</name></member>
      <member refid="class_hd_render_pass_state_1ac7af57699233cdd852e9fd66ac07fd7e" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetAlphaThreshold</name></member>
      <member refid="class_hd_render_pass_state_1a06b468c43d052012e2179ea3a2c7269b" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetAlphaToCoverageEnabled</name></member>
      <member refid="class_hd_render_pass_state_1aaeac4a852b40f026e6dfa209d1f7ff09" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetAovBindings</name></member>
      <member refid="class_hd_render_pass_state_1a95d5ec96e7a657e6fb3c44fa2c4ff236" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetAovInputBindings</name></member>
      <member refid="class_hd_render_pass_state_1a482242c488769b7c5e0f54159c6da30b" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendAlphaDstFactor</name></member>
      <member refid="class_hd_render_pass_state_1aff746f01b47011477020b400674383b8" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendAlphaOp</name></member>
      <member refid="class_hd_render_pass_state_1a540a5b285087b51d3cfad33221a1655a" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendAlphaSrcFactor</name></member>
      <member refid="class_hd_render_pass_state_1a2add7f8119f2a46a7e98623aec2221c3" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendColorDstFactor</name></member>
      <member refid="class_hd_render_pass_state_1afc7b1058e2cf4cc0c9d00c58eae55c86" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendColorOp</name></member>
      <member refid="class_hd_render_pass_state_1a9eb026795fe3c2abe66c093e238eafe2" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendColorSrcFactor</name></member>
      <member refid="class_hd_render_pass_state_1aa8fad0440107bf9900ddd1bc7c8c42a3" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetBlendConstantColor</name></member>
      <member refid="class_hd_render_pass_state_1a51a8da742d0d3a39fc18d755cd445e0e" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetCamera</name></member>
      <member refid="class_hd_render_pass_state_1a1bd5030f6492b6dde115c458c0988552" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetClippingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a4664ead9f358c19107c2ad636b4f6d33" prot="public" virt="virtual"><scope>HdRenderPassState</scope><name>GetClipPlanes</name></member>
      <member refid="class_hd_render_pass_state_1a3affaeec2505ff97df5bc4c88e656249" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetColorMasks</name></member>
      <member refid="class_hd_render_pass_state_1a66e5b521852e37765eb60acb7d406883" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetColorMaskUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1aaf697fd5a274c21bfadc45b02a75361d" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetConservativeRasterizationEnabled</name></member>
      <member refid="class_hd_render_pass_state_1aaefba23690fe2e32faa0167522caacfc" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetCullStyle</name></member>
      <member refid="class_hd_render_pass_state_1a9d484ffc9cdef272a678cd57d32b84ae" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDepthBiasEnabled</name></member>
      <member refid="class_hd_render_pass_state_1aae2ba2bce16e07abdda4bb6a4b158672" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDepthBiasUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1a5e3efa12ea0a9a95e541f1478e1e6a20" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDepthFunc</name></member>
      <member refid="class_hd_render_pass_state_1ac182a7b8860df105444b3edb8a16e62c" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDepthRange</name></member>
      <member refid="class_hd_render_pass_state_1a8227380a7f048764af2c7b98aa8f00a8" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDrawingRange</name></member>
      <member refid="class_hd_render_pass_state_1a0ad24436d0950525a5403d782ae21a67" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetDrawingRangeNDC</name></member>
      <member refid="class_hd_render_pass_state_1af450c218b4d52376bda97fc3d229250b" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetEnableDepthClamp</name></member>
      <member refid="class_hd_render_pass_state_1ab31fc8b810c715f2bf00735486eb317a" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetEnableDepthMask</name></member>
      <member refid="class_hd_render_pass_state_1ad6cee7f8b762a4098365265ae9a6afa5" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetEnableDepthTest</name></member>
      <member refid="class_hd_render_pass_state_1aee5ebe8343a2d6777833cfc461ee98a6" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetFraming</name></member>
      <member refid="class_hd_render_pass_state_1a04d3fe288f9d8ab98841643513bebcbb" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetImageToWorldMatrix</name></member>
      <member refid="class_hd_render_pass_state_1abb132fc9b939820b8532154a2805fac0" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetIndicatorColor</name></member>
      <member refid="class_hd_render_pass_state_1a2156ef640385f0302c70d3dbd9b8269b" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetLightingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a6297630af4c50e67a7da48c8eedf9d66" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetLineWidth</name></member>
      <member refid="class_hd_render_pass_state_1acf879fce3cb3d70e721ce90fb8711c90" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetMaskColor</name></member>
      <member refid="class_hd_render_pass_state_1a28478f4170a0c9049a883dd1335eb0f3" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetMultiSampleEnabled</name></member>
      <member refid="class_hd_render_pass_state_1ad7911679d244a7db7773e74d0ede5c1f" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetOverrideColor</name></member>
      <member refid="class_hd_render_pass_state_1ae9e575786fd5e05e9d6dad9ab5e4a684" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetOverrideWindowPolicy</name></member>
      <member refid="class_hd_render_pass_state_1ad35555f6c6fe0dd761bcdf22e8e52f1c" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetPointColor</name></member>
      <member refid="class_hd_render_pass_state_1ad1c61894de16e8f3f8ceb0c5b8bf3b34" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetPointSelectedSize</name></member>
      <member refid="class_hd_render_pass_state_1a72875608ac645dc20d356a698a296fe9" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetPointSize</name></member>
      <member refid="class_hd_render_pass_state_1a9fbad4830989cbbdcebcf67aede821c7" prot="public" virt="virtual"><scope>HdRenderPassState</scope><name>GetProjectionMatrix</name></member>
      <member refid="class_hd_render_pass_state_1ae2a767d696abec5cb0920eaf94886560" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilDepthFailOp</name></member>
      <member refid="class_hd_render_pass_state_1aac5f541aee4575d8a23257264f193515" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilDepthPassOp</name></member>
      <member refid="class_hd_render_pass_state_1a9762e80ef729c90c970a4984f174483e" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a21252ac55563b5850b1e708fc5170a05" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilFailOp</name></member>
      <member refid="class_hd_render_pass_state_1a2cd05e836537c2bbc87985097b38aa0a" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilFunc</name></member>
      <member refid="class_hd_render_pass_state_1a72a93fa083d4862dd7125d12adb187a2" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilMask</name></member>
      <member refid="class_hd_render_pass_state_1a06cd2c12633ed0bb651c3d59df8a5f29" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetStencilRef</name></member>
      <member refid="class_hd_render_pass_state_1a71fc91c8a56a2224af76df09089e7472" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetTessLevel</name></member>
      <member refid="class_hd_render_pass_state_1a2669d98188463e5969e46a56c40c22e1" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetUseAovMultiSample</name></member>
      <member refid="class_hd_render_pass_state_1abfd360ca764a960d84a536a509405ecf" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetViewport</name></member>
      <member refid="class_hd_render_pass_state_1a2221d42df6c742935d45b8ccf9853a81" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetWindowPolicy</name></member>
      <member refid="class_hd_render_pass_state_1af17942625346b3a8ed135590aefa71c3" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>GetWireframeColor</name></member>
      <member refid="class_hd_render_pass_state_1aff741205af587bfc3b2b3dca6b8677ed" prot="public" virt="virtual"><scope>HdRenderPassState</scope><name>GetWorldToViewMatrix</name></member>
      <member refid="class_hd_render_pass_state_1a84b14dbf0f7bf25ef1965102b9b77559" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>HdRenderPassState</name></member>
      <member refid="class_hd_render_pass_state_1a41dc34261da51055856f7a6a3da393c8" prot="public" virt="virtual"><scope>HdRenderPassState</scope><name>Prepare</name></member>
      <member refid="class_hd_render_pass_state_1ad3ff5c271d17c34d3f330a017fdef56f" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetAlphaThreshold</name></member>
      <member refid="class_hd_render_pass_state_1a48b0da4584d3c4c468ad7e13cc80d481" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetAlphaToCoverageEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a454bc752c33d72330d9246b0fb239bb1" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetAovBindings</name></member>
      <member refid="class_hd_render_pass_state_1a3d1ecbb9457516fdda0fa513a3ddcdb4" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetAovInputBindings</name></member>
      <member refid="class_hd_render_pass_state_1acf28b9409aa0fd0312470e2e071c4e96" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetBlend</name></member>
      <member refid="class_hd_render_pass_state_1aeb2d077f08489200dde3341bc6f57a40" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetBlendConstantColor</name></member>
      <member refid="class_hd_render_pass_state_1abb6eb280b0dc7be96e3124f563ca0399" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetBlendEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a48d6f54920c68ea4697ed22aeede7b1c" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetCamera</name></member>
      <member refid="class_hd_render_pass_state_1ad859a5202a64e6d1b31e2d4df2b597ac" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetClippingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a22386f127cbe8e17806dc8dba3ee67b4" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetColorMasks</name></member>
      <member refid="class_hd_render_pass_state_1a252761d2ee48cc5377a103533097cac0" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetColorMaskUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1a8055528cb9c03ccf56ed203e670fe99a" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetConservativeRasterizationEnabled</name></member>
      <member refid="class_hd_render_pass_state_1ab2335fda587b688a2f616c12b1d17ba6" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetCullStyle</name></member>
      <member refid="class_hd_render_pass_state_1a10ea0b0fb663833aef4b6b8c1b1b3c5f" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDepthBias</name></member>
      <member refid="class_hd_render_pass_state_1a7c9845f3052dd72c31a12d2f503f35af" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDepthBiasEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a67862f634f4340db54da503fc07ccbaa" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDepthBiasUseDefault</name></member>
      <member refid="class_hd_render_pass_state_1a71b795fb5eb43af827a0e92a14bc22c5" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDepthFunc</name></member>
      <member refid="class_hd_render_pass_state_1a04e8f44672276b0635c714bb5465b9d8" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDepthRange</name></member>
      <member refid="class_hd_render_pass_state_1abe30ffea657b13640a6fbbdbe621b9bc" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetDrawingRange</name></member>
      <member refid="class_hd_render_pass_state_1aecc8512b023abed18b38e5cd1d76e4b7" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetEnableDepthClamp</name></member>
      <member refid="class_hd_render_pass_state_1ab7e6dc3663d9c5fbd02a14e4377b45af" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetEnableDepthMask</name></member>
      <member refid="class_hd_render_pass_state_1a38de5fe93cc8fb8324709b9ea22291a5" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetEnableDepthTest</name></member>
      <member refid="class_hd_render_pass_state_1a2e5fc14ee45dadd9bf5c3fa0efe60eda" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetFraming</name></member>
      <member refid="class_hd_render_pass_state_1aebf52cbe505e4ba1e1c30dd8f8b32736" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetIndicatorColor</name></member>
      <member refid="class_hd_render_pass_state_1aa3669cb0a5c497b8143be52eff457a8b" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetLightingEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a7f57bc07c4753bba821b4547cb5f9950" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetLineWidth</name></member>
      <member refid="class_hd_render_pass_state_1a253c16bb65f4492ab04e854514436ba4" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetMaskColor</name></member>
      <member refid="class_hd_render_pass_state_1a44666e91b13ddbabdd08501772a8ed6e" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetMultiSampleEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a5a1fd5a03178790ae518872f08376c12" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetOverrideColor</name></member>
      <member refid="class_hd_render_pass_state_1a3bed18d1ce53306f52d3cc2d18903a02" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetOverrideWindowPolicy</name></member>
      <member refid="class_hd_render_pass_state_1a4bbcd289e4d8bc328d62d066d3c0a464" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetPointColor</name></member>
      <member refid="class_hd_render_pass_state_1a991aaabe20401da951ddeab1abcc2f5f" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetPointSelectedSize</name></member>
      <member refid="class_hd_render_pass_state_1a8705486b94c5d9eb29bca4cf20121b12" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetPointSize</name></member>
      <member refid="class_hd_render_pass_state_1a98616b7895638262a8ff5af54d7b1208" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetStencil</name></member>
      <member refid="class_hd_render_pass_state_1a54111469af00d8720b4a04eecf276fff" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetStencilEnabled</name></member>
      <member refid="class_hd_render_pass_state_1a1939992819fa265cb3f3334aa5efa668" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetTessLevel</name></member>
      <member refid="class_hd_render_pass_state_1ad54ab3b3ba7642af084ff25210c477cc" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetUseAovMultiSample</name></member>
      <member refid="class_hd_render_pass_state_1a8edb732ea2dab2f735b87c80de4e813e" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetViewport</name></member>
      <member refid="class_hd_render_pass_state_1aeb17d04e72043a3164f9bd5b8a179dcd" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetVolumeRenderingConstants</name></member>
      <member refid="class_hd_render_pass_state_1a949683b9435012d66f2889bfbda62cd2" prot="public" virt="non-virtual"><scope>HdRenderPassState</scope><name>SetWireframeColor</name></member>
      <member refid="class_hd_render_pass_state_1acb7be7bed8a43e41a6621677da1b2f83" prot="public" virt="virtual"><scope>HdRenderPassState</scope><name>~HdRenderPassState</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
