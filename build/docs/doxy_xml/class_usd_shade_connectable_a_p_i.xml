<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_shade_connectable_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdShadeConnectableAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="connectable_a_p_i_8h" local="no">connectableAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Connections</header>
      <description><para>Inputs and outputs on shaders and node-graphs are connectable.</para>
<para>This section provides API for authoring and managing these connections in a shading network. </para>
</description>
      <memberdef kind="typedef" id="class_usd_shade_connectable_a_p_i_1aa9b2200b0ca4ddbe566cdb007b0423d9" prot="public" static="no">
        <type>UsdShadeConnectionModification</type>
        <definition>using ConnectionModification =  UsdShadeConnectionModification</definition>
        <argsstring></argsstring>
        <name>ConnectionModification</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="249" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a1746c16256d286e36eabb73aab955afd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeInput &amp;input, const UsdAttribute &amp;source)</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Determines whether the given input can be connected to the given source attribute, which can be an input or an output. </para>
        </briefdescription>
        <detaileddescription>
<para>The result depends on the &quot;connectability&quot; of the input and the source attributes. Depending on the prim type, this may require the plugin that defines connectability behavior for that prim type be loaded.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_shade_input_1a2b46d57dff021a38a01e8f149af8fc9d" kindref="member">UsdShadeInput::SetConnectability</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_shade_input_1afa9011143d42ee268e516231f94ba11d" kindref="member">UsdShadeInput::GetConnectability</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1afdf373fc0da3a99f5d519a1081a823c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeInput &amp;input, const UsdShadeInput &amp;sourceInput)</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>sourceInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="209" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a753e65eddce009f724b2bd320881ef2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeInput &amp;input, const UsdShadeOutput &amp;sourceOutput)</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>sourceOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="216" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a7ea3bed69863141cf3ba7c37c10bee9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeOutput &amp;output, const UsdAttribute &amp;source=UsdAttribute())</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>source</declname>
          <defval><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>()</defval>
        </param>
        <briefdescription>
<para>Determines whether the given output can be connected to the given source attribute, which can be an input or an output. </para>
        </briefdescription>
        <detaileddescription>
<para>An output is considered to be connectable only if it belongs to a node-graph. Shader outputs are not connectable.</para>
<para><computeroutput>source</computeroutput> is an optional argument. If a valid <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> is supplied for it, this method will return true only if the source attribute is owned by a descendant of the node-graph owning the output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ad479f62cd3fbf6cb87ef4b026211e27d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeOutput &amp;output, const UsdShadeInput &amp;sourceInput)</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>sourceInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="237" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a5672b52a39f01ede8a175cbb4a03ed58" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanConnect</definition>
        <argsstring>(const UsdShadeOutput &amp;output, const UsdShadeOutput &amp;sourceOutput)</argsstring>
        <name>CanConnect</name>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>sourceOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="244" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdShadeConnectionSourceInfo const &amp;source, ConnectionModification const mod=ConnectionModification::Replace)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>ConnectionModification const</type>
          <declname>mod</declname>
          <defval>ConnectionModification::Replace</defval>
        </param>
        <briefdescription>
<para>Authors a connection for a given shading attribute <computeroutput>shadingAttr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>shadingAttr</computeroutput> can represent a parameter, an input or an output. <computeroutput>source</computeroutput> is a struct that describes the upstream source attribute with all the information necessary to make a connection. See the documentation for <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref>. <computeroutput>mod</computeroutput> describes the operation that should be applied to the list of connections. By default the new connection will replace any existing connections, but it can add to the list of connections to represent multiple input connections.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if a connection was created successfully. <computeroutput>false</computeroutput> if <computeroutput>shadingAttr</computeroutput> or <computeroutput>source</computeroutput> is invalid.</para>
</simplesect>
<simplesect kind="note"><para>This method does not verify the connectability of the shading attribute to the source. Clients must invoke <ref refid="class_usd_shade_connectable_a_p_i_1a1746c16256d286e36eabb73aab955afd" kindref="member">CanConnect()</ref> themselves to ensure compatibility. </para>
</simplesect>
<simplesect kind="note"><para>The source shading attribute is created if it doesn&apos;t exist already. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a39d5e47b8785a36d42eff592e95584bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdShadeConnectionSourceInfo const &amp;source, ConnectionModification const mod=ConnectionModification::Replace)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>ConnectionModification const</type>
          <declname>mod</declname>
          <defval>ConnectionModification::Replace</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="280" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1abcf1949a2afec8480d0e6b822990bc54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdShadeConnectionSourceInfo const &amp;source, ConnectionModification const mod=ConnectionModification::Replace)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>ConnectionModification const</type>
          <declname>mod</declname>
          <defval>ConnectionModification::Replace</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="290" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="290" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a3dc1709ecd990201bf1c3daa6354b36c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdShadeConnectableAPI const &amp;source, TfToken const &amp;sourceName, UsdShadeAttributeType const sourceType=UsdShadeAttributeType::Output, SdfValueTypeName typeName=SdfValueTypeName())</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType const</type>
          <declname>sourceType</declname>
          <defval>UsdShadeAttributeType::Output</defval>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
          <declname>typeName</declname>
          <defval><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000087"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use the versions that take a <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> to describe the upstream source </para>
</xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a94bb76e0d8f67915e9978c6e2499d994" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdShadeConnectableAPI const &amp;source, TfToken const &amp;sourceName, UsdShadeAttributeType const sourceType=UsdShadeAttributeType::Output, SdfValueTypeName typeName=SdfValueTypeName())</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType const</type>
          <declname>sourceType</declname>
          <defval>UsdShadeAttributeType::Output</defval>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
          <declname>typeName</declname>
          <defval><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000088"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="312" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a7489cb4587e704f753e2ecc0be2b637f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdShadeConnectableAPI const &amp;source, TfToken const &amp;sourceName, UsdShadeAttributeType const sourceType=UsdShadeAttributeType::Output, SdfValueTypeName typeName=SdfValueTypeName())</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType const</type>
          <declname>sourceType</declname>
          <defval>UsdShadeAttributeType::Output</defval>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
          <declname>typeName</declname>
          <defval><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000089"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="326" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="326" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aad252aa3ec8f691dead217e25ce2e417" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, SdfPath const &amp;sourcePath)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>sourcePath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Connect the given shading attribute to the source at path, <computeroutput>sourcePath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>sourcePath</computeroutput> should be the fully namespaced property path.</para>
<para>This overload is provided for convenience, for use in contexts where the prim types are unknown or unavailable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af089a4e3d343f9f126acfa42eb3a54d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, SdfPath const &amp;sourcePath)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>sourcePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="352" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a82dfaa87fc6b383ce91ac88a756df4f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, SdfPath const &amp;sourcePath)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>sourcePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="359" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a30a471a99c19e1ad01912a5c16c0ac18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdShadeInput const &amp;sourceInput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>sourceInput</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Connect the given shading attribute to the given source input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aafaa697059b7ac92799a3a1578f58792" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdShadeInput const &amp;sourceInput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>sourceInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="374" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a7c47254faabafa242cd8d784374e2897" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdShadeInput const &amp;sourceInput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>sourceInput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="381" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ab410d5d6a41c01a6bcb553bf8a8a8263" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdShadeOutput const &amp;sourceOutput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>sourceOutput</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Connect the given shading attribute to the given source output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1abfe763ecdfc2245628815cbb3015249d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdShadeOutput const &amp;sourceOutput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>sourceOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="396" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af7d300559e5b258e09cfb2a579c72482" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ConnectToSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdShadeOutput const &amp;sourceOutput)</argsstring>
        <name>ConnectToSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>sourceOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="403" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a1193a8bd689eb6cc1361da89528af8ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool SetConnectedSources</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, std::vector&lt; UsdShadeConnectionSourceInfo &gt; const &amp;sourceInfos)</argsstring>
        <name>SetConnectedSources</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref> &gt; const &amp;</type>
          <declname>sourceInfos</declname>
        </param>
        <briefdescription>
<para>Authors a list of connections for a given shading attribute <computeroutput>shadingAttr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>shadingAttr</computeroutput> can represent a parameter, an input or an output. <computeroutput>sourceInfos</computeroutput> is a vector of structs that describes the upstream source attributes with all the information necessary to make all the connections. See the documentation for <ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref>.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if all connection were created successfully. <computeroutput>false</computeroutput> if the <computeroutput>shadingAttr</computeroutput> or one of the sources are invalid.</para>
</simplesect>
<simplesect kind="note"><para>A valid connection is one that has a valid <computeroutput><ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref></computeroutput>, which requires the existence of the upstream source prim. It does not require the existence of the source attribute as it will be create if necessary. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a42f89488e367fc5b5b3a6c5cc1af6746" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetConnectedSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdShadeConnectableAPI *source, TfToken *sourceName, UsdShadeAttributeType *sourceType)</argsstring>
        <name>GetConnectedSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType *</type>
          <declname>sourceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000090"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Shading attributes can have multiple connections and so using GetConnectedSources is needed in general</para>
</xrefdescription></xrefsect></para>
<para>Finds the source of a connection for the given shading attribute.</para>
<para><computeroutput>shadingAttr</computeroutput> is the shading attribute whose connection we want to interrogate. <computeroutput>source</computeroutput> is an output parameter which will be set to the source connectable prim. <computeroutput>sourceName</computeroutput> will be set to the name of the source shading attribute, which may be an input or an output, as specified by <computeroutput>sourceType</computeroutput> <computeroutput>sourceType</computeroutput> will have the type of the source shading attribute, i.e. whether it is an <computeroutput>Input</computeroutput> or <computeroutput>Output</computeroutput> </para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the shading attribute is connected to a valid, defined source attribute. <computeroutput>false</computeroutput> if the shading attribute is not connected to a single, defined source attribute.</para>
</simplesect>
<simplesect kind="note"><para>Previously this method would silently return false for multiple connections. We are changing the behavior of this method to return the result for the first connection and issue a TfWarn about it. We want to encourage clients to use GetConnectedSources going forward. </para>
</simplesect>
<simplesect kind="note"><para>The python wrapping for this method returns a (source, sourceName, sourceType) tuple if the parameter is connected, else <computeroutput>None</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a121a5a547bebc0a8d398a06dde8ceb53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetConnectedSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdShadeConnectableAPI *source, TfToken *sourceName, UsdShadeAttributeType *sourceType)</argsstring>
        <name>GetConnectedSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType *</type>
          <declname>sourceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000091"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="466" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="466" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a9fcc117ed40f3f5fb4381f99ae10027a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetConnectedSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdShadeConnectableAPI *source, TfToken *sourceName, UsdShadeAttributeType *sourceType)</argsstring>
        <name>GetConnectedSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType *</type>
          <declname>sourceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000092"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="477" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="477" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aa51fa7b0b43b3180635f63e94693e205" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_small_vector" kindref="compound">UsdShadeSourceInfoVector</ref></type>
        <definition>static USDSHADE_API UsdShadeSourceInfoVector GetConnectedSources</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, SdfPathVector *invalidSourcePaths=nullptr)</argsstring>
        <name>GetConnectedSources</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>invalidSourcePaths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Finds the valid sources of connections for the given shading attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>shadingAttr</computeroutput> is the shading attribute whose connections we want to interrogate. <computeroutput>invalidSourcePaths</computeroutput> is an optional output parameter to collect the invalid source paths that have not been reported in the returned vector.</para>
<para>Returns a vector of <computeroutput><ref refid="struct_usd_shade_connection_source_info" kindref="compound">UsdShadeConnectionSourceInfo</ref></computeroutput> structs with information about each upsteam attribute. If the vector is empty, there have been no connections.</para>
<para><simplesect kind="note"><para>A valid connection requires the existence of the source attribute and also requires that the source prim is <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> compatible. </para>
</simplesect>
<simplesect kind="note"><para>The python wrapping returns a tuple with the valid connections first, followed by the invalid source paths. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a0724e328de31e44f135c1b4793b2adcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_small_vector" kindref="compound">UsdShadeSourceInfoVector</ref></type>
        <definition>static USDSHADE_API UsdShadeSourceInfoVector GetConnectedSources</definition>
        <argsstring>(UsdShadeInput const &amp;input, SdfPathVector *invalidSourcePaths=nullptr)</argsstring>
        <name>GetConnectedSources</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>invalidSourcePaths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aaa6741d4e2a45b5cf83568f31b75817f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_small_vector" kindref="compound">UsdShadeSourceInfoVector</ref></type>
        <definition>static USDSHADE_API UsdShadeSourceInfoVector GetConnectedSources</definition>
        <argsstring>(UsdShadeOutput const &amp;output, SdfPathVector *invalidSourcePaths=nullptr)</argsstring>
        <name>GetConnectedSources</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>invalidSourcePaths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a520694f15344a4456fb473adb8f802ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetRawConnectedSourcePaths</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, SdfPathVector *sourcePaths)</argsstring>
        <name>GetRawConnectedSourcePaths</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>sourcePaths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000093"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please us GetConnectedSources to retrieve multiple connections</para>
</xrefdescription></xrefsect></para>
<para>Returns the &quot;raw&quot; (authored) connected source paths for the given shading attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a92fda037e86b6aaff2a10078e883e94a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetRawConnectedSourcePaths</definition>
        <argsstring>(UsdShadeInput const &amp;input, SdfPathVector *sourcePaths)</argsstring>
        <name>GetRawConnectedSourcePaths</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>sourcePaths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000094"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="530" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a5da236b27f8c42dada981ad979e00cdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool GetRawConnectedSourcePaths</definition>
        <argsstring>(UsdShadeOutput const &amp;output, SdfPathVector *sourcePaths)</argsstring>
        <name>GetRawConnectedSourcePaths</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>SdfPathVector *</type>
          <declname>sourcePaths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000095"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="538" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="538" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ab0908a42f25acd2c013132a01b385fc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool HasConnectedSource</definition>
        <argsstring>(const UsdAttribute &amp;shadingAttr)</argsstring>
        <name>HasConnectedSource</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <briefdescription>
<para>Returns true if and only if the shading attribute is currently connected to at least one valid (defined) source. </para>
        </briefdescription>
        <detaileddescription>
<para>If you will be calling <ref refid="class_usd_shade_connectable_a_p_i_1aa51fa7b0b43b3180635f63e94693e205" kindref="member">GetConnectedSources()</ref> afterwards anyways, it will be <emphasis>much</emphasis> faster to instead check if the returned vector is empty: <programlisting><codeline><highlight class="normal">UsdShadeSourceInfoVector<sp/>connections<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UsdShadeConnectableAPI::GetConnectedSources(attribute);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!connections.empty()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>process<sp/>connected<sp/>attribute</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>process<sp/>unconnected<sp/>attribute</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a7d5125f212cbfd26e1c8ff5b1ce38d14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool HasConnectedSource</definition>
        <argsstring>(const UsdShadeInput &amp;input)</argsstring>
        <name>HasConnectedSource</name>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="563" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="563" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a419447795817de5d37a7069d03217a7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool HasConnectedSource</definition>
        <argsstring>(const UsdShadeOutput &amp;output)</argsstring>
        <name>HasConnectedSource</name>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="569" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="569" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a916ea8b249a675ff348c051370b053a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool IsSourceConnectionFromBaseMaterial</definition>
        <argsstring>(const UsdAttribute &amp;shadingAttr)</argsstring>
        <name>IsSourceConnectionFromBaseMaterial</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <briefdescription>
<para>Returns true if the connection to the given shading attribute&apos;s source, as returned by <ref refid="class_usd_shade_connectable_a_p_i_1a42f89488e367fc5b5b3a6c5cc1af6746" kindref="member">UsdShadeConnectableAPI::GetConnectedSource()</ref>, is authored across a specializes arc, which is used to denote a base material. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a59b66d335d13a3ae5f83b23ee0d80349" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool IsSourceConnectionFromBaseMaterial</definition>
        <argsstring>(const UsdShadeInput &amp;input)</argsstring>
        <name>IsSourceConnectionFromBaseMaterial</name>
        <param>
          <type>const <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="583" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="583" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aa1b8410469b2071166beca4c25114f04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool IsSourceConnectionFromBaseMaterial</definition>
        <argsstring>(const UsdShadeOutput &amp;output)</argsstring>
        <name>IsSourceConnectionFromBaseMaterial</name>
        <param>
          <type>const <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="589" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a7a4b55bc9ff339ae4c156d93d0f9d604" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool DisconnectSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr, UsdAttribute const &amp;sourceAttr=UsdAttribute())</argsstring>
        <name>DisconnectSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>sourceAttr</declname>
          <defval><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>()</defval>
        </param>
        <briefdescription>
<para>Disconnect source for this shading attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>sourceAttr</computeroutput> is valid it will disconnect the connection to this upstream attribute. Otherwise it will disconnect all connections by authoring an empty list of connections for the attribute <computeroutput>shadingAttr</computeroutput>.</para>
<para>This may author more scene description than you might expect - we define the behavior of disconnect to be that, even if a shading attribute becomes connected in a weaker layer than the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>, the attribute will <emphasis>still</emphasis> be disconnected in the composition, therefore we must &quot;block&quot; it in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" kindref="member">ConnectToSource()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a2fe0666892b8855074c4a27f92fa7de4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool DisconnectSource</definition>
        <argsstring>(UsdShadeInput const &amp;input, UsdAttribute const &amp;sourceAttr=UsdAttribute())</argsstring>
        <name>DisconnectSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>sourceAttr</declname>
          <defval><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="614" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="614" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a69fd5a6e0fbf21ba4da829fc12e40572" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool DisconnectSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output, UsdAttribute const &amp;sourceAttr=UsdAttribute())</argsstring>
        <name>DisconnectSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>sourceAttr</declname>
          <defval><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="622" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="622" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a10b6b39b9a065bcd2159a912aa3a8e97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSources</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr)</argsstring>
        <name>ClearSources</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <briefdescription>
<para>Clears sources for this shading attribute in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Most of the time, what you probably want is <ref refid="class_usd_shade_connectable_a_p_i_1a7a4b55bc9ff339ae4c156d93d0f9d604" kindref="member">DisconnectSource()</ref> rather than this function.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_shade_connectable_a_p_i_1a7a4b55bc9ff339ae4c156d93d0f9d604" kindref="member">DisconnectSource()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af235bff84493bd87eb65745a57e7abde" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSources</definition>
        <argsstring>(UsdShadeInput const &amp;input)</argsstring>
        <name>ClearSources</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="639" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="639" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a51fc88a2756ae442a6a66bb43f3d9f30" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSources</definition>
        <argsstring>(UsdShadeOutput const &amp;output)</argsstring>
        <name>ClearSources</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="645" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="645" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a0d7fb769a00828293710c984ee01df4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSource</definition>
        <argsstring>(UsdAttribute const &amp;shadingAttr)</argsstring>
        <name>ClearSource</name>
        <param>
          <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;</type>
          <declname>shadingAttr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000096"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This is the older version that only referenced a single source.</para>
</xrefdescription></xrefsect>Please use ClearSources instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="652" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="652" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ae19caa11ccc22967591ef65769562358" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSource</definition>
        <argsstring>(UsdShadeInput const &amp;input)</argsstring>
        <name>ClearSource</name>
        <param>
          <type><ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000097"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="659" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="659" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a907625f69747300be8eeffede0555d35" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool ClearSource</definition>
        <argsstring>(UsdShadeOutput const &amp;output)</argsstring>
        <name>ClearSource</name>
        <param>
          <type><ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> const &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000098"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="666" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="666" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af1fedc1d186dd565790eea45837a6bdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool HasConnectableAPI</definition>
        <argsstring>(const TfType &amp;schemaType)</argsstring>
        <name>HasConnectableAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
<para>Return true if the <computeroutput>schemaType</computeroutput> has a valid connectableAPIBehavior registered, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>To check if a prim&apos;s connectableAPI has a behavior defined, use <ref refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" kindref="member">UsdSchemaBase::operator bool()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af74f82b6cc3a9f67dcc3b07b7eaf5c82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool HasConnectableAPI</definition>
        <argsstring>()</argsstring>
        <name>HasConnectableAPI</name>
        <briefdescription>
<para>Return true if the schema type <computeroutput>T</computeroutput> has a connectableAPIBehavior registered, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="680" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="680" bodyend="685"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Outputs</header>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a3ee6f709731f13f92a807e8ab3a1c7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDSHADE_API UsdShadeOutput CreateOutput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName) const</argsstring>
        <name>CreateOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an output, which represents and externally computed, typed value. </para>
        </briefdescription>
        <detaileddescription>
<para>Outputs on node-graphs can be connected.</para>
<para>The attribute representing an output is created in the &quot;outputs:&quot; namespace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1acc6d5f29062faa83e9a7e61be6f97618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDSHADE_API UsdShadeOutput GetOutput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested output if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>name</computeroutput> is the unnamespaced base name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ac9882b5f0511e292428b35514b943240" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdShadeOutput&gt; GetOutputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetOutputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns all outputs on the connectable prim (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>shader or node-graph). Outputs are represented by attributes in the &quot;outputs:&quot; namespace. If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="716" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inputs</header>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a8a03fdcc294aa2fae8a42e8e1cde57a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDSHADE_API UsdShadeInput CreateInput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName) const</argsstring>
        <name>CreateInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an input which can both have a value and be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the input is created in the &quot;inputs:&quot; namespace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a6424c331cdf1248389dcafc2c651cf72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDSHADE_API UsdShadeInput GetInput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested input if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>name</computeroutput> is the unnamespaced base name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1acd083a8223f0a5cb1402c38bad9dccb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdShadeInput&gt; GetInputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetInputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns all inputs on the connectable prim (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>shader or node-graph). Inputs are represented by attributes in the &quot;inputs:&quot; namespace. If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="745" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_shade_connectable_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741ad802a365d69ea33e7b2921b9c4f58ba4" kindref="member">UsdSchemaKind::NonAppliedAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="87" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_shade_connectable_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="140" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a6747563b227e67723b6a57401a95171d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeConnectableAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdShadeConnectableAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_shade_connectable_a_p_i_1a4458af40fc26c963a3466b25f9e0cdc1" kindref="member">UsdShadeConnectableAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="93" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1ab32cde53e169592a87740b55932cd75a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeConnectableAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdShadeConnectableAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="101" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a00f9967ceec604bccae4961aa0f53177" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API</type>
        <definition>virtual USDSHADE_API ~UsdShadeConnectableAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdShadeConnectableAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1af34679e35e7a95b65817347ab2b94b38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool IsContainer</definition>
        <argsstring>() const</argsstring>
        <name>IsContainer</name>
        <briefdescription>
<para>Returns true if the prim is a container. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying prim type may provide runtime behavior that defines whether it is a container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aa825544cfb51d9912f5c84cb8adbb1bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool RequiresEncapsulation</definition>
        <argsstring>() const</argsstring>
        <name>RequiresEncapsulation</name>
        <briefdescription>
<para>Returns true if container encapsulation rules should be respected when evaluating connectibility behavior, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying prim type may provide runtime behavior that defines if encapsulation rules are respected or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="184" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDSHADE_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a4458af40fc26c963a3466b25f9e0cdc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref></type>
        <definition>static USDSHADE_API UsdShadeConnectableAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdShadeConnectableAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a9b47498492265f1a224b6ec58b109a88" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDSHADE_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a4cd8715d75f7760f93c0b718376da36e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool _IsCompatible</definition>
        <argsstring>() const override</argsstring>
        <name>_IsCompatible</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f">_IsCompatible</reimplements>
        <briefdescription>
<para>Returns true if the given prim is compatible with this API schema, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>if it is a valid shader or a node-graph. A prim has a compatible connectableAPI if a valid behavior is registered for it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="168" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1aa9360fb676c331455b1c118acc45d8e9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDSHADE_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_shade_connectable_a_p_i_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDSHADE_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/connectableAPI.h" line="148" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> is an API schema that provides a common interface for creating outputs and making connections between shading parameters and outputs. </para>
    </briefdescription>
    <detaileddescription>
<para>The interface is common to all UsdShade schemas that support Inputs and Outputs, which currently includes <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref>, <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>, and <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> .</para>
<para>One can construct a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> directly from a <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>, or from objects of any of the schema classes listed above. If it seems onerous to need to construct a secondary schema object to interact with Inputs and Outputs, keep in mind that any function whose purpose is either to walk material/shader networks via their connections, or to create such networks, can typically be written entirely in terms of <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> objects, without needing to care what the underlying prim type is.</para>
<para>Additionally, the most common <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> behaviors (creating Inputs and Outputs, and making connections) are wrapped as convenience methods on the prim schema classes (creation) and <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> and <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8141">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8140">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8139">
        <label>UsdShadeConnectableAPI</label>
        <link refid="class_usd_shade_connectable_a_p_i"/>
        <childnode refid="8140" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8144">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8143">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8142">
        <label>UsdShadeConnectableAPI</label>
        <link refid="class_usd_shade_connectable_a_p_i"/>
        <childnode refid="8143" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdShade/connectableAPI.h" line="82" column="1" bodyfile="pxr/usd/usdShade/connectableAPI.h" bodystart="81" bodyend="750"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a9b47498492265f1a224b6ec58b109a88" prot="protected" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aa9360fb676c331455b1c118acc45d8e9" prot="private" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a4cd8715d75f7760f93c0b718376da36e" prot="protected" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a1746c16256d286e36eabb73aab955afd" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1afdf373fc0da3a99f5d519a1081a823c6" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a753e65eddce009f724b2bd320881ef2b" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a7ea3bed69863141cf3ba7c37c10bee9f" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ad479f62cd3fbf6cb87ef4b026211e27d" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a5672b52a39f01ede8a175cbb4a03ed58" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CanConnect</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a0d7fb769a00828293710c984ee01df4a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ae19caa11ccc22967591ef65769562358" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a907625f69747300be8eeffede0555d35" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a10b6b39b9a065bcd2159a912aa3a8e97" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af235bff84493bd87eb65745a57e7abde" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a51fc88a2756ae442a6a66bb43f3d9f30" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ClearSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aa9b2200b0ca4ddbe566cdb007b0423d9" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectionModification</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a39d5e47b8785a36d42eff592e95584bd" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1abcf1949a2afec8480d0e6b822990bc54" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a3dc1709ecd990201bf1c3daa6354b36c" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a94bb76e0d8f67915e9978c6e2499d994" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a7489cb4587e704f753e2ecc0be2b637f" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aad252aa3ec8f691dead217e25ce2e417" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af089a4e3d343f9f126acfa42eb3a54d7" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a82dfaa87fc6b383ce91ac88a756df4f1" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a30a471a99c19e1ad01912a5c16c0ac18" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aafaa697059b7ac92799a3a1578f58792" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a7c47254faabafa242cd8d784374e2897" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ab410d5d6a41c01a6bcb553bf8a8a8263" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1abfe763ecdfc2245628815cbb3015249d" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af7d300559e5b258e09cfb2a579c72482" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>ConnectToSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a8a03fdcc294aa2fae8a42e8e1cde57a5" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CreateInput</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a3ee6f709731f13f92a807e8ab3a1c7fb" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>CreateOutput</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a7a4b55bc9ff339ae4c156d93d0f9d604" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>DisconnectSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a2fe0666892b8855074c4a27f92fa7de4" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>DisconnectSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a69fd5a6e0fbf21ba4da829fc12e40572" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>DisconnectSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a4458af40fc26c963a3466b25f9e0cdc1" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>Get</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a42f89488e367fc5b5b3a6c5cc1af6746" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a121a5a547bebc0a8d398a06dde8ceb53" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a9fcc117ed40f3f5fb4381f99ae10027a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aa51fa7b0b43b3180635f63e94693e205" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a0724e328de31e44f135c1b4793b2adcc" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aaa6741d4e2a45b5cf83568f31b75817f" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetConnectedSources</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a6424c331cdf1248389dcafc2c651cf72" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetInput</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1acd083a8223f0a5cb1402c38bad9dccb5" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetInputs</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1acc6d5f29062faa83e9a7e61be6f97618" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetOutput</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ac9882b5f0511e292428b35514b943240" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetOutputs</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a520694f15344a4456fb473adb8f802ce" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetRawConnectedSourcePaths</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a92fda037e86b6aaff2a10078e883e94a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetRawConnectedSourcePaths</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a5da236b27f8c42dada981ad979e00cdf" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetRawConnectedSourcePaths</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af1fedc1d186dd565790eea45837a6bdd" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>HasConnectableAPI</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af74f82b6cc3a9f67dcc3b07b7eaf5c82" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>HasConnectableAPI</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ab0908a42f25acd2c013132a01b385fc8" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>HasConnectedSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a7d5125f212cbfd26e1c8ff5b1ce38d14" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>HasConnectedSource</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a419447795817de5d37a7069d03217a7d" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>HasConnectedSource</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1af34679e35e7a95b65817347ab2b94b38" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsContainer</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a916ea8b249a675ff348c051370b053a5" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsSourceConnectionFromBaseMaterial</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a59b66d335d13a3ae5f83b23ee0d80349" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsSourceConnectionFromBaseMaterial</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aa1b8410469b2071166beca4c25114f04" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsSourceConnectionFromBaseMaterial</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aa825544cfb51d9912f5c84cb8adbb1bd" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>RequiresEncapsulation</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a1193a8bd689eb6cc1361da89528af8ab" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>SetConnectedSources</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a6747563b227e67723b6a57401a95171d" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdShadeConnectableAPI</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1ab32cde53e169592a87740b55932cd75a" prot="public" virt="non-virtual"><scope>UsdShadeConnectableAPI</scope><name>UsdShadeConnectableAPI</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdShadeConnectableAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_shade_connectable_a_p_i_1a00f9967ceec604bccae4961aa0f53177" prot="public" virt="virtual"><scope>UsdShadeConnectableAPI</scope><name>~UsdShadeConnectableAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
