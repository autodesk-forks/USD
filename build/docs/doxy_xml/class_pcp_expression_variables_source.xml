<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_expression_variables_source" kind="class" language="C++" prot="public">
    <compoundname>PcpExpressionVariablesSource</compoundname>
    <includes refid="expression_variables_source_8h" local="no">expressionVariablesSource.h</includes>
      <sectiondef kind="user-defined">
      <header>Comparison Operators</header>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a4de5ab83f7f35ca1592c464b9d349822" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator==</definition>
        <argsstring>(const PcpExpressionVariablesSource &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a419d71bdd536ccce6527a51d0300353d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator!=</definition>
        <argsstring>(const PcpExpressionVariablesSource &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1ad3f5fb015a4a3c5b6e0dfd8cdfb72fa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator&lt;</definition>
        <argsstring>(const PcpExpressionVariablesSource &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_pcp_expression_variables_source" kindref="compound">PcpExpressionVariablesSource</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="70" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_expression_variables_source_1a85016fea3473ce55d045d4f08077ba85" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &gt;</type>
        <definition>std::shared_ptr&lt;PcpLayerStackIdentifier&gt; _identifier</definition>
        <argsstring></argsstring>
        <name>_identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="117" column="1" bodyfile="pxr/usd/pcp/expressionVariablesSource.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_expression_variables_source_1ac342f997c53c1447c8e51887f39d4db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpExpressionVariablesSource</definition>
        <argsstring>()</argsstring>
        <name>PcpExpressionVariablesSource</name>
        <briefdescription>
<para>Create a PcpExpressionVariableSource representing the root layer stack of a prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a7ed3f576c0d98e98c28eb3db24c83ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpExpressionVariablesSource</definition>
        <argsstring>(const PcpLayerStackIdentifier &amp;layerStackIdentifier, const PcpLayerStackIdentifier &amp;rootLayerStackIdentifier)</argsstring>
        <name>PcpExpressionVariablesSource</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>layerStackIdentifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>rootLayerStackIdentifier</declname>
        </param>
        <briefdescription>
<para>Create a PcpExpressionVariableSource representing the layer stack identified by <computeroutput>layerStackIdentifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>layerStackIdentifier</computeroutput> is equal to <computeroutput>rootLayerStackIdentifier</computeroutput>, this is the same as the default constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a2d2a5d1790b4d4e58d1ab8a447c1ad18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API ~PcpExpressionVariablesSource</definition>
        <argsstring>()</argsstring>
        <name>~PcpExpressionVariablesSource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a729e80414b4e1b8f31af86e2cef2ce2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API size_t</type>
        <definition>PCP_API size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Return hash value for this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1ae1d270d499d70328f15c0ab071b4ee64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRootLayerStack</definition>
        <argsstring>() const</argsstring>
        <name>IsRootLayerStack</name>
        <briefdescription>
<para>Return true if this object represents a prim index&apos;s root layer stack, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns true, GetLayerStackIdentifier will return nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="80" column="1" bodyfile="pxr/usd/pcp/expressionVariablesSource.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a52386dfba649e27bd9e054a2ab227034" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> *</type>
        <definition>const PcpLayerStackIdentifier* GetLayerStackIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerStackIdentifier</name>
        <briefdescription>
<para>Return the identifier of the layer stack represented by this object if it is not the root layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Return nullptr if this object represents the root layer stack (i.e., IsRootLayerStack returns true). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="89" column="1" bodyfile="pxr/usd/pcp/expressionVariablesSource.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1aa2e189c6cd2ab23da6c082b0c70102e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
        <definition>PCP_API const PcpLayerStackIdentifier&amp; ResolveLayerStackIdentifier</definition>
        <argsstring>(const PcpLayerStackIdentifier &amp;rootLayerStackIdentifier) const</argsstring>
        <name>ResolveLayerStackIdentifier</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>rootLayerStackIdentifier</declname>
        </param>
        <briefdescription>
<para>Convenience function to return the identifier of the layer stack represented by this object. </para>
        </briefdescription>
        <detaileddescription>
<para>If this object represents the root layer stack, return <computeroutput>rootLayerStackIdentifier</computeroutput>, otherwise return *GetLayerStackIdentifier(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a6f210b1497d4558563ba05144c498732" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
        <definition>PCP_API const PcpLayerStackIdentifier&amp; ResolveLayerStackIdentifier</definition>
        <argsstring>(const PcpCache &amp;cache) const</argsstring>
        <name>ResolveLayerStackIdentifier</name>
        <param>
          <type>const <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> &amp;</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Equivalent to ResolveLayerStackIdentifier(cache.GetLayerStackIdentifier()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1a89c0e2385a5f2f34d4bdbd8011c83d04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
        <definition>const PcpLayerStackIdentifier&amp; ResolveLayerStackIdentifier</definition>
        <argsstring>(PcpLayerStackIdentifier &amp;&amp;) const =delete</argsstring>
        <name>ResolveLayerStackIdentifier</name>
        <param>
          <type><ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_expression_variables_source_1ae5cf0f77e9d06771620faf07e1780084" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
        <definition>const PcpLayerStackIdentifier&amp; ResolveLayerStackIdentifier</definition>
        <argsstring>(PcpCache &amp;&amp;) const =delete</argsstring>
        <name>ResolveLayerStackIdentifier</name>
        <param>
          <type><ref refid="class_pcp_cache" kindref="compound">PcpCache</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/expressionVariablesSource.h" line="111" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the layer stack associated with a set of expression variables. </para>
    </briefdescription>
    <detaileddescription>
<para>This is typically a simple <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref>. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/expressionVariablesSource.h" line="42" column="1" bodyfile="pxr/usd/pcp/expressionVariablesSource.h" bodystart="41" bodyend="118"/>
    <listofallmembers>
      <member refid="class_pcp_expression_variables_source_1a85016fea3473ce55d045d4f08077ba85" prot="private" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>_identifier</name></member>
      <member refid="class_pcp_expression_variables_source_1a729e80414b4e1b8f31af86e2cef2ce2c" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>GetHash</name></member>
      <member refid="class_pcp_expression_variables_source_1a52386dfba649e27bd9e054a2ab227034" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>GetLayerStackIdentifier</name></member>
      <member refid="class_pcp_expression_variables_source_1ae1d270d499d70328f15c0ab071b4ee64" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>IsRootLayerStack</name></member>
      <member refid="class_pcp_expression_variables_source_1a419d71bdd536ccce6527a51d0300353d" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>operator!=</name></member>
      <member refid="class_pcp_expression_variables_source_1ad3f5fb015a4a3c5b6e0dfd8cdfb72fa5" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>operator&lt;</name></member>
      <member refid="class_pcp_expression_variables_source_1a4de5ab83f7f35ca1592c464b9d349822" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>operator==</name></member>
      <member refid="class_pcp_expression_variables_source_1ac342f997c53c1447c8e51887f39d4db8" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>PcpExpressionVariablesSource</name></member>
      <member refid="class_pcp_expression_variables_source_1a7ed3f576c0d98e98c28eb3db24c83ae8" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>PcpExpressionVariablesSource</name></member>
      <member refid="class_pcp_expression_variables_source_1aa2e189c6cd2ab23da6c082b0c70102e3" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>ResolveLayerStackIdentifier</name></member>
      <member refid="class_pcp_expression_variables_source_1a6f210b1497d4558563ba05144c498732" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>ResolveLayerStackIdentifier</name></member>
      <member refid="class_pcp_expression_variables_source_1a89c0e2385a5f2f34d4bdbd8011c83d04" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>ResolveLayerStackIdentifier</name></member>
      <member refid="class_pcp_expression_variables_source_1ae5cf0f77e9d06771620faf07e1780084" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>ResolveLayerStackIdentifier</name></member>
      <member refid="class_pcp_expression_variables_source_1a2d2a5d1790b4d4e58d1ab8a447c1ad18" prot="public" virt="non-virtual"><scope>PcpExpressionVariablesSource</scope><name>~PcpExpressionVariablesSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
