<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hdx_fullscreen_shader" kind="class" language="C++" prot="public">
    <compoundname>HdxFullscreenShader</compoundname>
    <basecompoundref refid="class_hdx_effects_shader" prot="public" virt="non-virtual">HdxEffectsShader</basecompoundref>
    <includes refid="fullscreen_shader_8h" local="no">fullscreenShader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1aa3c4e1aff2c18ee002e6ca7f65679ec7" prot="private" static="no" mutable="no">
        <type>HgiTextureHandleVector</type>
        <definition>HgiTextureHandleVector _textures</definition>
        <argsstring></argsstring>
        <name>_textures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="191" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1ae25c56709c6017b9bdd45910f33e0d8a" prot="private" static="no" mutable="no">
        <type>HgiBufferHandleVector</type>
        <definition>HgiBufferHandleVector _buffers</definition>
        <argsstring></argsstring>
        <name>_buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="192" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1ad4c4400785301a19b4117dbd4702c054" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _glslfxPath</definition>
        <argsstring></argsstring>
        <name>_glslfxPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="194" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1aa60c74760dcf0765f30bc9fced3936e2" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _shaderName</definition>
        <argsstring></argsstring>
        <name>_shaderName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="195" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1aec16fea441f4c7f27729ccfe6031c491" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref></type>
        <definition>HgiBufferHandle _indexBuffer</definition>
        <argsstring></argsstring>
        <name>_indexBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="197" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1a0f0363135748de1900f1bdc86068748f" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref></type>
        <definition>HgiBufferHandle _vertexBuffer</definition>
        <argsstring></argsstring>
        <name>_vertexBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="198" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1ae2e56eff31254067a6e541b36d7335b1" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_handle" kindref="compound">HgiShaderProgramHandle</ref></type>
        <definition>HgiShaderProgramHandle _shaderProgram</definition>
        <argsstring></argsstring>
        <name>_shaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="199" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1afb9fd2ab8b44b79163e27af4eaab4d35" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_handle" kindref="compound">HgiSamplerHandle</ref></type>
        <definition>HgiSamplerHandle _sampler</definition>
        <argsstring></argsstring>
        <name>_sampler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="200" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1a22ae69608759b2f215cfbf23819b82e9" prot="private" static="no" mutable="no">
        <type><ref refid="struct_hgi_depth_stencil_state" kindref="compound">HgiDepthStencilState</ref></type>
        <definition>HgiDepthStencilState _depthStencilState</definition>
        <argsstring></argsstring>
        <name>_depthStencilState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="202" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1a7a3ab41426beca7b58c8b2ea010e574a" prot="private" static="no" mutable="no">
        <type><ref refid="struct_hgi_attachment_desc" kindref="compound">HgiAttachmentDesc</ref></type>
        <definition>HgiAttachmentDesc _colorAttachment</definition>
        <argsstring></argsstring>
        <name>_colorAttachment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="204" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_fullscreen_shader_1a1c7d8a9f609486e0cc86eacbc35da370" prot="private" static="no" mutable="no">
        <type><ref refid="struct_hgi_attachment_desc" kindref="compound">HgiAttachmentDesc</ref></type>
        <definition>HgiAttachmentDesc _depthAttachment</definition>
        <argsstring></argsstring>
        <name>_depthAttachment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="205" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a7f5524cfc1ce1693c531b17ff13846a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API</type>
        <definition>HDX_API HdxFullscreenShader</definition>
        <argsstring>(Hgi *hgi, const std::string &amp;debugName)</argsstring>
        <name>HdxFullscreenShader</name>
        <param>
          <type><ref refid="class_hgi" kindref="compound">Hgi</ref> *</type>
          <declname>hgi</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>debugName</declname>
        </param>
        <briefdescription>
<para>Create a new fullscreen shader object. </para>
        </briefdescription>
        <detaileddescription>
<para>&apos;debugName&apos; is assigned to the fullscreen pass as gpu debug group that is helpful when inspecting the frame on a gpu debugger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a804e872d1f6c910361a22ac545559f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API</type>
        <definition>HDX_API ~HdxFullscreenShader</definition>
        <argsstring>() override</argsstring>
        <name>~HdxFullscreenShader</name>
        <briefdescription>
<para>Destroy the fullscreen shader object, releasing GPU resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a320adebb39fcda29aa0f4bad289b346d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetProgram</definition>
        <argsstring>(const TfToken &amp;glslfxPath, const TfToken &amp;shaderName, HgiShaderFunctionDesc &amp;fragDesc)</argsstring>
        <name>SetProgram</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>glslfxPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>shaderName</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>fragDesc</declname>
        </param>
        <briefdescription>
<para>Set the program for the class to use for its fragment shader. </para>
        </briefdescription>
        <detaileddescription>
<para>The vertex shader is always hdx/shaders/fullscreen.glslfx, &quot;FullScreenVertex&quot;, which draws a full-screen triangle. The fragment shader should expect an interpolated input parameter with the name &quot;uvOut&quot;, and whatever textures, constants, or buffers it requires. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>glslfxPath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the glslfx file where the fragment shader is located. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shaderName</parametername>
</parameternamelist>
<parameterdescription>
<para>The (technique) name of the fragment shader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragDesc</parametername>
</parameternamelist>
<parameterdescription>
<para>Describes inputs, outputs and stage of fragment shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1ad09a25adf12b406f9c957c575617fd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetProgram</definition>
        <argsstring>(const HgiShaderFunctionDesc &amp;fragDesc)</argsstring>
        <name>SetProgram</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>fragDesc</declname>
        </param>
        <briefdescription>
<para>Bypasses any cache checking or <ref refid="class_hio_glslfx" kindref="compound">HioGlslfx</ref> processing and just re-creates the shader program using the &quot;FullScreenVertex&quot; shader and the provided fragment shader description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1ab37c279c3d13861cc14236f7084fcf20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void BindBuffers</definition>
        <argsstring>(HgiBufferHandleVector const &amp;buffers)</argsstring>
        <name>BindBuffers</name>
        <param>
          <type>HgiBufferHandleVector const &amp;</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
<para>Bind (externally managed) buffers to the shader program. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to bind buffers to a custom shader program. The lifetime of buffers is managed by the caller. <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> does not take ownership. To update values in the buffer, the client can use a blitCmds to copy new data into their buffer. Buffers will be bound at the indices corresponding to their position in the provided vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a235cacf53adf5b679180d2e7fa34713c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void BindTextures</definition>
        <argsstring>(HgiTextureHandleVector const &amp;textures)</argsstring>
        <name>BindTextures</name>
        <param>
          <type>HgiTextureHandleVector const &amp;</type>
          <declname>textures</declname>
        </param>
        <briefdescription>
<para>Bind (externally managed) textures to the shader program. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to bind textures to a custom shader program. The lifetime of textures is managed by the caller. <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> does not take ownership. Textures will be bound at the indices corresponding to their position in the provided vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a5df32f52b4e1c382cd01c3ac6ebc57b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetDepthState</definition>
        <argsstring>(HgiDepthStencilState const &amp;state)</argsstring>
        <name>SetDepthState</name>
        <param>
          <type><ref refid="struct_hgi_depth_stencil_state" kindref="compound">HgiDepthStencilState</ref> const &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>By default <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> creates a pipeline object that enables depth testing and enables depth write if there is a depth texture. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows you to override the depth and stencil state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a28282e4156f68ff0eb3e2a5bd77128f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetBlendState</definition>
        <argsstring>(bool enableBlending, HgiBlendFactor srcColorBlendFactor, HgiBlendFactor dstColorBlendFactor, HgiBlendOp colorBlendOp, HgiBlendFactor srcAlphaBlendFactor, HgiBlendFactor dstAlphaBlendFactor, HgiBlendOp alphaBlendOp)</argsstring>
        <name>SetBlendState</name>
        <param>
          <type>bool</type>
          <declname>enableBlending</declname>
        </param>
        <param>
          <type>HgiBlendFactor</type>
          <declname>srcColorBlendFactor</declname>
        </param>
        <param>
          <type>HgiBlendFactor</type>
          <declname>dstColorBlendFactor</declname>
        </param>
        <param>
          <type>HgiBlendOp</type>
          <declname>colorBlendOp</declname>
        </param>
        <param>
          <type>HgiBlendFactor</type>
          <declname>srcAlphaBlendFactor</declname>
        </param>
        <param>
          <type>HgiBlendFactor</type>
          <declname>dstAlphaBlendFactor</declname>
        </param>
        <param>
          <type>HgiBlendOp</type>
          <declname>alphaBlendOp</declname>
        </param>
        <briefdescription>
<para>By default <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> uses no blending (opaque). </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows you to override blend state (e.g. alpha blending) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1aee48ba234a66382d66ebf13c42d0aabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetAttachmentLoadStoreOp</definition>
        <argsstring>(HgiAttachmentLoadOp attachmentLoadOp, HgiAttachmentStoreOp attachmentStoreOp)</argsstring>
        <name>SetAttachmentLoadStoreOp</name>
        <param>
          <type>HgiAttachmentLoadOp</type>
          <declname>attachmentLoadOp</declname>
        </param>
        <param>
          <type>HgiAttachmentStoreOp</type>
          <declname>attachmentStoreOp</declname>
        </param>
        <briefdescription>
<para>By default <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> uses LoadOpDontCare and StoreOpStore. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows you to override the attachment load and store op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a7f466cea0c1b14b65428b5898b57202c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetShaderConstants</definition>
        <argsstring>(uint32_t byteSize, const void *data)</argsstring>
        <name>SetShaderConstants</name>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Provide the shader constant values (uniforms). </para>
        </briefdescription>
        <detaileddescription>
<para>The data values are copied, so you do not have to set them each frame if they do not change in value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1adcdc70faa47f9907378adcdcbf4326d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void Draw</definition>
        <argsstring>(HgiTextureHandle const &amp;colorDst, HgiTextureHandle const &amp;depthDst)</argsstring>
        <name>Draw</name>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>colorDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>depthDst</declname>
        </param>
        <briefdescription>
<para>Draw the internal textures to the provided destination textures. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>depth</computeroutput> is optional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a3fb5bf9e37bec49dec68151e241d076c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void Draw</definition>
        <argsstring>(HgiTextureHandle const &amp;colorDst, HgiTextureHandle const &amp;colorResolveDst, HgiTextureHandle const &amp;depthDst, HgiTextureHandle const &amp;depthResolveDst, GfVec4i const &amp;viewport)</argsstring>
        <name>Draw</name>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>colorDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>colorResolveDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>depthDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>depthResolveDst</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a7aedfb780de84a148dd3ae0fde145479" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdxFullscreenShader</definition>
        <argsstring>()=delete</argsstring>
        <name>HdxFullscreenShader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a8bcb1956b0fb968b5f6ee887123a81c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdxFullscreenShader</definition>
        <argsstring>(const HdxFullscreenShader &amp;)=delete</argsstring>
        <name>HdxFullscreenShader</name>
        <param>
          <type>const <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1aa49c6f999bbe9184971a1dd7730ce14a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> &amp;</type>
        <definition>HdxFullscreenShader&amp; operator=</definition>
        <argsstring>(const HdxFullscreenShader &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hdx_fullscreen_shader" kindref="compound">HdxFullscreenShader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1af04b5f5a950b1617fa58beae72f9697b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateBufferResources</definition>
        <argsstring>()</argsstring>
        <name>_CreateBufferResources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a27c64c1a284544f34653a9fb29449691" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetResourceBindings</definition>
        <argsstring>()</argsstring>
        <name>_SetResourceBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1abeaea0e355d7944ac51acb31ff835d63" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetVertexBufferDescriptor</definition>
        <argsstring>()</argsstring>
        <name>_SetVertexBufferDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a658d10da7772588384b4512b6d6acb72" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _CreateSampler</definition>
        <argsstring>()</argsstring>
        <name>_CreateSampler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a2d6f2de809389000959f04385f6b1fdb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetDefaultProgram</definition>
        <argsstring>(bool writeDepth)</argsstring>
        <name>_SetDefaultProgram</name>
        <param>
          <type>bool</type>
          <declname>writeDepth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1af54d91873e63d3d947a7ac6687757ae5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Draw</definition>
        <argsstring>(HgiTextureHandle const &amp;colorDst, HgiTextureHandle const &amp;colorResolveDst, HgiTextureHandle const &amp;depthDst, HgiTextureHandle const &amp;depthResolveDst, GfVec4i const &amp;viewport)</argsstring>
        <name>_Draw</name>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>colorDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>colorResolveDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>depthDst</declname>
        </param>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>depthResolveDst</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a1f4c4d0b8eaab044cd94eeb5ca02e0ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void _RecordDrawCmds</definition>
        <argsstring>() override</argsstring>
        <name>_RecordDrawCmds</name>
        <reimplements refid="class_hdx_effects_shader_1a5a87eb0e0f3f9835e6374a640312abd6">_RecordDrawCmds</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_fullscreen_shader_1a7b132407611559cd361061050e8e88f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrintCompileErrors</definition>
        <argsstring>()</argsstring>
        <name>_PrintCompileErrors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/fullscreenShader.h" line="189" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is a utility for rendering deep raytracer or aov output (color/depth) to a hgi texture. </para>
    </briefdescription>
    <detaileddescription>
<para>This lets callers composite results into existing scenes. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3552">
        <label>HdxFullscreenShader</label>
        <link refid="class_hdx_fullscreen_shader"/>
        <childnode refid="3553" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3553">
        <label>HdxEffectsShader</label>
        <link refid="class_hdx_effects_shader"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3554">
        <label>HdxFullscreenShader</label>
        <link refid="class_hdx_fullscreen_shader"/>
        <childnode refid="3555" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3555">
        <label>HdxEffectsShader</label>
        <link refid="class_hdx_effects_shader"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdx/fullscreenShader.h" line="56" column="1" bodyfile="pxr/imaging/hdx/fullscreenShader.h" bodystart="55" bodyend="206"/>
    <listofallmembers>
      <member refid="class_hdx_fullscreen_shader_1ae25c56709c6017b9bdd45910f33e0d8a" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_buffers</name></member>
      <member refid="class_hdx_fullscreen_shader_1a7a3ab41426beca7b58c8b2ea010e574a" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_colorAttachment</name></member>
      <member refid="class_hdx_effects_shader_1a8951fc4b2b28d6813be87fc7ca8a021a" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_CreateAndSubmitGraphicsCmds</name></member>
      <member refid="class_hdx_fullscreen_shader_1af04b5f5a950b1617fa58beae72f9697b" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_CreateBufferResources</name></member>
      <member refid="class_hdx_fullscreen_shader_1a658d10da7772588384b4512b6d6acb72" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_CreateSampler</name></member>
      <member refid="class_hdx_fullscreen_shader_1a1c7d8a9f609486e0cc86eacbc35da370" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_depthAttachment</name></member>
      <member refid="class_hdx_fullscreen_shader_1a22ae69608759b2f215cfbf23819b82e9" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_depthStencilState</name></member>
      <member refid="class_hdx_effects_shader_1a9b9effa502a25d9dfd1f85ce763c60a2" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_DestroyShaderProgram</name></member>
      <member refid="class_hdx_fullscreen_shader_1af54d91873e63d3d947a7ac6687757ae5" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_Draw</name></member>
      <member refid="class_hdx_effects_shader_1a9b3f4e8b5d2faee43cd0fb47c899f9c5" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_DrawIndexed</name></member>
      <member refid="class_hdx_effects_shader_1a324304e8512fce2fa56b5cae9a96ee64" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_DrawNonIndexed</name></member>
      <member refid="class_hdx_effects_shader_1a2307bdc7249c559fccb2e428bb6e6c15" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_GetDebugName</name></member>
      <member refid="class_hdx_effects_shader_1a16f5049f3fc01c4beaff232f96bb3b89" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_GetHgi</name></member>
      <member refid="class_hdx_fullscreen_shader_1ad4c4400785301a19b4117dbd4702c054" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_glslfxPath</name></member>
      <member refid="class_hdx_fullscreen_shader_1aec16fea441f4c7f27729ccfe6031c491" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_indexBuffer</name></member>
      <member refid="class_hdx_fullscreen_shader_1a7b132407611559cd361061050e8e88f5" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_PrintCompileErrors</name></member>
      <member refid="class_hdx_fullscreen_shader_1a1f4c4d0b8eaab044cd94eeb5ca02e0ac" prot="private" virt="virtual"><scope>HdxFullscreenShader</scope><name>_RecordDrawCmds</name></member>
      <member refid="class_hdx_fullscreen_shader_1afb9fd2ab8b44b79163e27af4eaab4d35" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_sampler</name></member>
      <member refid="class_hdx_effects_shader_1a54290759f1fa20cc968e5500bf73536d" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetBufferBindings</name></member>
      <member refid="class_hdx_effects_shader_1a4c27a35b99638a86cd53b5595c6bf6b2" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetColorAttachments</name></member>
      <member refid="class_hdx_fullscreen_shader_1a2d6f2de809389000959f04385f6b1fdb" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetDefaultProgram</name></member>
      <member refid="class_hdx_effects_shader_1a011a68e050d609eef95f4904fae6ef24" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetDepthAttachment</name></member>
      <member refid="class_hdx_effects_shader_1a516bcbbac28690c54cb201b09fa5923f" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetDepthStencilState</name></member>
      <member refid="class_hdx_effects_shader_1aad8271c029b30e2b3c47a42614deaf48" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetMultiSampleState</name></member>
      <member refid="class_hdx_effects_shader_1a2c7ced82471c136aa117eabcb560a351" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetPrimitiveType</name></member>
      <member refid="class_hdx_effects_shader_1a91f10c2a6336b632f17e9a1dc29fedfe" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetRasterizationState</name></member>
      <member refid="class_hdx_fullscreen_shader_1a27c64c1a284544f34653a9fb29449691" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetResourceBindings</name></member>
      <member refid="class_hdx_effects_shader_1ac9808f565041c350da75064a07e85509" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetShaderConstants</name></member>
      <member refid="class_hdx_effects_shader_1aa5d796301a443da271140239a36b9b37" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetShaderProgram</name></member>
      <member refid="class_hdx_effects_shader_1a2ceaa071db5f8af15e083519156fea5f" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetTextureBindings</name></member>
      <member refid="class_hdx_fullscreen_shader_1abeaea0e355d7944ac51acb31ff835d63" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetVertexBufferDescriptor</name></member>
      <member refid="class_hdx_effects_shader_1aa1a0f7fce0ae3cd2a1714c6ed69443f0" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_SetVertexBufferDescs</name></member>
      <member refid="class_hdx_fullscreen_shader_1aa60c74760dcf0765f30bc9fced3936e2" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_shaderName</name></member>
      <member refid="class_hdx_fullscreen_shader_1ae2e56eff31254067a6e541b36d7335b1" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_shaderProgram</name></member>
      <member refid="class_hdx_fullscreen_shader_1aa3c4e1aff2c18ee002e6ca7f65679ec7" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_textures</name></member>
      <member refid="class_hdx_fullscreen_shader_1a0f0363135748de1900f1bdc86068748f" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>_vertexBuffer</name></member>
      <member refid="class_hdx_fullscreen_shader_1ab37c279c3d13861cc14236f7084fcf20" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>BindBuffers</name></member>
      <member refid="class_hdx_fullscreen_shader_1a235cacf53adf5b679180d2e7fa34713c" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>BindTextures</name></member>
      <member refid="class_hdx_fullscreen_shader_1adcdc70faa47f9907378adcdcbf4326d7" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>Draw</name></member>
      <member refid="class_hdx_fullscreen_shader_1a3fb5bf9e37bec49dec68151e241d076c" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>Draw</name></member>
      <member refid="class_hdx_effects_shader_1a44237ea5ffc3d7a89a9c88e3fd12a0e6" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxEffectsShader</name></member>
      <member refid="class_hdx_effects_shader_1a85653942d60a563fd895e1e122309aad" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxEffectsShader</name></member>
      <member refid="class_hdx_effects_shader_1aa57e5ef18bd465059f2802789d07bf3a" prot="protected" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxEffectsShader</name></member>
      <member refid="class_hdx_fullscreen_shader_1a7f5524cfc1ce1693c531b17ff13846a2" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxFullscreenShader</name></member>
      <member refid="class_hdx_fullscreen_shader_1a7aedfb780de84a148dd3ae0fde145479" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxFullscreenShader</name></member>
      <member refid="class_hdx_fullscreen_shader_1a8bcb1956b0fb968b5f6ee887123a81c9" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>HdxFullscreenShader</name></member>
      <member refid="class_hdx_fullscreen_shader_1aa49c6f999bbe9184971a1dd7730ce14a" prot="private" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>operator=</name></member>
      <member refid="class_hdx_effects_shader_1ae5434818f55375d7ba3b511ab8333d59" prot="protected" virt="non-virtual" ambiguityscope="HdxEffectsShader::"><scope>HdxFullscreenShader</scope><name>operator=</name></member>
      <member refid="class_hdx_effects_shader_1a06084c2d8eddccb1ef66d2a9666bda06" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>PrintCompileErrors</name></member>
      <member refid="class_hdx_effects_shader_1a881b91ab85cad984bd6a961bf86fa762" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>PrintCompileErrors</name></member>
      <member refid="class_hdx_fullscreen_shader_1aee48ba234a66382d66ebf13c42d0aabd" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetAttachmentLoadStoreOp</name></member>
      <member refid="class_hdx_fullscreen_shader_1a28282e4156f68ff0eb3e2a5bd77128f4" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetBlendState</name></member>
      <member refid="class_hdx_fullscreen_shader_1a5df32f52b4e1c382cd01c3ac6ebc57b8" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetDepthState</name></member>
      <member refid="class_hdx_fullscreen_shader_1a320adebb39fcda29aa0f4bad289b346d" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetProgram</name></member>
      <member refid="class_hdx_fullscreen_shader_1ad09a25adf12b406f9c957c575617fd2c" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetProgram</name></member>
      <member refid="class_hdx_fullscreen_shader_1a7f466cea0c1b14b65428b5898b57202c" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>SetShaderConstants</name></member>
      <member refid="class_hdx_effects_shader_1a39983ffb0ac3a7a04caf581e2fe74723" prot="public" virt="virtual"><scope>HdxFullscreenShader</scope><name>~HdxEffectsShader</name></member>
      <member refid="class_hdx_fullscreen_shader_1a804e872d1f6c910361a22ac545559f26" prot="public" virt="non-virtual"><scope>HdxFullscreenShader</scope><name>~HdxFullscreenShader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
